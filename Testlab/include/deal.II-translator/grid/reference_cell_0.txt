include/deal.II-translator/grid/reference_cell_0.txt
[0.x.0]*
     一个辅助函数，用于从一个整数中创建一个ReferenceCell对象。ReferenceCell对象是 "单子"（实际上是 "多子"
* 
* - 有多个，但它们只是少数，这些是所有可以使用的）。) 那么需要的是有一种方法来创建这些对象，用它们的内部id来区分存在的少数可能的对象。我们可以通过ReferenceCell的公共构造函数来做到这一点，但这将允许用户在我们设想的范围之外创建这些单元，而我们不想这样做。相反，接受一个整数的构造函数是 "私有 "的，但我们在内部命名空间中有这样一个函数，它是这个类的朋友，可以用来创建对象。   
* [0.x.1]*
 一个描述可以使用的参考单元的种类的类型。这包括四边形和六面体（即 "超立方体"）、三角形和四面体（单纯体），以及使用混合三维网格时必须的金字塔和楔形。
* 这种类型的对象不应该在用户代码中创建，因此，除了默认的构造函数（会创建一个无效的对象），该类没有一个用户可以访问的构造函数。相反，在ReferenceCells命名空间中定义了有限数量的特定参考单元对象，完全列举了所有可能的值。因此，用户代码应该完全依赖于从这些特殊对象中分配ReferenceCell对象，并与这些特殊对象进行比较。
* 该类的目的和意图在[2.x.0]"参考单元 "词汇表条目中描述。
* 

* 
* [2.x.1] 

* 
* [0.x.2]*
   对于给定的结构尺寸和顶点数量，返回正确的ReferenceCell。例如，如果`dim==2`和`n_vertices==4`，这个函数将返回[2.x.2] 但如果`dim==3`和`n_vertices==4`，它将返回[2.x.3] 。  
* [0.x.3]*
   默认构造函数。将此对象初始化为一个无效的对象。最终的结果是当前对象等于[2.x.4]一般来说，ReferenceCell对象是通过从命名空间ReferenceCells中的特殊对象赋值创建的，这是获得有效对象的唯一方法。 
* [0.x.4]*
    [2.x.5] 查询有关参考单元格种类的信息 [2.x.6] 。  
* [0.x.5]*
   如果对象是[2.x.7] [2.x.8] [2.x.9]或[2.x.10]，返回`true`。  
* [0.x.6]*
   如果对象是一个顶点、直线、三角形或四面体，则返回真。 
* [0.x.7]*
   返回当前对象所代表的参考单元的尺寸。 
* [0.x.8]*
    [2.x.11]   
* [0.x.9]*
    [2.x.12] 在参考单元上定义的形状函数、映射、四边形[2.x.13] 。  
* [0.x.10]*
   计算当前参考单元类型在位置[2.x.15]的第[2.x.14]个线性形状函数的值。 
* [0.x.11]*
   计算当前参考单元类型在位置[2.x.17]的[2.x.16]-th线性形状函数的梯度。 
* [0.x.12]*
   返回一个与当前参考单元相匹配的默认映射度[2.x.18]。如果这个参考单元是一个超立方体，那么返回的映射是一个MappingQGeneric；否则，它是一个用FE_SimplexP（如果参考单元是一个三角形或四面体）、用FE_PyramidP（如果参考单元是一个金字塔）或用FE_WedgeP（如果参考单元是一个楔子）初始化的MappingFE类型对象。 
* [0.x.13]*
   返回一个与当前参考单元相匹配的默认线性映射。  如果这个参考单元是一个超立方体，那么返回的映射是一个MappingQ1；否则，它是一个用FE_SimplexP（如果参考单元是一个三角形或四面体）、FE_PyramidP（如果参考单元是一个金字塔）或FE_WedgeP（如果参考单元是一个楔子）初始化的MappingFE类型对象。  换句话说，函数名称中的 "线性 "一词必须理解为对某些坐标方向的[2.x.19]-线性（即双线性或三线性）。 
* [0.x.14]*
   返回一个与给定参考单元相匹配的高斯型正交（QGauss, QGaussSimplex, QGaussPyramid, QGaussWedge）。     [2.x.20] n_points_1D 每个方向上的正交点的数量（QGauss），或者对于其他类型的正交点，需要准确地集成什么多项式的指示。 
* [0.x.15]*
   返回一个具有给定参考单元的支持点的正交规则。   
* [2.x.21]正交对象的权重是不填的。 
* [0.x.16]*
    [2.x.22]   
* [0.x.17]*
    [2.x.23] 查询参考单元的构件数量[2.x.24] 。  
* [0.x.18]*
   返回构成有关参考单元的顶点的数量。一个顶点是参考单元的一个 "角"（一个零维物体）。 
* [0.x.19]*
   返回一个对象，可以看作是一个包含从零到n_vertices()所有索引的数组。 
* [0.x.20]*
   返回构成有关参考单元格的线的数量。一条线是参考单元格的一个 "边"（一个一维对象）。 
* [0.x.21]*
   返回一个对象，可以看作是一个包含从零到n_lines()所有索引的数组。 
* [0.x.22]*
   返回构成相关参考单元的面的数量。一个面是包围参考单元的`(dim-1)`维对象。 
* [0.x.23]*
   返回一个对象，它可以被认为是一个包含从零到n_faces()所有索引的数组。 
* [0.x.24]*
   返回当前对象的面[2.x.25]的参考单元格类型。例如，如果当前对象是[2.x.26]，那么`face_no`必须介于[2.x.27]之间，函数将总是返回[2.x.28] 如果当前对象是[2.x.29]，那么`face_no`必须介于[2.x.30]之间，函数将总是返回[2.x.31] 对于楔形和金字塔，返回的对象可能是[2.x.32] 或[2.x.33] ，取决于给定的索引。 
* [0.x.25]*
    [2.x.34]   
* [0.x.26]*
    [2.x.35] 单元内和面上的对象之间的关系 [2.x.36] 。  
* [0.x.27]*
   返回哪些子单元与母单元的某个面相邻。    例如，在2D中，一个四边形单元的布局如下。 
* [1.x.0]
* 顶点和面用其数字表示，面也用其方向表示。    现在，在细化时，布局是这样的。 
* [1.x.1]
* 因此，面0上的子单元是（按面的方向排序）0和2，面3上是2和3，等等。    对于三个空间维度，子单元的确切顺序在这个类的一般文档中规定。    <tt>面的方向</tt>参数目前只针对四边形和六面体。它决定了这个函数如何处理以标准和非标准方向为导向的面。它代表了整个<tt>面的方向</tt>、<tt>面的翻转</tt>和<tt>面的旋转</tt>的位代码，并默认为标准方向。面部方向的概念在这个[2.x.37]"词汇表 "条目中得到了解释。 
* [0.x.28]*
   对于一个单元格中的给定顶点，返回一对面的索引和该面的顶点索引。   
* [2.x.38]在实践中，一个顶点当然通常属于一个以上的面，我们可以返回不同的面和其中相应的索引。这个函数选择哪个面通常并不重要（这个函数也不会故意暴露）。 
* [0.x.29]*
   对于一个单元格中的某一行，返回一对面的索引和该面中的行的索引。   
* [2.x.39] 在实践中，一条线通常是一个以上的面的一部分，我们可以返回不同的面和其中相应的索引。这个函数选择哪个面通常并不重要（这个函数也不会故意暴露）。 
* [0.x.30]*
   将面的行数映射到单元格的行数。 
* [0.x.31]*
   将面的顶点编号映射到单元的顶点编号。 
* [0.x.32]*
   根据面的方向，纠正顶点索引。 
* [0.x.33]*
   根据面的方向，纠正线的索引。 
* [0.x.34]*
   返回索引为[2.x.40]的线在单元格内是否为标准方向，给定当前单元格内面的[2.x.41]，以及该面内线的[2.x.42]标志。 [2.x.43]表示线的方向是从顶点0到顶点1，否则就是相反的方向。在1d和2d中，这总是[2.x.44]，但在3d中，它可能是不同的，见GeometryInfo类的文档中的相应讨论。 
* [0.x.35]*
    [2.x.45]   
* [0.x.36]*
    [2.x.46] 参考单元的几何属性 [2.x.47] 查询一个参考单元的构件数量 [2.x.48]   
* [0.x.37] 返回 [2.x.49] 参考单元的一个面的第-个单位切向量。  这些矢量的排列方式是，两个矢量之间的交积返回单位法向量。     [2.x.50] [2.x.51] 必须在零和`dim-1`之间。 
* [0.x.38]*
   返回参考单元格的一个面的单位法向量。 
* [0.x.39]*
   确定由其顶点[2.x.52]描述的当前实体相对于由[2.x.53]描述的实体的方向。  
* [0.x.40]*
   compute_orientation()的逆向函数。 
* [0.x.41]*
   返回一个给定的[2.x.54]所属的面的向量。 
* [0.x.42]*
    [2.x.55]   
* [0.x.43]*
    [2.x.56] 在deal.II索引和其他程序使用的格式之间进行转换 [2.x.57] 。  
* [0.x.44]*
   将ExodusII的顶点编号映射到deal.II的顶点编号。 
* [0.x.45]*
   将一个ExodusII的面数映射到一个deal.II的面数。 
* [0.x.46]*
   将一个UNV顶点编号映射到一个deal.II顶点编号。 
* [0.x.47]*
   返回一个VTK线性形状常数，与参考单元对应。 
* [0.x.48]*
   返回对应于参考单元的VTK二次方形状常数。 
* [0.x.49]*
   返回对应于参考单元格的VTK拉格朗日形状常数。 
* [0.x.50]*
    [2.x.58]   
* [0.x.51]*
    [2.x.59] 其他函数 [2.x.60]   
* [0.x.52]*
   返回当前对象所代表的参考单元格的文本表示。 
* [0.x.53]*
   对整数的转换操作。 
* [0.x.54]*
   用于平等比较的运算符。 
* [0.x.55]*
   用于不等式比较的运算符。 
* [0.x.56]*
   为了使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)进行序列化，从一个流中写入和读取此对象的数据。 
* [0.x.57]*
    [2.x.61]   
* [0.x.58]*
   存储这个对象实际对应的变量。 
* [0.x.59]*
   构造函数。这是用来创建这个类的不同的`静态`成员变量的构造函数。它是 "私有 "的，但是可以被作为该类 "朋友 "的内部命名空间中的函数调用。 
* [0.x.60]*
   一种构造函数
* 
* - 不完全是私有的，因为它可以被任何人调用，但至少是隐藏在一个内部命名空间中。 
* [0.x.61]*
 一个命名空间，我们在其中定义对应于特定参考单元的对象。这里定义的对象是对所有可能的参考单元的完整列举，可以在deal.II中使用。
* [2.x.62] ReferenceCell

* 
* [0.x.62]*
   返回给定维度`dim`的正确单线参考单元类型。根据模板参数`dim`，该函数返回对Vertex、Triangle或Tetrahedron的引用。 
* [0.x.63]*
   返回给定维度`dim`的正确超立方体参考单元类型。根据模板参数`dim`，该函数返回对顶点、四边形或六面体的引用。 
* [0.x.64]*
     构造函数。   
* [0.x.65]*
     解除函数。   
* [0.x.66]*
     打印错误信息到[2.x.63]。    
* [0.x.67]*
     实体类型。   
* [0.x.68]*
     第一组数值。   
* [0.x.69]*
     第二组数值。   
* [0.x.70]

