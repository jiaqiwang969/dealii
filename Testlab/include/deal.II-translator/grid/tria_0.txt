include/deal.II-translator/grid/tria_0.txt
[0.x.0]*
     一个类的前向声明，我们把三角形类的大部分实现放在这个类中。参见.cc文件以了解更多信息。   
* [0.x.1]*
   一个命名空间，用于三角化类和帮助器的内部类。 
* [0.x.2]*
     缓存类，用于存储三角剖分中各层内已使用和活动的元素（线或四边形等）的数量。这只是模板的声明，具体实例在下面。        在过去，每当人们想要访问这些数字之一时，就必须在所有的线上执行一个循环，例如，计算元素，直到我们碰到终端迭代器。这很耗时，而且由于访问行数等是一个相当频繁的操作，这并不是一个最佳的解决方案。   
* [0.x.3]*
     缓存类，用于存储三角形的各层中已使用和活跃的元素（线或四边形等）的数量。这个特殊化存储了线的数量。        在过去，每当人们想要访问这些数字之一时，就必须在所有的线上进行循环，例如，计算元素，直到我们碰到结束迭代器。这很耗时，而且由于访问行数等是一个相当频繁的操作，这并不是一个最佳的解决方案。   
* [0.x.4]*
       我们使用过的对象的层数。     
* [0.x.5]*
       整个三角测量中使用的线的数量。     
* [0.x.6]*
       保存每层所用线数的数组。     
* [0.x.7]*
       整个三角测量中的活动线数。     
* [0.x.8]*
       保存每层活动线数的数组。     
* [0.x.9]*
       构造函数。默认情况下，将数值设置为零。     
* [0.x.10]*
       确定此对象的内存消耗（以字节为单位）的估计值。     
* [0.x.11]*
       使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据读入或写入一个流中，以便进行序列化。     
* [0.x.12]*
     缓存类，用于存储三角形的各层中已使用和活动的元素（线或四边形等）的数量。这个特殊化存储四边形的数量。由于从基类NumberCache<1>的继承，线的数量也在这个类中。        在过去，每当人们想要访问这些数字中的一个，就必须在所有的线上进行循环，例如，计算元素，直到我们碰到结束的迭代器。这很耗时，而且由于访问行数等是一个相当频繁的操作，这并不是一个最佳的解决方案。   
* [0.x.13]*
       整个三角形中使用的四边形的数量。     
* [0.x.14]*
       保存每层所用四边形数量的数组。     
* [0.x.15]*
       整个三角结构中的活动四边形的数量。     
* [0.x.16]*
       保存每层活动四边形数量的数组。     
* [0.x.17]*
       构造函数。默认情况下，将数值设置为零。     
* [0.x.18]*
       确定此对象的内存消耗（以字节为单位）的估计值。     
* [0.x.19]*
       为了使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)进行序列化，将此对象的数据读入或写入一个流中。     
* [0.x.20]*
     缓存类，用于存储三角图各层中已使用和活动的元素（线或四边形等）的数量。这个特殊化存储的是六边形的数量。由于从基类NumberCache<2>的继承，线和四边形的数量也在这个类中。        在过去，每当人们想要访问这些数字之一时，就必须在所有的线上执行一个循环，例如，计算元素，直到我们碰到终点。这很耗时，而且由于访问行数等是一个相当频繁的操作，这并不是一个最佳的解决方案。   
* [0.x.21]*
       整个三角测量中使用的六边形的数量。     
* [0.x.22]*
       保存每层使用的六边形数量的数组。     
* [0.x.23]*
       整个三角测量中的活动爻数。     
* [0.x.24]*
       保存每层活动六角的数量的数组。     
* [0.x.25]*
       构造函数。默认情况下，将数值设置为零。     
* [0.x.26]*
       确定此对象的内存消耗（以字节为单位）的估计值。     
* [0.x.27]*
       为了使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)进行序列化，将此对象的数据读入或写入一个流中。     
* [0.x.28]*
 三角形是一个单元的集合，这些单元共同覆盖了人们通常想要解决的偏微分方程的领域。这个域和覆盖它的网格代表了一个[2.x.0]。
* 
* - 扩张流形，并且生活在[2.x.1]空间维度中，其中[2.x.2]和[2.x.3]是该类的模板参数。(如果没有指定[2.x.4]，则采用默认值`spacedim=dim`)。
* 因此，例如，一个[2.x.5]类型的对象（或者干脆是[2.x.6] Triangulation<1>，因为默认为[2.x.7]）被用来表示和处理有限元方法中常用的一维三角形（因此，直线上的段）。另一方面，像[2.x.8]或[2.x.9]这样的对象（与二维的曲线或三维的曲面有关）是人们想在边界元素方法中使用的对象。
* 该类的名称主要是分层次的，并不意味着三角计算只能由三角形组成。相反，三角形由1d的线段组成（即，如果`dim==1`），以及由三维单元组成（如果`dim==3`）。此外，历史上，deal.II只支持二维的四边形（有四个顶点的单元：变形的矩形）和六面体（有六个边和八个顶点的单元，是变形的盒子），它们都不是三角形。换句话说，deal.II语言中的术语 "三角形 "是 "网格 "的同义词，应与它的语言来源分开理解。
* 这个类被写成尽可能独立于维度（因此[2.x.10]类的复杂结构），以允许代码共享，允许减少将一个维度的代码变化反映到其他维度的代码中的需要。尽管如此，一些函数是依赖于维度的，并且只存在针对不同维度的专门版本。
* 这个类满足了[2.x.11]"MeshType概念 "的要求。
* [1.x.0]
* Triangulation对象的实际数据结构是相当复杂的，如果试图直接对其进行操作的话，是相当不方便的，因为数据分布在相当多的数组和其他地方。然而，有足够强大的方法可以在不知道其确切关系的情况下对这些数据结构进行操作。deal.II使用类的局部别名（见下文）来使事情变得尽可能简单和不依赖维度。
* Triangulation类提供了迭代器，可以在不知道用于描述单元的确切表示法的情况下，在所有单元上循环操作。更多信息见<tt>TriaIterator</tt>的文档。它们的名字是从迭代器类中导入的别名（从而使它们成为这个类的本地类型），具体如下。
* [2.x.12] [2.x.13] <tt>cell_iterator</tt>: 循环处理三角测量中使用的所有单元 [2.x.14] <tt>active_cell_iterator</tt>: 循环处理所有活动单元 [2.x.15] 。
* 对于<tt>dim==1</tt>，这些迭代器被映射为如下。
* [1.x.1]
*而对于[2.x.16]我们有额外的面孔迭代器。
* [1.x.2]
* 
* 通过使用单元格迭代器，你可以编写独立于空间维度的代码。这同样适用于子结构迭代器，子结构被定义为一个单元的面。单元的面在一维是一个顶点，在二维是一条线；但是，顶点的处理方式不同，因此线没有面。
* Triangulation类提供了一些函数，如begin_active()，它给你一个通往第一个活动单元的迭代器。有相当多的函数返回迭代器。请看一下类的文档以获得一个概述。
* 这些迭代器的使用与标准容器迭代器的使用类似。以下是Triangulation源代码中的一些例子（注意在最后两个例子中，模板参数[2.x.17]被省略了，所以它采用默认值[2.x.18]）。
* [2.x.19] [2.x.20] [2.x.21] 计算特定层次上的细胞数量 [2.x.22] 。   
* [1.x.3]
* 另一种方法，即使用[2.x.23]将写成   
* [1.x.4]
 
* [2.x.24] [2.x.25] 完善一个三角形的所有单元 [2.x.26] 。   
* [1.x.5]
* [2.x.27] 
* 

* [1.x.6]
* 三角形的使用主要是通过使用迭代器完成的。一个例子可能最能说明如何使用它。

* 
* [1.x.7]
* 
* 

* [1.x.8]
* 有几种创建三角的可能性。 [2.x.28] [2.x.29] 最常见的域，如超立方体（即直线、正方形、立方体等）、超球体（圆、球...）和其他一些更奇怪的域，如L形区域和高维泛化等，由GridGenerator类提供，它接受一个三角形，通过对所需域的划分来填充它。
* [2.x.30] 读入一个三角剖面。通过使用GridIn类的一个对象，你可以读入相当普遍的三角形。更多信息见那里。所提到的类使用下面直接描述的接口，将数据传输到三角测量中。
* [2.x.31] 明确创建一个三角形：你可以通过提供一个顶点列表和一个单元格列表来创建一个三角形。每个单元由一个向量组成，存储该单元在顶点列表中的顶点的索引。要看这是如何工作的，你可以看看[2.x.32]函数。要调用的适当函数是create_triangulation()。
* 从只存储顶点信息的单元中创建本库所需的层次信息可能是一项相当复杂的任务。 例如在二维中，我们必须在顶点之间创建线条（但只有一次，尽管有两个单元格将这两个顶点连接起来），我们还必须创建邻域信息。因此，被读入的网格不应该太大，读入细化的网格将是低效的（尽管从技术上讲，读入几个10,000或100,000个单元的网格是没有问题的；库可以处理这些问题）。除了性能方面，细化网格并不适合多网格算法，因为在最粗的层次上求解是昂贵的。在任何情况下，最明智的做法是尽可能粗略地读入网格，然后进行必要的细化步骤。
* 你有责任保证单元有正确的方向。为了保证这一点，在保持单元格列表的输入向量中，每个单元格的顶点指数必须按规定的顺序排列，见GeometryInfo<dim>的文档。在一维中，第一个顶点索引必须是指具有较低坐标值的顶点。在二维和三维中，相应的条件不容易验证，也没有完全尝试这样做。如果你违反了这个条件，你可能会发现矩阵条目有错误的符号（顺时针方向的顶点编号，这将导致一个负的面积元素）或错误的矩阵元素（扭曲的四边形，即两个顶点互换；这将导致一个错误的面积元素）。
* 有一些更微妙的条件必须施加在单元格内的顶点编号上。它们不仅适用于从UCD或任何其他输入文件中读取的数据，也适用于传递给create_triangulation()的数据。有关这方面的更多细节，请参见GridIn类的文档，最重要的是GridReordering类，它解释了许多问题和一种重新排序单元的算法，使它们满足上述条件。
* [2.x.33] 复制三角形：当在与时间相关的网格上计算或使用自适应细化时，你经常希望创建一个新的三角形，使其与另一个相同。[2.x.34]copy_triangulation函数为此提供了便利。
* 它保证了两个三角形中的顶点、线或单元格的编号是相同的，并且如果两个迭代器在两个三角形上行走，它们会访问匹配的单元格，如果它们是平行递增的。可以设想在复制操作中实现清理，消除未使用的内存孔，重新连接分散的数据等等。原则上，这将是一个有用的操作，但是保证两个三角形的某些并行性似乎更重要，因为通常数据必须在网格之间传输。 [2.x.35] 
* 最后，对于喜欢坏网格的人来说，还有一个特殊的函数：distort_random()。它将网格中的所有顶点按一个随机值左右移动，留下一个扭曲的网格。注意，你应该将这个函数应用于最终的网格，因为细化会使网格变得更加平滑。
* 该函数将确保受限面的顶点（悬空节点）最终会出现在正确的位置，即在母线的另外两个顶点的中间，在更高的空间维度上也是如此（边界上的顶点不会被修正，所以不要在两个以上的空间维度上扭曲边界顶点，即在边界顶点可以成为悬空节点的维度上）。然而，应用该算法还有一个与单元格放置有关的缺点：一个单元格的子女不会像母单元格那样占据领域的同一区域。虽然这是边界上的单元的通常行为，但在使用多网格算法或将解从粗网格转移到细网格时，你可能会遇到麻烦。一般来说，只有当你只使用最精细的三角网格进行计算时，使用这个函数才是安全的。
* 

* 
* [1.x.9]
* 三角形的细化可以通过几种方式完成。最低级的方式是直接通过迭代器：让[2.x.36]成为一个活动单元的迭代器（即指向的单元没有子代），然后函数调用<tt>i->set_refine_flag()</tt>标记相应的单元进行细化。标记非活动单元格会导致一个错误。
* 在所有你想标记为细化的单元格之后，调用execute_coarsening_and_refinement()来实际执行细化。这个函数本身首先调用[2.x.37]函数来规范生成的三角形：由于两个相邻单元之间的面只能被细分一次（即两个相邻单元的层次最多只能相差一个；不可能一个单元被细化两次而相邻的单元没有被细化），一些额外的单元被标记为细化以平滑网格。这增加了结果单元的数量，但使网格更加规则，从而导致更好的近似特性，最重要的是，使数据结构和算法的处理更加容易。说实话，这主要是一个算法上的步骤，而不是有限元方法所需要的。
* 要粗化一个网格，可以通过使用<tt>i->set_coarsen_flag</tt>和调用execute_coarsening_and_refinement()来实现上述同样的方法。
* 先粗化，后细化的原因是，细化通常会增加一些额外的单元以保持三角形的规则，从而满足所有细化的要求，而粗化不会删除没有要求的单元；因此细化往往会恢复粗化的一些效果，而反之则不然。因此，所述的先粗化后细化的顺序通常会导致一个更接近预期的结果。
* 通过迭代器 "手工 "标记单元进行细化是产生新网格的一种方法，特别是当你知道你在寻找什么样的网格时，比如你想让网格向边界连续细化或者总是在中心细化（参见示例程序，它们正是做这些事情）。然而，还有一些更高级的函数，它们更适合于在后验误差估计和自适应有限元的背景下自动生成分层网格。这些函数可以在GridRefinement类中找到。
* 

* [1.x.10]
* 对于过于非结构化的网格，已经观察到一些近似特性的退化。因此，prepare_coarsening_and_refinement()被execute_coarsening_and_refinement()自动调用，可以对三角网格进行一些平滑处理。注意，网格平滑只对两个或多个空间维度进行，目前没有对一个空间维度的平滑。在下文中，让<tt>execute_*</tt>代表execute_coarsening_and_refinement（）。
* 为了实现平滑化，Triangulation构造函数需要一个参数，指定每次调用<tt>execute_*</tt>时是否要对网格进行平滑化处理。默认情况下是不做这样的步骤，因为这将导致产生额外的单元格，这在所有情况下可能是不必要的。如果开启，调用<tt>execute_*</tt>的结果是标记额外的单元格进行细化，以避免出现上述的顶点。正则化和平滑三角形的算法将在下面的技术问题部分描述。这个参数必须给构造函数而不是给<tt>execute_*</tt>的原因是，如果你调用<tt>execute_*</tt>一次，没有平滑，一次就会导致算法问题，因为这样在某些细化步骤中需要细化两次。
* 构造函数获取的参数是一个整数，它可以由定义在枚举#MeshSmoothing中的常数进行比特化组合（见那里的可能性）。
* 

* 
* [2.x.38] 虽然有可能将#MeshSmoothing中的所有标志传递给类型为[2.x.39]的对象，但如果它们需要了解不属于这个处理器的单元上的细化/粗化标志，则并不总是能够实现所有这些平滑选项。因此，对于其中的一些标志，并行三角形的最终单元数可能取决于它被分割成的处理器的数量。
* 

* [1.x.11]
* 每个单元、面或边都存储了表示物体所属的材料或边界部分的信息。单元的材料ID通常用于识别哪些单元属于域的特定部分，例如，当你有不同的材料（钢铁、混凝土、木材）都属于同一个域时。然后，在组装双线性表格时，通常会查询与某个单元相关的材料ID，并使用它来确定（例如，通过表格查询，或一连串的if-else语句）该单元的正确材料系数是什么。另见[2.x.40]"本词汇表条目"。
* 这个 material_id 可以在构建三角形时设置（通过 CellData 数据结构），也可以在之后通过使用单元格迭代器设置。关于这个功能的典型使用，请看[2.x.41]的教程程序。GridGenerator命名空间的函数通常将所有单元的材料ID设置为0。当通过GridIn类读取三角图时，不同的输入文件格式有不同的约定，但通常是明确指定材料ID，如果没有，则GridIn简单地将其设置为零。因为一个单元的材料是与域的特定区域相关的，所以材料ID在网格细化时由子单元从其父单元继承。
* 低维对象上的边界指示器（这些对象没有材料ID）表示边界组件的数量。偏微分方程的弱表述可能在边界的不同部分有不同的边界条件。边界指标可以在创建矩阵或右侧向量时使用，以表示模型的这些不同部分（这种使用就像单元格的材料id）。边界指示器的范围可以从零到[2.x.42]，值[2.x.43]是保留的，用来表示没有边界指示器的内部线（在二维）和内部线和四边形（在三维）。这样一来，程序就可以很容易地确定这样的物体是否在边界上。材料指标的范围可以从零到[2.x.44]。
* 二维的线和三维的四边形在细化时将其边界指标继承给它们的子代。因此，你应该确保如果你有不同的边界部分，不同的部分被一个顶点（在二维）或一条线（在三维）分开，这样每个边界线或四边形都有一个唯一的边界指标。
* 默认情况下（除非在创建三角图的过程中另有规定），边界的所有部分都有边界指标为零。作为一个历史遗留问题，这对于1d网格来说并不是真的。对于这些，最左边的顶点的边界指标为零，而最右边的顶点的边界指标为一。在这两种情况下，一个面的边界指示器都可以通过调用 [2.x.45] 来改变。
* [2.x.46] [2.x.47] "关于边界指示器的词汇条目"
* 

* [1.x.12]
* 可以从细化历史中重建网格，这些历史可以通过[2.x.48] 和 [2.x.49] load_refine_flags函数来存储和加载。通常情况下，代码会是这样的。 
* [1.x.13]
* 
* 如果你想从存储的信息中重新创建网格，你就写。 
* [1.x.14]
* 
* 粗化和粗化标志也采用同样的方案。
* 你可以在不同的细化信息集之间向输出文件写入其他信息，只要你在重新创建网格时读取这些信息。你应该确保将从保存的标志中创建的新三角图中的其他信息与旧三角图的信息相匹配，例如平滑水平；如果不是，从标志中实际创建的单元可能是其他单元，因为平滑增加了额外的单元，但它们的数量可能取决于平滑水平。
* 实际上有两组<tt>save_*_flags</tt>和<tt>load_*_flags</tt>函数。一个以流为参数，从/到流中读/写信息，从而实现将标志存储到文件。另一个集合需要一个<tt>vector<bool></tt>类型的参数。这使得用户可以临时存储一些标志，例如，如果另一个函数需要它们，之后再恢复它们。
* 

* [1.x.15]
* 三角形为用户标志提供了每行、四边形等的一个比特。这个字段可以像所有其他数据一样使用迭代器来访问。通常情况下，如果一个算法走过所有的单元并需要另一个单元，例如邻居，是否已经被处理过，那么这个用户标志就会被使用。参见[2.x.50]"更多信息的词汇表"。
* 还有一组用户数据，可以是<tt>无符号int</tt>或<tt>void</tt>，用于每一行、四边形等。你可以通过访问器类中<tt>用户数据</tt>下所列的函数访问这些数据。同样，见[2.x.51]"词汇表的更多信息"。
* 这些用户索引或指针的值默认为[2.x.52]。请注意，这些指针在细化时不会被继承给子代。然而，在重新划分后，它们在所有单元上都是可用的，因为它们在以前的网格上被设置过。
* 通常关于[2.x.53]指针的类型安全缺失的警告在这里显然是适用的；类型的正确性等的责任完全在于指针的使用者。
* 

* 
* [2.x.54] 用户指针和用户索引被存储在同一个地方。为了避免不必要的转换，Triangulation检查其中一个正在使用，并且不允许访问另一个，直到调用clear_user_data()。
* 

* [1.x.16]
* deal.II用继承自Manifold的类来实现所有的几何图形（弯曲的和其他的）；参见Manifold的文档，[2.x.55] ，或[2.x.56]模块的例子和算法的完整描述。默认情况下，Triangulation中的所有单元都具有平坦的几何形状，也就是说，Triangulation中的所有线条都被假定为直线。如果一个单元的manifold_id不等于[2.x.57]，那么Triangulation会使用相关的Manifold对象对该单元进行计算（如单元细化）。下面是一个快速的例子，取自[2.x.58]的实现，它设置了一个极地网格。
* 

* 
* [1.x.17]
* 
* 这将设置一个网格，边界线将通过在极坐标中进行计算而被细化。当网格被细化时，与边界相邻的单元将使用这个新的线中点（以及其他三个中点和原来的单元顶点），用转折插值计算单元中点：这将使弯曲的边界以平滑的方式传播到内部。通过使用TransfiniteInterpolationManifold，可以生成一个更好的网格（在两个不同的Manifold描述之间对所有单元进行内插，而不是每次只插一个单元）；更多信息请参见该类的文档。
* 你应该注意一个注意事项：如果你有凹形边界，你必须确保一个新的边界顶点不会位于要被细化的单元内太多。原因是中心顶点被放置在原单元的顶点、新面的中点和（在三维）新线的中点的加权平均点。因此，如果你的新边界顶点太靠近旧的四边形或六面体的中心，到中点顶点的距离就会变得太小，从而产生扭曲的单元。这个问题在[2.x.59]"扭曲的单元格 "中得到了广泛的讨论。
* [1.x.18]
* 在有些情况下，一个对象希望知道每当一个三角形被细化、复制或以其他一些方式被修改时。当然，如果在你的用户代码中，每当你要细化三角测量时，你都要告诉每一个这样的对象，这可以实现，但这将变得很繁琐，而且容易出错。Triangulation类实现了一种更优雅的方式来实现这一点：信号。
* 实质上，信号是一个对象（Triangulation类的一个成员），另一个对象可以连接到它。连接实质上是连接对象传递一个接受一定数量和种类的参数的函数对象。每当信号的拥有者想要表示某种事件时，它就会 "触发 "信号，这反过来意味着信号的所有连接都被触发：换句话说，函数对象被执行，可以采取必要的行动。
* 作为一个简单的例子，下面的代码将在每次三角测量刚刚被完善时向输出打印一些东西。 
* [1.x.19]
* 这段代码将产生两次输出，每次精化周期一次。
* 一个更有趣的应用是下面的，类似于FEValues类的作用。这个类存储了一个指向三角形的指针和一个指向最后处理的单元的迭代器（这样它就可以比较当前的单元和上一个单元，例如，如果新的单元是上一个单元的简单转换，那么就不需要重新计算雅各布矩阵）。然而，每当三角结构被修改时，以前处理的单元的迭代器就需要失效，因为它现在不再指向任何有用的单元（或者，至少，指向可能不一定与以前处理的单元相似的东西）。这段代码看起来是这样的（真正的代码有更多的错误检查，并且必须处理后续的单元格实际上可能属于不同的三角形的情况，但这对我们来说并不关心）。

* 
* [1.x.20]
* 这里，每当三角剖分被细化时，就会触发细化后的信号，调用附加在它身上的函数对象。这个函数对象是成员函数[2.x.60]，我们将单一的参数（[2.x.61]成员函数的指针，否则没有参数）绑定到FEValues对象的[2.x.62]指针上。请注意，这里不需要拥有三角形和FEValues对象的代码在前者被完善时通知后者。(在实践中，该函数也希望连接到三角形所提供的其他一些信号，特别是创建和删除信号)。
* Triangulation类有各种信号，表明三角形可以通过不同的行动来修改自己，并可能需要在其他地方采取后续行动。详情请参考[2.x.63]。
* [1.x.21]
* 与deal.II中的许多其他类一样，Triangulation类可以使用BOOST的序列化设施将其内容流向一个档案。这样存储的数据以后可以再次从存档中检索，以恢复这个对象的内容。这个工具经常被用来将程序的状态保存到磁盘上，以便以后可能复活，通常是在长期运行的计算的检查点/重启策略的背景下，或者在不是很可靠的计算机上（例如，在非常大的集群上，个别节点偶尔会出现故障，然后导致整个MPI作业的崩溃）。
* 由于技术原因，编写和恢复Triangulation对象并非易事。主要原因是，与许多其他对象不同，三角计算依赖于许多其他对象，它们存储指针或与之对接；例如，三角计算存储指向描述边界和流形的对象的指针，它们有存储指向其他对象的信号，以便它们能够被通知三角计算的变化（见本介绍中关于信号的部分）。由于这些对象是由用户空间拥有的（例如，用户可以创建一个自定义流形对象），它们可能无法被序列化。所以在这样的情况下，[2.x.64]可以存储一个对象的引用，而不是指针，但是在写的时候，这个引用永远不会被满足，因为所指向的对象没有被序列化。显然，在加载时，[2.x.65]将不知道让指针指向哪里，因为它从未得到重新创建最初指向的对象。
* 由于这些原因，将三角图保存到档案中并不存储所有信息，而只是存储某些部分。更具体地说，被存储的信息是定义网格的所有信息，如顶点位置、顶点索引、顶点与单元的连接方式、边界指示器、子域ID、材料ID等。另一方面，以下信息不被存储。
* 

* 
* 

* 
* 

 
 
* - 信号
 

 
 

 
 

 
* 
* - 以前使用[2.x.66]设置的Manifold对象的指针。
* 另一方面，由于这些是通常在用户代码中设置的对象，它们通常可以很容易地在你重新加载三角图的那部分代码中再次设置。
* 在某种意义上，这种序列化的方法意味着重新加载三角化更类似于调用[2.x.67]函数，并在其中填充一些额外的内容，因为该函数也不接触属于这个三角化的信号和Manifold对象。为了保持这种类比，[2.x.68]函数也触发了与[2.x.69]相同种类的信号 
* 

* [1.x.22]
* [1.x.23]
* 我们选择了一个归纳的观点：由于在创建三角形时，所有的单元都在同一水平线上，所有关于共享一个共同面、边或顶点的单元的最大水平差异的正则性假设都是成立的。由于我们在网格历史的每一步中都使用了正则化和平滑化，所以在进一步细化时，这些假设也是成立的。
* 正则化和平滑化是在[2.x.70]的prepare_coarsening_and_refinement函数中完成的，该函数在一开始就被[2.x.71]execute_coarsening_and_refinement调用。 它通过查看旧网格和每个单元的细化标志来决定哪些额外的单元需要细化。
* [2.x.72] [2.x.73] [2.x.74] 正则化。[2.x.75] 算法遍历所有单元，检查当前单元是否被标记为细化，以及当前单元的邻居是否比当前单元少细化一次。如果是，则标记该邻居进行细化。由于上面的归纳法，可能没有比现在的单元格少2级的邻居。
* 这样标记为细化的邻居可能诱导出更多需要细化的单元。然而，这种需要额外细化的单元总是比现在的单元低一级，所以如果我们以相反的方式进行循环，从最高级别的单元开始，我们可以只对所有单元进行一次扫描。这样一来，我们就可以标记出更多低层的单元，但是如果这些单元需要更多的细化，那么在我们向后运行的循环中访问这些单元时，就会进行细化。
* [2.x.76] [2.x.77] 平滑化：[2.x.78] [2.x.79] [2.x.80] [2.x.81] 首先建立一个列表，为每个顶点存储相邻单元所属的最高层。现在，由于我们在之前的细化步骤中也做了平滑处理，所以每个单元只能有顶点，其级别最多只能比当前单元的级别大一个。
* 然而，如果我们为标记为细化的单元格存储级别加一，我们最终可能会发现单元格的顶点级别比该单元格的级别大两个。我们也需要细化这个单元，因此也需要更新其顶点的级别。这本身就可能导致需要细化的单元格，但这些单元格的层次较低，如上所述，这就是为什么我们可以只在一个循环中做各种额外标记的原因。
* [2.x.82] [2.x.83] 对于每个单元，我们计算被细化或被标记为细化的邻居的数量。如果这个数字超过了没有被精炼和没有被标记为精炼的邻居的数量，那么当前单元格就被标记为精炼。由于这可能导致同一层次的单元也需要细化，我们将需要对所有单元进行额外的正则化和平滑化循环，直到没有任何变化。
* [2.x.84] <tt>eliminate_refined_*_islands</tt>: 这个功能与上面的功能基本相同，但是用于粗化。如果一个单元格被标记为精简，或者它的所有子单元都是活动的，并且如果邻居的数量是活动的并且没有标记为精简，或者没有活动但所有子单元被标记为粗化的，那么这个单元的子单元被标记为粗化或者（如果这个单元被标记为精简）精简标记被清空。
* 关于这两个版本的标志的区别，请看上面在本类描述的一般部分中关于网格平滑的部分。
* 同样适用于上述情况：可能需要几个循环。 [2.x.85][2.x.86] 。
* 正则化和平滑有一点互补性，当我们在一个标记为细化（正则化）的单元上或在一个未标记为细化的单元上时，我们会检查是否需要设置额外的细化标志。这使得可读的编程更容易。
* 所有描述的算法只适用于一个以上的空间维度，因为对于一个维度没有任何限制。可能有必要对多网格算法进行一些平滑处理，但这必须在以后决定。
* 

* [1.x.24]
* 似乎不可能通过迭代器的使用来保留三角形的[2.x.87]。因此，如果你声明指向[2.x.88]三角形对象的指针，你应该清楚地知道你可能会不由自主地改变存储在三角形中的数据。
* 

* 
* [2.x.89] 

 
* [0.x.29]*
   一个内部别名，使迭代器类的定义更简单。 
* [0.x.30]*
   声明一些网格平滑算法的符号名称。这些标志的含义在Triangulation类中有记载。 
* [0.x.31]*
     完全没有网格平滑，只是网格必须保持一个不规则。   
* [0.x.32]*
     可以证明，如果三角剖分中包含的顶点是层次相差超过1的单元的成员，就会出现近似度下降的情况。一个这样的例子是如下。         [2.x.90]似乎在两个空间维度中，共享一个共同顶点的单元之间的最大层次跳跃是两个（如上面的例子）。    然而，如果有四个以上的单元在一个顶点相遇，这就不对了。一个[2.x.91]的 "粗（初始）网格 "包含有六个甚至八个单元的顶点，当领域的小特征即使在最粗的网格上也要被解决时，这种情况并不罕见。在这种情况下，水平的最大差异分别为3或4。这个问题在三个空间维度上变得更加糟糕。        看一下有限元解的二阶导数的插值（假设是双线性有限元），就会发现，与真正的二阶导数相比，数值解几乎完全错误。事实上，在规则的网格上，存在着尖锐的估计，H<sup>2</sup>-误差只有一阶，所以我们不应该感到惊讶；然而，数值解可能显示的二阶导数的值可能与真实值相差十倍。这些问题位于与中心顶点相邻的小单元上，非后续级别的单元在这里相遇，也位于该单元的上层和右邻（但与真实值的偏差程度较小）。        如果给构造函数的平滑指示器包含#limit_level_difference_at_vertices的位，那么上述情况将通过标记右上角的单元来消除细化。        在各向异性细化的情况下，单元格的级别不会像各向异性细化那样与单元格的细化直接相关。此外，一个单元可以在一个方向上被强烈细化，而在另一个方向上不被细化或至少被细化得更少。因此，很难决定哪些情况应该被排除在细化过程之外。因此，当使用各向异性细化时，必须不设置#limit_level_difference_at_vertices标志。另一方面，在deal.II中，多网格方法的实现需要设置这个位。   
* [0.x.33]*
     没有被细化的单个单元，被细化的单元所包围，通常也会导致局部的近似特性急剧下降。原因是未精化和精化单元之间的面的节点不是真实的自由度，而是带有约束。因此，没有额外自由度的补丁要比未精炼单元本身大得多。如果在传递给构造函数的参数中，#eliminate_unrefined_islands的位被设置，所有没有被标记为精炼的单元，但被比未精炼单元更多的精炼单元包围的单元都被标记为精炼。还没有被细化但被标记为细化的单元被计入细化邻居的数量。边界上的单元则完全不计算在内。根据这个定义，一个未精炼的岛也是一个被三个精炼的单元和一个未精炼的单元所包围的单元（在二维），或者一个被两个精炼的单元和一个未精炼的单元所包围的单元，并且在一侧处于边界上。因此，它并不是一个真正的岛屿，正如旗帜的名称所表明的那样。然而，到现在作者也没有想到更好的名字。   
* [0.x.34]*
     补丁级别1的三角网格由补丁组成，也就是由被细化一次的单元组成。这个标志可以确保一个1级补丁的网格在粗化和细化之后仍然是1级补丁的。然而，在第一次调用[2.x.92]之前，用户有责任确保网格是属于补丁级的。最简单的方法是在创建三角网格后直接调用 global_refine(1)。 由此可见，如果一个单元的至少一个子单元是或将被精炼，那么所有子单元都需要被精炼。如果设置了#patch_level_1标志，那么#eliminate_unrefined_islands、#eliminate_refined_inner_islands和#eliminate_refined_boundary_islands标志将被忽略，因为它们将被自动履行。   
* [0.x.35]*
     每个[2.x.93]"粗略网格 "单元至少被精炼一次，也就是说，三角形可能在第1层有活动单元，但在第0层没有。这个标志可以确保一个具有最粗_级_1的网格在经过粗化和细化后仍然具有最粗_级_1。然而，用户有责任在第一次调用execute_coarsening_and_refinement之前，确保网格具有最粗的级别_1。最简单的方法是在创建三角网格后直接调用global_refine(1)。因此，第1层的活动单元可能不会被粗化。        这个标志的主要用途是确保每个单元在每个坐标方向上至少有一个邻居（即每个单元至少有一个左或右，以及至少一个2d的上或下邻居）。这是某些计算单元间有限差异的算法的必要前提。DerivativeApproximation类是这些算法中的一种，它要求一个三角形是最粗级别的，除非所有单元在最粗级别的每个坐标方向上已经有至少一个邻居。   
* [0.x.36]*
     这个标志不包括在[2.x.94]中，该标志与以下情况有关：考虑一个未精化的单元和一个精化的单元有一个共同的面，并且精化的单元沿共同面的一个子节点被标记为进一步精化的情况。在这种情况下，所得到的网格将沿着三角形的一条或多条边有一个以上的悬空节点，这种情况是不允许的。因此，为了进行细化，两个原始单元中较粗的单元也将被细化。        然而，在许多情况下，以各向异性的方式细化两个原始单元中的较粗的单元就足够了，以避免在一条边上出现多个悬空顶点的情况。只做最小的各向异性细化可以节省单元和自由度。通过指定这个标志，库可以产生这些各向异性的细化。        这个标志在默认情况下是不包含的，因为它可能导致各向异性细化的网格，即使没有单元被用户命令明确地进行各向异性细化。这个令人惊讶的事实可能会导致程序做错事，因为它们不是为各向异性网格可能发生的额外情况而编写的，见[2.x.95]的介绍中的讨论。   
* [0.x.37]*
     该算法寻求被细化或标记为细化的孤立单元。这个定义与#eliminate_unrefined_islands的定义不同，后者意味着一个岛屿被定义为一个被细化的单元，但其邻居中未被细化的单元多于被细化的单元。例如，在2D中，如果一个单元的邻居也被细化（或被细化但被标记为粗化），那么该单元的细化将被恢复。        改变岛的定义的原因是，这个选项有点危险，因为如果你考虑一连串的细化单元（例如，沿着解决方案中的结点），两端的单元将被粗化，之后最外层的单元将需要被粗化。因此，只能对这样的细胞进行一次循环标记，以避免吃掉整个精炼细胞链（"链式反应"...）。        这个算法也考虑到了那些实际上没有被细化但被标记为细化的单元。如果有必要的话，它会拿走细化标志。        实际上这个标志有两个版本，#eliminate_refined_inner_islands和#eliminate_refined_boundary_islands。第一个消除了上面定义的位于域内部的岛屿，而第二个只消除了那些位于边界的单元的岛屿。之所以这样划分标志，是因为人们经常希望消除内部的岛屿，而边界上的岛屿却很有可能被需要，例如，当人们根据与边界积分相关的准则来细化网格，或者当人们有粗糙的边界数据时。   
* [0.x.38]*
     这个标志的结果与#eliminate_refined_inner_islands非常相似。见那里的文档。   
* [0.x.39]*
     这个标志可以防止未精炼岛屿的出现。更详细地说。    如果 "大部分邻居 "在该步骤后将被精炼，它将禁止粗化一个单元。   
* [0.x.40]*
     这个标志总结了所有的平滑算法，这些算法可能在细化时通过标志一些更多的单元来进行细化。   
* [0.x.41]*
     这个标志总结了所有的平滑算法，这些算法可以在粗化时通过标记一些更多的单元格来进行粗化。   
* [0.x.42]*
     这个标志包括上述所有的（因此结合了所有实施的平滑算法），但各向异性的平滑算法除外。   
* [0.x.43]*
   一个别名，用于识别单元格迭代器。迭代器的概念在[2.x.96]"迭代器文档模块 "中有详细的讨论。    当前的别名用于识别三角形中的单元。TriaIterator类的工作原理就像一个指针，当你解除引用时，会产生一个CellAccessor类型的对象。CellAccessor是一个标识三角形中单元格特定属性的类，但它派生（因此继承）于TriaAccessor，TriaAccessor描述了你可以对三角形中更一般的对象（线、面以及单元格）提出什么要求。   
* [2.x.97]   
* [0.x.44]*
   和上面一样，允许在细化层次上使用 "MeshType概念"。 
* [0.x.45]*
   一个别名，用于识别[2.x.98]"活动单元迭代器"。  迭代器的概念在[2.x.99]"迭代器文档模块 "中有详细的讨论。    目前的别名是识别三角测量中的活动单元。TriaActiveIterator类的工作原理就像一个指向活动对象的指针，当你解除引用时，会产生一个CellAccessor类型的对象。CellAccessor是一个标识三角形中单元格特定属性的类，但它衍生（并因此继承）于TriaAccessor，TriaAccessor描述了你可以对三角形中更一般的对象（线、面以及单元格）提出什么要求。   
* [2.x.100]   
* [0.x.46]*
   一个别名，用于识别指向面的迭代器。  迭代器的概念在[2.x.101]"迭代器文档模块 "中有详细的讨论。    当前的别名是识别三角形中的面。TriaIterator类的工作原理就像一个指向对象的指针，当你解除引用时，会产生一个TriaAccessor类型的对象，即可以用来查询面的几何属性的类，如它们的顶点、面积等。   
* [2.x.102]   
* [0.x.47]*
   一个别名，用于识别指向活动面的迭代器，即指向没有子节点的面。活动面必须是至少一个活动单元的面。    除了 "活动 "的限定，这个别名与[2.x.103]的别名相同。特别是，取消引用这两个别名都会产生相同的对象。   
* [2.x.104]   
* [0.x.48]*
   一个定义了迭代器类型的别名，用于迭代网格的顶点。 迭代器的概念在[2.x.105]"迭代器文档模块 "中有详细的讨论。   
* [2.x.106]   
* [0.x.49]*
   一个别名，定义了一个迭代器类型，用于迭代网格的顶点。 迭代器的概念在[2.x.107] "迭代器文档模块 "中有详细的讨论。    这个别名实际上与上面的[2.x.108]别名相同，因为网格中的所有顶点都是活动的（即，是活动单元的一个顶点）。   
* [2.x.109]   
* [0.x.50]*
   一个别名，定义了一个网格的（一维）线条的迭代器。在一维网格中，这些线是网格的单元，而在二维网格中，线是单元的面。   
* [2.x.110]   
* [0.x.51]*
   一个别名，允许在[1.x.25]线上迭代，即没有子节点的线的子集。在一维网格中，这些是网格的单元，而在二维网格中，线是单元的面。    在二维或三维网格中，没有子节点的线（即活动线）是至少一个活动单元的一部分。每条这样的线还可能是与活动单元相邻的更粗的单元的线的子线。(这个较粗的邻居也是活动的)。   
* [2.x.111]   
* [0.x.52]*
   一个别名，定义了一个网格的（二维）四边形的迭代器。在二维网格中，这些是网格的单元，而在三维网格中，四边形是单元的面。   
* [2.x.112]   
* [0.x.53]*
   一个别名，允许在[1.x.26]四边形上进行迭代，即没有子节点的四边形子集。在二维网格中，这些是网格的单元，而在三维网格中，四边形是单元的面。    在三维网格中，没有孩子的四边形（即活动四边形）是至少一个活动单元的面。每个这样的四边形还可能是与活动单元相邻的更粗的单元的四边形面的子。这个较粗的邻居也将是活动的）。   
* [2.x.113]   
* [0.x.54]*
   一个别名，定义了一个网格的（三维）六边形的迭代器。这个迭代器只有在三维网格中才有意义，在三维网格中六边形是网格的单元。   
* [2.x.114]   
* [0.x.55]*
   一个别名，允许在网格的[1.x.27]六边形上迭代。  这个迭代器只有在三维网格中才有意义，在三维网格中六边形是网格的单元。因此，在这些三维网格中，这个迭代器等同于 [2.x.115] 别名。   
* [2.x.116]   
* [0.x.56]*
   一个结构，被create_triangulation()函数用作异常对象，用于指示粗略网格单元中哪些单元是倒置的或严重扭曲的（见术语表中[2.x.117]"扭曲的单元 "条目）。    这类对象会被create_triangulation()和execute_coarsening_and_refinement()函数抛出，如果要忽略这个条件，可以在用户代码中捕获它们。然而，请注意，只有在调用三角形类的构造函数时表明有必要进行这种检查，才会产生这种异常。    如果从参考单元到实数单元的映射的Jacobian的行列式至少在一个顶点是负的，则该单元被称为[1.x.28]。这一计算是通过[2.x.118]函数完成的。 
* [0.x.57]*
     解构器。空的，但为了异常规范而需要，因为基类有这个异常规范，而自动生成的析构器会因为成员对象而有一个不同的规范。   
* [0.x.58]*
     粗略网格单元中那些被变形或其子单元被变形的单元列表。   
* [0.x.59]*
   使尺寸在函数模板中可用。 
* [0.x.60]*
   使空间维度在函数模板中可用。 
* [0.x.61]*
   创建一个空的三角结构。不要创建任何单元。     [2.x.119] smooth_grid 决定在网格细化时应强制执行的网格尺寸函数的平滑程度。     [2.x.120] check_for_distorted_cells 决定三角网格是否应该检查由create_triangulation()或execute_coarsening_and_refinement()创建的任何单元是否扭曲（见[2.x.121] "扭曲的单元"）。  如果设置，这两个函数在遇到扭曲的单元格时可能会抛出一个异常。 
* [0.x.62]*
   复制构造函数。    你真的应该使用[2.x.122]函数，所以这个构造函数被删除。这样做的原因是，我们可能想在集合中使用三角函数对象。然而，C++容器要求存储在其中的对象是可复制的，所以我们需要提供一个复制构造函数。另一方面，复制三角形是非常昂贵的，我们不希望这种对象被意外地复制，例如在编译器生成的临时对象中。通过定义一个复制构造函数但抛出一个错误，我们满足了容器的形式要求，但同时又不允许实际的复制。  最后，通过这个异常，我们很容易找到需要修改代码以避免拷贝的地方。 
* [0.x.63]*
   移动构造器。    通过窃取另一个三角结构的内部数据来创建一个新的三角结构。 
* [0.x.64]*
   移动赋值运算符。 
* [0.x.65]*
   删除对象和所有级别的层次结构。 
* [0.x.66]*
   通过删除所有数据，将这个三角结构重置为处女状态。    注意，只有当这个对象不再存在任何订阅时，才允许进行这个操作，比如使用它的DoFHandler对象。 
* [0.x.67]*
   返回该三角函数所使用的MPI通信器。如果是一个串行Triangulation对象，将返回MPI_COMM_SELF。 
* [0.x.68]*
   设置网格平滑度为[2.x.123] 这将覆盖给构造函数的MeshSmoothing。只有在三角结构为空时才允许调用这个函数。 
* [0.x.69]*
   返回遵守的网格平滑要求。 
* [0.x.70]*
   将一个流形对象分配给三角剖面的某一部分。如果一个流形编号为[2.x.124]的对象被细化，这个对象会被用来寻找新顶点的位置（参见[2.x.125]的结果部分，对这个问题有更深入的讨论，并有例子）。 它也被用于形状函数计算中的单元格向单元格的非线性（即：非Q1）转换。    使用Manifold<dim, [2.x.127]创建一个[2.x.126]的副本，并在内部存储。    在非空三角的有效期内，有可能移除或替换一个Manifold对象。通常情况下，这是在第一次细化之前进行的，之后就很危险了。移除流形对象是通过reset_manifold()完成的。然后，该操作将之前给出的流形对象替换成一个直的流形近似值。   
* [2.x.128] [2.x.129] [2.x.130] "关于流形指标的词汇条目"  
* [0.x.71]*
   重置三角形中具有给定[2.x.131]的那些部分，以使用FlatManifold对象。这是一个非弯曲三角形的默认状态，并撤销由函数[2.x.132]分配的不同的Manifold对象。    
* [2.x.133] [2.x.134] [2.x.135] "关于流形指标的词汇条目"  
* [0.x.72]*
   重置三角形的所有部分，无论其manifold_id如何，都要使用FlatManifold对象。这将撤销函数对所有Manifold对象的分配 [2.x.136] 。    
* [2.x.137] [2.x.138] [2.x.139] "关于流形指标的词汇条目"  
* [0.x.73]*
   将所有单元格和面的manifold_id设置为给定参数。   
* [2.x.140] [2.x.141] [2.x.142] "关于流形指标的词汇条目"  
* [0.x.74]*
   将所有边界面的manifold_id设置为给定参数。   
* [2.x.143] [2.x.144] [2.x.145] "关于流形指标的词汇条目"  
* [0.x.75]*
   将所有边界面和边的manifold_id与给定的 boundary_id [2.x.146] 设置为给定的manifold_id [2.x.147] 。    
* [2.x.148] [2.x.149] [2.x.150] "关于流形指标的词汇条目"  
* [0.x.76]*
   返回一个对用于该三角测量的流形对象的常数引用。 [2.x.151]与set_manifold()中相同。   
* [2.x.152] 如果找不到流形，则返回默认的平面流形。   
* [2.x.153] [2.x.154] [2.x.155] "关于流形指标的词汇条目"  
* [0.x.77]*
   返回一个向量，包含分配给该三角测量对象的活动单元的边界面的所有边界指标。注意，每个边界指标只被报告一次。返回向量的大小将代表不同指标的数量（大于或等于1）。   
* [2.x.156] [2.x.157] [2.x.158] "关于边界指标的词汇条目"  
* [0.x.78]*
   返回一个向量，该向量包含分配给该三角结构中活动单元格对象的所有流形指标。注意，每个流形指标只报告一次。返回向量的大小将代表不同指标的数量（大于或等于1）。   
* [2.x.159] [2.x.160] [2.x.161] "关于流形指标的词汇条目"  
* [0.x.79]*
   将[2.x.162]复制到这个三角区。这个操作并不便宜，所以你应该小心使用这个。我们没有把这个函数作为一个复制构造函数来实现，因为如果你可以在以后给它们赋值，那么维护三角形的集合就更容易了。    请记住，这个函数也复制了之前由[2.x.163]函数设置的边界描述符的指针。因此，你还必须保证描述边界的Manifold对象的寿命至少与复制的三角图一样长。    这个三角形必须事先是空的。    该函数被制成[2.x.164]，因为一些派生类可能想禁用或扩展该函数的功能。   
* [2.x.165] 调用这个函数会在other_tria上触发'copy'信号，也就是被复制的三角结构[1.x.29]。 它还会触发当前三角形的'创建'信号。更多信息请参见通用文档中关于信号的部分。   
* [2.x.166]信号的连接列表不会从旧的三角结构复制到新的三角结构，因为这些连接的建立是为了监视旧的三角结构如何变化，而不是它可能被复制到的任何三角结构如何变化。 
* [0.x.80]*
   从一个顶点列表和一个单元格列表创建一个三角形，每个单元格是一个<tt>1<<dim</tt>顶点指数的列表。调用此函数时，三角形必须是空的，单元格列表应该是有用的（连接域等）。调用此函数的结果是一个[2.x.167]"粗略网格"。    单元的材料数据在[2.x.168]阵列中给出，而边界信息则在[2.x.169]字段中给出。    [2.x.170]数组内顶点的编号受到一些限制，关于这一点请看一般的类文件。    关于这个函数可以生成有效三角图的条件，请参见这个类的文档，以及GridIn和GridReordering类。    如果在创建此对象时指定了[2.x.171]标志，在其操作的最后，当前函数会遍历所有单元并验证没有一个单元是变形的（参见术语表中[2.x.172]"变形单元 "条目），如果从参考单元到实数单元的映射的雅各布系数至少在其中一个顶点是负的，我们就称一个单元是变形的（这个计算使用[2.x.173]函数完成）。如果有变形的单元，这个函数会抛出一个DistortedCellList类型的异常。由于这发生在所有的数据结构被建立之后，如果你知道你要做什么，你可以捕捉并忽略这个异常
* 

* 
* 

* 
 

 
 
* - 例如，它可能是行列式为零(表明你在一个单元中的边缘塌陷了)，但这是可以的，因为你并不打算在这个单元上进行积分。另一方面，变形的单元通常表明网格太粗，无法解决领域的几何问题，在这种情况下，忽略这个例外可能是不明智的。   
* [2.x.174] 这个函数在 [2.x.175] 和 [2.x.176] 中使用。   
* [2.x.177] 这个函数在做完它的工作后会触发 "创建 "信号。参见该类的一般文档中关于信号的部分。例如，作为其结果，所有连接到这个三角形的DoFHandler对象将通过 [2.x.178] 被重新初始化。    
* [2.x.179]只有在dim==spacedim的情况下才会对扭曲的单元进行检查，否则，如果单元所描述的流形是扭曲的，那么单元就可以合法地被扭曲。 
* [0.x.81]*
   从提供的[2.x.180]中创建一个三角形。    
* [2.x.181] 如果需要流形，别忘了在调用此函数前用set_manifold()附加流形。   
* [2.x.182] 命名空间[2.x.183]包含创建[2.x.184] [2.x.185] construction_data 这个过程需要的数据。 
* [0.x.82]*
   仅用于向后兼容。这个函数按照5.2之前的deal.II版本的要求，以排序方式获取单元格数据，将其转换为新的（lexicographic）排序，并调用create_triangulation()。   
* [2.x.186]该函数内部调用create_triangulation，因此可以抛出与其他函数相同的异常。 
* [0.x.83]*
   还原或翻转dim<spacedim三角形的方向标志，见 [2.x.187] 。    如果dim等于spacedim，这个函数会抛出一个异常。 
* [0.x.84]*
    [2.x.188] 网格细化 [2.x.189] 。  
* [0.x.85]*
   标记所有活动单元进行细化。 这将细化所有级别的、尚未细化的单元格（也就是说，只有尚未有子代的单元格才会被细化）。这些单元格只被标记，不被细化，因此你有机会保存细化标记。 
* [0.x.86]*
   精炼所有单元格[2.x.190]次。换句话说，在每一次的[2.x.191]迭代中，循环所有单元格，并将每个单元格统一细化为[2.x.192]个子。在实践中，这个函数重复了以下操作[2.x.193]次：调用set_all_refine_flags()，然后是execute_coarsening_and_refinement()。最终的结果是，单元格的数量增加了 [2.x.194] 倍。    在这个循环中调用的execute_coarsening_and_refinement()函数如果创建了扭曲的单元格，可能会抛出一个异常（见其文档解释）。如果发生这种情况，这个异常将通过这个函数传播，在这种情况下，你可能不会得到实际的细化步骤数。   
* [2.x.195] 这个函数在做每个单独的细化循环之前和之后都会触发细化前和细化后的信号（即如果`times > 1'的话，会不止一次）。参见该类的一般文档中关于信号的部分。 
* [0.x.87]*
   对所有单元格进行给定次数的粗化。    在[2.x.196]的每一次迭代中，所有单元格都将被标记为粗化。如果一个活动的单元格已经在最粗的层次上，它将被忽略。   
* [2.x.197] 该函数在做每个单独的粗化循环（即如果`时间>1'，则不止一次）之前和之后都会触发预精化信号。参见该类的一般文档中关于信号的部分。 
* [0.x.88]*
   同时执行三角形的细化和粗化。    该函数将所有细化和粗化的标志重置为假。它将用户标志用于内部目的。因此，它们将被未定义的内容所覆盖。    为了允许用户程序修复这些单元，如果需要的话，这个函数在完成所有其他工作后可能会抛出一个类型为DistortedCellList的异常，该异常包含一个已经被细化并且至少有一个子单元被扭曲的单元列表。如果没有单元格创建了扭曲的子代，该函数就不会创建这样的异常。  请注意，为了实现对变形单元的检查，必须在创建三角形对象时指定[2.x.198]标志。    更多信息请参见通用文档。   
* [2.x.199] 这个函数在工作之前和之后都会触发精简前和精简后的信号。参见该类的一般文档中关于信号的部分。   
* [2.x.200] 如果边界描述足够不规则，可能会发生一些由网格细化产生的子节点被扭曲（见[2.x.201]"扭曲的单元 "的广泛讨论）。   
* [2.x.202] 这个函数是<tt>虚拟的</tt>，以允许派生类插入钩子，如保存细化标志等（见例如PersistentTriangulation类）。 
* [0.x.89]*
   既做细化和粗化的准备，也做网格的平滑。    关于细化过程，它在<tt>dim>=2</tt>中固定细化的闭合（确保没有两个单元在细化水平上相差超过一个），等等。 如果这个类的构造函数给出了相应的标志，它将执行一些网格平滑处理。 该函数返回是否有额外的单元被标记为细化。    更多关于细化后平滑的信息，请参见本类的通用文档。    关于粗化部分，在准备实际的粗化步骤时，要对单元进行标记和去标记。这包括从可能不被删除的单元中删除粗化标志（例如，因为一个邻居比该单元更精细），做一些平滑处理，等等。    其效果是，只有那些被标记为粗化的单元才会被实际粗化。这包括所有被标记的单元格都属于父单元格，其所有子单元格都被标记。    该函数返回一些单元格的标记是否在这个过程中被改变。    这个函数使用了用户标志，所以如果你事后还需要它们，请储存它们。 
* [0.x.90] [2.x.203]。  
* [0.x.91]*
    [2.x.204] 跟上一个三角形所发生的事情 [2.x.205] 。  
* [0.x.92]*
   用于通知派生类中的函数，给定cell_iterator的单元格将如何变化。请注意，这可能与平行计算中cell_iterator中的refine_flag()和coarsen_flag()不同，因为细化约束是本机看不到的。 
* [0.x.93]*
     单元不会被细化或粗化，可能会也可能不会移动到不同的处理器。   
* [0.x.94]*
     该单元将被或被精简。   
* [0.x.95]*
     该单元的子单元将被或被粗化为该单元。   
* [0.x.96]*
     无效状态。不会发生在用户身上。   
* [0.x.97]*
   一个用于累积下面的cell_weights槽函数的结果的结构。它接受一个迭代器范围，并返回值的总和。 
* [0.x.98]*
   一个拥有[2.x.206]对象的结构，用于三角形可以对自己做的一些操作。更多的信息和例子，请参考Triangulation类的一般文档中的 "三角形变化时获得通知 "部分。    关于信号的文档，见http://www.boost.org/doc/libs/release/libs/signals2 。 
* [0.x.99]*
     只要调用[2.x.207]或[2.x.208]就会触发这个信号。当通过[2.x.209]从档案中加载三角图时也会触发这个信号。    
* [0.x.100]*
     这个信号在[2.x.210]函数（其本身被其他函数如[2.x.211]调用）开始执行时被触发。在这个信号被触发的时候，三角结构仍然没有改变。   
* [0.x.101]*
     这个信号在[2.x.212]函数的执行结束时被触发，此时三角结构已经达到最终状态。   
* [0.x.102]*
     该信号在[2.x.213]和[2.x.214]函数开始执行时被触发。在该信号被触发时，三角结构仍未改变。   
* [0.x.103]*
     当deal.II中的函数移动网格点时，这个信号会被触发，例如[2.x.215] 不幸的是，通过[2.x.216]修改用户代码中的顶点不能被这种方法检测到。   
* [0.x.104]*
     这个信号对每个要被粗化的单元都会被触发。       
* [2.x.217]该信号是以一组活动单元的直接父单元为参数触发的。该父单元的子单元随后将被粗化。   
* [0.x.105]*
     这个信号对每一个刚刚被粗化的单元格都会被触发。       
* [2.x.218] 信号参数[2.x.219]对应于一组新创建的活动单元的直接父单元。   
* [0.x.106]*
     每当拥有该信号的三角结构被另一个使用[2.x.220]的三角结构复制时，该信号就会被触发（即在[1.x.30]三角结构上被触发，但新的三角结构被作为参数传递）。   
* [0.x.107]*
     只要调用[2.x.221]函数，并在三角形的析构器中，这个信号就会被触发。当通过[2.x.222]从存档中加载三角函数时，该信号也会被触发，因为三角函数的先前内容首先被销毁。        该信号在三角剖析的数据结构被销毁之前被触发。换句话说，连接到这个信号的函数可以最后看一下三角图，例如保存作为三角图的一部分存储的信息。   
* [0.x.108]*
     这是一个总括性的信号，每当创建、细化后或清除信号被触发时都会被触发。实际上，它可以用来向连接到该信号的对象表明三角测量已经被改变，不管改变的具体原因是什么。       
* [2.x.223]单元级信号[2.x.224]和[2.x.225]post_refinement_on_cell不与此信号连接。   
* [0.x.109]*
     这个信号在每次自动或手动重新分区时对每个单元都会被触发。这个信号有些特殊，因为它只在分布式并行计算中被触发，而且只有当函数连接到它时才会被触发。它的目的是允许对领域进行加权重新划分，以平衡各进程的计算负载，而不是平衡单元的数量。任何连接的函数都需要一个指向单元格的迭代器，以及一个CellStatus参数，该参数表示该单元格是要被细化、粗化还是不被触及（更多信息请参见CellStatus枚举的文档）。该函数预计将返回一个无符号整数，它被解释为该单元的额外计算负荷。如果这个单元要被粗化，信号是为父单元调用的，你需要提供未来父单元的权重。如果这个单元将被精简，该函数应返回一个权重，该权重将被平均分配给当前单元的每个未来子单元。作为参考，每个单元格的总权重都要加上1000的值。这意味着信号返回值为1000（导致权重为2000）意味着一个进程处理这个特定单元的成本是两倍。如果有几个函数连接到这个信号，它们的返回值将被相加，以计算出最终的权重。        这个函数在[2.x.226]中使用。   
* [0.x.110]*
     这个信号在[2.x.227]函数开始执行时被触发（该函数本身被其他函数如[2.x.228]调用）。在这个信号被触发的时候，三角结构仍然没有改变。这个信号与pre_refinement信号不同，因为在并行分布的情况下，pre_refinement信号被多次触发，没有办法区分最后的信号调用。   
* [0.x.111]*
     这个信号是在执行[2.x.229]函数时触发的。在这个信号被触发的时候，p4est神谕已经被完善，单元格关系已经被更新。否则，三角结构是不变的，而且p4est谕言还没有被重新划分。   
* [0.x.112]*
     这个信号在[2.x.230]函数的执行结束时被触发，此时三角剖分已经达到最终状态。这个信号与post_refinement信号不同，因为在并行分布的情况下，post_refinement信号会被多次触发，而没有办法区分最后的信号调用。   
* [0.x.113]*
     这个信号在[2.x.231]函数的执行开始时被触发。在这个信号被触发的时候，三角关系仍然没有改变。       
* [2.x.232][2.x.233]函数也被[2.x.234]调用。因此，pre_distributed_repartition信号将在pre_distributed_load信号之后被触发。   
* [0.x.114]*
     这个信号在[2.x.235]函数的执行结束时被触发，此时三角化已经达到最终状态。   
* [0.x.115]*
     该信号在[2.x.236]函数开始执行时被触发。在这个信号被触发的时候，三角测量仍然没有变化。   
* [0.x.116]*
     在[2.x.237]函数执行结束时，该信号被触发，此时三角结构已达到最终状态。   
* [0.x.117]*
     该信号在[2.x.238]函数开始执行时被触发。在这个信号被触发的时候，三角测量仍然没有变化。   
* [0.x.118]*
     在[2.x.239]函数执行结束时，该信号被触发，此时三角结构已达到最终状态。   
* [0.x.119]*
   三角形可以对自己进行的各种操作的信号。 
* [0.x.120] [2.x.240].   
* [0.x.121]*
    [2.x.241] 一个三角形的历史 [2.x.242] 。  
* [0.x.122]*
   将被标记为细化的单元格的地址保存到[2.x.243]外。 关于用法，请阅读该类的一般文档。 
* [0.x.123]*
   与上述相同，但将标志存储到一个位向量而不是文件中。 
* [0.x.124]*
   读取由[2.x.244]存储的信息。  
* [0.x.125]*
   读取由[2.x.245]存储的信息。  
* [0.x.126]*
   类似于[2.x.246]的内容。  
* [0.x.127]*
   与上述相同，但将标志存储到一个位向量，而不是存储到一个文件。 
* [0.x.128]*
   类似于[2.x.247]。  
* [0.x.129]*
   类似于[2.x.248]。  
* [0.x.130]*
   返回该三角形是否经历过各向异性（而不是各向同性）的细化。 
* [0.x.131] [2.x.249].   
* [0.x.132]*
    [2.x.250] 用户数据 [2.x.251]   
* [0.x.133]*
   清除所有的用户标志。 也见 [2.x.252] 。 
* [0.x.134]*
   保存所有的用户标志。更多细节请参见该类的一般文档和 [2.x.253] 的文档。 也请参见 [2.x.254] 。 
* [0.x.135]*
   和上面一样，但是把标志存储到一个位向量而不是文件中。  如果有必要，输出向量会被调整大小。 也见 [2.x.255] 。 
* [0.x.136]*
   读取由 [2.x.256] 储存的信息 也见 [2.x.257] .  
* [0.x.137]*
   读取由[2.x.258]存储的信息 也见[2.x.259] .  
* [0.x.138]*
   清除所有行上的用户标志。 也见 [2.x.260] 。 
* [0.x.139]*
   保存行上的用户标志。 也见 [2.x.261] .  
* [0.x.140]*
   与上述相同，但将标志存储到一个位向量而不是文件中。  如果有必要，输出向量会被调整大小。 也见 [2.x.262] 。 
* [0.x.141]*
   加载位于行上的用户标志。 也见 [2.x.263] 。 
* [0.x.142]*
   加载位于行上的用户标志。 也见 [2.x.264] 。 
* [0.x.143]*
   清除四边形上的所有用户标志。 也见 [2.x.265] 。 
* [0.x.144]*
   保存四边形上的用户标志。 参见 [2.x.266] 。 
* [0.x.145]*
   与上述相同，但将标志存储到一个位向量而不是文件中。  如果有必要，输出向量会被调整大小。 也见 [2.x.267] 。 
* [0.x.146]*
   加载位于四边形上的用户标志。 也见 [2.x.268] 。 
* [0.x.147]*
   加载位于四边形上的用户标志。 也见 [2.x.269] 。 
* [0.x.148]*
   清除四边形上的所有用户标志。 也见 [2.x.270] 。 
* [0.x.149]*
   保存赫兹上的用户标志。 也见 [2.x.271] 。 
* [0.x.150]*
   与上述相同，但将标志存储到一个位向量而不是文件中。  如果有必要，输出向量会被调整大小。 也见 [2.x.272] 。 
* [0.x.151]*
   加载位于hexs上的用户标志。 也见 [2.x.273] 。 
* [0.x.152]*
   加载位于hexs上的用户标志。 也见 [2.x.274] 。 
* [0.x.153]*
   清除所有的用户指针和索引，并允许在下一次访问时使用这两者。 也见 [2.x.275] 。 
* [0.x.154]*
   保存所有的用户索引。如果有必要，输出向量的大小会被调整。也见 [2.x.276] 。 
* [0.x.155]*
   读取由save_user_indices()存储的信息。 也见 [2.x.277] 。 
* [0.x.156]*
   保存所有的用户指针。如果有必要，输出向量会被调整大小。 也见 [2.x.278] 。 
* [0.x.157]*
   读取由save_user_pointers()存储的信息。 也见 [2.x.279] .  
* [0.x.158]*
   保存用户索引的行数。如果有必要，输出向量会被调整大小。 也见 [2.x.280] 。 
* [0.x.159]*
   加载位于行上的用户索引。 也见 [2.x.281] 。 
* [0.x.160]*
   保存位于四边形的用户索引。如果有必要，输出向量会被调整大小。 也见 [2.x.282] 。 
* [0.x.161]*
   加载位于四边形上的用户索引。 也见 [2.x.283] 。 
* [0.x.162]*
   保存位于十六进制的用户索引。如果有必要，输出向量会被调整大小。 也见 [2.x.284] 。 
* [0.x.163]*
   加载位于十六进制上的用户索引。 也见 [2.x.285] 。 
* [0.x.164]*
   保存位于行上的用户索引。如果有必要，输出向量会被调整大小。 也见 [2.x.286] 。 
* [0.x.165]*
   加载位于行上的用户指针。 也见 [2.x.287] .  
* [0.x.166]*
   保存位于四边形上的用户指针。如果有必要，输出向量会被调整大小。 也见 [2.x.288] 。 
* [0.x.167]*
   加载位于四边形上的用户指针。 也见 [2.x.289] 。 
* [0.x.168]*
   保存位于十六进制的用户指针。如果有必要，输出向量会被调整大小。 也见 [2.x.290] 。 
* [0.x.169]*
   加载位于六角星上的用户指针。 也见 [2.x.291] 。 
* [0.x.170] [2.x.292] 。  
* [0.x.171]*
    [2.x.293] 细胞迭代器函数 [2.x.294] 。  
* [0.x.172]*
   迭代到第一层使用的单元格 [2.x.295] 。    
* [2.x.296] 给定的[2.x.297]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.298]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.31]部分实际上没有高层次的单元。在这些情况下，如果[2.x.299]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.300]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.173]*
   迭代到第一层的活动单元 [2.x.301] 如果给定的层不包含任何活动单元（即这一层的所有单元都被进一步细化了，那么这个函数返回[2.x.302]，这样的循环就会有  
* [1.x.32]
* 迭代次数为零，如果这一层没有活动单元，可能会有这样的预期。   
* [2.x.303] 给定的[2.x.304]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.305]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.33]部分实际上没有高层次的单元。在这些情况下，如果[2.x.306]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.307]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.174]*
   过了终点的迭代器；这个迭代器用于比较具有过了终点或开始前状态的迭代器。 
* [0.x.175]*
   返回一个迭代器，它是第一个不在水平线上的迭代器。如果[2.x.308]是最后一个层次，那么这将返回<tt>end()</tt>。   
* [2.x.309] 给定的[2.x.310]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.311]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.34]部分实际上没有高层次的单元。在这些情况下，如果[2.x.312]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.313]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.176]*
   返回一个活动的迭代器，它是不在给定层次上的第一个活动迭代器。如果[2.x.314]是最后一个层次，那么这将返回<tt>end()</tt>。   
* [2.x.315] 给定的[2.x.316]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.317]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.35]部分实际上没有高层次的单元。在这些情况下，如果[2.x.318]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.319]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.177]*
   返回一个指向最后使用的单元格的迭代器。 
* [0.x.178]*
   返回一个指向最后一个活动单元格的迭代器。 
* [0.x.179]*
   返回一个迭代器，指向这个由独立的CellId对象构建的Triangulation对象的一个单元。    如果给定的参数对应于这个三角形中的一个有效单元，对于当前处理器存储所有属于三角形的单元的顺序三角形，这个操作总是会成功。另一方面，如果这是一个平行三角形，那么当前的处理器可能实际上不知道这个单元。在这种情况下，对于本地相关的单元，这个操作会成功，但对于在当前处理器上不太精细的人工单元，这个操作可能不会成功。 
* [0.x.180]*
    [2.x.320] 细胞迭代器函数返回迭代器的范围  
* [0.x.181]*
   返回一个迭代器范围，该范围包含构成这个三角形的所有单元格（无论是否激活）。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.321] 半开范围 [2.x.322]     
* [2.x.323]   
* [0.x.182]*
   返回一个迭代器范围，该范围包含构成这个三角形的所有活动单元。这样的范围对于初始化C++11支持的基于范围的for循环是很有用的，参见[2.x.324] "C++11标准"。    基于范围的for循环很有用，因为它们需要的代码比传统的循环少得多（关于它们如何工作的讨论，见[1.x.36]）。一个例子是，如果没有基于范围的for循环，人们往往会写出如下的代码（假设我们的目标是在每个活动单元上设置用户标志）。 
* [1.x.37]
* 使用C++11的基于范围的for循环，现在这完全等同于下面的内容。 
* [1.x.38]
* [2.x.325] 半开范围<code>[this->begin_active(), this->end())</code>。   
* [2.x.326]   
* [0.x.183]*
   返回一个迭代器范围，该范围包含了构成该三角图给定层次的所有单元（无论是否激活）。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.327] level 这个三角结构的细化层次中的一个给定的级别。   [2.x.328] 半开范围<code>[this->begin(level), this->end(level))</code> [2.x.329] level必须小于this->n_levels()。   
* [2.x.330]   
* [0.x.184]*
   返回一个迭代器范围，该范围包含所有构成该三角形的给定级别的活动单元。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.331] level 这个三角形的细化层次中的一个给定级别。   [2.x.332] 半开范围<code>[this->begin_active(level), this->end(level))</code> [2.x.333] level必须小于this->n_levels()。   
* [2.x.334]   
* [0.x.185] [2.x.335]。  
* [0.x.186]*
    [2.x.336] 面对迭代器函数 [2.x.337] 。  
* [0.x.187]*
   迭代到第一个使用的面。 
* [0.x.188]*
   迭代到第一个活动面。 
* [0.x.189]*
   超过终点的迭代器；这个迭代器用于比较超过终点或开始前状态的迭代器。 
* [0.x.190]*
   返回一个迭代器范围，其中包含构成这个三角形的所有活动面。这个函数是[2.x.338]的面的版本，允许人们写代码，例如。   
* [1.x.39]
* [2.x.339] 半开范围<code>[this->begin_active_face(), this->end_face())</code>。   
* [2.x.340]   
* [0.x.191] [2.x.341].   
* [0.x.192]*
    [2.x.342] 顶点迭代器函数 [2.x.343]   
* [0.x.193]*
   迭代到第一个使用的顶点。这个函数只有在dim不是一个的情况下才能使用。 
* [0.x.194]*
   到第一个活动顶点的迭代器。因为所有的顶点都是活动的，begin_vertex()和begin_active_vertex()返回同一个顶点。这个函数只有在dim不是一个的情况下才可以使用。 
* [0.x.195]*
   过去的迭代器；这个迭代器用于比较过去或开始前状态的迭代器。这个函数只有在dim不为一的情况下才能使用。 
* [0.x.196] [2.x.344]。  
* [0.x.197]*
    [2.x.345] 关于三角形的信息[2.x.346] 。  
* [0.x.198]*
   在下文中，大多数函数都提供了两个版本，有和没有描述水平的参数。有这个参数的版本只适用于描述当前三角剖分的单元的对象。例如：在二维中不能调用<tt>n_lines(level)</tt>，只能调用<tt>n_lines()</tt>，因为线在二维中是面，因此没有层次。 
* [0.x.199]*
   返回已使用的线的总数，无论是否激活。 
* [0.x.200]*
   返回已使用的线的总数，在[2.x.347]层上是否有效。  
* [0.x.201]*
   返回有效线路的总数。 
* [0.x.202]*
   返回活动线路的总数，在级别[2.x.348]上。  
* [0.x.203]*
   返回已使用的四边形总数，无论是否激活。 
* [0.x.204]*
   返回已使用的四边形总数，活跃或不活跃，在级别[2.x.349]。  
* [0.x.205]*
   返回活跃的四边形总数，活跃与否。 
* [0.x.206]*
   返回活跃的四边形总数，活跃或不活跃的水平[2.x.350] 。  
* [0.x.207]*
   返回已使用的六面体的总数，活跃与否。 
* [0.x.208]*
   返回已使用的六面体总数，在[2.x.351]层中是否有效。 
* [0.x.209]*
   返回使用中的六面体总数，无论是否激活。 
* [0.x.210]*
   返回活跃的六面体总数，在[2.x.352]层中活跃或不活跃。 
* [0.x.211]*
   返回已使用的单元格总数，激活或未激活。 在一个空间维度上映射到<tt>n_lines()</tt>，以此类推。 
* [0.x.212]*
   返回已使用的单元格总数，无论是否激活，在级别[2.x.353]中映射到<tt>n_lines(level)</tt>在一个空间维度上，等等。 
* [0.x.213]*
   返回活动单元格的总数。在一个空间维度上映射到<tt>n_active_lines()</tt>，依此类推。 
* [0.x.214]*
   返回活动单元格的总数。对于当前的类，这与n_active_cells()相同。然而，该函数可以在派生类中被重载（例如，在[2.x.354]中，它可以返回一个大于当前处理器上三角形对象报告的活动单元数的值。 
* [0.x.215]*
   返回层面上的活动单元总数 [2.x.355] 在一个空间维度上映射为<tt>n_active_lines(level)</tt>，依此类推。 
* [0.x.216]*
   返回已使用的面的总数，无论是否激活。 在二维中，其结果等于n_lines()，在三维中等于n_quads()，而在一维中则等于使用的顶点数。 
* [0.x.217]*
   返回活动面的总数。 在2D中，其结果等于n_active_lines()，在3D中等于n_active_quads()，而在1D中等于使用的顶点数。 
* [0.x.218]*
   返回这个三角形的层数。   
* [2.x.356]在内部，三角形以层为单位存储数据，这个数据结构中的层数可能比人们想象的要多。
* 
* - 例如，想象一下我们刚刚通过粗化最高层而得到的三角形，这样它就完全被删除了。这个层次并没有被删除，因为它很可能很快就会被下一个细化过程重新填充。  因此，如果你碰巧跑过原始单元格迭代器（作为这个类的用户你不能这样做，但在内部可以），那么层次结构中的对象数量就会大于最细化的单元格的层次加一。另一方面，由于这个类的用户很少关心这个问题，这个函数实际上只是返回最细化的活动单元的级别加一。(加一是因为在一个粗略的、未精炼的网格中，所有的单元都是零级的。
* 
* - 使得级别的数量等于1）。)  
* [0.x.219]*
   返回正在使用的层数。这个函数等同于串行三角网格的n_levels()，但是对于[2.x.357]来说，它给出了所有处理器上n_levels()的最大值，因此可以比n_levels()大。 
* [0.x.220]*
   如果三角形有悬空节点，返回true。    这个函数是虚拟的，因为其结果可以有不同的解释，这取决于三角剖分是否只存在于单个处理器上，或者像[2.x.358]类中所做的那样，可能是分布式的（关于这个函数在并行情况下应该做什么，见那里的描述）。 
* [0.x.221]*
   返回顶点的总数。 其中一些顶点可能没有被使用，这通常发生在粗化三角形时，一些顶点被丢弃，但我们不想对剩余的顶点重新编号，导致使用的顶点数量出现漏洞。 你可以使用[2.x.359]函数获得已用顶点的数量。 
* [0.x.222]*
   返回一个对该三角结构中所有顶点的常数引用。注意，这个数组中不一定所有的顶点都被实际使用；例如，如果你粗化一个网格，那么一些顶点会被删除，但是它们在这个数组中的位置是不变的，因为顶点的索引只被分配一次。你可以通过函数get_used_vertices()来了解哪些顶点被实际使用。 
* [0.x.223]*
   返回目前正在使用的顶点的数量，即至少属于一个被使用的元素。 
* [0.x.224]*
   如果具有此[2.x.361]的顶点被使用，返回[2.x.360]。 
* [0.x.225]*
   返回一个对[2.x.362]数组的常数引用，表明顶点数组中的一个条目是否被使用。 
* [0.x.226]*
   返回在一个共同顶点相遇的最大单元格数。由于这个数字在细化过程中是一个不变量，所以只考虑最粗层的单元。因此该操作是相当快的。该不变性只适用于最粗的三角形中足够多的单元格（例如，对于单个单元格会返回一个），因此在二维空间中会返回最小的4个，在三维空间中会返回8个，等等，这就是如果三角形被细化，会有多少单元格相遇。    在一个空间维度上，会返回两个。 
* [0.x.227]*
   这个函数总是返回[2.x.363]，但是为了与派生的[2.x.364]类兼容而存在。对于分布式并行三角计算，该函数返回由当前处理器拥有的那些单元的子域ID。 
* [0.x.228]*
   返回一个对当前对象的引用。    这似乎不是很有用，但允许编写代码，可以访问任何满足[2.x.365]"MeshType概念 "的底层三角形（这可能不仅是一个三角形，也可能是一个DoFHandler，例如）。 
* [0.x.229]*
   返回一个对当前对象的引用。这是前一个函数的const-version。 
* [0.x.230] [2.x.366].   
* [0.x.231]*
    [2.x.367] 有关对象数量的内部信息 [2.x.368] 。  
* [0.x.232]*
   已使用或未使用的总行数。   
* [2.x.369] 这个函数实际上是输出关于三角测量的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用于其他一些非常紧密地建立在它之上的类（特别是DoFHandler类）。 
* [0.x.233]*
   在给定级别上，已使用或未使用的行数。   
* [2.x.370]这个函数实际上是输出关于三角形的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用于其他一些非常紧密地建立在它之上的类（特别是DoFHandler类）。 
* [0.x.234]*
   已使用或未使用的四边形总数。   
* [2.x.371]这个函数实际上是在输出关于三角形的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用于其他一些非常紧密地建立在它之上的类（特别是DoFHandler类）。 
* [0.x.235]*
   在给定的水平上，已使用或未使用的四边形的数量。   
* [2.x.372] 这个函数实际上是输出关于三角测量的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用于其他一些非常紧密地建立在它之上的类（特别是DoFHandler类）。 
* [0.x.236]*
   在给定级别上，已使用或未使用的赫兹数。   
* [2.x.373] 这个函数实际上是输出关于三角测量的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用于其他一些非常紧密地建立在它之上的类（特别是DoFHandler类）。 
* [0.x.237]*
   给定层次上已使用或未使用的单元格的数量。   
* [2.x.374]这个函数实际上是输出关于三角形的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用于其他一些非常紧密地建立在它之上的类（特别是DoFHandler类）。 
* [0.x.238]*
   返回面的总数，无论是否使用。在2D中，这个结果等于n_raw_lines()，在3D中等于n_raw_quads()，而在1D中等于顶点的数量。   
* [2.x.375] 这个函数实际上是输出关于三角形的内部信息。它不应该在应用程序中使用。这个函数只是这个类的公共接口的一部分，因为它被用在其他一些非常紧密地建立在它之上的类中（特别是DoFHandler类）。 
* [0.x.239] [2.x.376]。  
* [0.x.240]*
   确定这个对象的内存消耗（以字节为单位）的估计值。    这个函数是虚拟的，因为三角测量对象可能通过这个基类的指针被访问，即使实际对象是一个派生类。 
* [0.x.241]*
   使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据写入一个流中，以便进行序列化。   
* [2.x.377]这个函数不保存[1.x.40]当前三角结构的成员变量。相反，只有某些种类的信息被保存。更多信息请参见该类的一般文档。 
* [0.x.242]*
   为了使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)进行序列化，从一个流中读取此对象的数据。  扔掉之前的内容。   
* [2.x.378]这个函数不会将当前三角结构的[1.x.41]成员变量重置为之前存储到存档的三角结构的成员变量。相反，只有某些种类的信息被加载。更多信息请参见该类的一般文档。   
* [2.x.379] 这个函数调用[2.x.380]函数，因此触发了 "清除 "信号。在从存档中加载所有数据后，它又触发了 "创建 "信号。关于信号的更多信息，请参见该类的一般文档。 
* [0.x.243]*
   将这个函数的参数中给出的（粗略的）面对宣布为周期性的。这样就有可能获得跨越周期性边界的邻居。    该向量可以由函数[2.x.381]填充。关于周期性边界条件的更多信息，请参见[2.x.382] [2.x.383]和[2.x.384] 。   
* [2.x.385] 在使用这个函数之前，必须先初始化三角结构，而且不能进行精化。 
* [0.x.244]*
   返回 periodic_face_map。 
* [0.x.245]*
   返回填充有该三角图所用参考单元类型的向量。 
* [0.x.246]*
   指示三角形是否只由类似超立方体的单元组成，即线、四边形或六面体。 
* [0.x.247]*
   使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)，从一个流中写入和读取这个对象的数据，以便进行序列化。 
* [0.x.248]*
    [2.x.386] 异常情况 [2.x.387]   
* [0.x.249]*
   异常情况    
* [2.x.388]   
* [0.x.250]*
   引发该异常的函数只能对空三角图进行操作，即没有网格单元的三角图。   
* [2.x.389]   
* [0.x.251]*
   试图重新读取一个网格，发生了错误。   
* [2.x.390]   
* [0.x.252]*
   异常情况  
* [2.x.391]   
* [0.x.253]*
   你所访问的三角测量层是空的。   
* [2.x.392]   
* [0.x.254]*
   异常情况    
* [2.x.393]   
* [0.x.255]*
   异常 请求的边界_id没有找到    
   
* [0.x.256]*
   异常情况    
* [2.x.395]   
* [0.x.257] [2.x.396] * [0.x.258]* 异常   
* [0.x.258]*
   在细化三角形的过程中做一些平滑处理。关于这方面的更多信息，请参见该类的通用文档。 
* [0.x.259]*
   矢量缓存给定三角形的所有参考单元类型（也是在分布式情况下）。 
* [0.x.260]*
   向给定的流写入一个bool向量，写入一个前缀和一个后缀的魔法数字。该向量以几乎二进制的格式写入，即bool标志被打包，但数据被写成ASCII文本。    标志以二进制格式存储：对于每个[2.x.397]，存储一个[2.x.398]位，否则存储一个[2.x.399]位。 这些位被存储为<tt>无符号字符</tt>，从而避免了字节数。它们被写入[2.x.400]的纯文本中，因此平均每输入一个比特就有3.6个比特在输出中。其他信息（神奇的数字和输入向量的元素数）也是以纯文本形式存储。因此，该格式应该是跨平台兼容的。 
* [0.x.261]*
   重新读取之前由[2.x.401]编写的一个布尔矢量，并与神奇数字进行比较。 
* [0.x.262]*
   从periodic_face_pairs_level_0重新创建周期性邻居的信息。 
* [0.x.263]*
   更新内部reference_cells向量。 
* [0.x.264]*
   与创建、细化和粗化相关的三角形具体任务的政策。 
* [0.x.265]*
   如果调用add_periodicity()，该变量将给定的周期性面对存储在第0层，以便以后在识别多网格层次的鬼单元和设置period_face_map时访问。 
* [0.x.266]*
   如果调用add_periodicity()，这个变量将存储活动的周期性面对。 
* [0.x.267]*
    [2.x.402] 内部使用的细胞迭代器函数 [2.x.403] 。  
* [0.x.268]*
   声明一些原始迭代器的迭代器类型，即迭代器也可以迭代在以前的网格细化周期中被粗化掉的单元格列表中的孔。    由于用户不应该访问我们存储数据的这些内部属性，所以这些迭代器类型被定为私有。 
* [0.x.269]*
   迭代器到第一个单元，无论是否使用，在关卡上 [2.x.404] 如果一个关卡没有单元，将返回一个过去的迭代器。 
* [0.x.270]*
   返回一个原始迭代器，该迭代器是不在关卡上的第一个迭代器。如果[2.x.405]级别是最后一个级别，那么这将返回<tt>end()</tt>。 
* [0.x.271] [2.x.406]。  
* [0.x.272]*
    [2.x.407] 内部使用的行迭代器函数 [2.x.408]   
* [0.x.273]*
   到第一行的迭代器，无论是否使用，在级别上 [2.x.409] 如果一个级别没有行，将返回一个过去的迭代器。 如果行没有单元格，即对于[2.x.410]来说，必须给出[2.x.411]参数。 当然，这也适用于上述所有其他函数。 
* [0.x.274]*
   迭代器到第[2.x.412]层的第一个使用行。    
* [2.x.413] 给定的[2.x.414]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.415]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.42]部分实际上没有高层次的单元。在这些情况下，如果[2.x.416]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.417]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.275]*
   迭代器到第一层的活动线 [2.x.418] 。    
* [2.x.419] 给定的[2.x.420]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.421]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.43]部分实际上没有高层次的单元。在这些情况下，如果[2.x.422]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.423]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.276]*
   过去的迭代器；这个迭代器用于比较具有过去或开始前状态的迭代器。 
* [0.x.277] [2.x.424].   
* [0.x.278]*
    [2.x.425] 内部使用的四重迭代器函数 [2.x.426]   
* [0.x.279]*
   迭代到给定关卡上的第一个四边形，无论是否使用。如果一个级别没有四边形，则返回一个过去式的迭代器。 如果四边形没有单元格，即对于[2.x.427]来说，不需要给出级别参数。   
* [2.x.428] 给出的[2.x.429]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.430]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.44]部分实际上没有高层次的单元。在这些情况下，如果[2.x.431]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.432]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.280]*
   迭代到第一层使用的四边形[2.x.433]。    
* [2.x.434] 给定的[2.x.435]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.436]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.45]部分实际上没有高层次的单元。在这些情况下，如果[2.x.437]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.438]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.281]*
   迭代到第一层的活动四边形 [2.x.439] 。    
* [2.x.440] 给定的[2.x.441]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.442]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.46]部分实际上没有高层次的单元。在这些情况下，如果[2.x.443]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.444]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的值。 
* [0.x.282]*
   过了终点的迭代器；这个迭代器用于比较具有过了终点或开始前状态的迭代器。 
* [0.x.283] [2.x.445].   
* [0.x.284]*
    [2.x.446] 内部使用的十六进制迭代器函数 [2.x.447].   
* [0.x.285]*
   迭代器到第一个十六进制，无论是否使用，在级别上 [2.x.448] 如果一个级别没有十六进制，将返回一个过去的迭代器。   
* [2.x.449] 给定的[2.x.450]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.451]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.47]部分实际上没有高层次的单元。在这些情况下，如果[2.x.452]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.453]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.286]*
   迭代器到第一层使用的六边形[2.x.454]。    
* [2.x.455] 给定的[2.x.456]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.457]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.48]部分实际上没有高层次的单元。在这些情况下，如果[2.x.458]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.459]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.287]*
   迭代到第一层的活动六边形[2.x.460]。    
* [2.x.461]给定的[2.x.462]参数需要对应于三角形的一个层次，也就是说，应该小于n_levels()返回的值。另一方面，对于使用[2.x.463]对象的并行计算，在全局网格的所有层次的单元上写循环通常是很方便的，即使三角形的[1.x.49]部分实际上没有高层次的单元。在这些情况下，如果[2.x.464]参数小于n_global_levels()函数的返回值，则可以接受。如果给定的[2.x.465]在n_levels()和n_global_levels()返回的值之间，那么在这个层次的三角形的本地部分不存在单元，该函数只是返回end()的结果。 
* [0.x.288]*
   过了终点的迭代器；这个迭代器用于比较具有过了终点或开始前状态的迭代器。 
* [0.x.289] [2.x.466].   
* [0.x.290]*
   (公共)函数clear()只有在三角图没有被其他用户订阅的情况下才会工作。现在，clear_despite_subscriptions()函数允许在有订阅的情况下清除三角图。    请确保，在调用这个函数时，你知道你在做什么，因为它的使用只在非常罕见的情况下是合理的。例如，当订阅是针对最初的空三角图的，并且三角图对象希望在由于输入错误而抛出断言之前释放其内存（例如在create_triangulation()函数中）。 
* [0.x.291]*
   重置三角化策略。 
* [0.x.292]*
   对于所有的单元格，设置活动单元格指数，使活动单元格知道自己是第几个活动单元格，而其他所有的单元格都有一个无效的值。这个函数在网格创建、细化和序列化之后被调用。 
* [0.x.293]*
   重置全局单元ID和全局级单元ID。 
* [0.x.294]*
   重置单元格的顶点索引的缓存。 
* [0.x.295]*
   细化所有级别上的所有单元格，这些单元格之前被标记为细化。    注意，这个函数对<tt>dim=2,3</tt>使用<tt>line->user_flags</tt>，对<tt>dim=3</tt>使用<tt>quad->user_flags。    如果在创建此对象时指定了[2.x.468]标志，该函数将返回一个产生了满足[2.x.467]"扭曲的单元格 "标准的单元格列表，在  
* [0.x.296]*
   粗化所有被标记为粗化的单元格，或者说：删除那些所有子单元格都被标记为粗化的单元格的所有子单元格，并且其他一些约束条件也成立（见该类的一般文档）。 
* [0.x.297]*
   确保一个单元格的所有子单元格或没有子单元格被标记为粗化。 
* [0.x.298]*
   将粗化单元格的唯一id转化为其索引。更多信息请参见术语表中的[2.x.469]"粗放单元格ID "条目。   
* [2.x.470] 对于串行和共享三角测量，id和index都是一样的。        对于分布式三角形的设置，两者可能不同，因为id可能对应于一个全局id，而索引对应于一个局部id。     [2.x.471] coarse_cell_id 粗略单元的唯一id。   [2.x.472] 粗略单元在当前三角测量中的索引。 
* [0.x.299]*
   将粗略单元的索引转换为其唯一的ID。更多信息请参见术语表中的[2.x.473]"粗放单元ID "条目。   
* [2.x.474]见方法coarse_cell_id_to_coarse_cell_index()的说明。     [2.x.475] coarse_cell_index 粗放单元的索引。   [2.x.476] 粗体单元的Id。 
* [0.x.300]*
   指向在不同层次上存储单元数据的对象的指针阵列。 
* [0.x.301]*
   指向三角剖分的面的指针。在1d中，它不包含任何内容，在2D中，它包含关于线的数据，在3D中，包含四边形和线。 所有这些都没有水平，因此被分开处理。 
* [0.x.302]*
   该三角形的顶点数组。 
* [0.x.303]*
   存储顶点使用的比特模式的数组。 
* [0.x.304]*
   流形对象的集合。我们只存储不属于FlatManifold类型的对象。 
* [0.x.305]*
   表示是否进行了各向异性的细化的标志。 
* [0.x.306]*
   一个决定我们是否在创建和细化网格时检查扭曲的单元的标志。 
* [0.x.307]*
   用于保存线、四边形、六边形等数字的缓存。这些数字是在细化和粗化功能结束时设置的，可以使以后的访问更加快速。在过去，每当人们想要访问这些数字之一时，就必须在所有的行上执行一个循环，例如，计算元素，直到我们碰到终端迭代器。这很耗时，而且由于访问行数等是一个相当频繁的操作，这并不是一个最佳的解决方案。 
* [0.x.308]*
   一个将边界顶点的数量与边界指标联系起来的映射。这个字段只在1d中使用。我们有这个字段是因为我们在2D和更高的版本中用面来存储边界指示器信息，在那里我们有存储面的数据的结构空间，但在1D中没有这样的面的空间。    这个字段被声明为指针是出于一个相当平凡的原因：这个类的所有其他可以被TriaAccessor层次结构修改的字段都是指针，所以这些访问器类存储了一个指向三角形的常数指针。如果这个字段（可以被[2.x.477]修改的字段不是指针，我们就不能再为TriaAccessor<0,1,spacedim>这样做。 
* [0.x.309]*
   一个将边界顶点的数量与流形指标联系起来的映射。这个字段只在1d中使用。我们之所以有这个字段，是因为在2d及以上版本中，我们将流形指示器信息与面孔一起存储，在这些结构中，我们有存储面孔数据的空间，但在1d中，没有为面孔提供这样的空间。   
* [2.x.478] 流形对象对于点来说是非常无用的，因为它们既没有被细化，也没有被映射到其内部。然而，我们允许为点存储流形ID，以便在独立于维度的程序中保持一致。    这个字段被声明为指针，是出于一个相当平凡的原因：这个类中所有可以被TriaAccessor层次结构修改的其他字段都是指针，所以这些访问器类存储了一个指向三角的常量指针。如果这个字段（可以被[2.x.479]修改的字段不是指针，我们就不能再为TriaAccessor<0,1,spacedim>这样做。 
* [0.x.310]

