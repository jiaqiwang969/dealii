include/deal.II-translator/grid/grid_refinement_0.txt
[0.x.0]*
 这个命名空间提供了一个帮助细化和粗化三角形的函数集合。尽管命名空间的名称，这些函数实际上并不[1.x.0]三角化，而只是[1.x.1]。换句话说，它们执行自适应有限元循环中典型的 "求解-估计-标记-细化 "循环中的 "标记 "部分。
* 这个命名空间中的函数形成两类。有辅助函数refine()和coarsen()。对用户来说更重要的是其他函数，它们实现了细化策略，在自适应有限元方法的文献中可以找到。关于这些方法的数学讨论，可以参考D&ouml;rfler, Morin, Nochetto, Rannacher, Stevenson等人的作品。
* 

* 
* [2.x.0] 

 
* [0.x.1]*
   返回一对双倍值，其中第一个是调整后的细化单元分数，第二个是调整后的粗化单元分数。       [2.x.1] current_n_cells 当前单元格数量。     [2.x.2] max_n_cells 最大的细胞数。如果当前细胞数[2.x.3]已经超过最大细胞数[2.x.4]max_n_cells，细胞的细化分数将被设置为零，细胞的粗化分数将被调整以减少细胞数至@ max_n_cells。如果细胞数仅在精炼时才会被超过，那么精炼和粗化分数将以相同的比例调整，以试图达到最大的细胞数。但请注意，由于[2.x.5]的细化扩散，这个数字只是一个指标。这个参数的默认值是对单元格的数量没有限制。     [2.x.6] top_fraction_of_cells 要求精炼的有效单元的比例。     [2.x.7] bottom_fraction_of_cells 要求被粗化的活动单元的比例。   
* [2.x.8] 通常情况下，你不需要明确调用这个函数。将[2.x.9] max_n_cells传递给函数refine_and_coarsen_fixed_number()或函数refine_and_coarsen_fixed_fraction()，如果有必要，它们会调用这个函数。 
* [0.x.2]*
   这个函数提供了一个策略来标记单元进行细化和粗化，目的是通过细化所有单元中的一个给定的分数来提供可预测的网格尺寸增长。    该函数接收一个细化向量[2.x.10]和两个介于0和1之间的值，表示要细化和粗化的单元的比例。它根据以下贪婪算法对单元进行标记，以便由[2.x.11]进一步处理。     [2.x.12] [2.x.13] 根据[2.x.14] [2.x.15]的降序值对单元进行排序，将具有最大细化标准的[2.x.16]倍[2.x.17]活动单元标记为细化。     [2.x.18] 将[2.x.19]乘以[2.x.20]具有最小细化标准的活动单元标记为粗化。     [2.x.21] 作为一个例子，在没有粗化的情况下，将[2.x.22]设置为1/3将导致二维的单元数大约翻倍。这是因为这1/3的单元格将被其四个子单元格所取代，从而形成[2.x.23]单元格，而其余2/3的单元格则保持不变
* 
*--因此产生了总共[2.x.24]个单元。  在三维空间中，通过细化1/7的单元格也能达到同样的效果。因此，这些值经常被使用，因为它们确保后续网格的计算成本足够快地变得昂贵，以至于花费在粗网格上的时间部分不会太大。另一方面，这部分时间也足够小，使网格适应性在每一步中不会细化太多的单元。   
* [2.x.25] 这个函数只设置粗化和细化的标志。直到你调用 [2.x.26] [2.x.27] triangulation 这个函数应该标记其单元格进行粗化和细化的三角形。     [2.x.28] criteria 每个网格单元的细化标准。输入不能是负数。     [2.x.29] top_fraction_of_cells 要精简的单元的比例。如果这个数字是零，没有单元会被精简。如果它等于1，结果将被标记为全局细化。     [2.x.30] bottom_fraction_of_cells 要被粗化的单元格的比例。如果这个数字为0，则没有单元会被粗化。     [2.x.31] max_n_cells 这个参数可以用来指定一个最大的细胞数。如果细化时超过这个数字，那么细化和粗化的比例将被调整，以达到最大的细胞数。但是要注意，由于[2.x.32]的细化扩散，这个数字只是一个指标。这个参数的默认值是对单元格的数量没有限制。 
* [0.x.3]*
   这个函数提供了一种策略，用于标记细化和粗化的单元，目的是控制误差估计的减少。    也被称为[1.x.2]或D&ouml;rfler标记，这个函数计算细化和粗化的阈值，使被标记为细化的[2.x.33]个单元占到总误差的一定比例。我们解释它的细化操作，粗化的工作原理与此类似。    让[1.x.3]成为[1.x.4]单元的标准。然后通过公式[1.x.5]计算总误差估计值 如果[1.x.6]是[2.x.34]，那么我们细化三角形[2.x.36]的最小子集[2.x.35]，使[1.x.7] 该算法由refine_and_coarsen_fixed_number()中描述的贪婪算法执行。   
* [2.x.37] 经常使用的左右两边都有方块的公式，通过实际将[1.x.8]的方块存储在向量[2.x.38]中来恢复。 从实现的角度来看，这次我们确实需要对标准数组进行排序。 就像上面描述的其他策略一样，这个函数只计算阈值，然后传递给refine()和coarsen()。     [2.x.39] tria 三角形 这个函数应该对其单元进行粗化和细化标记。     [2.x.40] criteria 对每个网格单元计算的细化准则。  输入值不能为负值。     [2.x.41] top_fraction 应该被细化的总估算值的分数。如果这个数字是零，没有单元会被细化。如果它等于1，结果将被标记为全局细化。     [2.x.42] bottom_fraction 粗化的估计值的一部分。如果这个数字是0，没有单元将被粗化。     [2.x.43] max_n_cells 这个参数可以用来指定一个最大的单元数。如果细化时超过这个数字，那么细化和粗化的比例将被调整，以达到最大的细胞数。但是要注意，由于[2.x.44]的细化扩散，这个数字只是一个指标。这个参数的默认值是对单元格的数量没有限制。     [2.x.45] norm_type 为了确定阈值，单元格子集上的综合误差被计算为这些单元格上的准则的规范。不同类型的准则可用于此目的，目前支持其中的[2.x.46]和[2.x.47]。 
* [0.x.4]*
   这个函数对三角网格的单元进行标记，以达到一个最佳的网格，这个目标函数试图在网格细化时平衡减少误差和增加数值成本。具体来说，这个函数的假设是，如果你细化一个单元[2.x.48]，其误差指标[2.x.49]由这个函数的第二个参数提供，那么子单元上的误差（所有子单元一起）将只是[2.x.50]，其中[2.x.51]是这个函数的第三个参数。这就假设了误差只是网格上的一个局部属性，可以通过局部细化来减少误差
* 
*-这个假设对插值算子来说是真实的，但对通常的Galerkin投影来说不是，尽管它对椭圆问题近似是真实的，在那里Greens函数快速衰减，这里的误差不会受到其他地方太粗的网格的影响。    有了这个，我们可以定义这个函数试图优化的目标函数。让我们假设目前的网格有[2.x.52]个单元。那么，如果我们细化误差最大的[2.x.53]单元，我们期望得到（在[2.x.54]空间维度上）[1.x.9]单元（[2.x.55]没有被细化，而我们细化的每个[2.x.56]单元产生[2.x.57]子单元。另一方面，在精炼[2.x.58]单元时，使用上面的假设，我们预计误差将是[1.x.10]，其中第一个和延伸到[2.x.59]单元，第二个延伸到将被精炼的[2.x.60]单元。请注意，[2.x.61]是[2.x.62]的增函数，而[2.x.63]是减函数。    然后，该函数试图找到目标函数[1.x.11]最小的单元格数量[2.x.64]来标记精炼。    这个函数的原理有两个方面。首先，与refine_and_coarsen_fixed_fraction()和refine_and_coarsen_fixed_number()函数相比，这个函数的特性是：如果所有的细化指标都相同（即我们已经达到了每个单元的误差平衡的网格），那么整个网格都被细化。这是基于这样的观察：具有平衡误差指标的网格是所有具有相同单元数的网格中的最优网格（即，具有最小的整体误差）。(关于这一点的证明，见R. Becker, M. Braack, R. Rannacher: "Numerical simulation of laminar flames at low Mach number with adaptive finite elements", Combustion Theory and Modelling, Vol. 3, Nr. 3, p. 503-534 1999; and W. Bangerth, R. Rannacher: "Adaptive Finite Element Methods for Differential Equations", Birkhauser, 2003.)     其次，该函数使用了这样的观察结果：理想情况下，误差表现为[2.x.65]与一些常数[2.x.66]的关系，这些常数取决于维度和有限元程度。它应该
* 
* - 给出最佳的网格细化
* 
* - 不太依赖于解的规则性，因为它是基于这样的想法，即所有的奇异点都可以通过细化解决。网格细化是基于我们要使[2.x.67]变小的想法。这与上面的函数[2.x.68]相对应。   
* [2.x.69] 这个函数最初是由Thomas Richter实现的。它遵循T.Richter, "Parallel Multigrid Method for Adaptive Finite Elements with Application to 3D Flow Problems", PhD thesis, University of Heidelberg, 2005中描述的策略。特别是见第4.3节，第42-43页。 
* [0.x.5]*
   标记所有[2.x.70]中数值超过[2.x.71]阈值的网格单元进行细化，但只标记到[2.x.72]单元。    向量[2.x.73]包含每个活动单元的非负值，按照[2.x.74]的规范顺序排序。 这些单元只被标记为细化，它们实际上没有被细化。  要做到这一点，你必须调用[2.x.75]这个函数不实现细化策略，它更像是实际策略的一个辅助函数。 
* [0.x.6]*
   标记所有[2.x.76]中的值小于[2.x.77]阈值的网格单元进行粗化。    向量[2.x.78]包含每个活动单元的非负值，按照[2.x.79]的规范顺序排序。 这些单元只被标记为粗化，它们实际上没有被粗化。要做到这一点，你必须调用[2.x.80]这个函数并不实现细化策略，它更像是实际策略的一个辅助函数。 
* [0.x.7]*
   如果带有单元格标准的向量包含负值，则抛出一个异常。 
* [0.x.8]*
   其中一个阈值参数引起麻烦。或者细化和粗化的阈值重叠了。 
* [0.x.9]

