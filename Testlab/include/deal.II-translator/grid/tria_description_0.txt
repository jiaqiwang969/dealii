include/deal.II-translator/grid/tria_description_0.txt
[0.x.0]*
 CellData类（以及相关的SubCellData类）用于在通过[2.x.0]创建三角图时提供全面但最低限度的单元描述。 具体来说，每个CellData对象
* 
* - 描述三角测量中的一个单元
* 
* 有成员变量用于[2.x.1]顶点的索引（顶点的实际坐标在传递给[2.x.2]的单独向量中描述，因此CellData对象只需要将索引存储到该向量中），单元的材料ID，可以在应用中用来描述单元属于领域的哪一部分（见[2.x.3 ]"关于材料ID的词汇表条目"），以及一个流形ID，用于描述负责该单元的几何对象（见[2.x.4]"关于流形ID的词汇表条目"），以描述该对象所属的流形。
* 当作为SubCellData类的成员时，这个结构也被用来表示面和边的数据。在这种情况下，对象的模板参数[2.x.5]将小于三角形的尺寸[2.x.6]。如果是这样，那么#vertices数组代表了传递给[2.x.7]的一个单元格的一个面或边的顶点的索引。此外，对于面来说，材料id没有任何意义，[2.x.8]字段被重新用来存储一个[2.x.9]来代替指定面或边属于边界的哪一部分（见[2.x.10] "边界id的词汇条"）。
* 一个显示该类如何使用的例子是在 [2.x.12] 的 [2.x.11] 函数中。在实现GridGenerator命名空间的功能时，还有很多用例。
* 

* 
* [2.x.13] 

* 
* [0.x.1]*
   这个单元的顶点的索引。这些指数对应于传递给[2.x.14]的顶点位置向量中的条目。  
* [0.x.2]*
   此单元的材料或边界指标。  这个字段是一个联合体，存储[1.x.0]边界或材料ID，取决于当前对象是用来描述一个单元（在CellData对象的矢量中）还是一个面或边（作为SubCellData对象的一部分）。 
* [0.x.3]*
     被描述的单元格的材质ID。关于如何使用这个字段的例子，请参见CellData类的文档。        这个变量只有在当前对象被用来描述一个单元时才能使用，即如果[2.x.15]等于一个三角形的尺寸[2.x.16]。   
* [0.x.4]*
     被描述的面或边的边界ID。关于如何使用这个字段的例子，请参见CellData类的文档。        这个变量只能在当前对象用于描述一个面或边的情况下使用，也就是说，如果[2.x.17]小于三角形的尺寸[2.x.18]。在这种情况下，这个变量所属的CellData对象将是SubCellData对象的一部分。   
* [0.x.5]*
   该对象的歧管标识符。这个标识符应该被用来识别这个对象所属的流形，这个对象将从流形中收集关于细化后如何添加点的信息。    关于如何使用这个字段的例子，请参见CellData类的文档。 
* [0.x.6]*
   默认构造函数。将成员变量设置为以下值。
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
* 
* -顶点指数为无效值
 

* 
 

* 
 

 
* 
* - 边界或材料ID为零（边界或材料ID的默认值）。
* 

* 
* 

* 
* 

 
* 
* - 歧管ID为[2.x.19]。  
* [0.x.7]*
   比较运算符。 
* [0.x.8]*
   使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据读入或写入一个流中，以便进行序列化。 
* [0.x.9]*
 SubCellData类在通过[2.x.20]创建三角形时用于描述网格边界的面和边的信息，它包含描述边界边和边界四边形的成员变量。
* 该类没有模板参数，既可用于描述2D的边界边（在这种情况下，[2.x.21]成员变量的内容被忽略），也可用于描述3D的边界边和面（在这种情况下，[2.x.22]和[2.x.23]成员都可以使用）。它也被用作1d中[2.x.24]的参数，其中当前类型的对象的内容被简单地忽略。
* 默认情况下，[2.x.25]只是将默认的边界指标和流形指标分配给网格边界的边和四边形。(参见术语表中[2.x.26]的 "边界标识 "和[2.x.27]的 "流形标识 "条目，以了解更多关于它们所代表的信息)。因此，它不是[1.x.1]明确描述边界对象的属性。在所有情况下，这些属性也可以在以后的时间里设置，一旦三角化已经被创建。另一方面，有时在创建时描述边界指标或流形ID也很方便。在这些情况下，可以通过在[2.x.28]和[2.x.29]向量中填充CellData<1>和CellData<2>对象来使用当前类，这些对象对应于边界边缘和四边形，对于这些对象应该使用默认值以外的属性。
* [2.x.30]和[2.x.31]向量中的每个条目需要对应于由传递给[2.x.32]的CellData对象向量所描述的单元格的边或四边，即每个条目中存储的顶点指数需要对应于具有相同顶点指数集的三角形的边或面，且顺序相同。对于这些边界边或四边形，可以设置[2.x.33]和[2.x.34]中的一个或两个。
* 也有一些用例，人们可能想设置[1.x.2]边或面的流形ID。这种由其顶点指数识别的面也可能出现在[2.x.35]和[2.x.36]向量中（尽管这些成员变量的名称不同）。然而，这显然不允许设置边界ID（因为该对象实际上不是边界的一部分）。因此，为了有效，内部边缘或面的[2.x.37]需要等于[2.x.38] 。
* 

* 
* [2.x.39] 

* 
* [0.x.10]*
   一个CellData<1>对象的向量，描述2D或3D三角形的边缘的边界和流形信息。    这个向量不能用于创建1d三角形。 
* [0.x.11]*
   一个CellData<2>对象的向量，描述三维三角形的四边形的边界和流形信息。    这个向量不能用于创建1d或2d三角形。 
* [0.x.12]*
   判断上述可能不会在给定维度中使用的成员变量是否真的为空。换句话说，当[2.x.42]等于1时，此函数返回[2.x.40]和[2.x.41]是否都是空向量，当[2.x.44]等于2时，[2.x.43]向量是否为空。 
* [0.x.13]*
 一个专门用于结构描述的命名空间，可以在[2.x.45]中使用。

* 
* [0.x.14]*
   Triangulations的配置标志。  设置可以用位法OR来组合。 
* [0.x.15]*
     默认设置，其他选项被禁用。   
* [0.x.16]*
     这个标志需要被设置以使用几何多网格功能。这个选项需要额外的计算和通信。   
* [0.x.17]*
   每个本地相关单元所需的信息，存储在Description中，并在构建三角结构时使用。该结构存储了单元ID、子域ID和水平子域ID，以及与manifold_id和boundary_id相关的信息。   
* [2.x.46] 与[2.x.47]类似，该结构也存储单元格的信息。然而，与[2.x.48]不同的是，它还存储一个唯一的id、分区信息以及与单元格面和边相关的信息。 
* [0.x.18]*
     使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据读入或写入一个流中，以便进行序列化。   
* [0.x.19]*
     比较运算符。   
* [0.x.20]*
     单元的唯一CellID。   
* [0.x.21]*
     单元的subdomain_id。   
* [0.x.22]*
     该单元格的level_subdomain_id。   
* [0.x.23]*
     单元的Manifold id。   
* [0.x.24]*
     该单元的所有行的Multifold id。       
* [2.x.49] 仅用于2D和3D。   
* [0.x.25]*
     单元中所有面的四边形的集合体ID。       
* [2.x.50] 仅用于三维。   
* [0.x.26]*
     单元的所有非内部面的面号和边界ID的列表。   
* [0.x.27]*
   在[2.x.51]中使用的数据。  
* [0.x.28]*
     使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据读入或写入一个流中，以便进行序列化。   
* [0.x.29]*
     比较运算符。   
* [0.x.30]*
     本地相关的粗网格三角测量的单元格。   
* [0.x.31]*
     本地相关的粗网格三角结构的顶点。   
* [0.x.32]*
     为每个本地相关的粗网格单元提供相应的全局[2.x.52]的列表。   
* [0.x.33]*
     cell_infos[i]包含第i层的每个本地相关单元的CellData。   
* [0.x.34]*
     用于创建此结构的MPI通信器。它将与Triangulation内部的通信器进行比较，如果不匹配则抛出断言。       
* [2.x.53]请注意这是必要的，因为[2.x.54]中的通信器是常量，在构造函数被调用后不能被改变。   
* [0.x.35]*
     在构建三角形时要使用的属性。   
* [0.x.36]*
     网格平滑的类型。   
* [0.x.37]*
   一个用于[2.x.55]实用函数的命名空间。   
* [2.x.56]   
* [0.x.38]*
     从一个给定的分区三角形`tria`和一个指定的过程中构造[2.x.57]。    输入的三角图可以是类型为[2.x.58]的串行三角图，它已被着色（子域_id和/或level_subdomain_id已被设置）或类型为[2.x.59]的分布式三角图，其中分区被采用而不被改变。         [2.x.60] tria 分布式输入三角图。     [2.x.61] comm 要使用的MPI_Communicator。在[2.x.62]的情况下，通信器必须匹配。     [2.x.63] settings 参见设置枚举器的描述。     [2.x.64] my_rank_in 构造 指定等级的描述（仅适用于已被[2.x.65]等函数分割的序列三角图） [2.x.66] 用于设置三角图的描述。       
* [2.x.67] 如果在设置中设置了construct_multigrid_hierarchy，则必须用limit_level_difference_at_vertices设置源三角形。   
* [0.x.39]*
     与上述函数类似，但活动单元的所有者由单元向量提供（另见[2.x.68]和[2.x.69] 该函数允许重新划分分布式三角测量对象。       
* [2.x.70] 从矢量中提取通讯器 [2.x.71] 。        
* [2.x.72] 三角测量[2.x.73]可以在[2.x.74]的通信器的子通信器上设置，所有不属于该子通信器的进程需要用特殊目的通信器MPI_COMM_NULL设置本地三角测量。       
* [2.x.75]目前没有构建多网格层次，因为[2.x.76]只描述了活动层次的划分。   
* [0.x.40]*
     构建一个[2.x.77] 与上面的函数不同，这个函数也负责创建一个序列三角形，并负责其分区（通过调用提供的[2.x.78]对象）。在内部，只有选定的进程（每一个n-th/每一个大小为group_size的组的根）才会为其组中的所有进程创建一个串行三角形和[2.x.79]，这是被通报的。       
* [2.x.80] 合理的组大小是一个NUMA域的大小或一个计算节点的大小。         [2.x.81] serial_grid_generator 一个创建串行三角形的函数。     [2.x.82] serial_grid_partitioner 一个可以分割串行三角图的函数，即设置活动单元的sudomain_ids。      该函数的第一个参数是一个串行三角图，第二个参数是MPI通信器，第三个参数是组的大小。     [2.x.83] comm MPI communicator。     [2.x.84] group_size 每个组的大小。     [2.x.85] smoothing 网格平滑类型。     [2.x.86] setting 参见设置枚举器的描述。     [2.x.87] 用于设置三角测量的描述。       
* [2.x.88] 如果在设置中设置了construct_multigrid_hierarchy，[2.x.89]参数会被扩展为limit_level_difference_at_vertices标志。   
* [0.x.41]

