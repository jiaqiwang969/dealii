include/deal.II-translator/grid/grid_generator_0.txt
[0.x.0]*
 这个命名空间提供了一个函数集合，用于为一些基本的几何体生成三角图。
* 其中一些函数收到一个标志[2.x.0]（见[2.x.1]"关于着色的词汇条"）。如果设置了这个标志，边界的部分就会收到不同的[2.x.2]"边界指示器"，允许它们被区分开来，以便评估不同的边界条件。
* 如果域是弯曲的，应该按照适当的Manifold描述进行细化的每个域部分将收到不同的[2.x.3]"流形指标"，并且正确的Manifold描述符将被附加到三角图中。请注意，如果你以后对三角测量进行转换，你必须确保将正确的新Manifold附加到三角测量中。
* 

* 
* [2.x.4] 

* 
* [0.x.1]*
    [2.x.5] 为基本几何形状创建网格  
* [0.x.2]*
   用一个恰好由一个单元组成的超立方体（一维的线，二维的方，等等）初始化给定的三角结构。超立方体的体积是目前维数中的张量乘积区间[2.x.6]，其中极限作为参数给出。它们默认为零和一，然后产生单位超立方体。    如果参数[2.x.7]是假的，那么2d和3d的所有边界指标都被设置为零（默认边界指标）。如果它是真，那么边界就会像hyper_rectangle()中那样被[2.x.8]"着色"。在1d中，指标总是被着色的，见hyper_rectangle()。     [2.x.9] 如果[2.x.10] < [2.x.11] 这将在第一个[2.x.13]坐标方向创建一个[2.x.12]维的对象，嵌入到[2.x.14]维的空间，其余的条目设置为零。例如，一个<tt>Triangulation [2.x.15] 将是xy平面上的一个正方形，z=0。对于由多个单元组成的粗略网格，也请参见subdivided_hyper_cube()。如果需要在不同的序数方向上有不同的长度，参见hyper_rectangle()。     [2.x.16] 当调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.3]*
   创建一个[2.x.17] -[1.x.0]（即2D中的三角形，或3D中的四面体），其角为[2.x.18]。由于deal.II不支持三角形和四面体单元，输入参数所描述的单面体通过增加边缘、面和单面体中点被细分为四边形和六面体，从而得到一个由[2.x.19]四边形或六面体单元组成的网格。    [2.x.20] 参数包含一个向量，其中包含所有定义单线角的d+1个顶点。它们必须以这样的顺序给出，即从第一个顶点到其他每个顶点的向量形成一个右手系统。    在二维和三维中生成的网格是。     [2.x.21] [2.x.22] [2.x.23] tria 要创建的三角结构。在调用此函数时，它需要是空的。     [2.x.24] 顶点 单纯线的dim+1角。   
* [2.x.25] 为<tt>三角法[2.x.26] <tt>三角法[2.x.27] 实现。  
* [0.x.4] 创建一个具有所提供的参考单元形状的单一单元的（粗略）网格。这是上面hyper_cube()和simplex()函数的一个概括。 
* [0.x.5]*
   与hyper_cube()相同，但不同的是，不仅创建一个单元，而且每个坐标方向被细分为[2.x.28]个单元。因此，填充给定体积的单元的数量是<tt>repetitions<sup>dim</sup></tt>。    如果[2.x.29]<[2.x.30]，这将在第一个[2.x.32]坐标方向创建一个[2.x.31]维度的对象，嵌入到[2.x.33]维度的空间，其余条目设置为零。例如，[2.x.34] 三角形将是xy平面上的一个正方形，z=0。 [2.x.35] 在调用此函数时，作为参数传递的三角形需要为空。     [2.x.36] tria 要创建的三角结构。调用此函数时，它必须为空。     [2.x.37] repetitions 一个无符号整数，表示在每个方向上生成的单元数。     [2.x.38] left 用于创建超立方体的区间的下限。     [2.x.39] 右 用于创建超立方体的区间的上界。     [2.x.40] colorize 如果设置为 "true"，则指定不同的边界ID。 
* [0.x.6]*
   从两个斜对角的角点[2.x.41]和[2.x.42]创建一个坐标平行的砖，如果[2.x.43]标志是[2.x.44] ，则分配边界面的[2.x.45]，这样在[2.x.46]x方向的低的是0，高的是1。[2.x.47]的面的指标是2和3，[2.x.48]的是4和5。这与GeometryInfo类的文档中规定的立方体的单位方块的面数相对应；也可参见[2.x.49]"关于着色的词汇表条目"。  然而重要的是，在3D[2.x.50]中，"着色 "并没有设置[2.x.51][1.x.1]的边界id，而只是设置了[1.x.2]的边界id，因为每条边界边是在两个面之间共享的，在这种情况下，不清楚应该如何设置一条边的边界ID。    此外，如果[2.x.52]是[2.x.53]，则根据单元格的中心所处的八度空间来分配材料id：对于任何坐标方向[1.x.3]来说，处于右半空间会增加2<sup>i</sup>。例如，假设超矩形的中心位于原点，一个中心点为（1,-1,1）的单元产生一个材料ID 5。没有为单元格设置流形id。    如果[2.x.54]<[2.x.55]，这将在第一个[2.x.57]坐标方向创建一个[2.x.56]维的对象，嵌入到[2.x.58]维空间，其余条目设置为零。例如，一个<tt>三角形[2.x.59]将是xy平面上的一个矩形，z=0，由两个对角[2.x.60]和[2.x.61][2.x.62]定义。调用此函数时，作为参数传递的三角形需要为空。 
* [0.x.7]*
   从两个斜对角的角点[2.x.63]和[2.x.64]创建一个坐标平行的砖块，坐标方向[2.x.65]的单元格数量由整数<tt>repetitions[i]<tt>给出。    为了得到与域的长宽比不同的单元，使用不同的细分数，由不同坐标方向的[2.x.66]给出。如果[2.x.67]的标志是[2.x.68]，则分配曲面的[2.x.69]，这样[2.x.70]中较低的是0，较高的是1（左边和右边的垂直面）。2.x.71]中表面的指标是2和3，[2.x.72]的指标是4和5。 此外，材料ID是根据单元格的中心所在的八度空间来分配的：对于任何坐标方向[1.x.4]来说，在右半面都会增加2<sup>i</sup>（见[2.x.73]"关于着色的词汇条"）。  例如，中心点（1,-1,1）产生一个材料id 5（这意味着在2d中只有材料id 0,1,2,3被分配，与重复的数量无关）。    请注意，[2.x.74]标志在1d中被忽略，并被假定为始终为真。这意味着边界指标在左边是0，在右边是1。 详见[2.x.75]。    如果[2.x.76]<[2.x.77]，这将在第一个[2.x.79]坐标方向创建一个[2.x.78]维度的对象，嵌入到[2.x.80]维度空间，其余条目设置为零。例如，一个<tt>三角法[2.x.81]将是xy平面上的一个矩形，z=0，由两个相对的角[2.x.82]和[2.x.83]定义。    
* [2.x.84] 关于这个函数的使用实例，见[2.x.85]教程程序。     [2.x.86] tria 要创建的三角结构。在调用此函数时，它需要是空的。     [2.x.87] Repetitions [2.x.88] 正值的向量，表示在该方向上生成的单元的数量。     [2.x.89] p1 第一个角点。     [2.x.90] p2 第二个角点与[2.x.91]相对 [2.x.92] colorize 如果设置为真，则指定不同的边界id。与hyper_rectangle()函数适用的注释相同。 
* [0.x.8]*
   和前面的函数一样。然而，这里的第二个参数并不表示每个坐标方向上的细分数量，而是表示每个坐标方向上的步长序列。因此，域将在坐标方向[2.x.94]上被细分为[2.x.93]个单元，宽度为[2.x.95] 个单元。    因此，这个函数适合于生成分级网格，单元集中在某些区域，而不是像前一个函数生成的均匀细分的网格。    步长必须加到由点[2.x.96]和[2.x.97]指定的超矩形的尺寸。  
* [0.x.9]*
   就像之前的函数一样，但有以下变化：[2.x.98]的material_id参数是一个dim-dimensional数组，对于每个单元，它指示应该设置哪个material_id。此外，这是主要的新功能，如果一个单元格的 material_id 是 <tt>(unsigned char)(-1)</tt>，那么这个单元格就会从三角结构中删除，也就是说，域中会有一个空白。   
* [2.x.99]如果你需要大量的孔，你可以考虑cheese()。 
* [0.x.10]*
   \brief 带矩形孔的矩形域 域本身是矩形的，非常像由subdivided_hyper_rectangle()生成的。参数[2.x.100]指定了域在每个坐标方向上应该有多少个方孔。该方向上的网格单元总数是这个数字的两倍加一。    一个方向上的孔的数量必须至少是一个。    一个有二乘三孔的例子是 [2.x.101] 如果 [2.x.102] < [2.x.103] 这将在第一个 [2.x.105] 坐标方向创建一个 [2.x.104] 维度的对象，嵌入到 [2.x.106] 维度的空间，其余条目设置为零。     [2.x.107] tria 要创建的三角结构。在调用此函数时，它需要是空的。     [2.x.108] holes 在每个dim方向上的孔的正数。 
* [0.x.11]*
   \brief 带有一个（偏移）圆柱形孔的矩形板。    生成一个带有（偏移）圆柱形孔的矩形板。该几何体由2个区域组成。  第一个是一个正方形区域，长度为[2.x.109]，半径为[2.x.110]的孔。  这个区域的单元格将有流形id为[2.x.111]的TransfiniteInterpolationManifold连接到它们。此外，洞的边界面将与PolarManifold（二维）或CylindricalManifold（三维）相关。这个区域的中心可以通过[2.x.112]规定，即孔的轴线将位于[2.x.113]处。  第二个区域描述了散装材料的剩余部分。它通过填充参数[2.x.114] [2.x.115] [2.x.116]和[2.x.117]指定，这个区域的所有单元将有一个FlatManifold连接到它们。  板块的最终宽度将是<code>padding_left + 2*outer_radius + padding_right</code>，而其长度为<code>padding_top + 2*outer_radius + padding_bottom</code>。    下面是非对称网格（经过一次全局细化，根据流形ID着色），分别是2D和3D的。    \htmlonly <style>div.image img[src="plate_with_a_hole.png"]{width:25%;}</style> \endhtmlonly [2.x.118] \htmlonly <style>div.image img[src="plate_with_a_hole_3D.png"]{width:25%;}</style> \endhtmlonly [2.x.119 ] 在3D中，三角形将在Z方向上被挤压，总高度为[2.x.120]使用[2.x.121]片（最小为2）。
* 如果[2.x.122]标志是[2.x.123]，则边界面的边界_id被分配为，在x方向上的低位是0，高位是1（见[2.x.124]"关于着色的词汇条"）。  y方向的面的指标是2和3，z方向的是5和6。孔洞边界的指标是4。     [2.x.125] 是要创建的三角形。在调用这个函数时，它需要是空的。
* [0.x.12]*
   生成一个由通道与圆柱体组成的网格。这是纳维-斯托克斯求解器的一个常见基准。该几何体包括一个尺寸为[2.x.126]的通道（其中[2.x.127]尺寸在二维中被省略），该通道有一个圆柱体，平行于[2.x.128]轴，直径为[2.x.129]，中心为[2.x.130]。该通道有三个不同的区域。   [2.x.131] [2.x.132] 如果[2.x.133]大于零，那么就有那么多以圆柱体为中心的壳，[2.x.134] [2.x.135]是壳和三角形其他部分之间的混合区域，以及[2.x.136] [2.x.137]是由笛卡尔单元组成的散装区域。[2.x.138] [2.x.139] 由于圆柱体略微偏离通道中心，这种几何形状导致了中等雷诺数下的涡流脱落。下面是二维的网格（没有额外的全局细化）：[2.x.140]和三维的网格：[2.x.141]由此产生的三角形使用了三个流形：一个PolarManifold（二维）或CylindricalManifold（三维），流形ID为[2.x.142]，一个TransfiniteInterpolationManifold，流形ID为[2.x.143]，其他地方为FlatManifold。关于这一主题的更多信息，请参见[2.x.144]"流形指标的词汇表条目"。  圆柱体和周围贝壳上的单元面的流形指标为[2.x.145]，而与贝壳相邻的单元体（如果不存在，则为圆柱体）的流形指标为[2.x.146] 。换句话说：这个网格使用TransfiniteInterpolationManifold来平滑地从壳（用[2.x.147]生成）过渡到体块区域。所有其他单元体和面的流形ID为[2.x.148]并使用FlatManifold。所有id为[2.x.149]的单元都是与坐标轴对齐的矩形棱镜。    下图显示了两次全局细化后的部分二维网格（使用该函数的所有默认参数）。流形标识[2.x.150]的单元为橙色（极坐标流形标识），流形标识[2.x.151]的单元为黄色（无限插值流形标识），流形标识[2.x.152]的单元为青色： [2.x.153] [2.x.154] tria 要创建的三角形。调用此函数时必须为空。     [2.x.155] shell_region_width 围绕圆柱体的壳层的宽度。  这个值应该在 [2.x.156] 和 [2.x.157] 之间；默认值是 [2.x.158] 。     [2.x.159] n_shells 在壳层中使用的壳的数量。     [2.x.160] skewness 控制壳与圆柱体的接近程度的参数：见[2.x.161]中给出的数学定义 [2.x.162] colorize 如果设置为true，则分配不同的边界ID。关于边界指示器的更多信息见[2.x.163]"本词汇表条目"。  左边的边界（在 [2.x.164] 处）被分配一个 [2.x.165] 的id，右边的边界（在 [2.x.166] 处）被分配一个 [2.x.167] 的id，圆柱体的边界被分配一个 [2.x.168] 的id，而通道壁被分配一个 [2.x.169] 的id 。    更多信息请参见原始论文。 
* [1.x.5]
   
* [0.x.13]*
   一个一般的 [2.x.170] 
* 
* - 浸入[2.x.172]的一般单元（如果dim为1，则为线段，如果[2.x.171]为2，则为四边形，如果[2.x.172]为3，则为六面体）。
* 
* - 膨胀空间。用户有责任按照正确的顺序提供顶点（参见GeometryInfo类的文档），因为顶点是按照给出的顺序存储的。确保单元格的体积为正值也很重要。    如果参数[2.x.174]是假的，那么2d和3d的所有边界指标都被设置为零。如果是true，边界就会像hyper_rectangle()中那样被着色（见[2.x.175]"关于着色的词汇表条目"）。  在1d中，指标总是被着色的，见hyper_rectangle()。     [2.x.176] tria 将被创建的三角形 [2.x.177] vertices 单元的2^dim顶点 [2.x.178] colorize 如果为真，设置不同的边界id。 
* [0.x.14]*
   一个平行四边形。第一个角点是原点。接下来的[2.x.179]顶点是第二个参数中给出的顶点，最后一个顶点将是连接原点和这些点的两个向量之和。着色的方式与hyper_rectangle()中的方式相同。   
* [2.x.180] 这个函数只在2d中实现。     [2.x.181] tria 要创建的三角结构。在调用此函数时，它需要是空的。     [2.x.182] corners 平行四边形的第二个和第三个顶点。     [2.x.183] colorize 如果为真，则指定不同的边界ID。参见 [2.x.184] "关于着色的词汇表条目"）。 
* [0.x.15]*
   一个平行四边形。第一个角点是原点。[2.x.185] 相邻的点是描述平行四边形相对于原点的边缘的向量。额外的点是这些凹陷向量的总和。着色是根据hyper_rectangle()进行的。   
* [2.x.186] 这个函数默默地将单元格上的顶点重新排序为lexicographic排序（见[2.x.187] ）。  换句话说，如果顶点的重新排序确实发生了，[2.x.188]的数组中的顶点排序将不再是指同一个三角形。     [2.x.189] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.16]*
   一个细分的平行四边形。第一个角点是原点。[2.x.190] 相邻的dim点是描述平行四边形相对于原点的边缘的向量。其他的点是这些dim向量的总和。变量[2.x.191]指定了每个[2.x.192]方向上的细分数量。着色是根据hyper_rectangle()来完成的。     [2.x.193] 调用此函数时，作为参数传递的三角图需要为空。 
* [0.x.17]*
   一个细分的平行四边形，即与上述相同，但每个[2.x.194]方向上的细分数量可能不同。  着色是根据hyper_rectangle()进行的。     [2.x.195] 调用此函数时，作为参数传递的三角图需要为空。 
* [0.x.18]*
   一个被细分的平行四边形。     [2.x.196] tria 要创建的三角结构。在调用此函数时，它需要是空的。     [2.x.197] origin 平行四边形的第一个角。     [2.x.198] edges 描述来自[2.x.200]的边的长度和方向的[2.x.199]张量数组 [2.x.201] subdivisions 每个dim方向上的subdivisions的数量。  每个条目必须是正数。一个空的向量等同于每个方向上的一个细分。     [2.x.202] colorize 如果设置为 "true"，则分配不同的边界ID（见[2.x.203]"关于着色的词汇表条目"）。   
* [2.x.204] 对[2.x.205]和[2.x.206]的所有组合实施。    
* [2.x.207] 你可能需要帮助编译器，在调用此函数时明确指定两个模板参数。 
* [0.x.19]*
   超立方体，周围有一层超立方体。参数[2.x.208]和[2.x.209]给出了所有坐标方向上的内超立方体的下限和上限。  [2.x.210]标记了层单元的大小。    如果标志[2.x.211]被设置，外部单元根据以下方案获得材料ID：在（+/-）x方向1/2、y方向4/8、z方向16/32的内立方体上延伸。在角落和边缘（3D），使用一个比特OR操作来获得这些值，（也见[2.x.212]"关于着色的术语条目"）。    目前只有2d和3d版本可用。     [2.x.213] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.20]*
   用几个[2.x.214]"粗网格单元 "初始化给定的三角形，这些单元覆盖一个超球，即2D中的圆或3D中的球，围绕[2.x.215]与给定的[2.x.216] 该函数用于[2.x.217] 。    为了避免边界处的退化单元，圆被五个单元三角化，而在三维中，球被七个单元细分化。具体来说，这些单元是中心的一个单元加上这个中心单元的每个面上的一个 "帽 "单元。这就保证了在反复细化的情况下，外部边界的任何一个单元都不会退化到有一个接近180度的内部角度，而不是像人们可能只用一个正方形（或立方体）来近似领域的情况。  中心单元的直径的选择是为了在一次细化后使边界单元的长宽比得到优化。    该函数被声明存在于所有空间维度的三角形中，但如果在1d中调用，会抛出一个错误。    默认情况下，manifold_id在边界面设置为0，在边界单元设置为1，在中心单元和内部面设置为[2.x.218]。    为了在细化时正确放置边界顶点，并能够使用高阶映射，边界面默认附加了一个球形流形。然而，事实证明，这种策略可能不是为超球创建良好网格的最佳策略。在[2.x.219]的 "扩展的可能性 "一节中，对如何构建更好的网格以及需要做什么进行了广泛的讨论。将参数`attach_spherical_manifold_on_boundary_cells`设置为true，可以将SphericalManifold流形也附加到边界附近的单元上，而不仅仅是边界面。   
* [2.x.220] 由于这可能是用户通常最早考虑的创建具有曲线边界的网格的函数之一，让我们也来评论一下经常令人困惑的一个方面。也就是说，人们看到的并不总是实际发生的情况。具体来说，如果你使用默认选项，用[2.x.221]这样的函数输出粗略的网格，那么人们一般不会看到边界上的曲面。    这是因为大多数文件格式默认只存储顶点位置，隐含的理解是单元由这些顶点组成，并以直边为界。同时，这个函数将SphericalManifold对象附加到边界面的事实意味着，至少在内部*，边缘确实是弯曲的。如果你想看到它们，你需要确保你用来输出网格的函数实际上是将边界面绘制成曲线，而不是仅由两个端点的位置来描述的直线。例如，如果你在[2.x.223]结构中设置相应的标志，[2.x.222]就可以做到这一点。然而，你是否真的在曲线单元上进行计算*，这是一个完全独立的考虑。在典型的有限元计算中，我们必须计算积分，这些积分是通过使用参考单元的映射将实际单元转换回来计算的。使用什么样的映射决定了这些内部计算的单元的形状。例如，使用广泛使用的[2.x.224]映射（隐含在[2.x.225]中使用），积分总是发生在假定只有顶点位置描述的直线边界的单元上。换句话说，如果使用这样的映射，那么域的单元就真的有直的边缘，而不管这些边缘的流形描述如何，也不管生成输出时的标志是什么。综上所述，有必要区分三件事。(i)附加在网格中物体上的流形描述；(ii)用于集成的映射；以及(iii)用于输出网格图形信息的风格。所有这些都可以或多或少地独立选择，你所看到的可视化的东西不一定就是正在发生的。     [2.x.226] 调用此函数时，作为参数传递的三角形需要为空。 
* [0.x.21]*
   这是一个替代hyper_ball的方法，在2D中使用12个单元，在3D中使用32个单元，这样可以更好地平衡外部弯曲边界周围的单元和内部的单元的大小。网格是基于[2.x.227]所使用的单元，并进行适当的复制和旋转以填充整个球。    下面的图片显示了二维（左）和三维的网格结果： [2.x.228] 默认情况下，manifold_id在边界面设置为0，在边界单元设置为1，[2.x.229] 在中心单元和内部面设置为1。     [2.x.230] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.22]*
   生成一个二维网格，该网格由单元格和一个移位 [2.x.231] 的副本组成。根据所传递的标志，右边或左边的正方形将被旋转 [2.x.232] 。这样就可以产生一个网格，其中一个正方形可能包含一个与另一个正方形的相邻边的切向（因此也是相反的法向）的边。    从实用的角度来看，这种网格并没有太大用处。出于调试的目的，它可以用来检查矢量或张量有限元的方向问题。   
* [2.x.233] 如果[2.x.234]网格的方向一致。     [2.x.235] tria 输入的三角剖面。   [2.x.236] rotate_left_square [2.x.237] 如果左边的正方形被旋转 [2.x.238] .    [2.x.239] rotate_right_square [2.x.240] 如果右边的正方形被[2.x.241] 旋转。 
* [0.x.23]*
   生成一个由单位立方体和一个移位 [2.x.242] 的副本组成的三维网格。根据所传递的标志，右边或左边的立方体（当看到正向的(x,z)平面时）包含一个不是标准方向的面和/或被 [2.x.243] , [2.x.244] 或 [2.x.245] 旋转过的面。    从实用的角度来看，这个网格没有太大用处。出于调试的目的，它可以用来检查矢量或张量的有限元的方向问题。     [2.x.246] tria 输入的三角形网格。   [2.x.247] face_orientation [2.x.248] 如果该面不是标准方向。   [2.x.249] face_flip [2.x.250] 如果面被旋转+180度 [2.x.251] face_rotation [2.x.252] 如果面被旋转（另外）+90度 [2.x.253] manipulate_left_cube [2.x.254] 如果左侧立方体要被重新排序。如果`false`，则是右方的立方体。 
* [0.x.24]*
   创建一个超球体，即在[2.x.255]维度上的球的表面。这个函数只存在于dim+1=spacedim的2和3空间维度。(要创建一个球的网格，请使用[2.x.256]默认情况下，三角形的所有流形id被设置为零，并且一个SphericalManifold被附加到网格上。    下面的图片是用以下方法生成的。 
* [1.x.6]
* 参见[2.x.257]"流形的文件模块"，以了解更多细节。     [2.x.258] [2.x.259] [2.x.260] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.25]*
   这个函数产生一个与相对于[2.x.261]的正交的超球体，它包含了2d的三个元素和3d的四个元素。网格的内部点的选择是为了平衡内部点周围的单元中从参考坐标到实坐标的映射的最小单值，这相当于一个高的网格质量。    最终三角化的边界指标是：曲线边界为0，切割面为1。弯曲边界的流形ID被设置为0，并且一个SphericalManifold被附加到它。    由此产生的二维和三维网格看起来如下。   [2.x.262] [2.x.263] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.26]*
   这个函数在[2.x.264]周围产生一个半超球，它在2d中包含4个元素，在3d中包含6个。切割面垂直于[1.x.7]轴。    最终三角化的边界指标为：弯曲边界为0，切割面为1。弯曲边界的流形ID被设置为0，并且一个SphericalManifold被连接到它。     [2.x.265] 调用此函数时，作为参数传递的三角剖面需要为空。 
* [0.x.27]*
   创建一个[2.x.266]维圆柱体，其中[2.x.267]-轴作为圆柱体的轴。在这个函数中，圆柱体被定义为一个（ [2.x.268] ）。
* 
*-1）维的圆盘，其给定的[2.x.269]沿着圆柱体的轴线（即第一坐标方向）挤压。因此，在三维空间中，圆柱体从`x=-半长`延伸到`x=+半长`，它在[2.x.270]的投影是一个半径为[2.x.271]的圆。在二维空间中，圆柱体是一个从`x=-半长`到`x=+半长`，从`y=-半径`到`y=半径`的矩形。    边界按照以下方案着色：0代表圆柱体的外壳，1代表左手面，2代表右手面（见[2.x.272]"关于着色的术语条目"）。    圆柱体外壳的流形ID被设置为0，并将一个CylindricalManifold连接到它。     [2.x.273] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.28]*
   创建一个[2.x.274]维圆柱体，其中[2.x.275]-轴作为圆柱体的轴。在本函数中，圆柱体被定义为一个（ [2.x.276] ）。
* 
*-1）的维度盘，其给定的[2.x.277]沿着圆柱体的轴线（即第一坐标方向）挤压。因此，在三维空间中，圆柱体从`x=-半长`延伸到`x=+半长`，它在[2.x.278]的投影是一个半径为[2.x.279]的圆。在二维空间中，圆柱体是一个从`x=-半长`到`x=+半长`，从`y=-半径`到`y=半径`的矩形。这个函数只在dim==3时实现。    边界按照以下方案着色：0代表圆柱体的外壳，1代表左手面，2代表右手面（见[2.x.280]"关于着色的词汇表条目"）。    圆柱体的流形ID被设置为0，并将一个CylindricalManifold连接到它。     [2.x.281] [2.x.282] tria 要创建的三角剖面。在调用此函数时，它需要是空的。     [2.x.283] x_subdivisions 一个正整数，表示在x方向上生成的单元的数量。默认圆柱体的x_repetitions=2。     [2.x.284] radius 用于挤出圆柱体的YZ平面上的圆的半径。     [2.x.285] half_length 圆柱体在x方向的半长。 
* [0.x.29]*
   围绕x轴创建一个切割锥体。 该圆锥体从<tt>x=-半长</tt>延伸到<tt>x=半长</tt>，其在[2.x.286]的投影是在<tt>x=半长</tt>处半径为[2.x.287]的圆和在<tt>x=+半长</tt>处半径为[2.x.288]的圆。在这两者之间，半径是线性递减的。    在二维空间中。圆锥体是一个梯形，从<tt>x=-半长</tt>到<tt>x=+半长</tt>，从<tt>y=-半径_0</tt>到<tt>y=半径_0</tt>在<tt>x=-半长</tt>，从<tt>y=-半径_1</tt>到<tt>y=半径_1</tt>在<tt>x=+半长>。  在这之间，<tt>y</tt>的范围是线性递减的。    边界按照以下方案着色：0代表圆锥体，1代表左手面，2代表右手面（见[2.x.289]"关于着色的术语条目"）。  边界指标和流形指标都被设定。    在三维空间中，船体的流形指标被设置为零，并且一个CylindricalManifold被附加到它上面。    下面是两次网格细化后的二维和三维网格。     [2.x.290] [2.x.291] [2.x.292] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.30]*
   \brief 一个中心单元，每个表面都有堆积的单元突出。    每个正方形网格单元都是笛卡尔的，在每个坐标方向都有一个大小。零号单元的中心是原点。     [2.x.293] tria 一个三角形对象，必须是空的。     [2.x.294] sizes 一个维度为[2.x.295]的整数向量，其含义如下：十字形的腿在中心单元格的面上堆叠，按照deal.II单元格的通常顺序，即首先是[2.x.296]，然后是[2.x.297]，然后是[2.x.298]等等。在[2.x.299]中的相应条目命名了堆积在这个面上的单元格的数量。所有的数字都可能是零，因此L型和T型域是这个域的特化。     [2.x.300] colorize_cells 如果着色被启用，那么一个单元格的材料ID就对应于它所在的腿。中心单元的id为0，然后各腿从1开始编号（参见[2.x.301]"关于着色的术语条目"）。    二维和三维的例子是。     [2.x.302] [2.x.303]。  
* [0.x.31]*
   用一个恰好由<tt>2^dim-1</tt>单元组成的超L（2D或3D）初始化给定的三角结构。它产生的超立方体的区间[[1.x.8]]没有每个坐标的区间[[1.x.9]]做出来的超立方体。因为该域是大约最简单的一个有重心（即非凸）角的域，许多偏微分方程的解在这个角有奇点。也就是说，在拐角处，梯度或高阶导数（取决于所选择的边界条件）并不保持有界。因此，当溶液缺乏规律性时，这个域经常被用来测试方案的收敛性。    如果[2.x.304]的标志是[2.x.305]，则曲面的[2.x.306]被分配为左边的边界为0，其他的则按逆时针升序分配（见[2.x.307]"关于着色的词汇条"）。[2.x.308]着色选项只在二维空间工作。    这个函数将在二维中创建经典的L形，在三维中看起来就像下面这样。     [2.x.309]     
* [2.x.310] 3d域也经常被称为 "Fichera角"，这是以Gaetano Fichera（1922-1996）命名的，他首次计算了域的最低特征函数的角奇异指数的近似值。    这个函数存在于所有空间维度的三角形中，但如果在1d中调用，则会产生错误。     [2.x.311] 调用此函数时，作为参数传递的三角形需要为空。 
* [0.x.32]*
   在二维或三维中用广义的细分超L来初始化给定的三角结构。    这个函数产生一个细分的超矩形，其尺寸由[2.x.312]和[2.x.313]给出，每个方向上的细分数量由向量[2.x.314]给出，并去除一定数量的单元格，由向量[2.x.315]给出。注意，[2.x.316]包含整数，意味着其条目可以是正数和负数。正数表示在 "正 "的方向切割细胞，例如在X方向从左到右，在Y方向从下到上，在Z方向从前到后。负数表示以相反的方向切割单元，如从右到左，从上到下，从后到前。    这个网格的演示可以在 [2.x.317] 中找到。    这个函数可以用来生成一个面向后方的网格，这是一个对流体动力学基准问题有用的领域。  第一张图片是一个3D的后向台阶，通过去除z方向的所有单元，以及正x和y方向的2个单元而生成。   [2.x.318] 而在二维中，我们可以剪去负x方向的1个单元，负y方向的2个单元。   [2.x.319]     
* [2.x.320]这个函数被声明存在于所有空间维度的三角形中，但如果在一维中调用则会产生错误。 
* [0.x.33]*
   用一个带狭缝的超立方体初始化给定的三角测量。在每个坐标方向上，超立方体从[2.x.321]延伸到[2.x.322]。 在2D中，分割在垂直方向上从<tt>x=(left+right)/2, y=left</tt>到广场中心<tt>x=y=(left+right)/2</tt>。    在3D中，2D域只是在[1.x.10]方向延伸，这样一个平面将矩形的下半部分一分为二。 这个函数被声明存在于所有空间维度的三角形中，但如果在1d中调用，会抛出一个错误。    如果[2.x.323]被设置为[2.x.324]，形成狭缝的面将分别被标记为边界id 1和2（见[2.x.325]"关于着色的词汇条"）。     [2.x.326] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.34]*
   产生一个超壳，即围绕<tt>中心</tt>的两个球体之间的区域，给定<tt>内半径</tt>和<tt>外半径</tt>。数字<tt>n_cells</tt>表示所产生的三角形的单元数，即有多少单元构成环（在2D）或壳（在3D）。    如果标志[2.x.327]是[2.x.328]，那么外边界将有指标1，而内边界的id为0。在三维中，这同时适用于这些边界的面和边。如果标志是[2.x.329]，则两者的指标都是0（见[2.x.330]"关于着色的词汇条"）。    所有流形的id都被设置为零，并且一个SphericalManifold被附加到三角形的每个单元和面。    在2d中，这个初始三角形的元素数量<tt>n_cells</tt>可以任意选择。如果初始单元的数量为零（默认情况下），那么它将被自适应地计算，从而使生成的元素具有最小的长宽比。    在3D中，只有某些数字是允许的。   [2.x.331] [2.x.332] 6（或默认的0）用于基于六面体的曲面（即在内球面上的6个面板沿径向挤压形成6个单元），[2.x.333] 12用于菱形十二面体，[2.x.334 ] 24个为基于六面体的表面，在方位角方向上精炼一次，但不在径向方向上精炼，[2.x.335] 48个为菱形十二面体，在方位角方向上精炼一次，但不在径向方向上精炼，[2.x.336] 96个为菱形十二面体精炼一次。这个选择可以追溯到Manifold类实现之前的旧版本deal.II：今天这个选择等同于执行一次全局细化后的菱形十二面体。   [2.x.337] [2.x.338]类的数字与[2.x.339]的整数。这种选择与24和48单元的情况类似，但提供了方位角方向的额外细化与径向方向的单层细化相结合。基本网格是6个或12个单元的版本，分别取决于权力中的[2.x.340]是奇数还是偶数。   [2.x.341]24、48和[2.x.342]单元的版本在壳薄而径向长度应与周向长度更相似的情况下是有用的。    下面是12和96单元的三维网格图。     [2.x.343] [2.x.344]。    
* [2.x.345] 这个函数被声明存在于所有空间维度的三角形中，但如果在1d中调用则会抛出一个错误。     [2.x.346] 调用此函数时，作为参数传递的三角形需要为空。 
* [0.x.35]*
   产生一个偏心的超壳，即以两个不同中心点为中心的两个球体之间的区域。我们必须指定<tt>inner_center</tt>和<tt>outer_center</tt>，并给出<tt>inner_radius</tt>和<tt>outer_radius</tt>。数字<tt>n_cells</tt>表示所产生的三角形的单元数，也就是说，有多少单元构成环（在2D）或壳（在3D）。    默认情况下，外边界的指标为1，而内边界的指标为0。在三维中，这适用于这些边界的面和边。    一个SphericalManifold连接到外边界，ID为1，而另一个SphericalManifold连接到内边界，ID为0。一个TransfiniteInterpolationManifold连接到三角形的所有其他单元和面，ID为2。这里，元素的数量<tt>n_cells</tt>与[2.x.347]中的含义相同。     [2.x.348] [2.x.349]。    
* [2.x.350] 因为它使用了超壳的定义，这个函数被声明为存在于所有空间维度的三角形中，但如果在1d中调用，会抛出一个错误。     [2.x.351] 调用此函数时，作为参数传递的三角形需要为空。 
* [0.x.36]*
   产生一个半超壳，即两个空间维度中两个圆之间的空间和三维中两个球体之间的区域，对于这个初始三角剖面，具有给定的内外半径和给定的元素数。 然而，与前一个函数相反，它并不产生整个壳，而只是产生它的一半，即第一分量被限制为非负值的那部分。这个函数的目的是为了能够计算具有旋转对称性的解决方案，在这种情况下，2D的半壳代表3D的壳。    如果2d中初始单元[2.x.352]的数量为零（默认值），那么它将被自适应地计算，从而使得到的元素具有最小的长宽比。这个参数在3D中被忽略，在3D中粗略的网格总是有5个单元。    如果colorize设置为[2.x.353]，内部、外部和边界[2.x.354]的部分分别得到指标0、1和2。此外，在2d中，边界指标3被赋予X轴以下的垂直边缘。否则，如果colorize设置为[2.x.355]，所有指标都被设置为0（见[2.x.356]"关于着色的词汇表条目"）。    所有流形ID都被设置为0，并将SphericalManifold附加到三角剖面上。     [2.x.357] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.37]*
   产生一个域，该域是具有给定内半径和外半径的超壳之间的交点，即两个空间维度中两个圆之间的空间和三维中两个球体之间的区域，以及正象限（在2d中）或八角形（在三维）。在2D中，这确实是全环形的四分之一，而在3D中，这个函数是一个错误的名称，因为在那里，域不是四分之一，而是全壳的八分之一。    如果初始单元的数量为零（默认情况下），那么它是自适应计算的，这样得到的元素具有2d中最小的长宽比。    如果[2.x.358]被设置为[2.x.359]，内、外、左、右边界分别得到2d中的指标0、1、2和3。在3D中，指标2位于面[2.x.360]，3位于[2.x.361]，4位于[2.x.362]（见[2.x.363]"关于着色的词汇条"）。    所有流形的id都被设置为零，并将一个SphericalManifold附加到三角结构上。     [2.x.364] 调用此函数时，作为参数传递的三角结构需要为空。 
* [0.x.38]*
   产生一个域，该域是3D中两个圆柱体之间的空间，具有给定的长度、内半径和外半径以及给定的元素数量。圆柱体外壳围绕[2.x.365]轴建立，两个面位于[2.x.366]和[2.x.367] [2.x.368] 如果[2.x.369]为零（默认值），那么它将被自适应地计算，使生成的元素具有最小的纵横比。对于[2.x.370]也是如此。    
* [2.x.371] 虽然这个函数被声明为模板，但它在一维和二维中没有意义。同时请记住，这个对象的旋转和定位与圆柱体（）创建的对象不同。    所有流形的id都被设置为零，并且一个CylindricalManifold被附加到三角形中。     [2.x.372] 调用此函数时，作为参数传递的三角剖面需要为空。     [2.x.373] 在这张图片中，显示了一个长度为2，内半径为0.5，外半径为1的圆柱体外壳。使用了n_radial_cells和n_axial_cells的默认参数，进行了一次全局细化。 
* [0.x.39]*
   生成环状体的体积或表面网格。环状体的轴是[2.x.374] -轴，而环状体的平面是[2.x.375] - [2.x.376] 平面。    如果[2.x.377]是3，网格将是环状体的体积，使用相当于圆的极坐标的网格，横截面上有5个单元。这个函数为所有边界面附加了一个环形Manifold，其流形ID为1；为内部单元及其所有面附加了一个CylindricalManifold，其流形ID为2（代表极坐标中的平面状态）；为表面的环形Manifold和中心的环形Manifold之间的单元附加了一个TransfiniteInterpolationManifold，其流形ID为0。 ]为3，在[2.x.379]处切开域，6个环形单元，[2.x.380]和[2.x.381]没有任何全局细化的情况下，在此给出。     [2.x.382] 在这张图片中，浅灰色的阴影代表了无限插值的流形id 0，它被应用于在域边界上的环形形状和内缘之间平滑地添加新的点，在那里围绕y轴的圆柱形描述被规定。具有流形id 2的内缘显示为红色阴影。    如果[2.x.383]为2，网格将描述环形的表面，这个函数将TorusManifold附加到所有的单元和面（这些单元和面的流形id标记为0）。     [2.x.384] tria 要填充的三角结构。     [2.x.385] R 圆的半径，它构成了包含单元格环的环形的中间线。必须大于 [2.x.386] [2.x.387] r 环状体的内半径。     [2.x.388] n_cells_toroidal 可选参数，用于设置环形方向的细胞层数。默认为6个细胞层。     [2.x.389] phi 可选参数，用于生成角度为 [2.x.390] 的开放环形。默认值是 [2.x.391] ，在这种情况下会生成一个封闭的环形体。如果环状体是开放的，环状体将在垂直于环状体中心线的两个平面上被切割。  这两个平面的中心位于 [2.x.392] 和 [2.x.393] 。   
* [2.x.394]为Triangulation<2,3>和Triangulation<3,3>实现。 
* [0.x.40]*
   这个函数在[1.x.11]平面上产生一个正方形，中间有一个圆柱形的孔。正方形和圆形都以原点为中心。在三维空间中，这个几何体沿[2.x.395]方向被挤压到区间[2.x.396]。    内边界的流形ID为[2.x.397]，边界ID为[2.x.398] 。这个函数将一个PolarManifold或CylindricalManifold分别附着在2d和3d的内部边界上。其他面的边界ID为[2.x.399]，或[2.x.400]，按照2d或3d中面的标准顺序给出。     [2.x.401] 它在2d和3d中实现，并接受以下参数。     [2.x.402] triangulation 要填充的三角结构。   [2.x.403] inner_radius 内部孔的半径。   [2.x.404] outer_radius 正方形边长的一半。   [2.x.405] L 在[2.x.406]中的扩展（只在3D中使用）。   [2.x.407] repetitions 沿着[2.x.408] [2.x.409] colorize 是否给不同的面分配不同的边界指标（见[2.x.410] "关于着色的词汇表条目"）。  颜色是以词法排序给出的，平坦的面（2D中的0到3，3D中的0到5）加上弯曲的孔（2D中的4，3D中的6）。如果[2.x.411]被设置为false，那么平面就会得到数字0，孔就会得到数字1。 
* [0.x.41]*
   生成一个由同心壳组成的网格。这个函数和[2.x.412]的主要区别是，这个函数允许不均匀的间隔（在径向方向）[2.x.413]"粗级单元"。    参数[2.x.414][2.x.415]和[2.x.416]的行为与[2.x.417]的前三个参数相同[2.x.418]给出了要使用的壳的总数（即径向上的单元数）。[2.x.419]第1个壳的外半径由[1.x.12]给出，其中[2.x.420]是控制径向方向上壳间距的参数：[2.x.421]接近零的值对应于均匀的间距，而[2.x.422]的较大值（如[2.x.423]或[2.x.424] ）对应于偏重于内半径的壳体。     [2.x.425]与[2.x.426]相同，在2D中默认选择为0，将导致每个壳有8个单元（在3D中为12个）。3d中唯一有效的值是6（默认值）、12和96个单元：更多信息见[2.x.427]的文档。    如果[2.x.428]是[2.x.429]，那么合并后的壳的外部边界的边界ID为[2.x.430]，内部边界的边界ID为[2.x.431] 。    例子。以下代码（关于如何可视化GNUPLOT输出的说明，请参见[2.x.432])    
* [1.x.13]
* 产生以下输出。     [2.x.433]   
* [0.x.42]*
   在3D中产生一个细胞环，将其切开、扭曲并再次粘在一起。这就产生了一种莫比乌斯环。     [2.x.434] tria 要处理的三角结构。   [2.x.435] n_cells 循环中的单元数。必须大于4。 [2.x.436] n_rotations 在胶合循环之前要进行的旋转次数（[2.x.437] 每次）。   [2.x.438] R 圆的半径，它构成了包含细胞环的环状体的中间线。必须大于[2.x.439] [2.x.440] r 圆柱体弯曲在一起作为环的半径。 
* [0.x.43]*
   调用其他GridGenerator函数之一，从字符串[2.x.441]中解析要调用的函数名称，从字符串[2.x.442]中解析函数的参数，提供参数的字符串被传递给函数[2.x.443]，这里的`TupleType`是一个元组，包含*所有**GridGenerator函数的参数，包括所有可选参数。    这个函数的一个使用例子是由。 
* [1.x.14]
* 这里，冒号分隔了函数参数，逗号分隔了一个Point<2>参数的坐标。    根据`TupleType`的算数，函数的参数可以用不同的分隔符来分隔（关于如何进行转换的细节，请参见[2.x.444]的文档）。如果使用了错误的格式，会抛出一个异常，并将预期的格式作为错误信息输出。    所有的GridGenerator函数都被支持。如果你发现有一些缺失，请在GitHub上开一个问题。     [2.x.445] tria 要处理的三角形 [2.x.446] grid_generator_function_name 要调用的函数的名称 [2.x.447] grid_generator_function_arguments 函数的参数，格式为可转换元组的字符串  
* [0.x.44]*
    [2.x.448] 从其他网格中创建网格  
* [0.x.45]*
   给出作为前两个参数指定的两个三角形，创建包含两个三角形的单元的三角形，并将其存储在第三个参数中。之前[2.x.449]的内容将被删除。  两个输入三角图中的一个也可以是[2.x.450]三角图。    如果几何体可以由较简单的部分组成，而这些部分存在生成[2.x.451]"粗略网格 "的函数，那么这个函数最常被用来为更复杂的几何体组成网格。例如，[2.x.452]中使用的通道网格原则上可以用[2.x.453]函数创建的网格和几个矩形来创建，并使用当前函数将它们合并。矩形必须向右平移，这个任务可以用 [2.x.454] 函数来完成（其他转换单个网格构件的工具有 [2.x.455] [2.x.456] 和 [2.x.457] 相距小于 [2.x.458] 的顶点会被合并在一起。通常有必要将这个值设置为在某种程度上取决于输入三角形的东西。一个合理的选择是使用输入网格的所有相邻顶点之间的最小距离除以某个常数。   
* [1.x.15]
* 这将合并任何比输入网格上任何一对顶点更接近的顶点。   
* [2.x.459] 两个输入三角形必须是[2.x.460]"粗略网格"，即不能有任何细化单元。   
* [2.x.461] 该函数将两个输入三角形的单元的材料ID复制到输出三角形中。如果[2.x.462]被设置为[2.x.463]，流形id将被复制。边界指标永远不会被复制。换句话说，如果两个粗略的网格除了默认的边界指示器之外还有其他的东西，那么你将不得不在输出的三角图中重新手工设置边界指示器。   
* [2.x.464] 该函数不会将任何流形附加到[2.x.465]，也不会设置任何流形ID。特别是，附加到两个输入三角形的流形将在[2.x.466]三角形中丢失。   
* [2.x.467]当两个网格都来自同一个粗网格时，对细化网格的相关操作，见[2.x.468] 。  
* [0.x.46]*
   与上述相同，但允许一次合并两个以上的三角形。  下面给出一个如何使用这个函数的例子。 
* [1.x.16]
   
* [0.x.47]*
   \brief Replicate a given triangulation in multiple coordinate axes [2.x.469] input The triangulation which will be replicated along the coordinate axes.      [2.x.470] extents 一个带有<tt>dim</tt>项的向量，指定沿每个坐标轴应存在多少个三角形的副本。     [2.x.471] result 要创建的三角剖面。调用此函数时，它需要为空。    这个函数创建一个新的三角形，等于一个<tt>dim</tt>-dimensional array of copies of [2.x.472] [2.x.473] 的副本是通过沿坐标轴平移[2.x.474]创建的。面的边界ID（但不是3D中的线）和所有流形ID都被复制，但流形对象没有被复制，因为大多数流形对象在Triangulation被平移后不能正确工作。    为了了解这一点，请考虑以下代码。 
* [1.x.17]
*结果是[2.x.475] 而且，类似地，在三维中。 
* [1.x.18]
*结果是[2.x.476] 。    
* [2.x.477] 这个函数根据[2.x.479]的BoundingBox确定[2.x.478]副本的间距。 如果[2.x.480]的边界面没有与坐标轴对齐，那么这些副本可能不会有共同的面；也就是说，这个函数是针对边界面沿坐标轴对齐的简单几何图形。 
* [0.x.48]*
   给出作为前两个参数指定的两个三角形，创建包含两个三角形中最细单元的三角形，并将其存储在第三个参数中。之前[2.x.481]的内容将被删除。   
* [2.x.482] 这个函数的目的是创建一个自适应细化的三角剖面，该三角剖面包含了从[1.x.20][2.x.483]"粗网格 "中通过自适应细化得到的两个输入三角剖面。当人们在同一领域的单独细化网格上求解一个耦合问题的两个变量时（例如，因为这些变量在不同的地方有边界层），但随后需要计算涉及这两个变量的东西，或者希望将结果输出到一个文件中，有时需要这样的操作。在这两种情况下，为了不丢失信息，这两个解不能分别内插到其他网格上，因为那可能比计算变量的网格更粗。相反，我们需要有一个至少和两个初始网格一样精细的网格。这个函数可以计算出这样的网格。   
* [2.x.484] 如果你想创建一个由另外两个[2.x.485]"粗略网格 "合并而成的网格，例如，为了从较简单的几何体的网格组成一个复杂的几何体，那么这个函数就不适合你。相反，可以考虑 [2.x.486] 。    
* [2.x.487] 这个函数假设 [2.x.488] 和 [2.x.489] triangulation_2 具有相同的流形描述。输出的三角形[2.x.490]与这两个三角形的流形ID相同。   
* [2.x.491] 两个源条件都需要完全在本地提供。  换言之，它们不能是[2.x.492]类型的对象。  
* [0.x.49]*
   这个函数创建了一个由第一个参数中的相同单元组成的三角形，除了第二个参数中列出的那些单元。该函数的目的是从现有的三角形描述的几何体中生成[1.x.21]的几何体。一个典型的案例是一个有矩形孔的2维领域。这可以通过首先对整个域进行网格划分，然后用这个函数来摆脱位于孔洞的单元来实现。这个特殊用例的演示是 [2.x.493] 的一部分。同样的，你可以通过从[2.x.495]开始细化一次，然后在第二个参数中加入单个单元，来创建[2.x.494]产生的网格。     [2.x.496] input_triangulation 作为模板的原始三角图，新的三角图将由此产生。   [2.x.497] cells_to_remove 作为第一个参数提供的三角剖面中应被移除的单元格的列表（即不应该出现在结果中。   [2.x.498] 结果 由[2.x.499]中的相同单元组成的三角形，但[2.x.500]中列出的单元除外。    
* [2.x.501] 与大多数GridGenerator函数不同，该函数不会为[2.x.502]附加任何流形，也不会设置任何流形ID。     [2.x.503] 因为我们不能从头开始创建包含自适应细化单元的三角形，所以输入的三角形需要将其所有单元放在同一水平线上。通常情况下，这实际上是最粗糙的层次，但它被允许在一个已经被细化[1.x.22]多次的三角图中通过。在这种情况下，输出的三角形将是一个只有一个层次的网格，由输入的活动单元减去第二个参数中的单元组成。然而，输入的三角形必须没有经过[1.x.23]的精炼。 
* [0.x.50]*
   沿[2.x.504]方向从[2.x.506]到[2.x.507]挤压三角图[2.x.504]，并将其存储在[2.x.508]中。[2.x.509]片[2.x.510]，或垂直于[2.x.511]平面的细胞层的数量将是[2.x.512]片（最小是2）。2.x.513]面的边界指标将被分配给[2.x.514]方向的相应侧壁。底部和顶部得到下两个自由边界指标：即如果[2.x.515]的边界ID为[2.x.516]、[2.x.517]和[2.x.518]，那么[2.x.519]的边界ID将是[2.x.521]，而[2.x.522]的边界ID将是[2.x.523] 。    该函数默认情况下不复制流形的id。原因是在没有更多信息的情况下，没有办法在所生成的三角形的线条上设置流形ID：例如，如果[2.x.524]中两个流形ID不同的面在一个共享顶点相遇，那么在[2.x.526]中创建的与[2.x.528]轴平行并通过该点的线条，就没有[2.x.525]先验的理由选择一个流形ID或另一个。如果[2.x.529]是[2.x.530]，那么该函数通过挑选[2.x.531]中首先出现的[2.x.532]在[2.x.533]中的那个来设置线条流形的ID。 例如：如果[2.x.534 ] 的 manifold_priorities 是 [2.x.535]，并且所考虑的线与 manifold ids 为 [2.x.536] 的面相邻，那么该线的 manifold id 为 [2.x.537] 。正确的排序几乎总是[2.x.538] [2.x.539] 设置在边界上的流形id，[2.x.540] [2.x.541] 描述三角形中大多数单元的流形id（例如，[2.x.542] 和 [2.x.543] [2.x.544] 任何对应于 TransfiniteInterpolationManifold 流形的流形id。[2.x.545] [2.x.546] 特别是，由于TransfiniteInterpolationManifold在周围流形之间进行插值，其流形id通常不应设置在与不同流形id的单元格相邻的线或面上。[2.x.547]的默认值遵循这个排序（其中每个类别按升序排序）。   [2.x.548] [2.x.549] 与非TransfiniteInterpolationManifold的流形相关的流形ID，以及 [2.x.550] [2.x.551] 与任何TransfiniteInterpolationManifold对象相关的流形ID。[2.x.552] [2.x.553] 注意[2.x.554]（如果它是[2.x.555]输入的流形ID）将始终是第一类中的最后一项。     [2.x.556] 2d输入三角形[2.x.557]必须是[2.x.558]"粗略网格"，即不能有任何细化单元。   
* [2.x.559]由于[2.x.560]和[2.x.561]具有不同的空间尺寸，无论[2.x.562]的值如何，此函数都不会复制流形对象。  
* [0.x.51]*
   extrude_triangulation()的重载，允许独立于维度的代码被编译。这个函数在调用时抛出一个错误，因为extrude_triangulation()只实现了将dim=2挤压到dim=3的三角关系。 
* [0.x.52]*
   前一个函数的重载。取一个被挤出的二维三角板。与前一个函数不同的是，这个函数采用高度和片数进行均匀挤压，这个函数采用Z轴值[2.x.563]，在这里将进行切片处理。[2.x.564]的面的边界指标将被分配给z方向上的相应侧壁。底部和顶部得到下两个自由边界指标。     [2.x.565] 2d输入三角形[2.x.566]必须是[2.x.567]"粗略网格"，即不能有任何细化单元。   
* [2.x.568]由于[2.x.569]和[2.x.570]具有不同的空间尺寸，因此该函数不会复制流形对象（也不会设置任何流形ID）。 
* [0.x.53]*
   extrude_triangulation()的重载，允许独立于维度的代码被编译。这个函数在调用时抛出一个错误，因为extrude_triangulation()只实现了将dim=2挤压到dim=3的三角结构。 
* [0.x.54]*
   给定一个输入三角形[2.x.571]，该函数生成一个新的平面三角形[2.x.572]，其中包含一个具有输入三角形的所有活动单元的单一层次。如果[2.x.573]和[2.x.574]不同，只有顶点的最小间隔分量被复制过来。这对于从三角图<2,2>中创建三角图<2,3>，或者通过忽略顶点的Z分量将三角图<2,3>投影到三角图<2,2>中是很有用的。    不对顶点进行内部检查，假设顶点在目标[2.x.575]维空间中具有拓扑意义。如果不是这样，你在以后使用三角法时就会遇到问题。    所有关于单元格流形ID和材料ID的信息都会从一个三角剖面复制到另一个三角剖面，只有边界流形ID和边界ID会从[2.x.576]的面复制到[2.x.577]的面，如果你需要指定内部面的流形ID，它们必须在三角剖面创建后手动指定。    如果输入的Triangulation是[2.x.578]类型，以及输入的Triangulation包含悬空节点时，该函数将失败。     [2.x.579] in_tria 新的平面三角图的基本输入。   [2.x.580] out_tria 由in_tria构建的所需的扁平化三角图。   
* [2.x.581] 由于[2.x.582]和[2.x.583]的空间尺寸不同，此函数不会复制流形对象：您必须将新的流形对象附加到[2.x.584]。  
* [0.x.55]*
   将仅由超立方体单元（四边形、六面体）组成的三角剖面转换为仅由简单单元（三角形、四面体）组成的三角剖面。    作为一个例子，下面的图片显示了一组八分之一球体的三个六面体是如何被细分为四面体的，以及如何将曲面考虑在内。颜色表示边界指标是如何继承的。   [2.x.585] 一般来说，每个2D的四边形被细分为八个三角形，每个3D的六面体被细分为24个四面体，如图所示。   [2.x.586] 材料ID和边界ID在转换时将被继承。     [2.x.587] in_tria 含有六面体元素的三角结构。   [2.x.588] out_tria 转换后的包含tet元素的三角图。   
* [2.x.589] 此函数不复制流形对象：您必须将现有的流形对象从[2.x.590]复制到[2.x.591]，例如，使用以下代码。 
* [1.x.24]
*   
* [0.x.56]*
   上述函数对一维的专门化：简单地复制三角函数。 
* [0.x.57]*
   名称空间Airfoil包含类和函数，以便为Joukowski或NACA机翼周围的（流）场创建C型网格。   
* [2.x.592]   
* [0.x.58]*
     AdditionalData收集了用函数生成机翼三角图所需的所有设置 [2.x.593] 。    
* [0.x.59]*
       机翼的类型："NACA "或 "Joukowksi"，在NACA和Joukowski机翼中选择机翼的几何形状。     
* [0.x.60]*
       定义机翼形状的NACA序列号。           
* [2.x.594] 目前支持长度为4的序列号。      维基百科（https://en.wikipedia.org/wiki/NACA_airfoil）对NACA序列号进行了很好的概述。     
* [0.x.61]*
       茹科夫斯基圆的中心。           
* [2.x.595]中心在X轴上导致了对称的机翼。     
* [0.x.62]*
       机翼的弦长，即从前缘到后缘的距离。     
* [0.x.63]*
       从机翼弦线到网格上边界的垂直距离，即网格总高度的一半。     
* [0.x.64]*
       从机翼后缘到外流边界的网格长度。     
* [0.x.65]*
       定义粗网格倾斜度HG的因素 图中显示了具有两种不同倾斜度的上层粗网格
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
 

 
* 
* - 倾斜系数 = 0
* 

* 
* 

* 
* 
* -> 面临HG
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
 

 
* 
* - 倾斜系数 = 0.5
* 
* - >面HG' G'点的坐标由内插后的倾斜系数定义 G'(0) = G(0) + 倾斜系数 (K(0)
* 
* - G(0))，倾斜因子在[0,1]中。o-----G--G'--K / | | / | / o | / o----o H-------o      
* [0.x.66]*
       偏置函数：f(x) = tanh(bx) / tanh(x)，x在[0,1]中，导致接近x=1的数值被压缩。     
* [0.x.67]*
       全局细化的数量。     
* [0.x.68]*
       沿着机翼的左块细分的数量。     
* [0.x.69]*
       沿着机翼在中间区块的细分数量。     
* [0.x.70]*
       机翼右侧区块的细分数量。     
* [0.x.71]*
       翼面轮廓法线的细分数。     
* [0.x.72]*
       用于提高机翼几何形状的近似度的系数，在将提供的无距离机翼点插值到等距离机翼点时发生。当生成由等距机翼点组成的所需矢量时，它是在无液体和机翼点之间内插的。      增加所提供的非液体机翼点，可以更好地接近机翼的几何形状。参数 "airfoil_sampling_factor "由此定义了所提供的非对称点与所要求的对称点的关系。     
* [0.x.73]*
       构建器。     
* [0.x.74]*
       该函数添加ParameterHandler条目。             [2.x.596] prm Parameter handler.      
* [0.x.75]*
     用一个机翼周围的流场初始化给定的三角形，即一个接近Joukowski或NACA（4位数）机翼的C型网格。        用户可以通过为结构AdditionalData提供输入参数来指定机翼的几何形状和网格设置。    因此，用户可以在不同类型的Joukowski或NACA机翼中选择不同的弦长、远场尺寸和网格密度。       
* [2.x.597] 该函数创建一个细化的网格（全局细化的数量可以由用户指定）。没有附加流形。最终网格中的顶点会被这个函数移动到正确的位置。       
* [2.x.598] 这个函数目前只适用于二维，但当然也可以用 [2.x.599] [2.x.600] tria 要建立的三角结构。调用此函数时，它必须是空的。     [2.x.601] additional_data 网格的配置。        <style>div.image img[src="https://www.dealii.org/images/grids/airfoils_naca_joukowski.png"]{width:50%;}</style>\endhtmlonly [2.x.602]     
* [0.x.76]*
     与上述相同，但在远场的上、下两面施加周期性边界条件。       
* [2.x.603] 这个函数目前只对二维实现。         [2.x.604] tria 要创建的三角结构。在调用此函数时，它需要是空的。     [2.x.605] periodic_faces 上下水平边界的周期面。     [2.x.606] additional_data 网格的配置。   
* [0.x.77]*
   从两个斜对角的角点[2.x.607]和[2.x.608]创建一个坐标平行的砖块，坐标方向[2.x.609]的顶点数量由<tt>repetitions[i]+1</tt>决定。   
* [2.x.610] 这个函数在内部将4/8个顶点连接到四边形/六面体单元，并将这些单元细分为2/5个三角形/四面体单元。   
* [2.x.611] 目前，这个函数只对`dim==spacedim`起作用。   
* [2.x.612]   
* [0.x.78]*
   用一个超立方体（二维的正方形和三维的立方体）初始化给定的三角形，该超立方体在每个方向上由[2.x.613]个单元组成。  超立方体的体积是目前维数中的张量乘积区间[2.x.614]，其中极限作为参数给出。它们默认为零和一，然后产生单位超立方体。   
* [2.x.615] 这个函数在内部将4/8个顶点连接到四边形/六面体单元，并将其细分为2/5个三角形/四面体单元。   
* [2.x.616]   
* [0.x.79]*
    [2.x.617] 创建低维网格 从高维网格的一部分创建。 
* [0.x.80]*
   这个函数实现了边界子网格的提取。 给定一个<dim,spacedim>三角网格（"体网格"），该函数提取其边界的一个子集（"面网格"）。 要提取的边界是由一个 boundary_ids 列表指定的。 如果没有指定，整个边界将被提取出来。该函数在 [2.x.618] 中使用。    该函数还建立了一个映射，将表面网格上的单元格与体积网格上的相应面连接起来。这个映射是该函数的返回值。   
* [2.x.619] 该函数通过从体积网格的粗大单元的选定面创建一个[2.x.620] "粗大网格 "来建立表面网格。它将这些面的边界指标复制到粗面网格的单元中。然后，表面网格将以与体网格的面相同的方式进行细化。为了确保曲面网格的顶点与体积网格的顶点相同，在调用此函数之前，必须通过[2.x.621]给曲面网格对象分配适当的边界描述。如果你不这样做，细化将在假设所有面都是直的情况下进行（即使用FlatManifold类），而不是利用你可能想用来确定新顶点位置的Manifold对象。     [2.x.622] MeshType 一个满足[2.x.623] "MeshType概念 "要求的类型。  返回的映射将是指向描述表面网格的容器的单元格迭代器和体积网格容器的面迭代器之间的映射。如果MeshType是DoFHandler，那么该函数将重新构建第二个参数下的三角形，并返回一个适当的迭代器之间的映射到MeshType参数。然而，该函数不会在这个新创建的曲面网格上实际分配自由度。     [2.x.624] dim 体积网格的单元尺寸。例如，如果dim==2，那么单元格是四边形，要么在平面内，要么在高维空间内形成一个曲面。因此，表面网格的单元格的维度是dim-1。   [2.x.625] spacedim 体积和表面网格所处空间的尺寸。     [2.x.626] volume_mesh 定义体积网格的单元的容器。   [2.x.627] 曲面网格（surface_mesh） 一个容器，其相关的三角形将被建立，由对应于体积网格（选定部分）边界的单元组成。   [2.x.628] boundary_ids 一个边界指示器的列表，表示这个函数应该提取曲面网格的体积单元面的子集。如果保留其默认值，即如果该集合为空，则该函数对[1.x.25]边界面进行操作。     [2.x.629] 一个映射，对于表面网格的每个单元（键），返回到体积网格的一个单元的相应面（值）的迭代器。  键包括表面网格的活动单元和非活动单元。  表面单元的顶点顺序和相应的体积面可能不一致，以确保每个表面单元都与一个向外的法线相关。  因此，如果你想匹配域单元面上的量和表面网格的单元上的量，你可能不得不在顶点位置或正交点之间进行翻译。   
* [2.x.630] 上面概述的算法假定所有在较高细化水平上的面总是具有与它们的父面完全相同的边界指标。因此，我们可以从粗层次的面开始，在此基础上建立曲面网格。将这个函数扩展到将细化级面的边界指标复制到其相应的表面网格单元并不是很困难，例如，在弯曲边界的情况下适应不同的几何描述（但目前还没有实现）。   
* [2.x.631]由于[2.x.632]和[2.x.633]有不同的空间维度，没有流形对象被这个函数复制：你必须将新的流形对象附加到[2.x.634]。  
* [0.x.81]*
    [2.x.635] 异常情况  
* [0.x.82]*
   异常情况  
* [0.x.83]*
   异常情况  
* [0.x.84]*
   异常情况  
* [0.x.85]*
   输入方向不正确的异常情况。 
* [0.x.86]

