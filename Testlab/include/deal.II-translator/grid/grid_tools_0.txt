include/deal.II-translator/grid/grid_tools_0.txt
[0.x.0]*
 这个命名空间是工作在三角形上的算法的集合，比如移动或旋转三角形，但也可以找到包含给定点的单元。更多信息请参见各个函数的描述。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
    [2.x.1] 关于网格和单元的信息  
* [0.x.2]*
   返回一个三角结构的直径。直径的计算只使用顶点，也就是说，如果由于高阶映射的原因，直径应该大于边界顶点之间的最大距离，那么这个函数将不会捕捉到这个。 
* [0.x.3]*
   计算三角形的体积（即二维度量）。我们使用积分[2.x.2]来计算这个度量，其中[2.x.3]是给定三角结构的单元。该积分通过正交来逼近，为此我们需要映射参数。    如果三角形是一个嵌入到高维空间中的二维空间，那么返回的值就是二维度量。例如，对于三维空间中的二维三角形，返回的值是所描述的曲面的面积。这显然是有意义的，因为如果dim [2.x.4] spacedim，那么dim-dimensional triangulation的spacedim-dimensional measure将总是零。    这个函数也适用于[2.x.5]类型的对象，在这种情况下，这个函数是一个集体操作。     [2.x.6] tria 三角化。   [2.x.7] mapping 一个可选的参数，用于表示在描述单元格是由直线还是曲线面所包围时应该使用的映射。默认情况下使用[2.x.8]映射，它对应于单元格的直线边界。   [2.x.9] 三角形所描述的域的dim-dimensional度量，如上所述。 
* [0.x.4]*
   返回一个三角形的最小活动单元的直径近似值。参见[2.x.10]中关于这个函数的使用实例。    请注意，即使你传递了一个非琐碎的映射，返回的值也只是使用三角结构的顶点信息来计算的，可能是通过映射来转换的。虽然这在大多数情况下是准确的，但当三角结构包含非常扭曲的单元时，它可能无法给出正确的结果。 
* [0.x.5]*
   返回一个三角形的最大活动单元的直径近似值。    请注意，即使你向这个函数传递了一个非琐碎的映射，返回的值也只是使用三角结构的顶点信息来计算的，可能会被映射转化。虽然这在大多数情况下是准确的，但当三角结构包含非常扭曲的单元时，它可能无法给出正确的结果。 
* [0.x.6]*
   给出一个顶点列表（通常使用[2.x.11]获得）作为第一个参数，以及一个表征单个单元的顶点索引列表作为第二个参数，返回这个单元的度量（面积、体积）。如果这是一个真实的单元格，那么你可以使用 [2.x.12] 得到同样的结果，但这个函数也适用于不存在的单元格，只是你通过从列表中命名它的顶点来编造它。     [2.x.13] 使用更通用的函数，该函数需要一个ArrayView来代替。 
* [0.x.7]*
   给出一个顶点列表（通常使用[2.x.14]获得）作为第一个参数，以及一个表征单个单元的顶点索引列表作为第二个参数，返回该单元的度量（面积、体积）。如果这是一个真实的单元格，那么你可以用[2.x.15]得到同样的结果，但这个函数也适用于不存在的单元格，只是你通过从列表中命名它的顶点来编造它。    参数[2.x.16]被期望有[2.x.17]项。一个[2.x.18]可以隐式转换为ArrayView，所以它可以直接传递。更多信息请参见ArrayView类。   
* [2.x.19] 这个函数只对二维度为零的对象实现。 
* [0.x.8]*
   这个函数通过对代表四边形或六面体单元的[2.x.20]顶点进行最小二乘法拟合，计算出从单位坐标到实坐标形式的仿生近似图，其维度为`spacedim`。结果是以矩阵[1.x.0]作为第一个参数，向量[1.x.1]描述平面到原点的距离，以一对方式返回。    对于任何有效的网格单元，其几何形状不是退化的，这个操作的结果是唯一的仿生映射，即使在双/三线或高阶映射的实际转换可能是单数的情况下。如果从单元到实际单元的转换确实是仿生的，例如在一维或二维/三维的笛卡尔和仿生（平行四边形）网格中，其结果是精确的。    这种近似是函数[2.x.22]功能的基础。    对于单元格的精确变换，使用[2.x.23]。  
* [0.x.9]*
   计算所有本地拥有的活动单元的长宽比度量，并填充一个每个单元有一个条目的向量，给定一个[2.x.24]和[2.x.25]，返回的向量的大小等于活动单元的数量。对于非本地拥有的单元，该向量包含零。单元的长宽比定义为Jacobian的最大奇异值与最小奇异值之比，取通过 [2.x.26] 指定的正交规则的所有正交点的最大值。 例如，对于尺寸为 [2.x.27] 和 [2.x.28] 的2D矩形元素的特殊情况（ [2.x.29] ），这个函数返回通常的长宽比定义 [2.x.30] 。上述使用奇异值的定义是对任意变形元素的一种概括。这个函数旨在用于[2.x.31]空间维度，但它也可以用于[2.x.32]返回值为1。   
* [2.x.33] 颠倒的元素不会抛出一个异常。相反，在倒置元素的情况下，一个inf的值被写入向量。   
* [2.x.34] 确保使用足够的正交点，以便在变形元素的情况下精确计算纵横比。   
* [2.x.35] 在并行计算中，返回值将有n_active_cells的长度，但长宽比只计算本地拥有的、分别放置在索引[2.x.36]的单元。所有其他的值都被设置为0。 
* [0.x.10]*
   通过取所有单元的最大值来计算最大长宽比。   
* [2.x.37]当与支持MPI的Triangulation并行运行时，这是一个集体调用，其返回值是所有处理器的最大值。 
* [0.x.11]*
   计算包含整个三角形的最小的盒子。    如果输入的三角形是一个[2.x.38]，那么每个处理器将计算一个包围所有本地拥有的、幽灵的和人工的单元的包围盒。在一个没有弯曲边界的域的情况下，这些边界盒在处理器之间都是一致的，因为人工和鬼魂单元所占据的区域的联合等于其他处理器拥有的单元所占据的区域的联合。  然而，如果域有弯曲的边界，情况就不再是这样了。  返回的边界盒可能适合于当前的处理器，但与其他处理器上计算的边界盒不同。 
* [0.x.12]*
   返回几何对象[2.x.39]上最接近给定点[2.x.40]的点。例如，如果[2.x.41]是一条一维线或边，那么返回的点将是连接顶点的几何线上的一个点，因为与该对象相关的流形看到它（即，如果该几何线生活在高维空间，它可能是弯曲的）。如果迭代器指向高维空间中的四边形，那么返回的点位于相关流形所看到的四边形顶点的凸壳内。   
* [2.x.42] 这种投影通常不是很好解决，因为对象上可能有多个点使距离最小化。这个函数中使用的算法是稳健的（而且输出保证在给定的[2.x.43]上，但如果物体具有高曲率，可能只提供几个正确的数字。如果你的流形支持它，那么专门的函数[2.x.44]可能表现得更好。 
* [0.x.13]*
   返回定义三角网格的粗略网格的数组。这个函数是[2.x.45]的逆函数，返回值是一个包含顶点向量、单元向量和SubCellData结构的元组。后者包含关于面和线的额外信息。    这个函数在需要解构三角图或以某种方式操作顶点编号的情况下非常有用：一个例子是 [2.x.46] 。  
* [0.x.14]*
    [2.x.47] 支持创建网格的函数  
* [0.x.15]*
   删除不被任何单元格引用的顶点。这个函数被所有[2.x.48]函数调用，以消除输入文件中列出的但不被输入文件中的单元所使用的顶点。虽然这些顶点从一开始就不应该出现在输入文件中，但有时会出现，最常见的是当一些单元格被手工删除而不想更新顶点列表时，因为它们可能很冗长。    这个函数被所有[2.x.49]函数调用，因为三角形类要求它们只用已使用的顶点来调用。  因为顶点是由该类逐字复制的，所以我们必须事先消除未使用的顶点。    在维度为1的情况下没有实现。 
* [0.x.16]*
   移除重复的顶点，例如由于输入了结构化的网格而导致的。如果这些顶点没有被移除，这些顶点所包围的面会成为边界的一部分，即使它们在网格的内部。    这个函数被一些[2.x.50]函数所调用。只有索引在[2.x.51]中的顶点才会被测试是否相等。这加快了算法的速度，对于最坏的超立方体几何形状[2.x.52]的二维和[2.x.53]的三维，算法是相当慢的。  然而，如果你希望考虑所有顶点，只需传递一个空矢量。在这种情况下，该函数会将所有顶点填入[2.x.54]。    如果两个顶点在每个坐标方向上的差异小于[2.x.55]，则认为它们是相等的。  
* [0.x.17]*
   由网格生成器生成的网格可能有一个单元的方向，这个方向是deal.II要求的方向的倒数。    在2D和3D中，这个函数检查所有单元是否有负的或正的量度/体积。在前一种情况下，所有的单元格都是倒置的。在1d中，它没有任何作用。    当所有单元格中只有一个子集的体积为负时，单元格的反转也可能起作用。然而，由负向和正向单元混合组成的网格很可能被打破。因此，如果单元格的方向不一致，就会抛出一个异常。   
* [2.x.56] 这个函数应该在 [2.x.57] [2.x.58] all_vertices 网格的顶点前调用。   [2.x.59] cells 描述网格拓扑结构的CellData对象的阵列。 
* [0.x.18]*
   给出一个描述网格的CellData对象的向量，重新排列其顶点，使所有线条的方向一致。    关于方向的期望和这个函数的讨论可以在[2.x.60]"重新排序模块 "中找到。     [2.x.61] cells 描述网格拓扑结构的CellData对象的数组。 
* [0.x.19]*
    [2.x.62] 旋转、拉伸和其他变换网格的方法  
* [0.x.20]*
   通过对所有顶点应用作为第一个参数提供的函数对象来变换给定的三角网格的顶点。    作为参数给出的变换被用于变换每个顶点。  其各自的类型必须提供类似函数的语法，即谓词要么是一个具有<tt>operator()</tt>类型的对象，要么是一个指向函数的指针。在这两种情况下，参数和返回值都必须是<tt>Point [2.x.63] 类型。    
* [2.x.64] 与该函数一起使用的有意义的变换应该有一个具有正行列式的雅各布系数。例如，旋转、剪切、拉伸或缩放都满足这一点（尽管没有要求使用的变换实际上是线性的，因为所有这些例子都是）。另一方面，反射或反转有一个雅各布式的负行列式。目前的函数没有办法断定雅各布的正行列式，但是如果你碰巧使用了这样的变换，其结果将是一个单元格体积为负的三角结构。   
* [2.x.65] 如果你使用的是[2.x.66]，即使你的 "全局 "网格没有悬空节点，你的局部三角结构也会有悬空节点。如果你调用当前的函数，这将导致悬空节点在幽灵单元中的错误定位问题。所有本地拥有的单元的顶点将是正确的，但一些幽灵单元的顶点可能不是。这意味着像KellyErrorEstimator这样的计算可能会给出错误的答案。   
* [2.x.67] 这个函数一般来说与附加在三角形上的流形不兼容。例如，为了在网格转换后细化网格（使用流形），你必须确保原始流形对转换后的几何体仍然有效。这在一般情况下是不成立的，在这种情况下，有必要清除流形，并为转换后的几何体附加一个新的流形。  如果你想根据附加到三角形上的原始流形描述进行细化，你应该先进行细化，随后停用所有流形，最后再调用transform()函数。其结果是一个具有正确转换顶点的三角形，但在其他方面是直边元素。建议采用以下程序  
* [1.x.2]
* 这个函数在 [2.x.68] 的 "扩展的可能性 "部分中使用。它也在 [2.x.69] 和 [2.x.70] 中使用。 
* [0.x.21]*
   通过给定的移位矢量对三角形的每个顶点进行移位。这个函数使用了上面的transform()函数，所以那里所说的对三角形的要求也适用于这个函数。 
* [0.x.22]*
   将给定的二维三角结构的所有顶点围绕坐标系的原点逆时针旋转给定的角度（用弧度而不是度数给定）。这个函数使用了上面的transform()函数，所以那里所说的对三角形的要求也适用于这个函数。   
* [2.x.71]这个函数只支持dim=2的情况。 
* [0.x.23]*
   将给定[2.x.72]的所有顶点以逆时针方向围绕给定索引的轴旋转。否则就像上面的函数一样。     [2.x.73] angle 以弧度为单位，将三角函数旋转的角度。   [2.x.74] axis 围绕坐标轴的索引，保持该坐标的固定（0=x轴，1=y轴，2=z轴）。   [2.x.75] triangulation 要旋转的三角测量对象。   
* [2.x.76]对dim=1、2和3实施。 
* [0.x.24]*
   将给定的三角剖分平滑地转换到一个不同的域，通常，三角剖分边界的每个顶点都被映射到[2.x.77]地图中的相应点。    方向[2.x.78]的未知位移场[2.x.79]由受规定约束的最小化问题[1.x.3]获得。最小化器是通过解决位移场的dim分量的拉普拉斯方程得到的，该位移场将当前域映射成由[2.x.80]描述的域。使用线性有限元，每个方向上有四个高斯正交点。因此，[2.x.81]中指定的顶点位置与[2.x.82]中的当前值之间的差值代表该位移场在域边界的规定值，或者更准确地说，在[2.x.83]提供的所有位置（可能是在边界的一部分，甚至在域的内部）。然后，该函数在每个无约束的顶点上评估这个位移场，并使用它将映射的顶点放在位移场定位的地方。因为拉普拉斯方程的解是平滑的，这保证了从旧域到新域的平滑映射。     [2.x.84] new_points 要放置现有顶点的子集的位置。通常，这将是一个从边界上所有节点的顶点指数到其新位置的映射，从而完全指定了映射域的几何形状。然而，如果有必要，它也可以包括内部的点，而且它不需要包括所有的边界顶点（尽管你会失去对映射域的确切形状的控制）。     [2.x.85] tria Triangulation对象。这个对象被就地改变，即之前的顶点位置被覆盖。     [2.x.86] coefficient 拉普拉斯问题的可选系数。  较大的值使单元格不容易变形（有效地增加其刚度）。该系数是在三角形的旧的、未变形的配置的坐标系中作为输入进行评估的，也就是说，在应用变换之前。  如果提供这个函数，只有在所有的系数都是正数的情况下才能期望得到合理的结果。     [2.x.87] solve_for_absolute_positions 如果设置为[2.x.88]，则最小化问题是针对最终顶点位置而非其位移制定的。这两个公式对于同质问题是等价的（默认值为 [2.x.89]），但在其他情况下，它们会导致非常不同的网格运动。由于在大多数情况下，我们会在位移公式中使用一个非恒定系数，这个参数的默认值是[2.x.90] 。   
* [2.x.91]这个功能目前还没有在1d情况下实现。 
* [0.x.25]*
   返回一个 [2.x.92] 具有位于边界的所有顶点的面 [2.x.93] Triangulation 对象。 
* [0.x.26]*
   按给定的系数缩放整个三角图。为了保持三角形的方向，该因子必须是正的。    这个函数使用了上面的transform()函数，所以对三角形的要求也适用于这个函数。 
* [0.x.27]*
   通过随机移动网格中的所有顶点来扭曲给定的三角结构。 每个顶点的移动方向是随机的，而移位矢量的长度为[2.x.94]乘以与此顶点相邻的活动边的最小长度。  注意，[2.x.95]显然应该远低于<tt>0.5</tt>。    如果[2.x.96]被设置为[2.x.97]（这是默认的），那么边界顶点不会被移动。     [2.x.98]用于随机引擎的初始化。它的默认值用以前版本的deal.II中的相同状态来初始化引擎。 
* [0.x.28]*
   从网格中移除悬挂的节点。如果[2.x.99]参数设置为[2.x.100]（默认值），该函数会检测到有悬空节点的单元格，并在去除悬空节点的方向上细化邻域。  如果[2.x.101]参数设置为[2.x.102]，则在每个方向上进行邻居细化。  为了去除所有悬空节点，这个过程必须重复进行：这可能需要大量的迭代。  为了避免这种情况，我们提供了一个最大的迭代数（[2.x.103]）。    考虑以下网格。   [2.x.104] [2.x.105] == [2.x.106] 将返回。   [2.x.107] [2.x.108] == [2.x.109] 会返回。   [2.x.110] [2.x.111] tria Triangulation来细化。     [2.x.112] isotropic 如果为真，则在每个方向上细化单元，否则（默认值）则在删除悬挂节点的方向上细化单元。     [2.x.113] max_iterations 在每一步中，只有最接近悬挂节点的单元被精炼。该代码可能需要大量的迭代来移除所有悬空节点。 [2.x.114] 是允许的最大迭代数。如果 [2.x.115] == [2.x.116] 这个函数继续精炼，直到没有悬空节点。   
* [2.x.117] 在并行代码的情况下，该函数应与[2.x.118]相结合。  
* [0.x.29]*
   各向异性地细化一个网格，使得到的网格由尺寸间最大比率小于[2.x.119]的单元组成，这个过程需要一个可能不会终止的算法。因此，可以通过[2.x.120]参数设置一个最大的迭代次数。    从这样的一个单元格开始。   [2.x.121] 这个函数将返回。   [2.x.122] [2.x.123] tria 要细化的三角图。     [2.x.124] max_ratio 每个单元的尺寸之间的比率允许的最大值。     [2.x.125] max_iterations 允许的最大迭代次数。   
* [2.x.126] 如果是并行代码，该函数应与[2.x.127]和[2.x.128]相结合。  
* [0.x.30]*
   分析网格的边界单元，如果发现有一个单元位于角的位置（边界上有昏暗的相邻面），并且其二维角度分数超过[2.x.129]，则全局细化一次，并且用角不再违反给定角度分数的子单元替换该单元的子单元。    如果不存在边界上有两个相邻面的边界单元，那么三角形就不会被触动。如果我们确实有边界上有dim相邻面的单元，那么将根据参数[2.x.130]检查dim-dimensional实体角和dim*pi/2之间的分数，如果它更高，网格将被细化一次，并且违规单元的子单元将被替换成一些尊重极限的单元。  在这个过程之后，三角形被压平，所有的Manifold对象都被恢复到原来的三角形中。    以下的网格就是一个例子，它是将一个SphericalManifold附加到使用[2.x.131]生成的网格上而得到的。    
* [1.x.4]
* [2.x.132] 四个原本是正方形的角的单元在计算过程中会给你带来一些麻烦，因为从参考单元到这些单元的变换的贾可宾会归零，影响有限元估计的误差常数。    那些单元格的角非常接近180度，也就是说，角分值非常接近1。    同样的代码，加入对regularize_corner_cells的调用。 
* [1.x.5]
* 生成的网格在Mapping的jacobian方面有更好的表现。     [2.x.133] 这个网格与[2.x.134]得到的网格非常相似。然而，使用[2.x.135]可以自由选择何时应用正则化，也就是说，原则上可以先细化几次，然后再调用regularize_corner_cells函数。   
* [1.x.6]
* 这就产生了下面的网格。     [2.x.136] 这个函数目前只在dim = 2的情况下实现，如果在dim = 3的情况下调用，会产生一个异常。     [2.x.137] tria 正则化的三角图。     [2.x.138] limit_angle_fraction 网格中的角元素允许的最大角度或实体角度的比率。 
* [0.x.31]*
    [2.x.139] 寻找三角形的单元和顶点  
* [0.x.32]*
   给定一个三角形的 [2.x.140] 和一个 [2.x.141] 的列表，在 [2.x.142] 的每个元素上调用 find_active_cell_around_point() 并返回 [2.x.143] 参考位置 [2.x.144] 和一个从局部到全局索引的映射 [2.x.145] 到 [2.x.146] 。     [2.x.147] 缓存 三角形的[2.x.148] .    [2.x.149] 点 点的向量。   [2.x.150] cell_hint (可选) 可能包含 [2.x.151] [2.x.152] 的第一个点的单元格迭代器 包含以下信息。
* 

* 
* 

* 
 

 
 

 
* 
* - [2.x.153] : 所有包含至少一个[2.x.154] 的单元格的向量。
* 

* 
* 

* 
* 

 
 

 
* 
* - [2.x.155] : 一个点的向量。 [2.x.156] 包含落在单元格内的所有点的参考位置 [2.x.157] 。
* 

* 
* 

* 
 

 
 

 
* 
* - [2.x.158] : 一个整数向量，包含 [2.x.159] 中的局部编号，和 [2.x.160] 中的全局索引之间的映射。    如果[2.x.161]和[2.x.162]是落在[2.x.163]中的唯一两个点，那么[2.x.164]和[2.x.165]是[2.x.166]和[2.x.167]在[2.x.168]和[2.x.169]的参考位置。 ]=a，[2.x.170]=b。函数[2.x.171]返回[2.x.172]。算法建立了一个[2.x.173]的rtree，对它们进行空间排序，然后尝试调用find_active_cell_around_point（）。   
* [2.x.174] 这个函数没有在二维一的情况下实现（<tt>spacedim != dim</tt>）。   
* [2.x.175] 如果一个点在网格内没有找到，或者位于一个[2.x.176]的人工单元内，这个点会被默默地忽略掉。如果你想推断哪些点的搜索失败了，请使用函数compute_point_locations_try_all()，该函数也会返回一个索引的向量，表示搜索失败的点。   
* [2.x.177] 这个函数的实际返回类型，即上面提到的[2.x.178]的类型是  
* [1.x.7]
* 在线文档中对该类型进行了缩写，以提高本页面的可读性。   
* [2.x.179] 这个函数通过利用[2.x.180]来优化搜索，该函数要么返回一个缓存的rtree，要么建立并存储一个。如果该函数只在少数几个点上调用一次，建立一个rtree可能会妨碍性能。 
* [0.x.33]*
   这个函数与[2.x.181]类似，但是compute_point_locations()默默地忽略了所有find_active_cell_around_point()失败的点，这个函数也返回一个包含find_active_cell_around_point()失败的点的索引的向量。     [2.x.182] 一个包含四个元素的元组；前三个元素在 [2.x.183] 中有记录。 [2.x.184] 的最后一个元素包含了既没有在网格内发现也没有位于人工单元内的点的索引。[2.x.185] 等于以下元组类型。 
* [1.x.8]
*     
* [2.x.186] 这个函数在二维一的情况下没有实现（<tt>spacedim != dim</tt>）。   
* [2.x.187] 这个函数通过使用[2.x.188]来优化搜索，该函数要么返回一个缓存的rtree，要么建立并存储一个。如果该函数只在少数几个点上调用一次，建立一个rtree可能会妨碍性能。    更详细的文档见[2.x.189]。  
* [0.x.34]*
   给出一个[2.x.190]和每个进程的[2.x.191]列表，找到位于网格本地拥有部分的点并计算它们的正交规则。  分布式计算点位置是一个类似于[2.x.192]的函数，但对[2.x.193]对象起作用，而且，与它的序列版本不同，也适用于分布式三角测量（见[2.x.194] [2.x.195]缓存一个[2.x.196]对象[2.x.197] local_points是当前进程拥有的点的阵列。  每个进程可以有一个不同的点阵列，这个阵列可以是空的，不包含在三角形的本地拥有的部分内 [2.x.198] global_bboxes 一个边界盒的向量；它描述了每个进程的网格的本地拥有部分。global_boxes[rk]中包含了描述网格的哪一部分被等级为rk的进程局部拥有的界线盒。局部描述可以从[2.x.199]中获得，然后全局描述可以通过[2.x.200]或[2.x.201]获得 [2.x.202] 容差 以单元格坐标计算的容差。根据问题的不同，可能需要调整公差，以便能够确定一个单元。浮点运算意味着，一般来说，一个点不会完全位于一个顶点、边缘或面。在任何一种情况下，都无法预测这个函数会返回哪个与顶点或边/面相邻的单元。    因此，调用这个函数的算法需要考虑到，返回的单元格将只包含近似的点。   [2.x.203] 一个包含正交信息的元组 输出元组的元素是。
* 

* 
* 

* 
 

 
* 
* - cells : 所有包含至少一个点的单元格的向量。
* 

* 
* 

* 
* 

 
* 
* - qpoints : 一个点的向量；包含在[2.x.204]中的所有点的参考位置，这些点位于单元格[2.x.205]中。
* 

* 
* 

* 
* 

 
* 
* - maps : 一个整数向量，包含qpoints中的编号（元组的前一个元素）与拥有这些点的过程的局部点向量之间的映射。
* 

* 
* 

* 
* 

 
* 
* - points : 一个点的向量。 [2.x.206] 是实空间中对应于 [2.x.207] 的点。注意[2.x.208]是位于网格本地所有部分的点；因此这些可以是[2.x.209]的副本或从其他进程收到的点，即其他进程的本地_点
* 

* 
* 

* 
* 

 
* 
* - owners : 一个向量的向量；[2.x.210] 包含拥有point[i][j]的进程的等级（元组的前一个元素）。    该函数使用三角形的mpi通信器：由于这个原因，如果三角形不是从[2.x.211]派生的，它会抛出一个断言错误。    在一个串行执行中，元组的前三个元素与 [2.x.212] 中的相同。    注意：这个函数是一个集体操作。   
* [2.x.213] 这个函数的实际返回类型，即上面提到的 [2.x.214] 的类型是  
* [1.x.9]
* 在线文档中对该类型进行了缩写，以提高本页面的可读性。 
* [0.x.35]*
     由[2.x.215]返回的数据结构 它提供信息以执行[2.x.216]并在[2.x.217]内设置通信模式。        
* [2.x.218] 字段的名称是在考虑到[2.x.219]的情况下选择的。在这里，数量在指定的任意定位点（甚至在MPI宇宙中的远程进程上）被逐个计算，这些值被发送给请求进程，请求进程接收结果，并根据点的情况诉诸结果。   
* [0.x.36]*
       发送/评估方的每个点的信息。该元组的元素如下。0）单元水平和索引，1）拥有进程的等级，2）拥有进程的本地索引，3）参考位置，4）实际位置，5）发送缓冲区内的包络索引。     
* [0.x.37]*
       要发送的等级。     
* [0.x.38]*
       发送缓冲区内的范围指针，将被发送至send_ranks指定的等级。发送缓冲区的大小由send_ptrs.back()给出。     
* [0.x.39]*
       每个收到的数据值的信息。该元组的元素如下。0）发送者的等级，1）本地索引，2）枚举索引。           
* [2.x.220] 向量按照1）、0）、2）进行排序。)            
* [2.x.221] 每个点都可能有多个数据值与之相关。如果一个点与一个由多个单元共享的几何实体（例如，顶点）重合，就可能是这种情况。     
* [0.x.40]*
       从哪里接收数据的等级。     
* [0.x.41]*
       接收缓冲区内的范围指针，由recv_ranks指定的等级来填充。接收缓冲区的大小由recv_ptrs.back()给出。     
* [0.x.42]*
     一个填充DistributedComputePointLocationsInternal的函数。    如果输入参数[2.x.222]被设置为false，只有[2.x.223]需要的字段被填充。    如果输入参数被设置为 "true"，则会设置额外的数据结构，以便能够在[2.x.224]中设置通信模式。    
* [0.x.43]*
   返回一个地图`顶点索引
* 
-> Point<spacedim>`，包含给定的`容器'的使用顶点。返回的地图的键（即上面一对的第一个元素）是三角形中的全局索引，而每一对的值是对应顶点的物理位置。使用的顶点是通过在所有单元中循环得到的，并通过（可选）`mapping`参数查询每个单元的顶点在哪里。    在序列Triangulation对象和[2.x.225]对象中，返回的地图大小等于[2.x.226]（而不是[2.x.227] 注意，在[2.x.228]对象中，只返回本地拥有的单元和幽灵单元中的顶点，因为所有其他顶点的真实位置可能不知道（例如，对于使用MappingQEulerian的分布计算）。    如果你使用默认的`mapping'，返回的地图满足以下等价关系。   
* [1.x.10]
* 注意，对于改变顶点位置的映射，如MappingQEulerian，则不满足上述规定。     [2.x.229] "MeshType概念"。   [2.x.230] container 要提取顶点的容器。   [2.x.231] mapping 用来计算点的位置的映射。 
* [0.x.44]*
   在作为第一个参数传递的顶点映射中，查找并返回离给定点最近的顶点的索引。     [2.x.232] vertices 索引->顶点的地图，如[2.x.233] [2.x.234] p 目标点。   [2.x.235] 最接近目标点`p`的顶点的索引。 
* [0.x.45]*
   查找并返回给定网格中最接近给定点的已使用顶点（或标记顶点）的索引。    这个函数使用存储在三角结构中的顶点位置。这通常是足够的，除非你使用一个移动顶点的Mapping（例如，MappingQEulerian）。在这种情况下，你应该用相同的名字和额外的Mapping参数来调用这个函数。     [2.x.236] mesh 一个满足[2.x.237] "MeshType概念 "要求的类型的变量。   [2.x.238] p 我们想找到最接近的顶点的点。   [2.x.239] marked_vertices 表示[2.x.240]的哪些顶点将在搜索中被视为潜在的最近顶点的一个布尔数组。当收到一个非空的[2.x.241]时，该函数将只在[2.x.242]中搜索最接近的顶点。  这个数组的大小应该等于[2.x.243]对给定网格的三角结构返回的值（而不是[2.x.244]返回的值） [2.x.245] 找到的最接近顶点的索引。 
* [0.x.46]*
   在给定的网格中找到并返回最接近给定点的已使用顶点（或标记顶点）的索引。使用给定的映射来计算顶点的实际位置。    如果Mapping不修改网格顶点的位置（例如，MappingQEulerian），那么这个函数等同于同名的函数，并且没有`mapping`参数。     [2.x.246] mapping 用于计算顶点位置的映射 [2.x.247] mesh 一个满足[2.x.248] "MeshType概念 "要求的类型的变量。   [2.x.249] p 我们想找到最近的顶点的点。   [2.x.250] marked_vertices 表示[2.x.251]的哪些顶点将在搜索中被视为潜在的最近顶点的一个布尔数组。当收到一个非空的[2.x.252]时，该函数将只在[2.x.253]中搜索最接近的顶点。  这个数组的大小应该等于[2.x.254]对给定网格的三角结构返回的值（而不是[2.x.255]返回的值） [2.x.256] 找到的最接近顶点的索引。 
* [0.x.47]*
   找到并返回一个迭代器的向量，这些迭代器围绕着给定顶点的索引 [2.x.257] 对于局部细化网格，顶点本身可能不是返回的所有相邻单元的顶点。然而，它将始终是一个单元的顶点，或者是位于面或边上的一个悬挂节点。     [2.x.258] 容器 一个满足[2.x.259] "MeshType概念 "要求的类型的变量。   [2.x.260] vertex_index 我们试图找到相邻单元的顶点的索引。   [2.x.261] 与给定顶点相邻的单元格的一个向量。   
* [2.x.262] 目前还不完全清楚该函数是否对各向异性的细化网格做出正确的处理。它需要对这种情况进行检查。 
* [0.x.48]*
   查找围绕给定点的活动非人工单元 [2.x.263] 返回类型是一对活动单元的迭代器以及该点的单元坐标。    这个函数使用的算法是首先寻找最接近给定点的顶点，见[2.x.264] 其次，在网格中找到这个顶点的所有相邻单元，见[2.x.265] 最后，对于每个单元，函数测试点是否在里面。这个检查是使用给定的[2.x.266]参数来确定单元的边界是直的还是弯的。    如果一个点位于两个或多个单元的边界上，那么该算法将试图确定细化程度最高的那个单元。    如果请求的点不在本地拥有的单元或幽灵单元中，那么这个函数将返回（无效的）MeshType<dim, [2.x.267] 迭代器。这种情况可以类似于各种[2.x.268]和[2.x.269]函数的处理方式。     [2.x.270] 映射 用于确定给定点是否在给定单元内的映射。   [2.x.271] mesh 一个满足[2.x.272] "MeshType概念 "要求的类型的变量。   [2.x.273] p 我们想找到周围单元的点。   [2.x.274] marked_vertices 一个`bool'数组，表示顶点数组中的某个条目是否应该被视为（而其他的必须被忽略）可能是离指定点最近的顶点。在指定一个非默认的[2.x.275]时，find_closest_vertex()只会在[2.x.276]中搜索最近的顶点。    这个数组的大小应该等于三角形的n_vertices()（而不是n_used_vertices()）。使用[2.x.277]的动机是为了减少顶点的搜索空间，如果人们对感兴趣的点可能接近的顶点集合有先验的了解。   [2.x.278] 容差 以单元格坐标为单位的容差。根据问题的不同，可能有必要调整公差，以便能够识别一个单元。浮点运算意味着，一般来说，一个点不会完全位于一个顶点、边缘或面。在任何一种情况下，都无法预测这个函数会返回哪个与顶点或边/面相邻的单元。    因此，调用这个函数的算法需要考虑到，返回的单元格将只包含点的近似值。     [2.x.279] 一对进入网格的迭代器，指向周围的单元格，以及该点的单元格坐标。由于数字上的舍入，这个局部位置可能位于实际单元格之外。因此，这个函数返回的点应该被投影到单元格上，使用[2.x.280]这不是由算法自动执行的。返回的单元格可以是本地拥有的单元格或幽灵单元格（但不是人造单元格）。即使给定的点是本地拥有的单元格的一个顶点，返回的单元格也可能是一个幽灵单元。  背后的原因是，这是保证所有参与平行三角形计算的处理器都同意哪个单元包含一个点的唯一方法。例如，如果两个处理器聚集在一个顶点，并且用这个顶点调用该函数，那么一个处理器将返回一个本地拥有的单元，另一个则返回一个幽灵单元。 
* [0.x.49]*
   上述函数的一个版本，假定边界是直的，因此只是用MappingQ1作为映射参数调用上述函数。     [2.x.281]一个进入网格的迭代器，指向周围的单元。 
* [0.x.50]*
   另一个版本，我们在一个给定的单元上使用该映射，该映射对应于该单元的活动有限元索引。  这显然只对hp-problems有用，因为所有其他DoF处理程序的活动有限元索引总是零。 
* [0.x.51]*
   在一个点周围寻找一个活跃的非人工单元在计算成本上可能是非常昂贵的。这个函数旨在通过使用空间树来加速几何体的搜索，提供上述函数的快速版本。     [2.x.282] cache 包含三角形空间树信息的对象，见[2.x.283] [2.x.284] p 我们要为其寻找周围的单元。   [2.x.285] cell_hint 给出几何搜索的提示，如果有关于该点可能位于哪个单元的先验知识，这将是有益的。一个典型的用例是，这个搜索必须针对一个相互靠近的点的阵列，并且前一个点的相邻单元是阵列中下一个点的良好提示。   [2.x.286] marked_vertices 见上文。   [2.x.287] tolerance 见上文。      下面的代码示例显示了如何使用这个函数。   
* [1.x.11]
*   
* [0.x.52]*
   前一个函数的一个版本，利用顶点和单元格之间已经存在的映射（使用函数[2.x.288]构建一个顶点_到单元格_中心的映射（通过[2.x.289]获得，也可以选择从三角结构的使用顶点构建的RTree。   
* [2.x.290] 所有这些结构都可以从一个[2.x.291]对象中查询到。但是请注意，在这种情况下，MeshType必须是Triangulation，所以在这种情况下，直接调用上面的函数，参数为`cache'可能更合适。 
* [0.x.53]*
   与上面的函数相比，这个函数以单位坐标的方式识别一个给定的容忍度`tolerance`的点周围所有活跃的非人工单元。给定一个参考坐标为参数[2.x.292]的第一个单元，例如通过上面的一个函数得到的，所有相应的具有单位坐标点的邻近单元也被确定。    这个函数对不连续函数空间很有用，例如，对于给定的点`p`位于一个顶点、边缘或面的情况，几个单元可能持有独立的解的值，在用户代码中以某种方式组合。    这个函数的使用方法如下  
* [1.x.12]
   
* [0.x.54]*
   前一个函数的变体，在内部调用其中一个函数find_active_cell_around_point()来获得第一个单元，随后通过调用上面的函数find_all_active_cells_around_point()来增加所有其他活跃的非人工单元。 
* [0.x.55]*
   返回给定单元格的所有活跃的后代的列表。例如，如果当前单元格曾经被精炼过，但是它的子代没有任何进一步的精炼，那么返回的列表将包含它的所有子代。    如果当前单元格已经被激活，那么返回的列表是空的（因为该单元格没有可能被激活的子代）。     [2.x.293] MeshType 一个满足[2.x.294] "MeshType概念 "要求的类型。   [2.x.295] cell 指向Mesh的一个单元的迭代器。   [2.x.296] 给定单元格的活动子孙列表。   
* [2.x.297] 因为在C++中MeshType模板参数不能从函数调用中推导出来，所以你必须在函数名称后面指定它，例如  
* [1.x.13]
*   
* [0.x.56]*
   提取给定单元格[2.x.298]周围的活动单元，并在向量[2.x.299]中返回这些邻居，这些邻居具体是指单元格的[1.x.14]邻居，如果该邻居被进一步细化，则是其与该面交界的活动子女。另一方面，返回的邻居不包括那些位于，例如，与一个顶点对角线相对但本身不是面的邻居的单元。在3D中，它也不包括与当前单元格的一条边相邻，但不是面的邻居的单元格）。     [2.x.300] MeshType 一个满足[2.x.301] "MeshType概念 "要求的类型。   [2.x.302] cell 一个指向Mesh中某一单元的迭代器。   [2.x.303] active_neighbors 指向给定单元格的活跃子孙的列表。   
* [2.x.304] 因为在C++中，MeshType模板参数不能从函数调用中推导出来，你必须在函数名称后指定它，例如  
* [1.x.15]
*   
* [0.x.57]*
   提取并返回[2.x.305]中的子域（活动单元的集合）周围的活动单元层（即那些与子域共享一组顶点但不属于子域的单元）。在这里，"子域 "恰好包括[2.x.306]谓词返回[2.x.307]的所有单元。 一个自定义谓词的例子是检查一个给定的材料id  
* [1.x.16]
* 然后我们可以通过以下调用提取这个材料周围的细胞层。 
* [1.x.17]
* 经常有用的谓词可以在命名空间IteratorFilters中找到。例如，可以提取所有具有给定材料ID的细胞周围的细胞层。 
* [1.x.18]
* 或者在具有hp-capabilities的DoFHandler的一组活动FE指数的所有单元周围提取一层单元。 
* [1.x.19]
* 注意，在最后两个例子中，我们确保谓词只对本地拥有的单元返回真。这意味着光环层将不包含任何人工单元。     [2.x.308] MeshType 一个满足[2.x.309] "MeshType概念 "要求的类型。   [2.x.310] mesh 一个网格（即Triangulation或DoFHandler类型的对象）。   [2.x.311] 谓词 一个函数（或带有operator()的类型对象），定义要提取晕层的子域。它是一个接收活动单元并返回一个布尔值的函数。   [2.x.312]一个与所指子域至少有一个共同顶点的活动单元的列表。 
* [0.x.58]*
   提取并返回[2.x.313]指定层次上的子域（单元格集合）周围的单元格层（即该层次上与子域共享一组共同顶点但不属于子域的那些单元格）。在这里，"子域 "恰好由[2.x.314]返回[2.x.315]的所有单元组成。  
* [0.x.59]*
   提取并返回幽灵单元，这些单元是所有本地拥有的单元周围的活动单元层。这与[2.x.316]最为相关，它将返回一个处理器上所有幽灵单元的子集，但对于[2.x.317]来说，这将返回所有的幽灵单元。     [2.x.318] MeshType 一个满足[2.x.319] "MeshType概念 "要求的类型。   [2.x.320] mesh 一个网格（即Triangulation或DoFHandler类型的对象）。   [2.x.321] 一个幽灵单元的列表。 
* [0.x.60]*
   提取并返回[2.x.322]子域（活动单元集）周围几何距离内的活动单元集，在这里，"子域 "正好由[2.x.324]返回[2.x.325]的所有单元组成。该函数首先计算构成子域 "表面 "的单元，该子域由谓词为真的所有活动单元组成。使用compute_bounding_box()，为这个子域计算一个边界框，并通过[2.x.326]扩展这些单元被称为内部子域边界单元。  所有顶点都在扩展边界框外的活动单元被忽略。  然后，在扩展边界框内的单元被检查其与内部子域边界单元的接近性。这意味着要检查一对任意方向的细胞之间的距离，这在一般情况下是不容易的。为了简化这一点，该算法检查细胞的两个包围球体之间的距离。  这肯定会导致稍多的单元格被标记，但也大大简化了算法的算术复杂性。     [2.x.327] 图片显示了由subdivided_hyper_rectangle()生成的网格。单元使用三种不同的颜色进行标记。如果图像中的灰色单元是谓词为真的单元，那么函数compute_active_cell_layer_within_distance()将返回一组与红色单元对应的单元迭代器。  红色的单元是与灰色单元在一定距离内的活动单元。     [2.x.328] MeshType 一个满足[2.x.329] "MeshType概念 "要求的类型。   [2.x.330] mesh 一个网格（即Triangulation或DoFHandler类型的对象）。   [2.x.331] 谓词 一个函数（或带有operator()的类型对象），定义要提取晕层的子域。它是一个接收一个活动单元并返回一个布尔值的函数。   [2.x.332] layer_thickness指定了函数从谓词域搜索活动单元的几何距离。  如果一个活动单元的包围球与[2.x.333]返回[2.x.334]的任何单元的包围球之间的最小距离小于[2.x.335]，那么该活动单元就是一个Active_cell_within_distance。   [2.x.336] 从[2.x.338]返回[2.x.339]的活动单元集合中，在给定的几何距离[2.x.337]内的活动单元的列表，见compute_active_cell_halo_layer()。 
* [0.x.61]*
   提取并返回一组幽灵单元，这些单元在所有本地拥有的单元周围的[2.x.340]内。  这与[2.x.341]最相关，它将返回一个进程中所有幽灵单元的子集，但对于[2.x.342]这将返回所有的幽灵单元。  对于[2.x.343]类来说，所有不属于当前处理器的单元格都可以被认为是幽灵单元格；特别是，它们不仅仅是在本地拥有的单元格周围形成一个单层。     [2.x.344] MeshType 一个满足[2.x.345] "MeshType概念 "要求的类型。   [2.x.346] mesh 一个网格（即Triangulation或DoFHandler类型的对象）。   [2.x.347] layer_thickness 指定函数从本地拥有的单元中搜索活动单元的几何距离。   [2.x.348] 在给定的几何距离[2.x.349] layer_thickness内的鬼魂单元子集与当前进程的本地拥有的单元。    参见compute_ghost_cell_halo_layer() 和 compute_active_cell_layer_within_distance()。 
* [0.x.62]*
   计算并返回一个通过左下角和右上角的一对点定义的包围盒，该包围盒围绕着[2.x.350]的一个子域。这里，"子域 "恰好由[2.x.351]返回[2.x.352]的所有活动单元组成。 关于[2.x.353]如何工作的描述，见compute_active_cell_halo_layer（）。   
* [2.x.354] 这个函数是在BoundingBox类被发明之前写的。    因此，它返回一对点，而不是人们期望的BoundingBox对象。然而，BoundingBox有一个从点对转换的构造函数，所以这个函数的结果仍然可以被分配给一个BoundingBox对象。 
* [0.x.63]*
   计算一个边界框的集合，使所有给定谓词为真的活动单元都完全被包围在至少一个边界框中。请注意，这个包围只保证包含所有这些活动单元，但它不一定是精确的，也就是说，它可以包括比它们的联合体更大的区域。    对于一个给定的细化级别中包含[2.x.355]为真的活动单元的每个单元，该函数创建一个[2.x.356]为真的子单元的边界盒。    这导致了对[2.x.357]为真的所有活动单元的覆盖；参数[2.x.358]和[2.x.359]用于减少计算成本的单元数量，覆盖更大的n维体积。    控制该算法的参数是。
* 

* 
* 

* 
* 

 
* 
* - [2.x.360] : 要包围的单元格的属性，例如 [2.x.361] 。   该谓词仅在活动单元格上进行测试。
* 

* 
* 

* 
 

 
* 
* - [2.x.362] : 它定义了创建初始边界盒的级别。细化应该被设置为粗略的细化级别。如果[2.x.364]高于三角形的层数，将为每个活动单元创建一个比[2.x.363]更粗的包围盒，将产生一个异常。
* 

* 
* 

* 
* 

 
* 
* - [2.x.365] : 这个标志允许盒子合并，默认为假。该算法的成本为O(N^2)，其中N是由细化级别创建的边界盒的数量；由于这个原因，如果该标志被设置为真，请确保明智地选择一个足够粗的 [2.x.366] 
* 

* 
* 

* 
* 

 
* 
* - [2.x.367] : 要计算的边界盒的最大数量。如果创建了更多的盒子，那么小的盒子就会与相邻的盒子合并。默认情况下，在合并了可以表示为一个的盒子后，不再合并更多的盒子。详见[2.x.368]（）函数。   注意只有相邻的单元格会被合并（见边界盒类中的[2.x.369]函数）：如果边界盒的目标数量max_boxes不能通过合并相邻的单元格来达到，则会抛出一个异常。 下面的图片描述了一个算法的例子，[2.x.370] = 2, [2.x.371] = true and [2.x.372] = 1。带有属性谓词的单元格是红色的，包围盒的区域略带橙色。   [2.x.373] 
* 

* 
* 

* 
 

 
* 
* - 1.在黑色中我们可以看到当前级别的单元格。
* 

* 
* 

* 
* 

 
 
* - 2. 对于每个包含红色区域的单元格，都会创建一个边界框：默认情况下，这些框会被返回。
 

* 
* 

 
* 

 
* 
* 因为[2.x.374] = true，所以在不改变封面的情况下减少了包围盒的数量。   如果[2.x.375]被保留为默认值或大于1，这两个盒子将被返回。
* 

* 
* 

* 
* 

 
* 
* 因为[2.x.376]=1，最小的边界盒被合并到较大的边界盒。  注意，明智地选择参数是很重要的。例如，[2.x.377]=false和[2.x.378]=1会返回非常相同的边界框，但计算成本只有一小部分。    这个函数没有考虑到单元格的曲率，因此它不适合处理弯曲的几何图形：映射被假定为线性。 
* [0.x.64]*
   给定一个点阵列，使用使用[2.x.379]获得的全局边界盒描述来猜测，对于每个点，哪个进程可能拥有它。     [2.x.380] global_bboxes 描述每个进程拥有属性的网格部分的边界盒的矢量。   [2.x.381] points 要测试的点的阵列。     [2.x.382] 一个包含以下信息的元组。
* 

* 
* 

* 
* 

 
 

 
* 
* - 一个以进程的等级为标志的向量。对于每个等级，它包含一个它可能拥有的点的索引的向量。
* 

* 
* 

 
* 

 
 

 
* 
* - 从[2.x.383]中的点的索引[2.x.384]到所有者的等级的地图。
* 

* 
* 

* 
* 

 
 

 
* 
* - 从[2.x.386]中的点的索引[2.x.385]到被猜测的所有者的行列的地图。   
* [2.x.387] 这个函数的实际返回类型，即上面提到的[2.x.388]的类型是  
* [1.x.20]
* 在线文档中对该类型进行了缩写，以提高本页面的可读性。 
* [0.x.65]*
   给定一个覆盖的rtree（见[2.x.389]）和一个点的数组，找到一个进程的超集，这个超集可以单独拥有包含这些点的单元。    进一步的细节见[2.x.390]这里只报告不同的输入/输出类型。     [2.x.391] covering_rtree RTRee，它使我们能够识别并行计算中哪些进程可能拥有围绕给定点的单元。     [2.x.392] points 要考虑的点的一个向量。     [2.x.393] 一个包含以下信息的元组。
* 

* 
* 

* 
* 

 
 

 
* 
* - 一个以处理器等级为索引的地图。对于每个等级，它包含一个它可能拥有的点的索引向量。
* 

* 
* 

* 
* 

 
 

 
* 
* - 从[2.x.394]中的点的索引[2.x.395]到所有者的等级的地图；这些是找到单一可能所有者的点。
* 

* 
* 

* 
* 

 
 

 
* 
* - 从[2.x.396]中的点的索引[2.x.397]到猜测的所有者行列的地图；这些是发现有多个可能的所有者的点。   
* [2.x.398] 这个函数的实际返回类型，即上面提到的[2.x.399]的类型是  
* [1.x.21]
* 在线文档中对该类型进行了缩写，以提高本页面的可读性。 
* [0.x.66]*
   返回所有顶点的相邻单元。如果一个顶点也是一个悬空的节点，也会返回相关的粗略单元。顶点是按顶点索引排序的。这是由函数 [2.x.400] 返回的数字。注意，只使用由[2.x.401]返回的数组中标记的索引。 
* [0.x.67]*
   为[2.x.402]输出的每个顶点-单元组合返回一个归一化张量的向量（期望作为此函数的输入参数）。每个张量代表一个从顶点到各自单元中心的几何向量。    如果输入向量的大小不等于三角形的顶点数量，将抛出一个断言。 result[v][c]是顶点索引v的单位张量，表示第c个单元的中心相对于顶点v的方向。 
* [0.x.68]*
   返回最接近给定位置的单元格[2.x.403]的局部顶点索引 [2.x.404] 顶点的位置从（可选）[2.x.405]参数中提取，以保证在底层映射修改顶点位置时返回正确答案。 
* [0.x.69]*
   为与本地拥有的活动单元相关的每个顶点和悬挂节点计算一个全局唯一的索引。作为本地拥有的单元格的悬挂节点的幽灵单元格的顶点有一个全局索引。  然而，不[1.x.22]一个活动单元的其他顶点在这个处理器上没有全局索引。    地图的键是顶点的本地索引，值是全局索引。这些索引在细化或粗化后需要重新计算，并且可能是不同的。 
* [0.x.70]*
   返回一个[2.x.406]的每个坐标方向上的外延之间的比率中的最高值 此外，返回相对于最高伸长率的尺寸。     [2.x.407] cell一个指向单元格的迭代器。     [2.x.408] 一个[2.x.409] int, double>，这样[2.x.410]值是最高伸长率的尺寸，[2.x.411]值是[2.x.412]尺寸中的比率。  
* [0.x.71]*
    [2.x.413] 三角形的分区和子域  
* [0.x.72]*
   产生一个稀疏模式，其中非零条目表示两个单元格通过一个共同的面连接。稀疏模式的对角线条目也被设定。    行和列指的是使用单元格迭代器按自然顺序遍历的单元格。 
* [0.x.73]*
   产生一个稀疏度模式，其中非零条目表示两个单元格通过一个共同的顶点连接。稀疏模式的对角线条目也被设定。    行和列指的是使用单元格迭代器按自然顺序遍历的单元格。 
* [0.x.74]*
   为一个给定的水平网格产生一个稀疏模式，其中非零条目表示两个单元通过一个共同的顶点连接。稀疏模式的对角线条目也被设置。    行和列指的是使用单元格迭代器按自然顺序遍历的单元格。 
* [0.x.75]*
   使用图形分割器来分割构成整个域的活动单元。调用此函数后，所有活动单元的子域id的值将在0和[2.x.414]之间，你可以通过使用<tt>cell- [2.x.415]使用第三个参数来选择METIS或ZOLTAN提供的分区算法。METIS是默认的分区器。    如果deal.II没有与ZOLTAN或METIS一起安装，当选择相应的分区方法时，这个函数将产生一个错误，除非[2.x.416]是一个。  即，你可以写一个程序，使其在单处理器单分区的情况下运行，而不安装软件包，只有在需要多分区时才需要安装。   
* [2.x.417]如果[2.x.418]信号已被附加到[2.x.419]，那么这将被使用并传递给分区器。 
* [0.x.76]*
   这个函数执行的操作与上面的函数相同，只是它考虑到了一组特定的[2.x.420]，它允许分区器平衡图形，同时考虑到每个单元所花费的计算努力。   
* [2.x.421] 如果[2.x.422]向量为空，则不考虑加权。如果不是，那么这个向量的大小必须等于三角形中有效单元的数量。 
* [0.x.77]*
   这个函数与前一个函数的作用相同，即使用分区算法将一个三角形划分为由[2.x.423]标志确定的若干子域。    与前一个函数不同的是第二个参数，一个代表单元格之间连接模式的稀疏模式。    虽然上面的函数通过考虑哪些单元彼此相邻而直接从三角图中建立，但这个函数可以采用更精细的连接图。稀疏模式的大小需要是[2.x.424]，其中[2.x.425]是三角形中活动单元的数量。如果稀疏模式在位置[2.x.426]处包含一个条目，那么这意味着单元格[2.x.427]和[2.x.428]（按照主动单元格迭代器遍历的顺序）将被视为连接；然后分区算法将尝试以这样的方式划分域：（i）子域的大小大致相等，以及（ii）最小数量的连接被破坏。    这个函数主要适用于单元格之间存在仅在三角形中不存在的连接的情况（否则前面的函数将是更简单的用法）。这种连接可能包括域的边界的某些部分通过对称边界条件或积分进行耦合（例如，域中裂缝两边的摩擦接触），或者如果使用的数值方案不仅连接紧邻的单元，而且连接更大的邻近单元（例如，在求解积分方程时）。    此外，在默认的稀疏模式不完全足够的情况下，这个函数可能是有用的。这种情况可能会发生，因为默认情况下只是考虑面的邻居，而不是由边或顶点连接的相邻单元。虽然在使用连续有限元时，后者夫妇在邻接图中通常仍是紧密相连的，分区算法在这种情况下通常不会切断重要的连接。然而，如果网格中存在许多单元的顶点（分别比2D和3D中常见的4个或6个多得多）聚集在一起，那么就会有大量的单元跨顶点连接，但在仅使用面邻关系构建的连接图中却有几度的距离。在这样的情况下，分区算法有时可能会做出错误的决定，你可能想建立自己的连接图。   
* [2.x.429]如果[2.x.430]信号已被附加到[2.x.431]，那么这将被使用并传递给分区器。 
* [0.x.78]*
   这个函数执行的操作与上面的函数相同，只是它考虑到了一组特定的[2.x.432]，它允许分区器平衡图形，同时考虑到每个单元上所花费的计算努力。   
* [2.x.433] 如果[2.x.434]向量为空，则不考虑加权。如果不是，那么这个向量的大小必须等于三角形中有效单元的数量。 
* [0.x.79]*
   如果标志[2.x.435]被设置为 "true"（此函数的默认行为），则使用与p4est库中相同的分区方案生成构成整个域的活动单元的分区。  调用此函数后，所有活动单元的子域id的值将在0和[2.x.436]之间。你可以通过使用<tt>cell- [2.x.437]来访问一个单元的子域id。    
* [2.x.438] 如果标志[2.x.439]被设置为false，一个单元的子域可能会被放在不同的处理器上，即使它们都处于活动状态，这是p4est的一个假设。通过放宽这一点，我们可以创建拥有单个单元的分区（也适用于精炼网格）。 
* [0.x.80]*
   通过使用 "最年轻的孩子 "规则分配级别子域id来划分多网格层次结构的单元，也就是说，层次结构中的每个单元都由在森林中拥有其最左边孩子的处理器拥有，活跃的单元具有相同的子域id和级别子域id。你可以通过使用<tt>cell- [2.x.440]注意：这个函数假定活动单元已经被分区。 
* [0.x.81]*
   该函数允许询问由CellId对象识别的单元格的所属子域，该对象在当前进程中不一定存在。   
* [2.x.441]这个函数还没有为[2.x.442]实现。  
* [0.x.82]*
   对于每个活动单元，在输出数组中返回它属于哪个子域（由<tt>cell->subdomain_id()</tt>函数给出）。在调用此函数时，输出数组应该已经有了合适的大小。    这个函数返回每个单元格与一个子域的关联。如果你要寻找每个[2.x.443]DoF与一个子域的关联，请使用[2.x.444]函数。 
* [0.x.83]*
   计算有多少个单元与给定的[2.x.445]索引唯一相关。    如果没有具有给定[2.x.446]子域索引的单元格，该函数可能返回0。这种情况可能发生，例如，如果你试图将一个粗略的网格划分为更多的分区（每个处理器一个），而不是网格中的单元。    这个函数返回与一个子域相关的单元数。  如果你正在寻找[2.x.447]DoF与这个子域的关联，请使用[2.x.448]函数。 
* [0.x.84]*
   对于一个三角形，返回一个掩码，代表哪些顶点被当前进程 "拥有"，就像我们谈论本地拥有的单元或自由度一样（见[2.x.449]和[2.x.450] ）。  为了这个函数的目的，我们对本地拥有的顶点定义如下：一个顶点是由与该顶点相邻的所有单元的所有者中具有最小的子域id（相当于该处理器的MPI等级）的那个处理器所拥有。换句话说，位于三角形分区内部的顶点由这个分区的所有者拥有；对于位于两个或多个分区之间边界的顶点，所有者是所有相邻子域中拥有最小子域id的处理器。    对于顺序三角计算（相对于，例如[2.x.451]每个用户顶点当然是由当前处理器拥有的，即函数返回[2.x.452] 对于并行三角计算，返回的掩码是[2.x.453]返回的一个子集。     [2.x.454] triangulation 该函数评估哪些顶点是本地拥有的三角结构。   [2.x.455] 顶点的子集，如上所述。返回的数组长度等于Triangulation.n_vertices()，因此，可能大于[2.x.456]。  
* [0.x.85]*
    [2.x.457] 比较不同的网格  
* [0.x.86]*
   给出两个基于相同粗略网格的网格（即Triangulation或DoFHandler类型的对象），这个函数找出一组在这两个网格之间匹配的单元，其中最多只有一个网格在这个单元上更精细。换句话说，它找到了两个网格共同的最小单元，并且这些单元一起完全覆盖了该领域。    这个函数很有用，例如，在随时间变化的或非线性的应用中，我们必须对一个网格（例如，前一个时间步骤或非线性迭代的网格）上定义的解决方案与另一个网格（下一个时间步骤，下一个非线性迭代）的形状函数进行积分。例如，如果新的网格更细，那么就必须在粗的网格（Mesh_1）上获得解决方案，并将其内插到Mesh_2的相应单元中。反之，如果新的网格更粗，我们就必须用细网格形状函数的线性组合来表达粗网格的形状函数。无论哪种情况，我们都需要循环计算两个三角形中共同的最细的单元。这个函数返回一个与两个网格中的单元匹配的迭代器对的列表，可以用来达到这个目的。    请注意，这些迭代器的列表不一定是有序的，也不一定与作为参数的一个或两个网格中的单元格被遍历的顺序相一致。     [2.x.458] MeshType 一个满足[2.x.459] "MeshType概念 "要求的类型。   
* [2.x.460] 这个函数只能与[2.x.461]一起使用，当两个网格都使用相同的三角法时，因为在分布式三角法中，并非所有的单元都存储在本地，所以产生的列表可能不会覆盖整个域。 
* [0.x.87]*
   如果两个三角形是基于相同的粗略网格，则返回true。  这是通过检查它们在最粗层次上是否有相同数量的单元来确定的，然后再检查它们是否有相同的顶点。    这两个网格可能有不同的细化历史，超出了粗略的网格。 
* [0.x.88]*
   与上面的函数相同，但对DoFHandler类型的参数工作。  提供这个函数是为了允许对所有类型的代表三角形的容器或建立在三角形上的类调用have_same_coarse_mesh。     [2.x.462] MeshType 一个满足[2.x.463] "MeshType概念 "要求的类型。 
* [0.x.89]*
    [2.x.464] 处理扭曲的单元格  
* [0.x.90]*
   给出一个三角网格和一个单元格的列表，这些单元格的子节点由于网格细化而变得扭曲，尝试通过移动中心节点来修复这些单元格。    该函数返回一个子节点变形的单元格列表，这些单元格由于某种原因不能被修复。因此，返回的列表是输入参数的一个子集。    关于扭曲的单元格的概念的定义，见[2.x.465]"词汇表条目"。  传递给当前函数的第一个参数通常是[2.x.466]函数抛出的异常。 
* [0.x.91]*
    [2.x.467] 提取和创建单元格斑块 这些函数提取和创建围绕单个单元格的单元格斑块，并从中创建三角图。 
* [0.x.92]*
   该函数返回给定活动单元的所有活动邻居单元的列表。 这里，邻居被定义为与给定的单元至少有一部分共同的面，但不是边缘（在3D）或顶点邻居（在2D和3D）。    返回列表中的第一个元素是作为参数提供的单元格。  其余的是邻居。该函数在给定的单元格的所有面上循环，并检查该面是否不在域的边界上。然后，如果邻居单元没有任何子单元（也就是说，它与当前单元处于相同的细化水平，或者更粗），那么这个邻居单元将被添加到单元列表中。否则，如果邻接单元是细化的，因此有孩子，那么这个函数就会在当前面的所有子面中循环，将这些子面后面的邻接单元添加到要返回的列表中。     [2.x.468] MeshType 一个满足[2.x.469] "MeshType概念 "要求的类型。  在C++中，编译器不能从函数调用中确定[2.x.470]。你需要把它作为一个明确的模板参数跟在函数名后面指定。   [2.x.471] cell 指向网格中某一单元的迭代器。   [2.x.472] 构成给定单元周围补丁的活动单元的列表    
* [2.x.473] 补丁通常用于定义误差估计器，需要解决网格中每个单元周围的补丁上的局部问题。这也需要操作与补丁的单元相关的自由度。为此，在命名空间DoFTools中有更多的函数在处理补丁。   
* [2.x.474] 在并行分布式计算的背景下，只有在本地拥有的单元上调用这个函数才有意义。这是因为本地拥有的单元的邻居要么是本地拥有的单元，要么是幽灵单元。对于这两种情况，我们知道这些单元实际上是完整的、平行的三角形的真实单元。我们还可以查询这些单元的自由度。 
* [0.x.93]*
   这个函数接收一个活动单元的向量（以下命名为[2.x.475]patch_cells）作为输入参数，并返回一个它们的父单元的向量，其细化程度为最粗的公共水平。换句话说，找到那个生活在同一细化水平的细胞集合，使输入向量中的所有细胞都是该集合中的细胞的子代，或者本身就在该集合中。     [2.x.476] 容器 在C++中，编译器不能从函数调用中确定[2.x.477] 的类型。你需要把它作为一个明确的模板参数在函数名后面指定。这个类型必须满足网状容器的要求（见 [2.x.478] ）。     [2.x.479] patch_cells 一个活动单元的向量，本函数为其找到最粗的公共层的父单元。这个单元格向量通常是调用函数的结果 [2.x.480] [2.x.481] 具有输入单元格的最粗共同细化水平的单元格列表。 
* [0.x.94]*
   该函数从给定的活动单元向量中构造一个三角形（名为[2.x.482]）。这个向量（我们认为是对应于一个 "补丁 "的单元）包含了属于现有全局三角图的活动单元。这个函数的目标是建立一个局部三角图，其中只包含[2.x.483]中给出的活动单元（以及可能是形成一个有效三角图所需的最低数量的额外单元）。该函数还返回一个地图，允许识别输出Triangulation中的单元和输入列表中的相应单元。    该函数将源三角图中的单元格的顶点位置复制到从补丁单元格列表中建立的三角图中。 这增加了对那些已经被扰动或平滑的三角形的支持，这些扰动或平滑使得三角形偏离了标准的deal.II细化策略，即在面或边的中点放置新顶点。    这个函数实现的操作经常被用于定义需要解决每个单元及其邻居的 "局部 "问题的误差估计器。类似的结构在克莱门特插值算子的定义中是必要的，在这种情况下，我们需要解决一个形状函数支持范围内的所有单元的局部问题。这个函数然后从构成这样一个补丁的单元格列表中建立一个完整的三角函数；然后我们可以将一个DoFHandler附加到这样一个三角函数。    如果输入的单元格列表只包含同一细化级别的单元格，那么输出的Triangulation就只包含一个正好包含这些补丁单元的Triangulation。另一方面，如果输入单元生活在不同的细化水平上，即它们所在的三角图是自适应细化的，那么输出三角图的构造就不那么简单了，因为三角图的最粗层不能包含悬挂的节点。相反，我们首先要找到所有输入单元的共同细化级别，以及它们的共同父级（见[2.x.484]，从这些单元中建立一个三角结构，然后自适应地细化它，使输入单元也存在于输出三角结构中。    这个过程的一个结果是，输出的Triangulation可能包含比输入矢量中存在的更多的活动单元。  另一方面，人们通常不希望解决整个输出三角图的局部问题，而只希望解决其中与输入列表中的单元对应的单元。 在这种情况下，用户通常希望只在属于 "补丁 "的单元上分配自由度，而忽略那些多余的单元。目前的函数支持这种常见的要求，为输出三角图中与输入列表中的单元格匹配的单元格设置用户标志。  不属于原始补丁的单元将不会设置其[2.x.485]user_flag；然后我们可以避免使用FE_Nothing<dim>元素来分配自由度。     [2.x.486] 容器 在C++中，编译器不能从函数调用中确定[2.x.487] 的类型。你需要把它作为一个显式的模板参数在函数名后面指定。这种类型，满足了网状容器的要求（见 [2.x.488] ）。     [2.x.489] 补丁 一个来自共同三角形的活动单元的向量。  这些单元可能是也可能不是都在同一个细化水平上。   [2.x.490] local_triangulation 一个三角形，其活动单元与 [2.x.491] [2.x.492] patch_to_global_tria_map 一个如上所述建立的本地三角形与输入列表中单元迭代器之间的映射。 
* [0.x.95]*
   这个函数通过DoFHandler定义的自由度运行，并为每个自由度构建一个active_cell_iterators的向量，代表该自由度下相关基元的支持单元。这个函数最初是为实现局部投影而设计的，例如Clement插值，结合其他局部修补函数，如[2.x.493] DoFHandler的建立在Triangulation之上或[2.x.494]，都得到支持和适当处理。    其结果是代表与自由度相关的基元支持的单元补丁。 例如，使用FE_Q有限元，我们得到了接触自由度的标准单元补丁，然后添加其他单元来处理可能的悬挂节点约束。 使用FE_DGQ有限元，自由度在逻辑上被认为是单元的 "内部"，所以补丁将只由自由度所在的单个单元组成。     [2.x.495] dof_handler DoFHandler可以建立在三角或[2.x.496]有限元上，其自由度在逻辑上与顶点、直线、四边形或六边形相关。   [2.x.497]从局部相关单元上的自由度的global_dof_index到包含[2.x.498]在该自由度的基函数支持中的单元的向量的映射。 
* [0.x.96]*
    [2.x.499] 处理周期性域的问题  
* [0.x.97]*
   提供所有必要信息的数据类型，以创建周期性约束和相对于两个 "周期性 "单元面的周期性p4est森林。 
* [0.x.98]*
     与两个'周期性'面相关的单元格。   
* [0.x.99]*
     两个 "周期性 "面的局部面指数（相对于指定单元）。   
* [0.x.100]*
     在orthogonal_equality()和[2.x.500]中描述的第一个面相对于第二个面的相对方向（并存储为比特集）。   
* [0.x.101]*
     一个[2.x.501] [2.x.502] [2.x.503]旋转矩阵，描述了在约束到第二个面的DoF之前，应该如何修改第一个面的矢量值DoF。        旋转矩阵在[2.x.504]中使用，对有限元空间的参数[2.x.505]中列出的所有矢量值块进行旋转。更多细节见[2.x.506]和词汇表[2.x.507]"关于周期性条件的词汇表条目"。   
* [0.x.102]*
   对面的正交平等测试。     [2.x.508]和[2.x.509]被认为是相等的，如果其顶点之间可以通过正交平等关系实现一对一的匹配。    这里，两个顶点<tt>v_1</tt>和<tt>v_2</tt>被认为是相等的，如果[2.x.510]与单位方向的单位向量[2.x.511]平行，如果参数[2.x.512]是对spacedim x spacedim矩阵的引用，[2.x.513]被设置为[2.x.514]，否则[2.x.515]为身份矩阵。    如果匹配成功，[2.x.516]相对于[2.x.517]的_相对方向被返回到比特集[2.x.518]中，其中  
* [1.x.23]
* 在2D中，<tt>face_orientation</tt>总是<tt>true</tt>，<tt>face_rotation</tt>总是<tt>false</tt>，而face_flip具有<tt>line_flip</tt>的含义。更确切地说，在3D中。    <tt>face_orientation</tt>: <tt>真</tt>如果[2.x.519]和[2.x.520]有相同的方向。否则，[2.x.521]的顶点指数与[2.x.522]的顶点指数以下列方式匹配。   
* [1.x.24]
* <tt>face_flip</tt>: <tt>真</tt>如果匹配的顶点旋转了180度。   
* [1.x.25]
* <tt>face_rotation</tt>: <tt>真</tt>如果匹配的顶点逆时针旋转90度。   
* [1.x.26]
*以及任何的组合... 关于该主题的更多信息可以在[2.x.523]"词汇表 "文章中找到。 
* [0.x.103]*
   与上述函数相同，但不返回实际方向  
* [0.x.104]*
   这个函数将在给定的[2.x.524]（一个三角形或DoFHandler）的最粗的网格层次上收集周期性的面对，并将它们添加到矢量[2.x.525]中，而不改变原来的内容。    定义 "第一 "边界为所有边界面，其边界ID为[2.x.526] b_id1，"第二 "边界由所有属于[2.x.527] b_id2的面组成。    这个函数试图在orthogonal_equality()的帮助下将所有属于第一个边界的面与属于第二个边界的面进行匹配。    在PeriodicFacePair中返回的比特集编码了第一个面相对于第二个面的_相对_方向，更多细节请参见orthogonal_equality()的文档。    [2.x.528]指的是周期性被强制执行的空间方向。当匹配周期性面时，这个向量分量被忽略。    [2.x.529]是一个与面相切的矢量，当试图将 "第一 "边界的顶点与 "第二 "边界的相应顶点匹配时，该矢量将被添加到 "第一 "边界的顶点位置。这可以用来实现诸如[2.x.530]等条件。    可以选择指定一个[2.x.531]旋转[2.x.532]，描述在约束到第二个面的DoF之前，应该如何修改第一个面的矢量值DoF。[2.x.533]在两个地方使用。首先，[2.x.534]将被提供给orthogonal_equality()并用于匹配面。如果[2.x.537]与单位方向的单位向量[2.x.538]平行，则两个顶点[2.x.535]和[2.x.536]匹配（更多细节见[2.x.539]词汇表[2.x.540]"关于周期条件的词汇表条目 "和[2.x.541] ）。其次，[2.x.542]将被存储在PeriodicFacePair集合[2.x.543]中供进一步使用。     [2.x.544] MeshType 一个满足[2.x.545] "MeshType概念 "要求的类型。   
* [2.x.546] 创建的[2.x.547]可以在[2.x.548]和[2.x.549]中使用，以代数方式强制实现周期性。   
* [2.x.550] 因为元素将被添加到[2.x.551]中（而现有的条目将被保留），所以可以用不同的边界ID多次调用这个函数来生成一个具有所有周期对的向量。   
* [2.x.552] 由于周期性面对是在最粗的网格层次上找到的，因此有必要确保最粗层次的面有正确的边界指标设置。一般来说，这意味着在进行任何全局或局部网格细化之前，必须首先在粗大的网格上设置所有的边界指标。 
* [0.x.105]*
   collect_periodic_faces()的这个兼容版本只在单元格为[2.x.553]"标准方向 "的网格上工作。    这个函数不需要借助两个boundary_ids来定义 "第一 "和 "第二 "边界，而是将 "左 "边界定义为所有具有本地面指数[2.x.554]和边界指示器[2.x.555]的面，同样，"右 "边界由所有具有本地面指数[2.x.556]和边界指示器[2.x.557]的面组成，其坐标只在[2.x.558]部分不同的面被识别。    这个函数将在最粗的网格层次上收集周期性的面对，并将它们添加到[2.x.559]中，而不保留原来的内容。    更多细节见上述函数。   
* [2.x.560]这个版本的collect_periodic_faces()将不会在单元格不在[2.x.561]"标准方向 "的网格上工作。 
* [0.x.106]*
    [2.x.562] 处理边界和流形ID的问题  
* [0.x.107]*
   将边界ID复制到边界上的面和边的流形ID。新的三角测量对象的默认manifold_id是[2.x.563]这个函数将边界面和边的边界_id复制到相同面和边的manifold_id上，允许用户改变边界_id并将其用于边界条件，而不考虑几何形状，这将使用manifold_id来创建新点。只有活动单元会被迭代。当你的三角网格上只有一个活动层时，通常会调用这个函数。然后，网格细化会将这些指标继承到子单元、面和边上。    可选参数[2.x.564]表示该函数在将边界面和边的值复制到manifold_id后，是否应将其重置为默认值0。默认情况下，boundary_ids不做任何改动。   
* [2.x.565] [2.x.566] 边界  
* [0.x.108]*
   将给定的边界id映射到边界上的面和边上的给定流形id。    该函数将参数[2.x.567]中存在的边界面和边的边界id复制到[2.x.568]中相同面和边的相应流形id。    如果可选的参数[2.x.569]非空，[2.x.570]中的每个边界id将被替换为[2.x.571]中的相应边界id。 如果输入向量的大小不匹配，将抛出异常。如果[2.x.572]中指出的边界ID不存在于三角形中，在这个过程中会被简单地忽略。   
* [2.x.573] [2.x.574] 边界  
* [0.x.109]*
   将材料id复制到流形id。新Triangulation对象的默认manifold_id为[2.x.575]当细化发生时，Triangulation会询问在何处将新点定位到底层流形。    当从支持的输入格式中读取Triangulation时，可以存储在文件中的典型信息是边界面的边界条件（我们将其存储在面的边界_id中）、单元的材料类型（我们将其存储在单元的材料_id中）以及在某些情况下单元的子域ID（我们将其存储在单元的子域_id中）。    如果您将这些网格之一读入 Triangulation，您可能仍然希望使用输入文件中指定的 material_id 作为 manifold_id 描述。在这种情况下，您可以将一个Manifold对象与内部单元格相关联，该对象将被Triangulation用于查询Manifold对象的新点。该函数对活动单元进行迭代，并将 material_ids 复制到 manifold_ids 中。    可选参数[2.x.576]表示该函数是否也应设置面的manifold_ids（包括内部面和边界上的面）。如果设置为 "true"，那么每个面的manifold_id将等于周围manifold_ids的最小值，确保为三角结构的每个面选择一个唯一的manifold id。默认情况下，不计算面的manifold_id。   
* [2.x.577]   
* [0.x.110]*
   将与三角形[2.x.578]的单元格相关的流形指标传播到其同维度的一和二对象。    这个函数将面和边（包括内部和边界）的[2.x.579]设置为[2.x.580]方法返回的值，该方法与共享相同面或边的单元格的流形指标集合一起调用。    默认情况下，[2.x.581]在集合尺寸大于1时（即无法根据相邻单元格的流形指标来决定一个面或边应该有什么流形指标时）返回[2.x.582]，在集合尺寸为1时（即所有相邻单元格和面有相同的流形指标时）返回集合中包含的流形指标。    参数[2.x.583]允许您指定当一个面或一个边已经具有不同于[2.x.584]的流形指标时该如何处理。 如果标志是[2.x.585]，该边或面将保持其原始流形指标。  如果是[2.x.586]，那么这些面和边的流形指标也将根据[2.x.587]的返回值进行设置。  
* [0.x.111]*
   将函数对象提供的[2.x.588]类型的任意数据从本地拥有的单元交换到其他处理器上的幽灵单元。    在这个调用之后，你通常会从每个幽灵单元上收到[2.x.589]的数据，因为它是由拥有处理器上的[2.x.590]提供的。  你是否收到某个鬼魂单元上的[2.x.591]的信息，取决于[2.x.592]函数是否决定需要发送什么。它使用[2.x.593]机制来做：如果[2.x.594]函数的[2.x.595]返回对象是空的，那么这意味着它所调用的本地所有单元不需要发送数据。在这种情况下，[2.x.596]也不会在接收方与之对应的幽灵单元上被调用。另一方面，如果[2.x.597]对象不是空的，那么存储在它里面的数据将被发送到接收方，并通过它调用[2.x.598]函数。     [2.x.599] DataType 要通信的数据的类型。在许多情况下，这个数据类型不能被编译器推断出来，例如，如果你为这个函数的第二个和第三个参数提供lambda函数。在这种情况下，你必须明确指定[2.x.601]作为函数调用的一个模板参数。   [2.x.602] MeshType [2.x.603] [2.x.604] mesh 类型的变量，满足[2.x.605] "MeshType概念 "的要求。   [2.x.606] pack 对每个本地拥有的、在其他地方是幽灵单元的单元，将被调用的函数。如上所述，该函数可以返回一个类型为[2.x.607]的常规数据对象，表示应该发送数据，或者返回一个空的[2.x.608]，表示这个单元不需要发送任何东西。   [2.x.609] unpack 对于每个发送了数据的ghost单元，即发送方的[2.x.610]函数返回一个非空的[2.x.611]对象，将调用该函数。    然后，[2.x.612]函数会被拥有该单元的处理器所发送的数据调用。   [2.x.613] cell_filter 只有在这个过滤函数返回值为`true'的单元才会被通信。在默认情况下，该函数对所有单元都返回true，因此，所有相关的单元都被传送。    [1.x.27] 下面是一个例子，显示了这个函数在具体环境中的使用。它取自于确保[2.x.614]（一个无符号整数）从本地拥有的单元（人们可以在具有hp-capabilities的DoFHandler对象中设置它）传送到其他处理器上相应的ghost单元的代码，以确保人们也能在这些处理器上查询到正确的值。 
* [1.x.28]
* 你会注意到[2.x.615] lambda函数返回一个`无符号的int`，而不是[2.x.616] int>`。前者会自动转换为后者，意味着数据将总是被传送到另一个处理器。    (实际上，[2.x.617]函数需要更复杂一些，因为它不允许在幽灵单元上调用[2.x.618]。相反，[2.x.619]函数直接访问内部数据结构。但你会明白的
* 
* - 该代码也可以通过与上述类似的调用来交换材料ID、用户索引、边界指示器或任何种类的其他数据）。)  
* [0.x.112]*
   交换由函数对象提供的[2.x.620]类型的任意数据，从本地拥有的水平单元到其他进程上的幽灵水平单元。    除了 exchange_cell_data_to_ghosts() 的参数外，这个函数允许提供一个 [2.x.621] 函数，它可以用来只交流有标记的单元。在默认情况下，所有相关单元都会被通信。 
* [0.x.113] 与MPI通信器的所有处理器交换边界框的向量 [2.x.623] 这个函数的目的是交换边界框，描述用函数 [2.x.624] 获得的分布式三角形中本地拥有的单元。    输出向量的大小是MPI通信器的进程数：其第i个条目包含第i个进程的向量[2.x.625]。 
* [0.x.114]*
   在这个集体操作中，每个进程提供一个边界框的向量和一个通信器。  所有这些向量被收集在每个进程中，组织在一个搜索树中，然后返回。    我们的想法是，边界框的向量描述了每个进程上计算的相关属性，这也可能对其他进程有用。一个例子是，如果输入的边界盒向量对应于一个[2.x.626]对象的局部拥有的网格分区的覆盖（见[2.x.627]）。虽然这些边界盒可能与其他进程的边界盒重叠，但如果试图找出这一点的进程有一个其他进程的边界盒列表，那么找到哪个进程拥有包围给定点的单元格就容易得多。    返回的搜索树对象是一个带有打包算法的r-tree，由boost库提供。更多信息见https://www.boost.org/doc/libs/1_67_0/libs/geometry/doc/html/geometry/spatial_indexes/introduction.html。    在返回的树中，每个节点都包含一对元素：第一个是一个边界框，第二个是其本地描述包含边界框的进程的等级。   
* [2.x.628] 这个函数是一个集体操作。 
* [0.x.115]*
   对于一个给定的三角形，收集所有由于周期性而重合的本地相关顶点。    重合的顶点被放入一个组，例如。[1, 25, 51]，用其中的一个任意元素来标记，例如。"1". 所有重合顶点都将标签存储到它的组中，这样它们就可以快速访问该组中的所有重合顶点：例如。51
* 
-> "1"
* 
--> [1, 25, 51] [2.x.629] tria Triangulation.    [2.x.630] 重合顶点组（coinciding_vertex_groups） 用其中的任意元素标注的等价类（重合顶点）的映射。              不重合的顶点被忽略。   [2.x.631] vertex_to_coinciding_vertex_group 一个顶点到一组重合顶点的标签的映射。不包含在这个向量中的顶点不与任何其他顶点重合。 
* [0.x.116]*
   返回一个地图，对于每个顶点，列出其子域与该顶点相邻的所有进程。     [2.x.632] tria Triangulation。 
* [0.x.117]*
   一种结构，允许将[2.x.633]类型的单元数据从一个处理器传输到另一个处理器。它相当于一个打包的缓冲区，存储了一个CellId的向量和一个[2.x.634]类型的向量。这个类通过提供保存/加载函数，能够把CellId的向量和[2.x.635]类型的相关数据打包成一个流，从而促进了传输。    类型[2.x.636]被假定为可被[2.x.637]序列化（例如[2.x.638] ）。 
* [0.x.118]*
     一个向量，用于存储要转移的单元格的ID。   
* [0.x.119]*
     一个要传输的单元格数据的向量。   
* [0.x.120]*
     使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)[2.x.639]将此对象的数据写入一个流，以便进行序列化。用户有责任保持[2.x.640]的大小与[2.x.641]的大小相等。   
* [0.x.121]*
     使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)从一个流中读取此对象的数据，以便进行序列化。    扔掉之前的内容。   
* [0.x.122]*
     为了序列化的目的，使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据读入或写入一个流中。   
* [0.x.123]*
   行进方程（2D）和行进立方程算法的实现，用于创建数据结构（Point和CellData的向量），在标量场的等高线/轮廓上创建线性/双线性表面网格。    为了提高等值线/轮廓的近似度和产生的线性表面网格，可以增加细分的数量，使算法不是在一个单元上运行，而是在子单元上运行，顶点值由单元值插值而成。   
* [2.x.642] 得到的网格将包含二维的线和三维的三角形。   
* [2.x.643]生成的网格将不是高质量的，因为如果网格在靠近顶点处被切割，可能会包含直径非常小的单元。 
* [0.x.124]*
     矢量的数值类型。   
* [0.x.125]*
     构造函数。   
* [0.x.126]*
     处理所有本地拥有的单元格并为所有被切割的单元格填充[2.x.644]和[2.x.645]。   
* [0.x.127]*
     处理所提供的单元格并为所有被切割的单元格填充[2.x.646]和[2.x.647]。       
* [2.x.648]如果单元格没有被切割，产生的向量为空。   
* [0.x.128]*
     内部函数创建一个具有n_subdivisions+1同等位置正交点的正交规则。   
* [0.x.129]*
     处理一个单元。   
* [0.x.130]*
     处理一个子单元（2D）。       
* [2.x.649]带有鞍状点的子单元被忽略。在这种情况下，请增加子单元的数量。   
* [0.x.131]*
     处理一个子单元（3D）。   
* [0.x.132]*
     每个单元在每个方向上被细分的数量，以提高近似度。   
* [0.x.133]*
     绝对公差，指定顶点和切割点之间的最小距离，从而使一条线被认为是被切割的。   
* [0.x.134]*
     内部使用的FEValues，并以正确的细分数设置正交规则。   
* [0.x.135]*
    [2.x.650] 异常情况  
* [0.x.136]*
   例外情况  
* [0.x.137]*
   异常情况  
* [0.x.138]*
   异常情况  
* [0.x.139]*
   异常情况  
* [0.x.140]*
   异常情况  
* [0.x.141]*
 当一个网格的边缘不能被定向时，就会抛出一个异常。
* 

* 
* [2.x.651]为了向后兼容旧的GridReordering类，这个异常不在GridTools命名空间。
* 

* 
* [2.x.652] 

 
* [0.x.142]*
       方法[2.x.653]需要沿着单线的表面求导数。一般来说，这些导数不能用有限差分来近似，而是用df/dx_i形式的特殊差分。
* 
* - df/dx_j [2.x.654]可以[2.x.655]被逼近。这[2.x.656]只是存储了由模版近似的两个导数（在上面的例子中[2.x.657]）。     
* [0.x.143]*
       用两点居中的方案对一阶导数进行标准的二阶逼近。这在下面的一维牛顿方法中使用。     
* [0.x.144]*
       二阶导数的标准二阶近似，采用三点为中心的方案。这在下面的一维牛顿方法中使用。     
* [0.x.145]*
       导数的四阶近似 df/dx_i
* 
* - df/dx_j 其中[2.x.658]是由[2.x.659]cross_derivative指定。导数近似在[2.x.660]，步长为[2.x.661]，函数为[2.x.662] 。      
* [0.x.146]*
       在[2.x.663]中使用的优化算法本质上是一种梯度下降法。这个函数计算目标函数梯度的条目；更多信息请参见[2.x.664]里面的注释描述。     
* [0.x.147]*
       投射到一个d-线性对象上。这比project_to_object中的一般算法更精确，但只适用于由线性、双线性或三线性映射描述的几何图形。     
* [0.x.148]

