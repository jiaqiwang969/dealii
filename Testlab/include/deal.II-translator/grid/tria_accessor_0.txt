include/deal.II-translator/grid/tria_accessor_0.txt
[0.x.0]*
     一个类型的实现，用它来存储访问器对象的级别。我们只在<tt>structdim == dim</tt>的情况下需要它。    否则，一个空对象就足够了。   
* [0.x.1]*
         默认构造函数。       
* [0.x.2]*
         虚构的构造函数。只允许零级。       
* [0.x.3]*
         虚数转换操作符。返回零级。       
* [0.x.4]*
     实现一个类型，用它来存储访问器对象的级别。我们只在<tt>structdim == dim</tt>的情况下需要它。    否则，一个空对象就足够了。   
* [0.x.5]*
 一个包含访问器类所使用的异常类的命名空间。

* 
* [0.x.6]*
  
* [2.x.0]   
* [0.x.7]*
   单元不是[2.x.1]的 "活动 "单元，但它已经有了孩子。一些操作，如设置细化标志或访问自由度，只能在活动单元上实现。   
* [2.x.2]   
* [0.x.8]*
   试图访问一个事实上处于活动状态的单元的子单元。   
* [2.x.3]   
* [0.x.9]*
   试图访问处于三角结构最粗层的单元的父级。   
* [2.x.4]   
* [0.x.10]*
  
* [2.x.5]   
* [0.x.11]*
  
* [2.x.6]   
* [0.x.12]*
  
* [2.x.7]   
* [0.x.13]*
  
* [2.x.8]   
* [0.x.14]*
  
* [2.x.9]   
* [0.x.15]*
   你试图访问一个面孔的级别，但是面孔没有固有的级别。一个面的级别只能由相邻面的级别决定，这又意味着一个面可以有几个级别。   
* [2.x.10]   
* [0.x.16]*
   你试图得到一个面的周期性邻居，而这个面并没有周期性邻居。关于这方面的更多信息，请参考[2.x.11]"周期性边界的条目"。 
* [2.x.12]   
* [0.x.17]*
  
* [2.x.13]   
* [0.x.18]*
 TriaRawIterator和派生类所使用的访问器类的基类。
* 该类只提供迭代器所需的基本功能（存储必要的数据成员，提供比较运算符等），但没有实际解除数据定义的功能。这是在派生类中完成的。
* 在实现中，该类的行为在<tt>structdim==dim</tt>（网格的单元）和<tt>structdim&lt;dim</tt>（面和边）的情况下有所不同。对于后者，#present_level总是等于0，构造函数不可能在这里收到正值。对于单元格来说，任何级别都是可能的，但只有那些在Triangulation的级别范围内的级别是合理的。此外，函数objects()要么返回具有同一层次的所有单元的容器，要么返回具有该维度的所有对象的容器（<tt>structdim&lt;dim</tt>）。
* 这个类的一些内部情况在 [2.x.14] 中讨论。
* 

* 
* [2.x.15] 

* 
* [2.x.16] 

 
* [0.x.19]*
   这个访问器所代表的对象所处空间的尺寸。  例如，如果这个访问器代表一个四边形，它是四维空间中一个二维表面的一部分，那么这个值就是四。 
* [0.x.20]*
   这个访问器所代表的事物的尺寸，是这个访问器的一部分。例如，如果这个访问器代表一条线，是六面体的一部分，那么这个值就是三。 
* [0.x.21]*
   该访问器所代表的当前对象的尺寸。例如，如果它是线（不管它是四面体还是六面体的一部分，也不管我们处于什么维度），那么这个值就等于1。 
* [0.x.22]*
   复制运算符。这些操作符通常在类似<tt>iterator a,b;a=*b;</tt>的情况下使用。据推测，这里的意图是将[2.x.17]所指向的对象复制到[2.x.18]所指向的对象。然而，取消引用迭代器的结果不是一个对象，而是一个访问器；因此，这个操作对三角形的迭代器没有用。  因此，这个操作被声明为删除，不能使用。 
* [0.x.23]*
   声明该访问器类期望从迭代器类中得到的数据类型。由于纯三角迭代器不需要额外的数据，这个数据类型是[2.x.19]。  
* [0.x.24]*
   构造函数。受保护的，因此只能从好友类中调用。 
* [0.x.25]*
   复制构造函数。用完全相同的数据创建一个对象。 
* [0.x.26]*
   复制操作符。因为这只是从迭代器中调用，所以不要返回任何东西，因为迭代器会返回自己。    这个方法是受保护的，因为它只能从迭代器类中调用。 
* [0.x.27]*
   复制操作符。创建一个具有完全相同数据的对象。 
* [0.x.28]*
   访问器的比较运算符。这个操作符在比较迭代器进入三角形的对象时使用，例如，当把它们放入一个 [2.x.20] 如果#structure_dimension小于#dimension，我们只是比较这样一个对象的索引，因为面和边没有层次。如果#structure_dimension等于#dimension，我们首先比较层次，只有在层次相等时才比较索引。 
* [0.x.29]*
   比较是否相等。 
* [0.x.30]*
   比较不平等。 
* [0.x.31]*
    [2.x.21] 迭代器的推进  
* [0.x.32]*
    [2.x.22]   
* [0.x.33]*
   该操作符将迭代器推进到下一个元素。    仅适用于[2.x.23]。如果有更多的元素，下一个元素就是这一层的下一个。如果现在的元素是这一层的最后一个，则访问下一层的第一个。 
* [0.x.34]*
   这个操作符将迭代器移动到前一个元素。    仅适用于[2.x.24]。如果<tt>index>0</tt>，前一个元素是本层的前一个。如果现在的元素是这一层的第一个，则访问前一层的最后一个。 
* [0.x.35]*
    [2.x.25]   
* [0.x.36]*
   访问具有相同维度的Triangulation的其他对象。 
* [0.x.37]*
   用来从迭代器向访问器类传递参数的数据类型，无论这些参数的数量类型是什么，都是统一的。 
* [0.x.38]*
    [2.x.26] 迭代器地址和状态  
* [0.x.39]*
    [2.x.27]   
* [0.x.40]*
   对于单元格，该函数返回该单元格所处的网格层次。对于所有其他对象，该函数返回零。   
* [2.x.28] 在一个三角形对象中，单元格由一对[2.x.29]唯一标识，前者是单元格的细化层次，后者是该细化层次中单元格的索引（前者是本函数的返回值）。  因此，可能有多个处于不同细化级别的单元格，但在其级别中具有相同的索引。与此相反，如果当前对象对应的是一个面或边，那么该对象就只能通过其索引来识别，因为面和边没有细化级别。对于这些对象，当前函数总是返回0作为级别。 
* [0.x.41]*
   返回当前级别上指向的元素的索引。    在Triangulation对象中，单元格由一对[2.x.30]唯一标识，前者是单元格的细化级别，后者是该细化级别中单元格的索引（后者是本函数的返回值）。因此，可能有多个处于不同细化级别的单元格，但在其级别中具有相同的索引。与此相反，如果当前对象对应于一个面或边，那么该对象只能通过其索引来识别，因为面和边没有细化级别。   
* [2.x.31] 这个函数返回的索引对象并不是每个层次上的连续数字集：从一个单元到另一个单元，一个层次中的一些索引可能没有使用。   
* [2.x.32] 如果三角图实际上是[2.x.33]类型的，那么指数就只相对于存储在当前处理器上的分布式三角图的那部分。换句话说，生活在不同处理器上的三角形分区中的单元可能具有相同的索引，即使它们指的是同一个单元，也可能具有不同的索引，即使它们指的是同一个单元（例如，如果一个单元被一个处理器拥有，但在另一个处理器上是一个幽灵单元）。 
* [0.x.42]*
   返回迭代器的状态。 关于一个访问器可能处于的不同状态，请参考TriaRawIterator文档。 
* [0.x.43]*
   返回该类所指向的对象所属于的三角形的引用。 
* [0.x.44]*
    [2.x.34]   
* [0.x.45]*
   如果这是一个单元格（<tt>structdim==dim</tt>），则是水平。否则，包含零。 
* [0.x.46]*
   用于存储目前所使用的级别上目前所指向的元素的索引。 
* [0.x.47]*
   指向我们行动的三角图的指针。 
* [0.x.48]*
 一个表示没有意义的迭代器的访问对象的类，如1d网格上的四维迭代器。 这个类不能用来创建对象（事实上，如果试图这样做的话，它会抛出一个异常，但它有时允许以独立于维度的方式，以更简单的方式编写代码。例如，它允许编写独立于维度的四边形迭代器的代码
* 
* - 即，也可以在1d中进行编译
* 
* - 因为四元迭代器（通过当前的类）存在，并且在语法上是正确的。然而，你不能期望在1d中创建这些迭代器中的一个实际对象，这意味着你需要期望将使用四元迭代器的代码块包装成类似[2.x.35]的东西。
* 
* - 这反正是很有意义的。
* 这个类提供了Accessor类与Iterator类交互所需的最小接口。然而，这只是为了语法上的正确性，这些函数除了产生错误之外，没有任何作用。
* 

* 
* [2.x.36] 

 
* [0.x.49]*
   从基类传播别名到这个类。 
* [0.x.50]*
   构造器。 这个类用于在给定维度中没有意义的迭代器，例如1D网格的四边形。因此，虽然这种对象的创建在语法上是有效的，但它们在语义上没有意义，当这种对象实际生成时，我们会产生一个异常。 
* [0.x.51]*
   复制构造函数。 这个类用于在给定维度中没有意义的迭代器，例如1D网格的四边形。因此，虽然这种对象的创建在语法上是有效的，但它们在语义上没有意义，当这种对象实际生成时，我们会产生一个异常。 
* [0.x.52]*
   从其他访问器转换到当前无效的访问器。这当然也会导致运行时错误。 
* [0.x.53]*
   虚假的复制操作。 
* [0.x.54]*
   假的比较运算符。 
* [0.x.55]*
   虚构的运算符，以使事情得到编译。什么都不做。 
* [0.x.56]*
   代表访问器是否指向已使用或未使用的对象的假函数。 
* [0.x.57]*
   代表访问器是否指向有子对象的假函数。 
* [0.x.58]*
   总是返回[2.x.37]的假函数。  
* [0.x.59]*
   总是返回[2.x.38]的假函数。  
* [0.x.60]*
   总是抛出的假函数。 
* [0.x.61]*
   总是抛出的假函数。 
* [0.x.62]*
   抽取顶点的假函数。返回原点。 
* [0.x.63]*
   抽取线的假函数。返回一个默认构造的线段迭代器。 
* [0.x.64]*
   抽取四边形的假函数。返回一个默认的四边形迭代器。 
* [0.x.65]*
 一个提供对三角形中的对象的访问的类，如它的顶点、子对象、子女、几何信息等。这个类表示维度为[2.x.39]（即1代表线，2代表四边形，3代表六边形）的对象在维度为[2.x.40]（即1代表线的三角结构，2代表四边形的三角结构，3代表六边形的三角结构）的三角结构中，该空间嵌入维度为[2.x.41 ]（对于[2.x.42]，三角形代表[2.x.43]中的一个域，对于[2.x.44]，三角形是嵌入高维空间中的流形）。
* 对于[2.x.45]等于零的情况，即对于三角化的顶点，该类有一个特殊化。
* 

* 
* [2.x.46] 

 
* [0.x.66]*
   从基类传播别名到这个类。 
* [0.x.67]*
   构造函数。 
* [0.x.68]*
   复制构造函数不被删除，但复制的构造元素不应该被修改，也是对复制赋值运算符的注释。 
* [0.x.69]*
   移动构造函数。 
* [0.x.70]*
   转换构造器。这个构造器的存在是为了使某些构造在独立于维度的代码中写得更简单。例如，它允许将一个面的迭代器分配给一个线的迭代器，这个操作在2D中很有用，但在3D中没有任何意义。这里的构造函数是为了使代码符合C++的要求而存在的，但它会无条件地中止；换句话说，将一个面迭代器分配给一个线迭代器，最好放在一个if语句中，检查维度是否为2，并在3D中分配给一个四边形迭代器（如果没有这个构造函数，如果我们碰巧为2d编译，这个操作是非法的）。 
* [0.x.71]*
   另一个对象之间的转换操作符，就像之前的那个一样，没有意义。 
* [0.x.72]*
   复制运算符。这些运算符通常在类似<tt>iterator a,b;a=*b;</tt>的情况下使用。据推测，这里的意图是将[2.x.47]所指向的对象复制到[2.x.48]所指向的对象。然而，取消引用迭代器的结果不是一个对象，而是一个存取器；因此，这个操作对三角形的迭代器没有用。  因此，这个操作被声明为删除，不能使用。 
* [0.x.73]*
   移动赋值运算符。允许移动。 
* [0.x.74]*
   默认的解构器。 
* [0.x.75]*
   测试元素是否被使用。 返回值是[2.x.49]对于所有的迭代器都是正常的迭代器或活动的迭代器，只有原始迭代器可以返回[2.x.50]因为原始迭代器只在库的内部使用，你通常不需要这个函数。 
* [0.x.76]*
    [2.x.51] 访问子对象  
* [0.x.77]*
    [2.x.52]   
* [0.x.78]*
   指向与此对象相连接的[2.x.53]顶点的指针。如果[2.x.54]，则抛出一个异常。 
* [0.x.79]*
   返回当前对象的第i个顶点的全局索引。关于顶点编号的惯例在GeometryInfo类的文档中有所规定。    请注意，返回值只是几何顶点的索引。  它与可能与之相关的自由度无关。  关于这一点，请参阅[2.x.55]函数。   
* [2.x.56]尽管有这个名字，这里返回的索引只是全局的，即它是特定于一个特定的三角形对象，或者，在三角形实际上是[2.x.57]类型的情况下，特定于存储在当前处理器上的分布式三角形的那一部分。 
* [0.x.80]*
   返回一个对[2.x.58]顶点的引用。该引用不是常量，也就是说，可以在赋值的左侧调用该函数，从而在三角剖分中移动单元的顶点。  当然，这样做需要你确保顶点的新位置保持有用。
* 
* - 例如，避免倒置或其他扭曲的情况（另见[2.x.59]"本词汇表条目"）。   
* [2.x.60] 当一个单元被细化时，它的子单元继承了它们与母单元共享的那些顶点的位置（加上为新的子单元创建的边、面和单元内部的新顶点的位置）。如果一个单元的顶点被移动，这意味着其子单元也将使用这些新的位置。  另一方面，想象一下2D的情况，你有一个被精化的单元（有四个子单元），然后你移动连接所有四个子单元的中心顶点。如果你再次将这四个子单元粗化到母单元，那么移动的顶点的位置就会丢失，如果在以后的步骤中，你再次细化母单元，那么新的顶点将再次被放置在与第一次相同的位置上。
* 
* - 即，不在你之前移动的位置。   
* [2.x.61] 如果你有一个[2.x.62]对象，上述的行为是相关的。在那里，细化一个网格总是涉及到重新划分。换句话说，你可能在一个处理器上移动到不同位置的本地拥有的单元的顶点（见[2.x.63]"这个词汇表条目"），在网格细化时可能被移动到不同的处理器上（即使这些特定的单元没有被细化），这将根据他们之前拥有的粗略单元的位置重新创建他们的位置，而不是根据这些顶点在之前拥有它们的处理器的位置。换句话说，在并行计算中，你可能必须在每次网格细化后明确地移动节点，因为顶点的位置可能会也可能不会在伴随着网格细化的重新划分中被保留下来。 
* [0.x.81]*
   指向与此物体相邻的[2.x.64]线的指针。 
* [0.x.82]*
   围绕此对象的[2.x.65]线的索引。    只对<tt>structdim>1</tt>实现，否则会产生异常。 
* [0.x.83]*
   指向包围此对象的[2.x.66]四边形的指针。 
* [0.x.84]*
   绑定此对象的[2.x.67]四边形的索引。    只对<tt>structdim>2</tt>实现，否则产生异常。 
* [0.x.85]*
    [2.x.68]   
* [0.x.86]*
    [2.x.69] 子对象的方向  
* [0.x.87]*
    [2.x.70]   
* [0.x.88]*
   返回索引为[2.x.71]的面的法线是否指向标准方向（[2.x.72]），或者是否相反（[2.x.73] 哪个是标准方向，用GeometryInfo类来记录。在1d和2d中，它总是[2.x.74]，但在3d中它可能是不同的，见GeometryInfo类文档中的相应讨论。    这个函数实际上只在库的内部使用，除非你绝对知道这是怎么回事。 
* [0.x.89]*
   返回索引为[2.x.75]的面是否旋转了180度（[2.x.76]为真）或不旋转（[2.x.77]在1d和2d中，这总是[2.x.78]，但在3d中可能不同，见GeometryInfo类文档中的相关讨论。    这个函数实际上只在库的内部使用，除非你绝对知道这是怎么回事。 
* [0.x.90]*
   返回索引为[2.x.79]的面是否旋转了90度（[2.x.80]为真）或不旋转（[2.x.81]在1d和2d中，这总是[2.x.82]，但在3d中可能不同，见GeometryInfo类文档中的相关讨论。    这个函数实际上只在库的内部使用，除非你绝对知道这是怎么回事。 
* [0.x.91]*
   返回索引为[2.x.83]的线条是否朝向标准方向。 [2.x.84]表示线的方向是从顶点0到顶点1，否则就是相反的方向。在1d和2d中，它总是[2.x.85]，但在3d中它可能是不同的，见GeometryInfo类文档中的相应讨论。    这个函数实际上只在库的内部使用，除非你绝对知道这是怎么回事。    这个函数查询[2.x.86]。  
* [0.x.92]*
    [2.x.87]   
* [0.x.93]*
    [2.x.88]访问儿童  
* [0.x.94]*
    [2.x.89]   
* [0.x.95]*
   测试对象是否有子代。 
* [0.x.96]*
   返回此对象的直系子女数。未精炼的单元格的子代数为零。 
* [0.x.97]*
    [2.x.90] 使用n_active_descendants()代替。 
* [0.x.98]*
   计算并返回该对象的活动后裔的数量。例如，如果一个六边形的所有八个子单元都被进一步各向同性地精炼了一次，返回的数字将是64，而不是80。    如果目前的单元没有被细化，则返回一个。    如果把三角结构看成是一个森林，每棵树的根都是粗大的网格单元，节点都有后代（单元的子女），那么这个函数就会返回源自当前对象的子树中终端节点的数量；因此，如果当前对象没有被进一步细化，答案是1。 
* [0.x.99]*
   返回这个对象被精炼的次数。请注意，并不是所有的子对象都被精炼了那么多次（这就是为什么我们要在前面加上[2.x.91]的原因，返回的数字是这个对象的任何分支中的最大精炼次数。    例如，如果这个对象被精炼了，并且它的一个子对象正好再被精炼一次，那么<tt>max_refinement_depth</tt>应该返回2。    如果这个对象没有被精炼（即它是活动的），那么返回值是0。 
* [0.x.100]*
   返回一个指向[2.x.92]子对象的迭代器。 
* [0.x.101]*
   返回当前单元格上[2.x.93]的子数。这是[2.x.94]的反函数。  
* [0.x.102]*
   返回该对象的迭代器，该对象与各向同性细化的第i个孩子相同。如果当前对象是各向同性细化的，那么返回的对象就是第i个子对象。如果当前对象是各向异性精炼的，那么返回的子对象实际上可能是该对象的孙子，或者根本就不存在（在这种情况下会产生一个异常）。 
* [0.x.103]*
   返回这个单元格的RefinementCase。 
* [0.x.104]*
   [2.x.95]子单元的索引。如果单元格的子代被访问，则子代的级别比本单元格的级别高一个。面的孩子没有级别。如果子单元不存在。
* 
* - 被返回。 
* [0.x.105]*
   [2.x.96]各向同性的子女的索引。参见isotropic_child()函数对这个概念的定义。 如果该子集不存在。
* 
* - 被返回。 
* [0.x.106]*
    [2.x.97]   
* [0.x.107]*
    [2.x.98] 处理边界指标  
* [0.x.108]*
    [2.x.99]   
* [0.x.109]*
   返回此对象的边界指示器。    如果返回值是特殊值[2.x.100]，那么这个对象就在域的内部。     [2.x.101] [2.x.102] "关于边界指标的词汇条目"  
* [0.x.110]*
   设置当前对象的边界指标。这与boundary_id()函数的情况相同。    这个函数只设置当前对象本身的边界对象，而不是绑定它的指标。例如，在3D中，如果这个函数被调用到一个面，那么绑定这个面的4条边的边界指标保持不变。如果你想同时设置面和边的边界指标，请使用set_all_boundary_ids()函数。你可以在 [2.x.103] 的结果部分看到没有使用正确函数的结果。     [2.x.104] 你不应该设置内部面（不在域的边界上的面）的边界指示器，也不应该将外部面的边界指示器设置为[2.x.105]（这个值是为其他目的保留的）。如果边界单元的边界指示器为[2.x.106]，或者内部单元的边界指示器不是[2.x.107]，算法可能无法工作或产生非常混乱的结果。 不幸的是，当前对象没有办法找出它是否真的处于域的边界，因此无法确定你试图设置的值在当前情况下是否有意义。   
* [2.x.108] [2.x.109] [2.x.110] "关于边界指标的词汇条目"  
* [0.x.111]*
   像set_boundary_id()那样做，但也要设置约束当前对象的边界指标。例如，在3D中，如果对一个面调用set_boundary_id()，那么绑定该面的4条边的边界指标保持不变。相反，如果你调用当前函数，面和边的边界指示器都被设置为给定值。    如果你在3D中设置面的边界指示器（在2D中，该函数的作用与set_boundary_id()相同），并且你这样做是因为你想用一个弯曲的边界对象来表示与当前面相对应的那部分边界，那么这个函数就很有用。在这种情况下，Triangulation类需要弄清楚在网格细化时将新的顶点放在哪里，高阶Mapping对象也需要弄清楚曲线边界近似的新插值点应该在哪里。在这两种情况下，这两个类首先要确定边界面边缘的插值点，询问边界对象，然后再向边界对象询问对应于边界面内部的插值点。为了使其正常工作，仅仅设置了面的边界指示器是不够的，还需要设置约束面的边缘的边界指示器。这个函数一次就完成了所有这些工作。你可以在 [2.x.111] 的结果部分看到没有使用正确函数的结果。   
* [2.x.112] [2.x.113] [2.x.114] "关于边界指标的词汇条目"  
* [0.x.112]*
   返回这个对象是否在边界上。显然，这个函数的使用只适用于<tt>dim [2.x.115]然而，对于<tt>dim==structdim</tt>，一个对象是一个单元，CellAccessor类提供了另一种可能性来确定一个单元是否在边界。 
* [0.x.113]*
   返回该对象所使用的流形对象的常数引用。    正如[2.x.116]模块中所解释的，寻找合适的流形描述的过程涉及到查询流形或边界指标。更多信息见那里。 
* [0.x.114]*
    [2.x.117]   
* [0.x.115]*
    [2.x.118] 处理流形指标的问题  
* [0.x.116]*
    [2.x.119]   
* [0.x.117]*
   返回此对象的歧管指标。    如果返回值是特殊值[2.x.120]，那么这个对象就与一个标准的笛卡尔流形描述相关。     [2.x.121] [2.x.122] "关于流形指标的词汇条目"  
* [0.x.118]*
   设置流形指示器。 与<tt>manifold_id()</tt>函数同样适用。    注意，它只设置当前对象本身的流形对象，而不是绑定它的指标，也不是其子对象的指标。例如，在3D中，如果对一个面调用这个函数，那么绑定该面的4条边的流形指标就不会改变。如果你想同时设置面、边和所有子节点的流形指标，请使用set_all_manifold_ids()函数。     
* [2.x.123] [2.x.124] [2.x.125] "关于流形指标的词汇条目"  
* [0.x.119]*
   像set_manifold_id()那样做，但也要设置绑定当前对象的流形指标。例如，在3D中，如果对一个面调用了set_manifold_id()，那么绑定该面的4条边的流形指标就不会改变。另一方面，面和边的流形指标都是用当前函数同时设置的。   
* [2.x.126] [2.x.127] [2.x.128] "关于流形指标的词汇条目"  
* [0.x.120]*
    [2.x.129]   
* [0.x.121]*
    [2.x.130] 用户数据  
* [0.x.122]*
    [2.x.131]   
* [0.x.123]*
   读取用户标志。更多信息见[2.x.132]。 
* [0.x.124]*
   设置用户标志。参见[2.x.133]了解更多信息。 
* [0.x.125]*
   清除用户标志。参见 [2.x.134] 了解更多信息。 
* [0.x.126]*
   为这个和所有的子代设置用户标志。参见[2.x.135]以了解更多信息。 
* [0.x.127]*
   清除此项目和所有子项目的用户标志。参见[2.x.136]以了解更多信息。 
* [0.x.128]*
   将用户数据重置为零，与指针或索引无关。更多信息见[2.x.137]。 
* [0.x.129]*
   将用户指针设置为[2.x.138]。    
* [2.x.139] 用户指针和用户索引是相互排斥的。因此，你只能使用其中之一，除非你在中间调用[2.x.140]。    参见[2.x.141]以了解更多信息。 
* [0.x.130]*
   将用户指针重置为[2.x.142]指针。参见[2.x.143]以了解更多信息。 
* [0.x.131]*
   访问用户指针的值。用户有责任确保该指针指向有用的东西。你应该使用新式的cast操作符来保持最低限度的类型安全，例如。   
* [2.x.144] 用户指针和用户索引是互斥的。因此，你只能使用其中之一，除非你在中间调用[2.x.145]。<tt>A a=static_cast<A*>(cell->user_pointer())；</tt>。    更多信息见[2.x.146]。 
* [0.x.132]*
   将此对象及其所有子对象的用户指针设置为给定值。例如，如果某个子域的所有单元格，或者边界的某个部分的所有面都应该有用户指针指向描述这部分域或边界的对象，这就很有用。    请注意，用户指针在网格细化过程中是不被继承的，所以在网格细化之后，可能会有单元格或面没有用户指针指向描述对象。在这种情况下，只需简单地循环所有具有此信息的最粗层次的元素，并使用此函数递归地设置三角形的所有更细层次的用户指针。   
* [2.x.147] 用户指针和用户索引是互斥的。因此，你只能使用其中之一，除非你在中间调用 [2.x.148] 。    更多信息见[2.x.149]。 
* [0.x.133]*
   清除这个对象的用户指针和它所有的子对象。这与recursively_set_user_pointer()函数的说法相同。更多信息见[2.x.150]。 
* [0.x.134]*
   将用户索引设置为[2.x.151]。    
* [2.x.152] 用户指针和用户索引是相互排斥的。因此，你只能使用其中之一，除非你在中间调用[2.x.153]。更多信息见[2.x.154]。 
* [0.x.135]*
   将用户索引重置为0。更多信息见[2.x.155]。 
* [0.x.136]*
   访问用户索引的值。   
* [2.x.156] 用户指针和用户索引是相互排斥的。因此，你只能使用其中之一，除非你在中间调用[2.x.157]。    更多信息见[2.x.158]。 
* [0.x.137]*
   设置此对象及其所有子对象的用户索引。    请注意，用户索引在网格细化中是不被继承的，所以在网格细化后，可能会有单元格或面的用户索引不符合预期。在这种情况下，只需循环查看所有拥有该信息的最粗层次的元素，并使用该函数递归设置三角结构中所有更细层次的用户索引。   
* [2.x.159] 用户指针和用户索引是相互排斥的。因此，你只能使用其中之一，除非你在中间调用[2.x.160]。    更多信息见[2.x.161]。 
* [0.x.138]*
   清除这个对象的用户索引和它的所有后代。这与recursively_set_user_index()函数的说法相同。    更多信息见[2.x.162]。 
* [0.x.139]*
    [2.x.163]   
* [0.x.140]*
    [2.x.164] 关于一个物体的几何信息  
* [0.x.141]*
       
* [0.x.142]*
   物体的直径。    一个物体的直径被计算为当前物体的最大对角线。如果这个物体是四边形，那么有两条这样的对角线，如果是六面体，那么有四条对角线连接 "对面 "的点。对于三角形和四面体，该函数只是返回最长边的长度。    楔形和金字塔的情况就比较困难了。对于楔形，我们返回三个四边形面的最长对角线的长度或两个三角形面的最长边的长度。对于金字塔，同样的原则也适用。    在所有这些情况下，这个 "直径 "的定义不一定是物体内部各点之间最大距离意义上的真正直径。事实上，我们经常可以构造出不是这样的物体，尽管这些物体与参考形状相比一般都有很大的变形。此外，对于可能使用高阶映射的物体，我们可能会有凸起的面，这也会给计算物体直径的精确表示带来麻烦。也就是说，上面使用的定义对于大多数计算来说是完全足够的。 
* [0.x.143]*
   返回一对Point和double，对应于物体的中心和合理的小包围球的半径。    该函数实现了Ritter的O(n)算法，以获得一个围绕对象顶点的合理的小包围球。  包围球的初始猜测是包含对象的最大对角线作为其直径的球。  从这样的初始猜测开始，算法测试对象的所有顶点（除了最大对角线的顶点）在几何上是否在球内。  如果发现任何顶点（v）在几何上不在球内，则通过移动球的中心和增加半径来构建一个新的球的迭代，以便在几何上包围先前的球和顶点（v）。当所有的顶点都在球的几何范围内时，该算法就结束了。    如果一个顶点（v）在几何上位于球的某个迭代中，那么它将在球的后续迭代中继续如此（这是真实的，通过/a结构）。   
* [2.x.166] 这个函数假定从参考单元开始的d-线性映射。    [1.x.0]和[Ritter 1990]。 
* [0.x.144]*
   返回包围该对象的最小边界框。    注意，这个方法不知道你可能用来做计算的任何映射。如果你使用的是修改顶点位置的映射对象，比如MappingQEulerian，或者MappingFEField，那么你应该调用函数[2.x.167]代替。 
* [0.x.145]*
   对象在给定轴线方向的长度，在本地坐标系中指定。关于本地轴的含义和列举，请参见GeometryInfo的文档。    请注意，一个物体的 "长度 "可以有多种解释。在这里，我们选择它作为对象的任何一条边的最大长度，这些边与参考单元上选择的轴平行。 
* [0.x.146]*
   返回任何两个顶点之间的最小距离。 
* [0.x.147]*
   返回一个属于此对象所在的流形<dim,spacedim>的点，给定其在参考单元格[2.x.168]上的参数化坐标。该函数可查询底层流形对象，并可用于获得该对象上任意点的精确几何位置。    注意，参数[2.x.169]是[2.x.170]参考单元[2.x.171]上的坐标，以参考坐标给出。换句话说，该参数提供了不同顶点之间的权重。例如，对于线，调用这个函数的参数是Point<1>(.5)，相当于要求线的中心。 
* [0.x.148]*
   这个函数通过从参考[2.x.173]维单元反转[2.x.172]线性函数的仿射近似，计算从实数到单元格的快速近似转换。    单位单元到实数单元映射的仿生近似是通过仿生函数与本对象的[2.x.174]顶点的最小二乘法拟合找到的。对于任何有效的网格单元，其几何形状不是退化的，这个操作的结果是一个唯一的仿生映射。因此，对于所有给定的输入点，这个函数将返回一个有限的结果，即使在实际的双/三线或高阶映射的实际转换可能是单数的情况下。除了仅从顶点近似映射外，该函数还忽略了附加的流形描述。只有在从单元格到实际单元格的转换确实是仿生的情况下，结果才是准确的，比如在一维或二维/三维的笛卡尔和仿生（平行四边形）网格。    对于单元格的精确变换，使用[2.x.175]。    
* [2.x.176] 如果dim<spacedim，我们首先将p投影到平面上。 
* [0.x.149]*
   物体的中心。对象的中心被定义为顶点位置的平均值，这也是[2.x.177]映射将映射参考单元的中心的地方。然而，你也可以要求这个函数返回与当前对象相关的底层流形对象所计算的顶点的平均值，方法是将可选参数 [2.x.178] 设置为 true 流形通常会将顶点的坐标拉回到参考域（不一定是参考单元），在那里计算平均值，然后再将平均值点的坐标推到物理空间；结果点保证位于流形内，即使流形是弯曲的。    当对象使用不同的流形描述作为其周围环境时，比如该TriaAccessor的部分边界对象使用非平面流形描述，但对象本身是平面的，[2.x.179]函数给出的结果可能不够准确，即使参数[2.x.180]被设置为真。如果你发现这种情况，你可以通过将第二个附加参数[2.x.181]interpolate_from_surrounding设置为真来进一步完善中心的计算。这将通过从所有边界对象的中心进行所谓的无限插值来计算中心的位置。对于一个二维物体，它在四条周围线中的每一条上加了[2.x.182]的权重，在四个顶点上加了[2.x.183]的权重。这相当于四个面的描述之间的线性插值，减去顶点的贡献，当通过与顶点相邻的两条线时，顶点的贡献被加了两次。在三维中，面的权重是[2.x.184]，线的权重是[2.x.185]，而顶点的权重是[2.x.186]。为了进一步了解情况，还可以赋予TransfiniteInterpolationManifold类，该类不仅能够将这种有益的描述应用于单个单元，而且能够应用于粗略单元的所有子女。 
* [0.x.150]*
   返回对象的arycenter（也叫中心点）。在[2.x.189]空间维度中，维度为[2.x.187]的对象的arycenter由[1.x.1]定义的[2.x.191]-维向量给出，其中对象的度量由[1.x.2]给出。 这个函数假定[2.x.192]由[2.x.193]-线性函数从参考[2.x.194] -维单元映射出来。然后，上面的积分可以被拉回到参考单元，并准确地进行评估（如果通过冗长的，并且与Center()函数相比，昂贵的计算）。 
* [0.x.151]*
   计算对象的dim-dimensional度量。对于二维空间中的二维单元，这等于其体积。另一方面，对于三维空间中的二维单元，或者如果当前指向的对象是三维空间中的三维单元的二维面，那么该函数就会计算该对象所占的面积。对于一个一维的物体，返回其长度。    该函数只计算假定由（双/三）线性映射表示的单元、面或边的量度。换句话说，它只考虑绑定当前对象的顶点的位置，而不考虑对象的内部实际上如何被映射。在大多数简单的情况下，这正是你想要的。然而，对于不 "直 "的对象，例如，嵌入三维空间的二维单元作为弯曲域的三角化的一部分，三维单元的二维面不仅仅是平行四边形，或者位于域的边界的面不仅仅是由直线段或平面限定的，这个函数只计算由描述有关对象的真实几何的流形或边界对象定义的 "真实 "对象的（双/三）线性内插的二维度量。如果你想考虑 "真实 "几何，你将需要通过在物体上积分一个等于1的函数来计算这个度量，在应用正交之后，等于将你想用于积分的FEValues或FEFaceValues对象返回的JxW值相加。 
* [0.x.152]*
   如果当前对象是给定参数的翻译，则返回真。   
* [2.x.195]为了三角测量的目的，单元格、面等只由其顶点来描述。因此，当前函数只对顶点的位置进行比较。然而，对于许多实际应用来说，决定一个单元是否是另一个单元的翻译的不仅仅是顶点，还有单元如何从参考单元映射到它在现实空间中的位置。例如，如果我们使用高阶映射，那么不仅顶点必须是彼此的平移，而且还必须是沿边缘的点。因此，在这些问题中，应该问映射，而不是当前的函数，两个对象是否是彼此的平移。 
* [0.x.153]*
   当前对象的参考单元格类型。 
* [0.x.154]*
   顶点的数量。 
* [0.x.155]*
   行的数量。 
* [0.x.156]*
   面的数量。   
* [2.x.196] 只对单元格实现（dim==spacedim）。 
* [0.x.157]*
   返回一个对象，它可以被认为是一个包含从零到n_vertices()所有索引的数组。 
* [0.x.158]*
   返回一个对象，它可以被认为是一个包含从零到n_lines()所有索引的数组。 
* [0.x.159]*
   返回一个对象，它可以被认为是一个包含从零到n_faces()的所有索引的数组。   
* [2.x.197]只对单元格实现（dim==spacedim）。 
* [0.x.160]*
    [2.x.198]   
* [0.x.161]*
   与set_boundary_id类似，但没有检查内部面或无效的id。 
* [0.x.162]*
   设置那些约束当前对象的对象的索引。例如，如果当前对象代表一个单元格，那么该参数表示绑定该单元格的面的索引。如果当前对象代表一条线，那么该参数表示绑定该线的顶点的指数。以此类推。 
* [0.x.163]*
   与上述相同，但对`无符号int`而言。 
* [0.x.164]*
   设置标志，表明[2.x.199]将返回什么。    只有在3D中才能设置面的线方向（即[2.x.200] ）。 
* [0.x.165]*
   设置索引为[2.x.201]的四边形的法线是否指向标准方向（[2.x.202]），或者是否相反（[2.x.203] 哪个是标准方向，用GeometryInfo类记录。    这个函数只用于库的内部使用。将这个标志设置为任何其他的值，而不是三角测量已经设置的值，必然会给你带来灾难。 
* [0.x.166]*
   设置标志表明，[2.x.204]将返回什么。    只有在三维中才能设置单元格的面朝向（即[2.x.205] ）。 
* [0.x.167]*
   设置标志，表明[2.x.206]将返回什么。    只有在3D中才能设置单元格的面朝向（即[2.x.207] ）。 
* [0.x.168]*
   设置[2.x.208]标志。仅用于库的内部使用。 
* [0.x.169]*
   清除[2.x.209]标志。仅供图书馆内部使用。 
* [0.x.170]*
   设置[2.x.210]这个TriaObject的精炼。对于<tt>structdim=1</tt>不定义，因为线条总是被细化成2条子线（各向同性细化）。    如果你接触这个函数，你应该很清楚你在做什么。它是专门用于库的内部使用的。 
* [0.x.171]*
   清除这个TriaObject的RefinementCase<dim>，即重置为[2.x.211]你应该很清楚你在做什么，如果你碰触这个函数。它是专门用于库的内部使用的。 
* [0.x.172]*
   设置第1个孩子的索引。由于孩子们至少是成对出现的，我们只需要存储第二个孩子的索引，也就是偶数孩子的索引。请确保首先设置第i=0个孩子的索引。不允许对奇数的孩子调用这个函数。 
* [0.x.173]*
   清除子字段，即把它设置为一个值，表示这个单元格没有子字。 
* [0.x.174]*
 这个类是<code>TriaAccessor<structdim, dim, spacedim></code>的特殊化，用于[2.x.212]为零的情况。该类代表维数为[2.x.213]的三角结构中的顶点（即1代表线的三角结构，2代表四边形的三角结构，3代表六边形的三角结构），该三角结构嵌入在维数为[2.x.214]的空间中（对于[2.x.215]的三角结构代表[2.x.216]的域，对于[2.x.217]的三角结构是嵌入在高维空间的流形）。
* 对于[2.x.218]等于1的情况，即对于一维三角结构的顶点，这个类别还有一个进一步的特殊化，因为在这种情况下顶点也是面。
* 

* 
* [2.x.219] 

* 
* [0.x.175]*
   这个访问器所代表的对象所处的空间的维度。  例如，如果这个访问器代表一个四边形，它是四维空间中一个二维表面的一部分，那么这个值就是四。 
* [0.x.176]*
   这个访问器所代表的事物的尺寸，是这个访问器的一部分。例如，如果这个访问器代表一条线，是六面体的一部分，那么这个值就是三。 
* [0.x.177]*
   这个访问器所代表的当前对象的尺寸。例如，如果它是线（不管它是四面体还是六面体的一部分，也不管我们处于什么维度），那么这个值就等于1。 
* [0.x.178]*
   指向内部数据的指针。 
* [0.x.179]*
   构造函数。第二个参数是我们指向的顶点的全局索引。 
* [0.x.180]*
   构造函数。这个构造函数的存在是为了保持与其他访问器类的接口兼容性。 [2.x.220]可以用来设置我们所指向的顶点的全局索引。 
* [0.x.181]*
   构造函数。不应该被调用，因此会产生一个错误。 
* [0.x.182]*
   构造函数。不应该被调用，因此会产生一个错误。 
* [0.x.183]*
   返回迭代器的状态。 
* [0.x.184]*
   这个对象的水平。顶点没有级别，所以这个函数总是返回0。 
* [0.x.185]*
   此对象的索引。返回这个对象所指向的顶点的全局索引。 
* [0.x.186]*
   返回这个类所指向的对象所属于的三角形的引用。 
* [0.x.187]*
    [2.x.221] 迭代器的进阶  
* [0.x.188]*
    [2.x.222]   
* [0.x.189]*
   该操作符将迭代器推进到下一个元素。 
* [0.x.190]*
   该操作符将迭代器移到上一个元素。 
* [0.x.191]*
   进行平等比较。 
* [0.x.192]*
   不等式的比较。 
* [0.x.193]*
    [2.x.223]   
* [0.x.194]*
    [2.x.224] 访问子对象  
* [0.x.195]*
    [2.x.225]   
* [0.x.196]*
   返回当前对象的第i个顶点的全局索引。如果[2.x.226]为零，这将返回这个对象所指向的当前点的索引。否则，它会抛出一个异常。    请注意，返回值只是几何顶点的索引。  它与与之相关的可能的自由度没有关系。  关于这一点，请参阅[2.x.227]函数。   
* [2.x.228]尽管有这个名字，这里返回的索引只是全局的，即它是特定于一个特定的三角形对象，或者，在三角形实际上是[2.x.229]类型的情况下，特定于存储在当前处理器上的分布式三角形的那一部分。 
* [0.x.197]*
   返回一个对[2.x.230]顶点的引用。如果i是0，这将返回这个对象所指向的当前点的引用。否则，它会抛出一个异常。 
* [0.x.198]*
   指向与此对象相邻的[2.x.231]线的指针。将指向一个无效的对象。 
* [0.x.199]*
   围绕此对象的[2.x.232]行的行索引。抛出一个异常。 
* [0.x.200]*
   指向包围此对象的[2.x.233]四边形的指针。 
* [0.x.201]*
   绑定此对象的[2.x.234]四边形的索引。抛出一个异常。 
* [0.x.202]*
    [2.x.235]   
* [0.x.203]*
    [2.x.236] 关于一个物体的几何信息  
* [0.x.204]*
    [2.x.237]   
* [0.x.205]*
   物体的直径。这个函数总是返回零。 
* [0.x.206]*
   对象在给定轴线方向的长度，在本地坐标系中指定。有关本地轴的含义和列举，请参见GeometryInfo的文档。    这个函数总是返回0。 
* [0.x.207]*
   返回此对象的中心，当然，这与此对象所指的顶点的位置相吻合。参数[2.x.238] respect_manifold和[2.x.239]不被使用。它们的存在是为了提供与 [2.x.240] 相同的接口。 
* [0.x.208]*
   计算对象的dim-dimensional度量。对于二维空间中的二维单元，这等于其体积。另一方面，对于三维空间中的二维单元，或者如果当前指向的对象是三维空间中的三维单元的二维面，那么该函数就会计算该对象所占的面积。对于一个一维的对象，返回其长度。对于一个零维的对象，返回零。 
* [0.x.209]*
    [2.x.241]   
* [0.x.210]*
    [2.x.242] 子对象的方向  
* [0.x.211]*
    [2.x.243]   
* [0.x.212]*
  
* [2.x.244]   
* [0.x.213]*
  
* [2.x.245]   
* [0.x.214]*
  
* [2.x.246]   
* [0.x.215]*
  
* [2.x.247]   
* [0.x.216]*
    [2.x.248]   
* [0.x.217]*
    [2.x.249] 访问儿童  
* [0.x.218]*
    [2.x.250]   
* [0.x.219]*
   测试该对象是否有子代。总是假的。 
* [0.x.220]*
   返回这个对象的直接子代数。这始终是零。 
* [0.x.221]*
   计算并返回此对象的活动子孙的数量。  总是零。 
* [0.x.222]*
    [2.x.251] 使用n_active_descendants()代替。 
* [0.x.223]*
   返回此对象被精炼的次数。总是0。 
* [0.x.224]*
  
* [2.x.252]   
* [0.x.225]*
  
* [2.x.253]   
* [0.x.226]*
  
* [2.x.254]   
* [0.x.227]*
   总是不返回细化。 
* [0.x.228]*
  
* [2.x.255] 
 
* -   
* [0.x.229]*
  
* [2.x.256] 
 
* -   
* [0.x.230]*
    [2.x.257]   
* [0.x.231]*
   返回这里指向的顶点是否被使用。 
* [0.x.232]*
   复制操作符。因为这只是从迭代器中调用，所以不要返回任何东西，因为迭代器会返回自己。    这个方法是受保护的，因为它只能从迭代器类中调用。 
* [0.x.233]*
   访问器的比较运算符。这个操作符在比较迭代器进入三角形的对象时使用，例如在把它们放入 [2.x.258] 这个操作符简单地比较了当前对象所指向的顶点的全局索引。 
* [0.x.234]*
   指向我们所操作的三角形的指针。 
* [0.x.235]*
   这个对象所对应的顶点的全局索引。 
* [0.x.236]*
 这个类是<code>TriaAccessor<structdim, dim, spacedim></code>的特化，用于[2.x.259]为零和[2.x.260]为一的情况。该类表示嵌入在维数为[2.x.261]的空间中的一维三角形的顶点（对于[2.x.262]，三角形表示[2.x.263]中的一个域，对于[2.x.264]，三角形是嵌入在高维空间的流形）。
* 目前TriaAccessor<0,dim,spacedim>类对一维三角形的顶点的专门化存在，因为在[2.x.265] == 1的情况下，顶点也是面。
* 

* 
* [2.x.266] 

* 
* [0.x.237]*
   这个访问器所代表的对象所处空间的尺寸。  例如，如果这个访问器代表一个四边形，它是四维空间中一个二维表面的一部分，那么这个值就是四。 
* [0.x.238]*
   这个访问器所代表的事物的尺寸，是这个访问器的一部分。例如，如果这个访问器代表一条线，是六面体的一部分，那么这个值就是三。 
* [0.x.239]*
   这个访问器所代表的当前对象的尺寸。例如，如果它是线（不管它是四面体还是六面体的一部分，也不管我们处于什么维度），那么这个值就等于1。 
* [0.x.240]*
   指向内部数据的指针。 
* [0.x.241]*
   这里代表的顶点是在域的左端、右端，还是在内部。 
* [0.x.242]*
     左边的顶点。   
* [0.x.243]*
     内部顶点。   
* [0.x.244]*
     右边的顶点。   
* [0.x.245]*
   构造函数。    由于没有从顶点到单元的映射，一个点的访问器对象没有办法弄清它是否在域的边界上。因此，第二个参数必须由生成这个访问器的对象传递。
* 
* 例如，一个1d单元可以计算出它的左或右顶点是否在边界上。    第三个参数是我们指向的顶点的全局索引。 
* [0.x.246]*
   构造函数。这个构造函数的存在是为了保持与其他访问器类的界面兼容。然而，它在这里并没有做任何有用的事情，所以实际上可能不会被调用。 
* [0.x.247]*
   构造函数。不应该被调用，因此会产生一个错误。 
* [0.x.248]*
   构造函数。不应被调用，因此产生错误。 
* [0.x.249]*
   复制操作符。因为这只是从迭代器中调用，所以不要返回任何东西，因为迭代器会返回自己。 
* [0.x.250]*
   返回迭代器的状态。由于对点的迭代器不能被增加或减少，它的状态保持不变，特别是等于 [2.x.267] 。  
* [0.x.251]*
   这个对象的级别。顶点没有级别，所以这个函数总是返回0。 
* [0.x.252]*
   此对象的索引。返回这个对象所指向的顶点的全局索引。 
* [0.x.253]*
   返回这个类所指向的对象所属于的三角形的引用。 
* [0.x.254]*
    [2.x.268] 推进迭代器的工作  
* [0.x.255]*
    [2.x.269]   
* [0.x.256]*
   这个操作将迭代器推进到下一个元素。对于点，这个操作没有定义，所以你不能在点的迭代器上迭代。 
* [0.x.257]*
   该操作符将迭代器移到上一个元素。对于点来说，这个操作没有被定义，所以你不能对点的迭代器进行迭代。 
* [0.x.258]*
   进行平等比较。 
* [0.x.259]*
   比较不等式。 
* [0.x.260]*
   访问器的比较运算器。当比较迭代器进入三角形的对象时，例如将其放入[2.x.270]中时，该操作符会被使用。该操作符只是比较当前对象所指向的顶点的全局索引。 
* [0.x.261]*
    [2.x.271]   
* [0.x.262]*
    [2.x.272] 访问子对象  
* [0.x.263]*
    [2.x.273]   
* [0.x.264]*
   返回当前对象的第i个顶点的全局索引。如果i为零，则返回该对象所指向的当前点的索引。否则，它会抛出一个异常。    请注意，返回值只是几何顶点的索引。  它与与之相关的可能的自由度没有关系。  关于这一点，请参阅[2.x.274]函数。   
* [2.x.275]尽管有这个名字，这里返回的索引只是全局的，即它是特定于一个特定的三角形对象的，或者，在三角形实际上是[2.x.276]类型的情况下，特定于存储在当前处理器上的分布式三角形的那一部分。 
* [0.x.265]*
   返回一个对[2.x.277]顶点的引用。如果i为零，这将返回该对象所指向的当前点的引用。否则，它会抛出一个异常。 
* [0.x.266]*
   返回这个对象的中心，当然，这与这个对象所指的顶点的位置是一致的。 
* [0.x.267]*
   指向限定此对象的[2.x.278]线的指针。将指向一个无效的对象。 
* [0.x.268]*
   围绕此对象的[2.x.279]行的行索引。    只对<tt>structdim>1</tt>实现，否则产生异常。 
* [0.x.269]*
   指向包围此对象的[2.x.280]四边形的指针。 
* [0.x.270]*
   绑定此对象的[2.x.281]四边形的索引。    只对<tt>structdim>2</tt>实现，否则会产生异常。 
* [0.x.271]*
    [2.x.282]   
* [0.x.272]*
   返回这个点是否在我们这里处理的一维三角的边界上。 
* [0.x.273]*
   返回这个对象的边界指标。一维三角形的惯例是，左端顶点（可构建三角形的每条线段）的边界指示器为0，右端顶点的边界指示器为1，除非明确设置为不同的值。    如果返回值是特殊值[2.x.283]，那么这个对象是在域的内部。     [2.x.284] [2.x.285] "关于边界指示器的词汇条目"  
* [0.x.274]*
   返回对该对象所使用的流形对象的常数引用。 
* [0.x.275]*
   返回此对象的流形指标。     [2.x.286] [2.x.287] "关于流形指标的词汇条目"  
* [0.x.276]*
    [2.x.288] 子对象的方向  
* [0.x.277]*
    [2.x.289]   
* [0.x.278]*
  
* [2.x.290]   
* [0.x.279]*
  
   
* [0.x.280]*
  
   
* [0.x.281]*
  
* [2.x.293]   
* [0.x.282]*
    [2.x.294]   
* [0.x.283]*
    [2.x.295] 访问儿童  
* [0.x.284]*
    [2.x.296]   
* [0.x.285]*
   测试该对象是否有子代。总是假的。 
* [0.x.286]*
   返回此对象的直系子代数。在维度0中，这始终是零。 
* [0.x.287]*
   计算并返回此对象的活动子孙的数量。  总是零。 
* [0.x.288]*
    [2.x.297] 使用n_active_descendants()代替。 
* [0.x.289]*
   返回此对象被精炼的次数。总是0。 
* [0.x.290]*
  
* [2.x.298]   
* [0.x.291]*
  
* [2.x.299]   
* [0.x.292]*
  
* [2.x.300]   
* [0.x.293]*
   总是不返回细化。 
* [0.x.294]*
  
* [2.x.301] 
* 
* -   
* [0.x.295]*
  
* [2.x.302] 
 
* -   
* [0.x.296]*
    [2.x.303]   
* [0.x.297]*
    [2.x.304] 处理边界指标  
* [0.x.298]*
    [2.x.305]   
* [0.x.299]*
   设置边界指示器。这与<tt>boundary_id()</tt>函数同样适用。     [2.x.306]你不应该设置内部面（不在域的边界上的面）的边界指示器，也不应该将外部面的边界指示器设置为[2.x.307]（这个值是为其他目的保留的）。如果边界单元的边界指示器为[2.x.308]，或者内部单元的边界指示器不是[2.x.309]，算法可能无法工作或产生非常混乱的结果。 不幸的是，当前对象没有办法找出它是否真的处于域的边界，因此无法确定你试图设置的值在当前情况下是否有意义。   
* [2.x.310] [2.x.311] [2.x.312] "关于边界指标的词汇条目"  
* [0.x.300]*
   设置该顶点的流形指标。到目前为止，这没有任何作用，因为流形只用于细化和映射对象，但顶点没有被细化，映射是微不足道的。这个函数在这里只是为了允许独立维度的编程。 
* [0.x.301]*
   设置此对象和其所有低维子对象的边界指标。 因为这个对象只代表一个顶点，所以没有低维对象，这个函数等同于用相同的参数调用set_boundary_id()。   
* [2.x.313] [2.x.314] [2.x.315] "关于边界指标的词汇条目"  
* [0.x.302]*
   设置此对象及其所有低维子对象的流形指标。 由于这个对象只代表一个顶点，所以没有低维对象，这个函数等同于用相同的参数调用set_manifold_id()。   
* [2.x.316] [2.x.317] [2.x.318] "关于流形指标的词汇条目"  
* [0.x.303]*
    [2.x.319]   
* [0.x.304]*
   返回这里所指向的顶点是否被使用。 
* [0.x.305]*
   参考当前对象的单元格类型。 
* [0.x.306]*
   顶点的数量。 
* [0.x.307]*
   行的数量。 
* [0.x.308]*
   返回一个对象，它可以被认为是一个包含从零到n_vertices()的所有索引的数组。 
* [0.x.309]*
   返回一个对象，它可以被认为是一个包含从零到n_lines()所有索引的数组。 
* [0.x.310]*
   指向我们所操作的三角形的指针。 
* [0.x.311]*
   这是一个左端、右端或内部顶点。这个信息是在创建时由单元格提供的。 
* [0.x.312]*
   这个对象所对应的顶点的全局顶点索引。 
* [0.x.313]*
 这个类允许访问一个单元：一维的线，二维的四边形，等等。
* 以下指的是任何维度。
* 该类允许访问一个<tt>单元格</tt>，在一维中是一条线，在二维中是一个四角形。单元比线或四边形本身有更多的功能，例如，它们可以被标记为细化，它们有邻居，它们有可能检查它们是否在边界上等等。该类提供了对所有这些数据的访问。
* 

* 
* [2.x.320] 

 
* [2.x.321] 

 
* [0.x.314]*
   将AccessorData类型传播到本类中。 
* [0.x.315]*
   定义这个容器的类型，是它的一部分。 
* [0.x.316]*
    [2.x.322] 构造函数  
* [0.x.317]*
    [2.x.323]   
* [0.x.318]*
   构建器。 
* [0.x.319]*
   复制构造器。 
* [0.x.320]*
   转换构造器。这个构造器的存在是为了使某些构造在独立于维度的代码中写得更简单。例如，它允许将一个面的迭代器分配给一个线的迭代器，这个操作在2D中很有用，但在3D中没有任何意义。这里的构造函数是为了使代码符合C++的要求而存在的，但它会无条件地中止；换句话说，将面迭代器赋值给线迭代器最好放在一个if语句中，检查维度是否为2，并在3D中赋值给一个四维迭代器（如果没有这个构造函数，如果我们碰巧为2d编译，这个操作是非法的）。 
* [0.x.321]*
   另一个对象之间的转换操作符，就像之前的那个一样，没有意义。 
* [0.x.322]*
   复制构造器。 
* [0.x.323]*
   移动构造函数。 
* [0.x.324]*
   解除构造器。 
* [0.x.325]*
   复制操作符。这些操作符通常在类似<tt>iterator a,b;a=*b;</tt>的情况下使用。据推测，这里的意图是将[2.x.324]所指向的对象复制到[2.x.325]所指向的对象。然而，取消引用迭代器的结果不是一个对象，而是一个存取器；因此，这个操作对三角形的迭代器没有用。  因此，这个操作被声明为删除，不能使用。 
* [0.x.326]*
   移动赋值运算符。 
* [0.x.327]*
    [2.x.326]   
* [0.x.328]*
    [2.x.327] 访问子对象和相邻对象  
* [0.x.329]*
    [2.x.328]   
* [0.x.330]*
   返回一个指向[2.x.329]子对象的指针。重载版本，返回一个更合理的迭代器类。 
* [0.x.331]*
   返回该单元格所有子代的迭代器的数组。 
* [0.x.332]*
   返回此单元格的[2.x.330]面的一个迭代器。 
* [0.x.333]*
   返回当前单元格上[2.x.331]的面数。这是[2.x.332]的反函数。  
* [0.x.334]*
   返回该单元格所有面的迭代器阵列。 
* [0.x.335]*
   返回此单元格的[2.x.333]面的（全局）索引。   
* [2.x.334]尽管有这个名字，这里返回的索引只是全局的，即它是特定于一个特定的三角形对象的，或者，在三角形实际上是[2.x.335]类型的情况下，特定于存储在当前处理器上的分布式三角形的那一部分。 
* [0.x.336]*
   返回一个单元格的迭代器，该单元格与给定面和子面编号上的当前单元格相邻。    为了成功，目前的单元必须没有被进一步细化，而在给定面的邻居必须被进一步细化一次；然后返回的单元是该邻居的一个子单元。    这个函数不能在1d中调用，因为在那里我们没有子面。  这个函数在2d中的实现相当直接，首先确定当前单元格与邻居单元格的哪个面接壤（这就是[2.x.336]函数的作用），然后向[2.x.337]询问子单元的索引。    然而，在3D中情况更为复杂，因为面可能有不止一个方向，我们必须对这个单元和邻近的单元使用[2.x.338][2.x.339]和[2.x.340]，以弄清我们想拥有哪个单元。    这可能会导致令人惊讶的结果：如果我们坐在一个单元格上，并要求得到子面<tt>sf</tt>后面的单元格，那么这意味着我们考虑的是本单元格自然方向上的脸的子面。然而，如果从这个单元格看到的面有<tt>face_orientation()==false</tt>，那么将本单元格与邻近单元格的子面分开的子面不一定是本单元格的[2.x.341]子面。之所以如此，是因为单元格上的[2.x.342]对应于相对于本单元格的内在排序的子面，而面的迭代器的子女是相对于面的内在排序来计算的；这两个排序只有在面的方向是[2.x.343]时才是相同的，否则就会颠倒。    同样，<tt>face_flip()==true</tt>和<tt>face_rotation()==true()</tt>的影响也要考虑，这两种情况都表示非标准的脸。    幸运的是，这只是非常少的关注，因为通常我们只希望在一个活动单元的给定面的所有更细的邻居上进行循环。只有在细化三角图的过程中，我们才希望为我们的子单元和邻居的子单元设置邻居信息。因为在这种情况下，我们可以尊重当前单元格的面的方向，在这个函数中，我们不尊重当前单元格的面的方向、面的翻转和面的旋转，即返回的邻居的孩子在关于给定面的内在排序的子面[2.x.344]后面。 
* [0.x.337]*
   返回编号为[2.x.345]的面的另一侧的邻接单元的迭代器 如果邻接单元不存在，即如果当前对象的编号为[2.x.346]的面处于边界，那么将返回一个无效的迭代器。    因此，索引[2.x.347]必须小于n_faces（）。    一个单元格的邻居最多具有与这个单元格相同的级别。例如，考虑以下情况。   [2.x.348] 在这里，如果你在右上角的单元格上，并要求得到它的左邻（根据GeometryInfo类中阐明的惯例，就是它的[1.x.3]邻），那么你将得到左上角四个小单元格的母格。换句话说，你作为邻居得到的单元格与你现在所在的单元格（右上角的那个）具有相同的细化级别，而且它可能有子代。    另一方面，如果你在左上角四个小单元格中的右上角，并且你要求获得右邻（与索引[2.x.349]相关），那么你会得到右上角的大单元格，在这种情况下，它的细化级别较低，并且没有自己的孩子。 
* [0.x.338]*
   返回索引为[2.x.350]的面的另一侧的相邻单元格的单元格索引 如果相邻单元格不存在，该函数返回
* 
* - .     这个函数等同于<tt>cell->neighbor(face_no)->index()</tt>。  更多细节请参见 neighbor()。 
* [0.x.339]*
   返回编号为[2.x.351]的面的另一边的相邻单元的水平 如果相邻单元不存在，该函数返回
* 
* - .     这个函数等同于`cell->neighbor(face_no)->level()`。  更多细节请参见 neighbor()。 
* [0.x.340]*
   返回这个单元格是<tt>cell->neighbor(face_no)</tt>的第几个邻居，即返回[2.x.352]，使得<tt>cell->neighbor(face_no)->neighbor(other_face_no)==cell</tt>。如果你想知道如何从邻居回到现在的单元格，这个函数是正确的。    请注意，这个操作只有在邻居不比当前单元格粗的情况下才有用。如果邻居更粗，这个函数会抛出一个异常。在这种情况下，请使用[2.x.353]函数。 
* [0.x.341]*
   返回，邻居是否比现在的单元更粗大。这在各向异性的细化中很重要，因为这一信息并不取决于单元格的级别。    请注意，在各向异性的情况下，一个单元只能在给定的面比另一个单元更粗，而不是在一般的基础上。较细的单元的面包含在较粗的单元的相应面中，较细的面是较粗的面的子女或孙子。 
* [0.x.342]*
   这个函数是[2.x.354]函数的泛化，适用于粗邻的情况。它返回一对数字，face_no和subface_no，如果邻居没有被细化，则具有以下属性。<tt>cell->neighbor( neighbor)->neighbor_child_on_subface(face_no, subface_no)==cell</tt>。在3D中，一个更粗的邻居仍然可以被细化。  在这种情况下，subface_no表示与我们的脸有关的邻居脸的子索引。  <tt>cell->neighbor(neighbor)->face(face_no)->child(subface_no)==cell->face(neighbor)</tt>。  在[2.x.355]教程程序的介绍中讨论了3D中的这种情况以及它如何发生。    这个函数对于<tt>dim==1</tt>来说是不可能的。 
* [0.x.343]*
   这个函数是[2.x.356]和[2.x.357]函数的一个概括。它检查邻居是否更粗，并调用相应的函数。在这两种情况下，只有face_no被返回。 
* [0.x.344]*
   与DoFCellAccessor兼容的接口。总是返回[2.x.358]。  
* [0.x.345]*
    [2.x.359]   
* [0.x.346]*
    [2.x.360] 处理周期性邻居的问题  
* [0.x.347]*
    [2.x.361]   
* [0.x.348]*
   如果单元格在其[2.x.362]第i个面有周期性邻居，该函数返回真，否则，返回值为假。 
* [0.x.349]*
   对于其[2.x.363]第i个面位于周期性边界的单元格，见[2.x.364]"周期性边界的条目"，该函数返回周期性边界另一侧的单元格的迭代器。如果在[2.x.365]第i个面没有周期性边界，将抛出一个异常。  为了避免遇到异常，在使用这个函数之前，请检查has_periodic_neighbor()对[2.x.366]第i个面的结果。  periodic_neighbor()的行为与neighbor()类似，即返回的单元最多具有与当前单元相同的细化程度。在分布式网格上，通过调用[2.x.367]，我们可以确保周期性边界另一侧的元素在这个等级中以幽灵单元或局部拥有的单元存在。 
* [0.x.350]*
   对于[2.x.368]第i个面不在边界上的单元格，这个函数返回的结果与邻接()相同。如果[2.x.369]第i个面在一个周期性的边界上，这个函数返回与periodic_neighbor()相同的结果。如果上述两个条件都不满足，即[2.x.370]第i个面在一个非周期性边界上，将抛出一个异常。 
* [0.x.351]*
   返回单元格在给定面和子面编号处的周期性邻居的一个迭代器。使用这个函数的一般准则类似于函数 neighbor_child_on_subface()。这个函数的实现与periodic_neighbor_of_coarser_periodic_neighbor()一致。例如，假设我们坐在一个名为[2.x.371]cell1的单元格上，其在[2.x.372]第1个面后面的邻居是一个更粗的层次。让我们把这个更粗的邻居命名为[2.x.373]cell2。然后，通过调用 periodic_neighbor_of_coarser_periodic_neighbor()，从 [2.x.374] cell1，我们得到一个 [2.x.375] face_num 和一个 [2.x.376] subface_num。现在，如果我们从cell2调用periodic_neighbor_child_on_subface()，用上述face_num和subface_num，我们会得到一个前往[2.x.377] cell1的迭代器。 
* [0.x.352]*
   这个函数是periodic_neighbor_of_periodic_neighbor()的泛化，用于那些有较粗的周期性邻居的单元。返回的一对数字可以在period_neighbor_child_on_subface()中使用，以回到当前单元。换句话说，对于有较粗的周期性邻居的单元格，下面的断言应该是真的：cell->periodic_neighbor(i)->periodic_neighbor_child_on_subface(face_no, subface_no)==cell  
* [0.x.353]*
   这个函数返回当前单元格的第[2.x.378]个面的周期性邻居的索引。如果在给定的面没有周期性邻居，返回值为
* 
* - .  
* [0.x.354]*
   该函数返回当前单元格的[2.x.379]第i个面的周期性邻居的水平。如果在给定的面没有周期性邻居，返回值为
* 
* - .  
* [0.x.355]*
   对于在其[2.x.380]第i个面有周期性邻居的单元格，该函数返回该周期性邻居的面数，以便当前单元格是该邻居的周期性邻居。换句话说，对于那些拥有与当前单元相同或更高细化程度的周期性邻居的单元，以下断言成立。   [2.x.381] {cell->periodic_neighbor(i)-> periodic_neighbor(cell->periodic_neighbor_of_periodic_neighbor(i))==cell}。  对于具有较粗的周期性邻居的单元格，应该使用periodic_neighbor_of_coarser_periodic_neighbor()和periodic_neighbor_child_on_subface()来回到当前单元格。 
* [0.x.356]*
   如果一个单元格在其[2.x.382]第i个面有一个周期性邻居，这个函数返回周期性邻居的面数，它与这个单元格的[2.x.383]第i个面相连。 
* [0.x.357]*
   如果周期性边界另一侧的元素更粗，该函数返回真，否则返回假。该实现允许该函数在各向异性细化的情况下工作。 
* [0.x.358]*
    [2.x.384]   
* [0.x.359]*
    [2.x.385] 处理边界指标的问题  
* [0.x.360]*
    [2.x.386]   
* [0.x.361]*
   返回[2.x.387]的顶点或面（取决于维度）是否是边界的一部分。如果[2.x.388]的邻居不存在，这就是真的。 
* [0.x.362]*
   返回该单元格是否在边界上。在边界上的定义是有一个面在边界上。请注意，这并不包括四边形或六边形中只有一个顶点在边界上的情况，或者六边形中只有一条线在边界上，而所有面的内部都在域的内部。对于后一种情况，[2.x.389]has_boundary_lines函数才是正确的请求。 
* [0.x.363]*
   这是对[2.x.390]函数的一个轻微变化：对于一维和二维，它是等价的，对于三维，它返回六面体的12条线中是否至少有一条位于边界。当然，这包括整个面处于边界的情况，但也包括其他一些情况。 
* [0.x.364]*
    [2.x.391]   
* [0.x.365]*
    [2.x.392] 处理细化指标的问题  
* [0.x.366]*
    [2.x.393]   
* [0.x.367]*
   返回此单元格被标记为细化的[2.x.394]。 这个函数的返回值可以与一个bool进行比较，以检查这个单元格是否被标记为任何种类的细化。例如，如果你之前为一个单元格调用了cell->set_refine_flag()，那么你将进入以下片段中的'if'块。   
* [1.x.4]
*   
* [0.x.368]*
   对指向的单元格进行标记，以便进行细化。这个函数只允许用于活动单元。保持[2.x.395]的默认值将标记该单元为各向同性的细化。    如果你选择各向异性的细化，例如通过传递一个标志[2.x.396] [2.x.397] [2.x.398]或这些标志的组合作为参数，那么请记住，X、Y或Z方向的细化发生在该单元的[2.x.399]局部[2.x.400]坐标系。换句话说，这些标志决定了单元格的哪些边和面将被切割成新的边和面。另一方面，这个过程与单元在[2.x.401]全局[2.x.402]坐标系中的方向无关，你不应该假定单元的局部坐标系在它所处空间的全局坐标系中的任何特定方向。 
* [0.x.369]*
   清除细化标志。 
* [0.x.370]*
   修改单元格的细化标志，以确保（至少）在面<tt>face_no</tt>的给定细化情况[2.x.403]，考虑到面的方向、翻转和旋转。返回，是否必须修改细化标志。这个函数只允许用于活动单元。 
* [0.x.371]*
   修改单元格的细化标志，确保行<tt>面_no</tt>将被细化。返回，是否必须修改细化标志。这个函数只允许用于活动单元。 
* [0.x.372]*
   返回面<tt>face_no</tt>的SubfaceCase。请注意，这与询问<tt>cell->face(face_no)->refinement_case()</tt>不一样，因为后者返回一个RefinementCase<dim-1>，因此只考虑一个（各向异性的）细化，而这个函数考虑完整的细化情况，包括可能对面的孩子进行细化。这个函数只能在2D和3D的活动单元中调用。 
* [0.x.373]*
   返回粗化标志是否被设置。 
* [0.x.374]*
   指向粗化的单元格的标志。这个函数只允许用于活动单元。 
* [0.x.375]*
   清除粗化标志。 
* [0.x.376]*
    [2.x.404]   
* [0.x.377]*
    [2.x.405] 处理材料指标  
* [0.x.378]*
    [2.x.406]   
* [0.x.379]*
   返回这个单元格的材料标识。    关于这个函数的典型用法，见[2.x.407] " [2.x.408] " 教程。    更多信息请参见 [2.x.409] "词汇表"。 
* [0.x.380]*
   设置此单元格的材料ID。    关于这个函数的典型用法，见[2.x.410] " [2.x.411] " 教程程序。    更多信息请参见 [2.x.412] "词汇表"。 
* [0.x.381]*
   将此单元格及其所有子单元格（以及孙子单元格，以此类推）的材质ID设置为给定值。    参见[2.x.413]"词汇表 "以了解更多信息。 
* [0.x.382]*
    [2.x.414]   
* [0.x.383]*
    [2.x.415] 处理子域指标的问题  
* [0.x.384]*
    [2.x.416]   
* [0.x.385]*
   返回这个单元格的子域指标。    参见[2.x.417]"词汇表 "以了解更多信息。   
* [2.x.418]单元格的子域是一个只为活动单元格定义的属性，即没有被进一步细化的单元。因此，只有当它所指的单元格没有子域时，你才能调用这个函数。对于并行的多网格方法，知道哪个处理器拥有非活动单元也很重要，为此你可以调用level_subdomain_id()。 
* [0.x.386]*
   设置这个单元的子域id。    参见[2.x.419]"词汇表 "以了解更多信息。如果你使用[2.x.420]对象，则不应调用此函数。   
* [2.x.421] 单元的子域是一个只为活动单元定义的属性，即没有被进一步细化的单元。因此，只有当它所指的单元格没有子域时，你才能调用这个函数。对于并行的多网格方法，知道哪个处理器拥有非活动单元也很重要，为此你可以调用level_subdomain_id()。 
* [0.x.387]*
   获取该单元的水平子域ID。这用于并行多网格，其中不仅全局网格（由活动单元组成）被划分到处理器中，而且还包括构成网格的递归细化单元的各个层次。换句话说，如果使用多网格层次结构，层次子域id是一个也为非活动单元定义的属性。 
* [0.x.388]*
   设置此单元格的水平子域ID。这用于并行多网格。 
* [0.x.389]*
   设置此单元的子域ID（如果它是活动的）或其所有终端子单元（和孙子单元，等等，只要它们没有自己的子单元）的给定值。由于子域id是一个只为活跃的单元格（即没有自己的孩子）定义的概念，这个函数只为这个单元格的所有实际活跃的子和孙子设置子域id，跳过中间的子单元格。    更多信息请参见 [2.x.422] "词汇表"。如果你使用[2.x.423]对象，就不应该调用这个函数，因为在那里，子域id是由你所在的处理器隐式定义的。 
* [0.x.390]*
    [2.x.424]   
* [0.x.391]*
   为当前单元格返回一个全局唯一的单元格索引，假设它不是人工的。如果该单元是串行三角形的一部分，其值与active_cell_index()相同。    在平行三角剖分的情况下，本地拥有的单元在网格的每个子域中被连续地列举出来。这就保证了这个函数返回的索引可以作为总条目数为[2.x.425]的向量的索引，并且每个进程都存储一个连续的部分。 如果这样一个单元数据向量已经被设置为[2.x.426]，那么这个函数返回的索引就可以用来访问正确的向量条目。 
* [0.x.392]*
   为非人工水平单元返回一个全局唯一的索引。   
* [2.x.427]与global_active_cell_index()类似。 
* [0.x.393]*
    [2.x.428] 处理codim 1单元的方位问题。 
* [0.x.394]*
    [2.x.429]   
* [0.x.395]*
   返回此单元格的方向。    关于这个标志的含义，见 [2.x.430] 。 
* [0.x.396]*
   返回当前单元格是第几个活动单元格（假设当前单元格确实是活动的）。这很有用，例如，如果你要访问一个有多少个条目的向量的元素，就有多少个活动单元。这样的向量用于估计三角形的每个单元的误差，用于指定传递给GridRefinement中的函数的细化标准，以及用于生成单元的输出。    如果当前单元格没有被激活，该函数会抛出一个异常。   
* [2.x.431] 如果这个函数被调用的三角形是[2.x.432]类型，那么活动单元可能是本地拥有的、幽灵单元或人工的（见[2.x.433]、[2.x.434]和[2.x.435] ）。  这个函数对所有这些单元进行计数，包括幽灵和人工活动单元。这意味着该函数返回的索引可以唯一地识别单个处理器上三角结构中的单元，但不能唯一地识别处理器之间共享的三角结构（部分）中的单元。如果你想识别跨处理器的活动单元，你需要考虑由[2.x.436]返回的单元的CellId。  
* [0.x.397]*
   返回该单元格的父单元格在父单元格所属的三角结构层次中的索引。父单元的层次当然要比本单元的层次低一个。如果父单元不存在（即，如果该对象处于网格层次结构的最粗层），将产生一个异常。 
* [0.x.398]*
   返回一个到父对象的迭代器。如果父对象不存在（即，如果该对象处于网格层次结构的最粗层），将产生一个异常。 
* [0.x.399]*
    [2.x.437]   
* [0.x.400]*
    [2.x.438] 其他函数  
* [0.x.401]*
    [2.x.439]   
* [0.x.402]*
   测试单元格是否没有子代（这是单元格是否被称为 "活动 "的标准）。    更多信息见[2.x.440]"词汇表"。 
* [0.x.403]*
   返回该单元是否为当前处理器所拥有，或为其他处理器所拥有。如果应用于类型为[2.x.441]的对象，该函数总是返回true，但如果三角形是类型为[2.x.442]，则可能产生false。更多信息请参见[2.x.443]"词汇表 "和[2.x.444]模块。     [2.x.445] 返回值等于<code>!is_ghost() && !is_artificial()/code>。   
* [2.x.446] 一个细胞是否是幽灵细胞、人造的，或者是本地拥有的，或者是一个只与活动的细胞有关的属性。因此，只有当它所指的单元格没有孩子时，你才能调用这个函数。 
* [0.x.404]*
   如果三角结构没有分布，或者level_subdomain_id()等于当前处理器的id，则返回true。 
* [0.x.405]*
   返回这个单元在全局网格中是否存在，但是(i)被另一个处理器所拥有，也就是有一个不同于当前处理器所拥有的子域_id，以及(ii)与当前处理器拥有的单元相邻。    这个函数只有在使用的三角形是[2.x.447]的情况下才有意义，在所有其他情况下，返回值总是错误的。    更多信息请参见[2.x.448] "词汇表 "和[2.x.449] 模块。     [2.x.450] 返回值等于<code>!is_locally_owned() && !is_artificial()/code>。   
* [2.x.451] 一个细胞是否是幽灵细胞、人造的，或者是本地拥有的，或者是一个只与活动的细胞有关的属性。因此，只有当它所指的单元格没有孩子时，你才能调用这个函数。 
* [0.x.406]*
   返回这个单元格是否是人造的，即它不是当前处理器所拥有的单元格之一，而且也不在一个单元格的边界上。因此，它存在于网格中，以确保每个处理器拥有所有粗略的网格单元，并保持相邻单元的2：1比例，但它不是我们应该在当前处理器上工作的单元之一。特别是，不能保证这个单元实际上没有在其他处理器上进一步细化。    这个函数只有在使用的三角形是[2.x.452]的情况下才有意义，在所有其他情况下，返回值总是假的。    参见[2.x.453]"词汇表 "和[2.x.454]模块以了解更多信息。     [2.x.455] 返回值等于<code>!is_ghost() && !is_locally_owned()/code>。   
* [2.x.456] 一个单元是否是幽灵单元、人造的或本地拥有的是一个只与活动的单元有关的属性。因此，你只能在它所指的单元格没有孩子的情况下调用这个函数。 
* [0.x.407]*
   测试点[2.x.457]是否在这个单元格内。边界上的点被算作是在单元格内。    请注意，这个函数假定单元格和实际单元格之间的映射是（双，三）线性的，也就是说，2D的面和3D的边都是直线。如果你有更高阶的变换，结果可能不同，因为一个点在实空间中是在单元内还是在单元外。    在codim>0的情况下，首先将点投影到单元格所嵌入的流形上，然后检查这个投影是否在单元格内。 
* [0.x.408]*
   将此单元格的邻居[2.x.458]设置为[2.x.459]所指向的单元格 这个函数其实不应该公开（但由于各种原因需要公开，以便不使一长串函数成为朋友）：它修改了内部数据结构，可能会留下一些东西。请不要从应用程序代码中使用它。 
* [0.x.409]*
   返回当前单元格的唯一ID。这个ID是由层次结构中从粗父单元开始的路径构建的，并且在使用类型为[2.x.460]的对象的并行计算中正确工作。因此，这个函数在为单元（活动或不活动）提供一个唯一的标识符方面非常有用，也适用于并行三角计算。更多信息请参见CellId类的文档。   
* [2.x.461] 这个操作需要O(level)时间来计算。在大多数实际情况下，三角形的层数将取决于三角形中的单元格数量的对数。 
* [0.x.410]*
   与[2.x.462]相同，但也采取映射类。 
* [0.x.411]*
    [2.x.463]   
* [0.x.412]*
  
* [2.x.464]   
* [0.x.413]*
  
* [2.x.465]   
* [0.x.414]*
  
* [2.x.466]   
* [0.x.415]*
   这个函数假设邻居不比当前单元格粗。在这种情况下，它返回 neighbor_of_neighbor()值。然而，如果邻居更粗，这个函数返回一个 [2.x.467] 。    这个函数不供公众使用。请使用函数 neighbor_of_neighbor()来代替，如果对一个较粗的邻居进行调用，会抛出一个异常。如果邻居确实较粗（你可以通过neigher_is_coarser()函数知道这一点），那么应该调用neigher_of_coarser_neighbor()函数。如果你只想知道从邻居到现在的单元所需的[2.x.468]，那么只需使用 neighbor_face_no()函数，该函数可用于较粗的邻居和非较粗的邻居。 
* [0.x.416]*
   至于任何codim>0，我们可以使用类似的代码，C++不允许部分模板。我们使用这个辅助函数，然后从point_inside调用。 
* [0.x.417]*
   设置一个单元格的活动单元格索引。这是在细化结束时进行的。 
* [0.x.418]*
   设置一个单元格的全局活动单元格索引。 
* [0.x.419]*
   为一个水平单元设置全局水平单元索引。 
* [0.x.420]*
   设置一个单元格的父级。 
* [0.x.421]*
   设置该单元格的方向。    关于这个标志的含义，见 [2.x.469] 。 
* [0.x.422]

