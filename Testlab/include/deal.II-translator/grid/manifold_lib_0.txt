include/deal.II-translator/grid/manifold_lib_0.txt
[0.x.0]*
 极坐标系统的歧管描述。
* 你可以使用这个Manifold对象来描述二维或三维的任何球体、圆、超球体或超盘，既可以作为共维一的流形描述符，也可以作为共维零的流形描述符，前提是南北两极（三维）和中心（二维和三维）不在Manifold中（因为它们是极坐标变化的奇点）。
* 两个模板参数与Triangulation<dim, spacedim>中的两个模板参数的含义一致，然而这个Manifold可以用来描述薄的和厚的物体，当dim <= spacedim时，行为是相同的，也就是说，PolarManifold<2,3>的功能与PolarManifold<3,3>相同。
* 这个类的工作原理是将点转换为极坐标（包括二维和三维），在该坐标系中取平均值，然后再将点转换回笛卡尔坐标。为了使这个流形能够正常工作，它不能连接到包含坐标系中心或三维中的南北极的单元。这些点是坐标转换的奇异点，围绕这些点取平均值没有任何意义。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
   构造函数获取球面坐标系的中心。  该类使用pull_back和push_forward机制从笛卡尔坐标系转换到球面坐标系，考虑到二维中基数Manifold的周期性，而在三维中，它取中间点，并使用周围点的平均半径沿半径投影。 
* [0.x.2]*
   对这个Manifold对象进行克隆。 
* [0.x.3]*
   从欧几里得空间拉回给定的点。将返回与该点相关的极坐标 [2.x.1] 只在spacedim = 2时使用。 
* [0.x.4]*
   给定球面坐标系中的一个点，该方法返回与极坐标相关的欧几里得坐标 [2.x.2] 只在spacedim = 3时使用。 
* [0.x.5]*
   给定spacedim维欧氏空间中的一个点，该方法返回从极坐标系映射到欧氏坐标系的函数[2.x.3]的导数。换句话说，它是一个大小为[2.x.4]的矩阵。    这个函数被用于get_tangent_vector()函数所要求的计算中。    更多信息请参考该类的一般文档。 
* [0.x.6]*
    [2.x.5] [2.x.6].   
* [0.x.7]*
   球形坐标系的中心。 
* [0.x.8]*
   辅助函数，根据dim、chartdim和spacedim，返回与该坐标系相关的周期。 
* [0.x.9]*
 球形空间坐标系的流形描述。
* 你可以使用这个流形对象来描述二维或三维的任何球体、圆、超球体或超盘。该流形可以作为嵌入高维空间的球面的同维度流形描述符，也可以作为具有正体积的体的同维度零流形描述符，前提是球面空间的中心不在该域中。使用这个函数的一个例子是在描述一个超壳或超球的几何形状时，例如在使用[2.x.7]创建一个粗略的网格后（然而，值得一提的是，为一个盘或球生成一个好的网格是复杂的，需要增加步骤。参见[2.x.8]中的 "扩展的可能性 "一节，对如何构建这样的网格以及需要做什么进行了广泛的讨论）。)
* 两个模板参数与Triangulation<dim, spacedim>中的两个模板参数的含义一致，然而这个Manifold可以用来描述薄的和厚的对象，当dim <= spacedim时，行为是相同的，也就是说，SphericalManifold<2,3>的功能与SphericalManifold<3,3>相同。
* 虽然PolarManifold反映了通常的极坐标概念，但它可能不适合于包含南北两极的域。 例如，考虑极坐标中的一对点[2.x.9]和[2.x.10]（位于半径为1的球体表面，高度为[2.x.11]的平行线上）。在这种情况下，用极地坐标的直线连接这两个点，将需要绕地球一圈的长路，而不经过北极。
* 这两个点将通过曲线连接（使用PolarManifold）。

* 
* [1.x.0]
* 这条曲线不是球体上的测地线，也不是我们连接这两点的方式。更好的曲线是通过北极的那条。[1.x.1] 其中[2.x.12]和[2.x.13]为[2.x.14] 。事实上，这是一个测地线，在连接球面上的点时，它是自然的选择。在上面的例子中，PolarManifold类实现了连接球体表面两点的第一种方式，而SphericalManifold则实现了第二种方式，也就是说，这个Manifold使用测地线连接点。如果通过[2.x.15]调用涉及两个以上的点，则使用所谓的球形平均，其中最终的点通过测地线最小化到所有其他点的加权距离。
* 特别是，这个类实现了一个Manifold，它连接空间中的任何两点，首先将它们投射到具有单位半径的球面上，然后用一个测地线将它们连接起来，最后重新调整最终半径，使之成为起始半径的加权平均值。这个Manifold与二维的PolarManifold相同，而对于三维，它返回的点在球面上的分布更加均匀，而且它对于坐标系的旋转是不变的，因此避免了PolarManifold在两极出现的问题。请注意，特别是用PolarManifold计算两极的切向量是不好定义的，而用这个类是完全可以的。
* 由于数学上的原因，不可能只用测地曲线来构造球体的唯一地图，因此不鼓励将这个类与MappingManifold一起使用。如果你使用此 Manifold 来描述球体的几何结构，你应该使用 MappingQ 作为底层映射，而不是 MappingManifold。
* 这个Manifold只能用于*从中心移出一个有限半径的球的几何体。事实上，中心是这个流形的一个奇异点，如果你试图将两个点穿过中心连接起来，它们会在球面坐标上移动，避开中心。
* 这个流形的理想几何结构是一个超壳。如果你打算在一个HyperBall上使用这个Manifold，你必须确保不把这个Manifold连接到包含中心的单元。建议将该类与TransfiniteInterpolationManifold相结合，以确保从曲线形状平滑过渡到球中心的直线坐标系。(也可参见 [2.x.16] 中的广泛讨论) 。
* 

* 
* [2.x.17] 

* 
* [0.x.10]*
   构造函数获取球面坐标的中心。 
* [0.x.11]*
   制作此Manifold对象的一个克隆。 
* [0.x.12]*
   给出空间中的任意两点，首先将它们投影在具有单位半径的球面上，然后用测地线连接它们并找到中间点，最后重新调整最终半径，使得到的半径是起始半径的凸组合。 
* [0.x.13]*
   计算参数w等于零的get_intermediate_point()函数的导数。 
* [0.x.14]*
    [2.x.18] [2.x.19].   
* [0.x.15]*
   计算每个顶点到边界的法向量。 
* [0.x.16]*
   计算一组新的点，在给定的点之间进行插值 [2.x.20] surrounding_points。 [2.x.21]是一个表格，其列数与[2.x.22] surrounding_points.size()相同。[2.x.23]中的行数必须与[2.x.24]的长度相匹配。这个函数被优化为在新点的集合上执行，通过在所有新点的循环之外收集不依赖于权重的操作。    该实现不允许[2.x.25]和[2.x.26]指向同一个数组，所以要确保将不同的对象传入该函数。 
* [0.x.17]*
   返回球面流形上的一个点，该点相对于周围的点来说是中间点。 
* [0.x.18]*
   球面坐标系的中心。 
* [0.x.19]*
   返回球面流形上的一个点，该点相对于周围的点而言是中间点。这个函数使用方向的线性平均值来寻找一个估计的点。它返回一对从中心点到候选点的半径和方向。 
* [0.x.20]*
   返回球面流形上的一个点，该点相对于周围的点来说是中间的。这个函数使用一个候选点作为猜测，并执行牛顿式迭代来计算正确的点。    实现的主要部分使用了出版物Buss, Samuel R.和Jay P. Fillmore中的观点。  "球面平均数和球面样条和插值的应用"。ACM Transactions on Graphics (TOG) 20.2 (2001): 95-126.特别是在http://math.ucsd.edu/~sbuss/ResearchWeb/spheremean/提供的实现。 
* [0.x.21]*
   计算一组新的点，在给定的点之间进行插值 [2.x.27] surrounding_points。 [2.x.28] 是一个数组视图，其条目数为[2.x.29] surrounding_points.size()乘以[2.x.30] 这个函数被优化为对新点的集合执行，通过收集所有新点上的循环之外的不依赖于权重的操作。    该实现不允许[2.x.31]和[2.x.32]指向同一个数组，所以要确保将不同的对象传入该函数。 
* [0.x.22]*
   一个流形描述，用于二维的get_new_point。 
* [0.x.23]*
 圆柱形流形描述。 在三维空间中，点使用圆柱坐标系沿<tt>x-</tt>, <tt>y-</tt>或<tt>z</tt>轴进行转换（当使用该类的第一个构造函数时），或者使用一个由其轴线方向和位于轴线上的点描述的任意方向的圆柱。
* 这个类的开发是为了与GridGenerator的[2.x.33]或[2.x.34]函数结合使用。只要spacedim不等于3，这个函数就会抛出一个运行时异常。
* 

* 
* [2.x.35] 

* 
* [0.x.24]*
   构造函数。使用构造函数参数的默认值可以得到一个沿x轴的圆柱体（<tt>axis=0</tt>）。选择<tt>axis=1</tt>或<tt>axis=2</tt>，分别得到一个沿y轴或z轴的管。公差值是用来确定一个点是否在轴上的。 
* [0.x.25]*
   构造函数。如果用这个构造函数构造，描述的流形是一个圆柱体，其轴线指向#方向，并穿过给定的#点_在轴上。方向可以任意缩放，而给定的点可以是轴上的任何一点。公差值用于确定一个点是否在轴上。 
* [0.x.26]*
   对这个Manifold对象进行克隆。 
* [0.x.27]*
   计算给定空间点的圆柱坐标[2.x.36]，其中[2.x.37]表示与轴线的距离，[2.x.38]给定点与计算出的法线方向的角度，以及[2.x.39]轴向位置。 
* [0.x.28]*
   计算以圆柱坐标[2.x.40]给出的图表点的直角坐标，其中[2.x.41]表示与轴线的距离，[2.x.42]给出的点与计算的法线方向之间的角度，以及[2.x.43]的轴向位置。 
* [0.x.29]*
   计算从圆柱坐标[2.x.44]到车轴坐标的映射的导数，其中[2.x.45]表示与轴的距离，[2.x.46]表示给定点与计算的法线方向之间的角度，以及[2.x.47]表示轴向位置。 
* [0.x.30]*
   计算CylindricalManifold上的新点。关于这个函数的详细描述，请参见基类的文档。 
* [0.x.31]*
   一个与法线方向正交的矢量。 
* [0.x.32]*
   轴的方向向量。 
* [0.x.33]*
   轴上的一个任意点。 
* [0.x.34]*
   用于测量零距离的相对公差。 
* [0.x.35]*
 椭圆流形描述，源自ChartManifold。关于椭圆坐标系的更多信息可以在[1.x.2]找到。
* 这是基于椭圆坐标的定义[2.x.48][1.x.3]，其中[2.x.49]是笛卡尔系统的中心坐标。
* 目前的实现使用坐标[2.x.50]，而不是[2.x.51]，并根据给定的偏心率来固定[2.x.52]。因此，这种坐标的选择产生了一个椭圆流形，其特点是偏心率不变。 [2.x.53] ，其中[2.x.54] 。
* 如果dim和spacedim都不同于2，这个类的构造函数将抛出一个异常。
* 这个流形可以用来产生具有椭圆曲率的超壳。作为一个例子，测试<B>elliptical_manifold_01</B>产生了以下三角结构。 [2.x.55] 
* 

* 
* [2.x.56] 

* 
* [0.x.36]*
   构造函数，接收流形系统的中心、主轴方向和流形偏心率。  默认的主轴是<tt>x</tt>-轴。流形系统会被旋转，以使主轴与输入中指定的方向一致。   [2.x.57] 中心 分流板的中心。   [2.x.58] major_axis_direction 分流板的主轴方向。   [2.x.59] 偏心率 分流板的偏心率 [2.x.60] 。 
* [0.x.37]*
    [2.x.61] [2.x.62] 。  
* [0.x.38]*
    [2.x.63] [2.x.64] 。  
* [0.x.39]*
    [2.x.65] [2.x.66]   
* [0.x.40]*
   主轴的方向矢量。 
* [0.x.41]*
   流形的中心。 
* [0.x.42]*
   从流形体的偏心率得出的参数。 
* [0.x.43]*
    [2.x.67] [2.x.68] 对于[2.x.69]和[2.x.70]，第一个坐标是非周期性的，而第二个坐标的周期性为[2.x.71] 。 
* [0.x.44]*
 从ChartManifold派生的Manifold描述，基于明确的Function<spacedim>和Function<chartdim>对象，描述push_forward（）和pull_back（）函数。
* 你可以使用这个Manifold对象来描述任何任意的形状域，只要你能用可逆映射来表达，你可以提供正向表达式和逆向表达式。
* 在调试模式下，会进行一个检查，以验证这些变换实际上是一个反的变换。
* 

* 
* [2.x.72] 

 
* [0.x.45]*
   明确的函数构造器。接受一个spacedim组件的push_forward函数，以及一个[2.x.73]组件的pull_back函数。关于可选的[2.x.74]参数的含义，请参阅基类ChartManifold的文档。    容许参数在调试模式下被用来实际检查这两个函数是否是一个反义词。    注意：以这种方式构造的对象存储了指向push_forward和pull_back函数的指针。因此，必须保证这些函数对象只在构造的流形之后被销毁。 
* [0.x.46]*
   和前面一样，只是这个构造函数对作为第一和第二个参数传递的Function对象拥有所有权，并在FunctionManifold对象被销毁时最终负责删除这些指针。    这个构造函数很有用，因为它允许在调用构造函数的地方创建函数对象，而不需要命名和随后删除这些对象。这允许以下的成语。  FunctionManifold<dim> [2.x.75] [2.x.76]。  
* [0.x.47]*
   表达式构造器。接受spacedim组件的push_forward函数和[2.x.77] chartdim组件的pull_back函数的表达。关于可选的[2.x.78]参数的含义，请参阅基类ChartManifold的文档。    字符串应该是FunctionParser类的默认构造函数所能读取的。你可以用最后两个可选参数指定自定义的变量表达式。如果你不这样做，就会使用默认的名称，即 "x,y,z"。    容许参数在调试模式下用于实际检查这两个函数是否是一个反义词。 
* [0.x.48]*
   如果需要，我们会删除我们拥有的指针。 
* [0.x.49]*
   对这个Manifold对象做一个克隆。 
* [0.x.50]*
   给定[2.x.79]坐标系中的一个点，使用push_forward_函数来计算[2.x.80]chartdim空间维度中的点到[2.x.81]空间维度的push_forward。 
* [0.x.51]*
   给定chartdim维度欧几里得空间中的一个点，该方法返回从sub_manifold坐标系映射到欧几里得坐标系的函数[2.x.82]的导数。换句话说，它是一个大小为[2.x.83]的矩阵。    这个函数被用于get_tangent_vector()函数所要求的计算中。默认实现是调用[2.x.84]成员类的get_gradient()方法。如果你使用接受两个字符串表达式的构造函数来构造这个对象，那么这个方法的默认实现使用有限差分方案来计算梯度（详见AutoDerivativeFunction()类），你可以在构造时用[2.x.85]参数指定空间步长的大小。    更多信息请参考该类的一般文档。 
* [0.x.52]*
   给定spacedim坐标系中的一个点，使用pull_back_函数来计算[2.x.86]空间维度中的点对[2.x.87]空间维度的回撤。 
* [0.x.53]*
   FunctionParser类的常量。 
* [0.x.54]*
   指向push_forward函数的指针。 
* [0.x.55]*
   指向pull_back函数的指针。 
* [0.x.56]*
   相对公差。在调试模式下，我们检查在构造时提供的两个函数实际上是另一个函数的逆向。  在这个检查中，这个值被用来作为相对公差。 
* [0.x.57]*
   检查智能指针的所有权。表示这个类是否是前两个成员变量所指向的对象的所有者。  这个值是在类的构造函数中设置的。如果[2.x.88]，那么析构器将删除这两个指针指向的函数对象。 
* [0.x.58]*
   用来构造push_forward函数的表达式。 
* [0.x.59]*
   用于构造pull_back函数的表达式。 
* [0.x.60]*
   图表域中的变量名称。 
* [0.x.61]*
   空间域中的变量名称。 
* [0.x.62]*
   内部使用的有限差分步骤。 
* [0.x.63]*
 三维环状体表面的流形描述。环状体被假定为在x-z平面内。参考坐标系由围绕Y轴的角度[2.x.89]、围绕环状体中心线的角度[2.x.90]和到中心线的距离[2.x.91]（在0和1之间）给出。
*这个类的开发是为了与[2.x.92]一起使用。
* 

* 
* [2.x.93] 

* 
* [0.x.64]*
   构造函数。指定中心线的半径[2.x.94]和环本身的半径( [2.x.95] 变量的含义与[2.x.96]中的参数相同。  
* [0.x.65]*
   对这个Manifold对象做一个克隆。 
* [0.x.66]*
   拉回操作。 
* [0.x.67]*
   前推操作。 
* [0.x.68]*
   梯度。 
* [0.x.69]*
 一个映射类，它将曲线边界描述扩展到计算域的内部。外侧的弯曲边界描述被假定为由另一个流形（例如圆上的极地流形）给出。扩展边界信息的机制是一个所谓的转折性插值。该类方法的使用在[2.x.97]中得到了广泛的讨论。
* 在二维中扩展这种描述的公式，例如，在[1.x.4]上有描述。 给定图表上的一个点[2.x.98]，这个点在实空间中的图像由以下公式给出

* 
* [1.x.5]
*其中[2.x.99]表示限定图像空间的四个边界顶点，[2.x.100]是描述单元格线条的四条曲线。如果弯曲的流形连接到这些线条中的任何一条，则根据[2.x.101]的规定，用线条的两个端点和适当的权重进行评估。在三维中，这个公式的一般化被实施，创建一个顶点（正贡献）、线（负贡献）和面（正贡献）的加权和。
* 这个流形通常被附加到一个粗略的网格上，然后将新的点作为边界上的描述的组合，根据点在原图坐标中的位置进行适当的加权 [2.x.102] 。在大多数情况下，这种流形应该比只在网格的边界上设置一个弯曲的流形要好，因为随着网格的细化，它可以产生更均匀的网格分布，因为它在这个流形所连接的初始粗单元的所有子节点上从弯曲的描述转换为直线描述。这样一来，一旦网格被细化，原本包含在一个[1.x.6]网格层中的流形的弯曲性质将被应用到多个[1.x.7]网格层。请注意，当只有一个单元的表面受到曲面描述时，TransfiniteInterpolationManifold的机制也被内置于MappingQGeneric类中，确保在应用曲面边界描述时，即使没有这个流形的默认情况也能获得最佳收敛率。
* 如果没有弯曲的边界围绕着一个粗大的单元，这个类就会还原成一个平面流形描述。
* 为了举一个使用这个类的例子，下面的代码将一个转折流形附加到一个圆上。
* 

* 
* [1.x.8]
* 
* 在这段代码中，我们首先将所有流形的id设置为转折性插值的id，然后重新设置边界上的流形id，以确定极地流形所描述的弯曲边界。使用这段代码，我们可以得到一个非常漂亮的网格。
* [2.x.103] 
* 这显然比只应用于边界的极地流形要好得多。
* [2.x.104] 
* 这个流形被用于一些GridGenerator函数中，包括[2.x.105]。
* [1.x.9]
* 在这个类的实现中，围绕一个粗略单元的流形被反复查询，以计算其内部的点。为了获得最佳的网格质量，这些流形应该与一个图表概念兼容。例如，使用两个顶点的权重0.25和0.75来计算两个顶点之间沿线的0.25的点，应该得到与首先计算0.5的中点，然后再次计算第一个顶点和粗略的中点相同的结果。deal.II提供的大多数流形类都是如此，如SphericalManifold或PolarManifold，但天真的实现可能会违反这一规定。如果流形的质量不够好，在网格细化时，可能会发生get_new_point()或get_new_points()方法中的图表转换产生的点在单元格外。那么这个类就会抛出一个类型为[2.x.106]的异常。在这种情况下，应该在附加这个类之前对网格进行细化，就像下面的例子那样。
* 

* 
* [1.x.10]
* 
* 

* 
* [2.x.107] 出于性能和精度的考虑，建议将转义流形应用于尽可能粗的网格。关于精度，曲面描述只能应用于从给定邻域创建的新点，在尽可能大的域上扩展曲面描述时，网格质量通常会更高。关于性能，get_new_point()方法中正确的粗单元的识别需要通过所有的粗单元，因此预计每个单一的映射操作的粗单元数量的线性复杂性，也就是说，对于整个网格的任何全局操作，至少是粗网格单元数量的二次方。因此，目前的实现只有在粗单元数量不超过几百个的情况下才是经济的。为了使更多单元的性能得到提高，我们可以通过预先识别具有轴对齐边界盒的相关单元来扩展当前的实现。
* 

* 
* [2.x.108] 

* 
* [0.x.70]*
   构建器。 
* [0.x.71]*
   解构器。 
* [0.x.72]*
   对这个Manifold对象进行克隆。 
* [0.x.73]*
   用一个粗略的网格来初始化流形。使用该类的前提条件是，输入的三角形是均匀细化的，并且流形后来被附加到同一三角形上。    每当流形ID的分配在初始化该类的三角形上发生变化时，必须再次调用initialize()，以更新连接到粗大单元的流形ID。   
* [2.x.109]在使用此对象的过程中，不得销毁用于构建流形的三角图。 
* [0.x.74]*
   返回将成为新顶点的点，该点被给定的点所包围 [2.x.110] [2.x.111] 包含周围点的适当权重，流形根据该权重决定新点的位置。    这个类的实现覆盖了基类中的方法，并通过转折插值计算新点。实现的第一步是确定周围点所处的粗略单元。然后，通过牛顿迭代将坐标转换为粗单元上的单位坐标，然后根据权重计算出新的点。最后，根据无限插值将其向前推至实空间。 
* [0.x.75]*
   计算一组新的点，在给定的点之间进行插值 [2.x.112] surrounding_points。 [2.x.113]是一个表，其列数与[2.x.114] surrounding_points.size()相同。2.x.115]中的列数必须与[2.x.116]的长度相匹配。这个类中的实现覆盖了基类中的方法，并通过一个转折性的插值计算新点。实现的第一步是确定周围点所处的粗略单元。然后，通过牛顿迭代将坐标转换为粗单元上的单位坐标，然后根据权重计算出新的点。最后，根据转折内插法将其向前推到实空间。    实现不允许[2.x.117]和[2.x.118]指向同一个向量，所以要确保将不同的对象传入该函数。 
* [0.x.76]*
   内部函数，用于识别给定的周围点所在的最合适的单元（=图表）。我们使用一种廉价的算法来识别单元格，并在实际进行相关单元格内的搜索之前按概率对单元格进行排序。这些单元是按照逆映射的Q1近似值与周围点的单元格的距离来排序的。我们期望最多有20个单元（在三维结构的网格上最多有8个候选单元，在非结构的网格上会更多一些，通常我们只得到两到三个），所以得到一个有20个条目的数组，其索引为<tt>cell->index()</tt>。 
* [0.x.77]*
   最终确定正确的图表，并用周围点的回撤来填充[2.x.119] chart_points。这个方法在内部调用[2.x.120] 返回一个迭代器到定义了图表的单元格。 
* [0.x.78]*
   在给定的粗略单元上对单位坐标进行回拉操作。    这个方法目前是基于一个类似牛顿的迭代来寻找原点的。我们可以通过提供一个好的初始猜测作为第三个参数来加快迭代速度。如果没有更好的点，可以使用cell->real_to_unit_cell_affine_approximation(p)    
* [2.x.121] 这个内部函数目前与[2.x.122]函数不兼容，因为给定的类代表一个图表图集，而不是一个单一的图表。因此，pull_back()操作只对图表的附加信息有效，这些信息由粗略网格上的单元格给出。另一种实现方式可以根据粗网格的单元来转移索引，在图表空间和图像空间之间形成1对1的关系。 
* [0.x.79]*
   前推操作。   
* [2.x.123] 这个内部函数目前与[2.x.124]函数不兼容，因为给定的类代表一个图表图集，而不是一个单一的图表。因此，push_forward()操作只对图表的额外信息有效，这些信息由粗略网格上的单元格给出。另一种实现方式可以根据粗网格的单元来转移索引，在图表空间和图像空间之间形成1比1的关系。 
* [0.x.80]*
   push_forward方法的梯度。   
* [2.x.125]这个内部函数与[2.x.126]函数不兼容，因为给定的类代表一个图表图集，而不是一个单一的图表。此外，这个私有函数还要求用户为这个函数的单一使用情况提供对图表点的push_forward()调用的结果，即在牛顿迭代内部，梯度是通过有限差分计算的。 
* [0.x.81]*
   底层的三角结构。 
* [0.x.82]*
   应用转折性近似的网格单元的级别，通常为0级。 
* [0.x.83]*
   如果周围的流形都是转折流形或者有默认的（无效的）流形ID，流形就会退化为平流形，我们可以为push_forward方法选择便宜的算法。 
* [0.x.84]*
   用于计算图表空间中的新点的平坦流形，我们使用FlatManifold描述。 
* [0.x.85]*
   对每个粗网格单元来说，从实数点到图表点的逆向映射的四次方近似的向量。 
* [0.x.86]*
   与[2.x.127]的连接，一旦这个类出了范围，必须重新设置。 
* [0.x.87]

