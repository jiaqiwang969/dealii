include/deal.II-translator/grid/tria_iterator_selector_0.txt
[0.x.0]*
     这个类实现了一些不同维度的类型。    这些是只针对一维情况的声明。参见[2.x.0]模块以了解更多信息。        一个[2.x.1]别名为在<tt>Triangulation<1></tt>对象的[2.x.2]行成员变量上操作的一个迭代器。一个[2.x.3] active_line_iterator只对活动线进行操作。 [2.x.4] raw_line_iterator对象对所有的线进行操作，无论是否使用。        由于我们是在一维中，所以声明了以下身份。    
* [1.x.0]
* 为了能够在<tt>Triangulation<1></tt>中声明[2.x.5]等，[2.x.6]被声明为InvalidAccessor上的迭代器。因此，这些类型存在，但没有用，而且肯定会使任何非自愿的使用变得明显。这同样适用于六面体迭代器。        这同样适用于[2.x.7]类型，因为线条除了顶点之外没有任何子结构，不过这是以不同的方式处理的。   
* [0.x.1]*
     这个类实现了一些不同维度的类型。    这些是只针对二维情况的声明。参见[2.x.8]模块以了解更多信息。        一个[2.x.9]别名为在<tt>Triangulation<2></tt>对象的[2.x.10]行成员变量上操作的一个迭代器。一个[2.x.11] active_line_iterator只对活动线进行操作。 [2.x.12] raw_line_iterator对象对所有的线进行操作，无论是否使用。使用[2.x.13] active_line_iterator可能在2D中不是特别有用，因为它只对未精炼的线进行操作。然而，如果相邻的单元格比现在的单元格多精炼了一次，那么精炼过的线也可能与未精炼过的单元格绑定。        与线条迭代器类似，[2.x.14][2.x.15]和[2.x.16]也被声明。        为了能够在<tt>Triangulation<[12]></tt>中声明[2.x.17]等，[2.x.18]被声明为InvalidAccessor的迭代器。因此，这些类型存在，但没有用，而且肯定会使任何非自愿的使用变得明显。        由于我们是在二维空间，所以声明了以下身份。    
* [1.x.1]
*     
* [0.x.2]*
     这个类实现了一些不同维度的类型。    这些是只针对三维情况的声明。更多信息见[2.x.19]模块。        对于数据类型的声明，或多或少与低维度的声明相同（见<tt>Iterators<[12]></tt>）。特定维度的数据类型在这里，因为我们是在三个维度。    
* [1.x.2]
*     
* [0.x.3]

