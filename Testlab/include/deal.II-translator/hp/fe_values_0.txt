include/deal.II-translator/hp/fe_values_0.txt
[0.x.0]*
   [2.x.0]类的基类，存储它们的共同数据。这个类的主要任务是提供一个表格，对于来自其相应集合对象的每一个有限元、映射和正交对象的组合，都有一个匹配的::FEValues, ::FEFaceValues, 或::FESubfaceValues对象。    然而，为了使事情更有效率，这些FE*Values对象只在请求时才被创建（懒惰分配）。如果需要的话，也可以通过相应的precalculate_fe_values()函数提前计算所有对象来绕过这一点。    第一个模板参数表示我们所处的空间维度，第二个是我们所整合的对象的维度，即对于通常的[2.x.1]来说，它等于第一个维度，而对于面部整合来说，它要少一个。第三个模板参数表示底层非hp-FE*Values的基础类型，即它可以是::FEValues，:FEFaceValues，或::FESubfaceValues。   
* [2.x.2]   
* [0.x.1]*
     构造函数。将这个类的字段设置为构造函数的参数所指示的值。   
* [0.x.2]*
     像上面的函数一样，但取一个正交集合的向量。    对于[2.x.3]，正交集合的第1项被解释为应用于第1个面的正交规则。   
* [0.x.3]*
     构造函数。这个构造函数与另一个构造函数相当，只是它使对象隐含地使用[2.x.4]映射（即MappingQGeneric（1）类型的对象）。   
* [0.x.4]*
     像上面的函数一样，但取一个矢量正交集合。    对于[2.x.5]，正交集合的第i个条目被解释为应用于第i个面的面的正交规则。   
* [0.x.5]*
     复制构造器。   
* [0.x.6]*
     复制操作符。虽然这种类型的对象可以被复制构建，但它们不能被复制，因此这个运算符被禁用。   
* [0.x.7]*
     出于时间上的考虑，提前创建所有需要的FE*Values对象可能是有用的，而不是像本类中通常那样通过懒惰分配来计算它们。        这个函数预先计算了与所提供的参数相对应的FE*Values对象。与同一索引相对应的所有向量条目的总和描述了一个FE*Values对象，与select_fe_values()类似。   
* [0.x.8]*
     同上，面向最常用的[2.x.6]对象，其中FE、正交和映射指数在每个单独的单元上都是相似的。        为FECollection中的每个FE创建FE*Values对象，正交和映射分别对应于QuadratureCollection和MappingCollection中的相同索引。        如果QuadratureCollection或MappingCollection只包含一个对象，它将用于所有FE*Values对象。   
* [0.x.9]*
     获取此处使用的有限元对象集合的引用。   
* [0.x.10]*
     获取此处使用的映射对象集合的引用。   
* [0.x.11]*
     获取此处使用的正交对象集合的引用。   
* [0.x.12]*
     获取底层更新标志。   
* [0.x.13]*
     返回最后一次调用select_fe_values()所选择的[2.x.7]对象的引用。当你最后一次调用[2.x.9]类的[2.x.8]函数时，依次调用select_fe_values()。   
* [0.x.14]*
     选择一个适合给定FE、正交和映射指数的FEValues对象。如果这样的对象还不存在，就创建一个。        该函数返回一个可写的引用，这样派生类也可以重新引用()所选择的FEValues对象。   
* [0.x.15]*
     一个指向要使用的有限元集合的指针。   
* [0.x.16]*
     一个指向要使用的映射集合的指针。   
* [0.x.17]*
     提供给构造函数的正交集合对象的副本。   
* [0.x.18]*
     正交集合的矢量。对于[2.x.10]，正交集的第1条被解释为应用于第1个面的正交规则。        变量q_collection收集了每个正交集合的第一个正交规则。   
* [0.x.19]*
     一个表格，我们在其中存储指向不同的有限元、映射和正交对象集合的fe_values对象的指针。    第一个索引表示fe_collection中有限元的索引，第二个索引表示mapping集合中映射的索引，最后一个索引表示q_collection中正交公式的索引。        最初，所有条目都是零指针，我们将在select_fe_values()或precalculate_fe_values()中根据需要懒散地分配它们。   
* [0.x.20]*
     指向上次调用select_fe_value()函数时选择的fe_values对象的一组索引。   
* [0.x.21]*
     给予构造函数的更新标志的值。   
* [0.x.22]*
   相当于::FEValues类的一个hp值。参见[2.x.11]教程程序中的使用实例。    这个类的想法如下：当人们在hp-finite element方法中装配矩阵时，不同的单元上可能有不同的有限元，因此人们也可能希望对不同的单元使用不同的正交公式。另一方面，::FEValues有效地处理了对单一有限元和正交对象所需的任何信息的预评估。这个类将这些概念结合起来：它提供了一个::FEValues对象的 "集合"。    在构造时，人们传递的不是一个有限元和正交对象（以及可能的映射），而是整个类型[2.x.12]和[2.x.13]的集合。 后来，当人们坐在一个具体的单元上时，就会为这个特定的单元调用 reinit() 函数，就像对普通的 ::FEValues 对象那样。不同的是，这一次，reinit()函数会查找该单元的活动FE索引，如果有必要的话，会创建一个::FEValues对象，在其集合中匹配具有该特定索引的有限元和正交公式，然后为当前单元重新初始化。然后可以使用get_present_fe_values()函数访问适合当前单元格的有限元和正交公式的::FEValues对象，人们可以像对待非hp-DoFHandler对象的任何::FEValues对象一样处理它。    reinit()函数有额外的参数，有默认值。如果没有指定，函数会从单元格的活动 FE 索引中获取进入 [2.x.14] [2.x.15] 和 [2.x.16] 对象的索引，如上所述。然而，人们也可以为当前单元格选择不同的索引。例如，通过指定不同的索引进入[2.x.17]类，就不需要对正交集合中的正交对象进行排序，使其与FE集合中的有限元对象的顺序一一对应（尽管选择这样的顺序肯定很方便）。    请注意::FEValues对象是即时创建的，也就是说，只有在需要时才创建。这确保了我们不会为每一个有限元、正交公式和映射的组合创建对象，而只是创建那些实际需要的对象。如果需要的话，也可以通过相应的[2.x.18]函数提前计算所有对象来绕过这一点。    这个类还没有实现在一维情况下的使用（<tt>spacedim != dim </tt>）。   
* [2.x.19]   
* [0.x.23]*
     构造函数。用给定的参数初始化这个对象。   
* [0.x.24]*
     构造函数。这个构造函数等同于另一个构造函数，除了它使对象隐含地使用[2.x.20]映射（即MappingQGeneric(1)类型的对象）。   
* [0.x.25]*
     重新初始化给定单元格的对象。        调用后，你可以使用get_present_fe_values()函数得到一个与当前单元格对应的FEValues对象。    对于这个FEValues对象，我们使用下面描述的附加参数来决定使用哪个有限元、映射和正交公式。它们的顺序是这样的：人们可能最想改变的参数排在前面。这些参数的规则如下。        如果这个函数的[2.x.21]参数保持默认值，那么我们在传递给这个类的构造函数的[2.x.22]中使用该有限元，其索引由[2.x.23]给出。因此，给这个对象的[2.x.24]参数实际上应该与构建与本单元相关的DoFHandler所用的参数相同。另一方面，如果给这个参数一个值，它将覆盖 [2.x.25] 的选择。        如果[2.x.26]参数被保留为默认值，那么我们使用传递给该类构造函数的[2.x.27]中的正交公式，索引由[2.x.28]给出，即与有限元的索引相同。在这种情况下，[2.x.29]中的每个有限元都应该有一个相应的正交公式。 作为一种特殊情况，如果正交集合只包含一个元素（如果想在hp-discretization中对所有有限元使用同一个正交对象，即使这可能不是最有效的），那么这个单一的正交将被使用，除非为这个参数指定一个不同的值。另一方面，如果给这个参数一个值，它将覆盖[2.x.30]的选择或对单一正交的选择。        如果[2.x.31]参数保持默认值，那么我们使用传递给该类构造函数的[2.x.32]中的映射对象，索引由[2.x.33]给出，即与有限元的索引相同。如上所述，如果映射集合只包含一个元素（如果想对hp-discretization中的所有有限元素使用[2.x.34]映射，这是一个常见的情况），那么这个单一的映射将被使用，除非为这个参数指定一个不同的值。   
* [0.x.26]*
     像前面的函数一样，但是对于非DoFHandler迭代器。这个函数存在的原因是，人们也可以对Triangulation对象使用[2.x.35]。        由于[2.x.36]对三角迭代器没有意义，这个函数从传递给这个对象构造器的相关构造中选择第零个有限元、映射和正交对象。唯一的例外是，如果你为这最后三个参数中的任何一个指定了一个不同于默认值的值。   
* [0.x.27]*
   这相当于[2.x.37]类，但用于脸部整合，也就是说，它对[2.x.38]来说就像:FEFaceValues对:FEValues一样。    同样的评论适用于[2.x.39]类的文档。然而，需要注意的是，在这里更常见的是，人们希望在reinit()函数中明确指定一个特定正交公式的索引。这是因为默认索引与当前函数上的有限元索引相对应。另一方面，在面的积分通常要用一个正交公式来进行，这个正交公式要根据面的两边使用的有限元来调整。如果我们将[2.x.40]中的元素按多项式程度升序排列，并将这些有限元素与[2.x.41]中相应的正交公式相匹配，则 ] 传递给构造函数，那么传递给 reinit()函数的正交指数通常应该是 [2.x.42] （单元格- [2.x.43] 邻居- [2.x.44] 以确保选择的正交公式对 [2.x.45] 和 [2.x.46] 有限元都足够精确。   
* [2.x.47]   
* [0.x.28]*
     构造函数。用给定的参数初始化这个对象。   
* [0.x.29]*
     像上面的函数一样，但取一个正交规则集合的向量。这允许为每个面分配一个不同的正交规则：集合的第1个条目被用作第1个面的正交规则。        在集合只包含一个面的正交规则的情况下，这个正交规则被用于所有面。   
* [0.x.30]*
     构造函数。这个构造函数等同于其他的构造函数，只是它使对象隐含地使用[2.x.48]映射（即MappingQGeneric(1)类型的对象）。   
* [0.x.31]*
     像上面的函数一样，但取一个正交规则集合的向量。这允许为每个面分配一个不同的正交规则：集合的第1个条目被用作第1个面的正交规则。        在集合只包含一个面的正交规则的情况下，这个正交规则被用于所有面。   
* [0.x.32]*
     重新初始化给定单元和面的对象。        调用后，你可以使用get_present_fe_values()函数得到一个与当前单元格对应的FEFaceValues对象。    对于这个FEFaceValues对象，我们使用下面描述的附加参数来决定使用哪个有限元、映射和正交公式。它们的顺序是，人们可能最想改变的参数排在前面。这些参数的规则如下。        如果这个函数的[2.x.49]参数被保留为默认值，那么我们在传递给这个类的构造函数的[2.x.50]中使用该有限元，索引由[2.x.51]给出。因此，给这个对象的[2.x.52]参数实际上应该与构建与本单元相关的DoFHandler所用的参数相同。另一方面，如果给这个参数一个值，它将覆盖[2.x.53]的选择。        如果[2.x.54]参数被保留为默认值，那么我们使用传递给该类构造函数的[2.x.55]中的正交公式，索引由[2.x.56]给出，即与有限元的索引相同。在这种情况下，[2.x.57]中的每个有限元都应该有一个相应的正交公式。 作为一种特殊情况，如果正交集合只包含一个元素（如果想在hp-discretization中对所有有限元使用同一个正交对象，即使这可能不是最有效的），那么这个单一的正交被使用，除非为这个参数指定一个不同的值。另一方面，如果给了这个参数一个值，它将覆盖[2.x.58]的选择或对单一正交的选择。        如果[2.x.59]参数保持默认值，那么我们使用传递给该类构造函数的[2.x.60]中的映射对象，索引由[2.x.61]给出，即与有限元的索引相同。如上所述，如果映射集合只包含一个元素（如果想对hp-discretization中的所有有限元素使用[2.x.62]映射，这是一个常见的情况），那么这个单一的映射将被使用，除非为这个参数指定一个不同的值。   
* [0.x.33]*
     重新初始化给定单元和面的对象。       
* [2.x.63] [2.x.64] 必须是[2.x.65]面的迭代器之一。   
* [0.x.34]*
     和前面的函数一样，但是对于非DoFHandler迭代器。这个函数存在的原因是，人们也可以对Triangulation对象使用这个类。        由于[2.x.66]对三角迭代器没有意义，这个函数从传递给这个对象的构造器的相关构造中选择第零个有限元、映射和正交对象。唯一的例外是，如果你为这最后三个参数中的任何一个指定了一个不同于默认值的值。   
* [0.x.35]*
     为给定的单元格和面重新初始化该对象。       
* [2.x.67] [2.x.68] 必须是[2.x.69]面的迭代器之一。   
* [0.x.36]*
   这个类对子表面实现了[2.x.70]对面的作用。  进一步的文档请见那里。   
* [2.x.71]   
* [0.x.37]*
     构造函数。用给定的参数初始化这个对象。   
* [0.x.38]*
     构造函数。这个构造函数等同于另一个构造函数，只是它使对象隐含地使用[2.x.72]映射（即MappingQGeneric(1)类型的对象）。   
* [0.x.39]*
     为给定的单元、面和子面重新初始化对象。        调用后，你可以使用get_present_fe_values()函数得到一个与当前单元格对应的FESubfaceValues对象。    对于这个FESubfaceValues对象，我们使用下面描述的附加参数来决定使用哪个有限元、映射和正交公式。它们的顺序是这样的：人们可能最想改变的参数排在前面。这些参数的规则如下。        如果[2.x.73]参数保持默认值，那么我们使用传递给这个类的构造函数的[2.x.74]中的正交公式，索引由[2.x.75]给出，即与有限元的索引相同。在这种情况下，[2.x.76]中的每个有限元都应该有一个相应的正交公式。 作为一种特殊情况，如果正交集合只包含一个元素（如果想在hp-discretization中对所有有限元使用同一个正交对象，即使这可能不是最有效的），那么这个单一的正交将被使用，除非为这个参数指定一个不同的值。另一方面，如果给了这个参数一个值，它将覆盖[2.x.77]的选择或对单一正交的选择。        如果[2.x.78]参数保持默认值，那么我们使用传递给该类构造函数的[2.x.79]中的映射对象，索引由[2.x.80]给出，即与有限元的索引相同。如上所述，如果映射集合只包含一个元素（如果想对hp-discretization中的所有有限元素使用[2.x.81]映射，这种情况很常见），那么这个单一的映射将被使用，除非为这个参数指定一个不同的值。   
* [0.x.40]*
     像前面的函数一样，但是对于非DoFHandler迭代器。这个函数存在的原因是，人们也可以将这个类用于Triangulation对象。        由于[2.x.82]对Triangulation迭代器没有意义，这个函数从传递给这个对象的构造器的相关构造中选择第零个有限元、映射和正交对象。唯一的例外是，如果你为这最后三个参数中的任何一个指定了一个不同于默认值的值。   
* [0.x.41]

