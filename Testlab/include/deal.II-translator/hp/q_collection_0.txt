include/deal.II-translator/hp/q_collection_0.txt
[0.x.0]*
   这个类实现了一个正交对象的集合，与[2.x.0]实现有限元类集合的方式相同。    它实现了doxygen文档中描述的[2.x.1]模块中的概念。   
* [2.x.2]   
* [0.x.1]*
     默认构造函数。导致一个空的集合，以后可以用push_back()来填充。   
* [0.x.2]*
     复制构造函数。   
* [0.x.3]*
     转换构造函数。这个构造函数从一个单一的正交法则创建一个QCollection。如果需要的话，可以用push_back()添加更多的正交公式，尽管用同样的方式添加所有的映射可能会更清楚。   
* [0.x.4]*
     构造函数。这个构造函数从传递给构造函数的一个或多个正交对象创建一个QCollection。为了使这个调用有效，所有的参数需要是派生自类正交<dim>的类型。   
* [0.x.5]*
     在QCollection中添加一个新的正交规则。在大多数情况下，你会希望按照元素被添加到[2.x.3]中的相同顺序来添加正交规则，而这个正交规则集合就是为了这个正交规则。如果这样做，你将使用[2.x.5]和[2.x.6]对象的[2.x.4]对象将自动选择相应的元素和正交公式。另一方面，在调用[2.x.9]或[2.x.10]时特别指定适当的索引，可以使用[2.x.7]和[2.x.8]对象中元素和正交公式的任意组合。 在这些情况下，[2.x.11]和[2.x.12]对象的元素之间不需要有对应关系；在这种情况下它们甚至不需要有相同大小。        顺便说一下，关于集合元素顺序的论点也可以针对[2.x.13]对象的元素提出。        这个类创建了一个给定正交对象的副本，也就是说，你可以做类似<tt>push_back(QGauss<dim>(3));</tt>的事情。内部拷贝后来在整个集合被销毁时被这个对象销毁。   
* [0.x.6]*
     等价比较运算符。所有存储的正交对象都按顺序进行比较。   
* [0.x.7]*
     返回集合中所有元素的正交点的最大数量。这对初始化数组大多是有用的，以分配最大的内存量，当以后从这个集合中重新调整大小到一个特定的正交公式时，可能会用到这个内存量。   
* [0.x.8]*
     例外    
* [0.x.9]*
     实数容器，用于存储指向不同正交对象的指针。   
* [0.x.10]

