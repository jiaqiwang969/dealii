include/deal.II-translator/meshworker/vector_selector_0.txt
[0.x.0]*
   一个从命名向量列表中选择向量的类。    由于AnyData对象中的向量数量可能随着应用程序或循环的嵌套而增加，因此能够选择那些实际用于计算残差等的向量非常重要。这个类组织了这种选择。    例如，在IntegrationWorker中，它被用来确定哪些值、导数或二次导数被实际计算。   
* [2.x.0]   
* [0.x.1]*
     在有限元函数的选择中添加一个矢量。参数是矢量的名称和指标，即要从矢量中提取哪些信息。名称指的是AnyData对象中的一个条目，它将被initialize()所识别。 三个bool参数表明，是否要在每个单元或面计算有限元函数的值、梯度和Hessians。   
* [0.x.2]*
     与上面的函数相同，但有可能选择全局矢量的一个块。   
* [0.x.3]*
     用一个数据向量初始化选择区域。add()只输入向量的名称，这些名称将在单元格和面的积分循环中使用，而这个函数将这些名称与AnyData对象中的实际向量联系起来。       
* [2.x.1] 该函数缓存了与名称相关的索引。因此，在AnyData对象改变后，每次都必须调用它。   
* [0.x.4]*
     检查是否有任何矢量被选中。   
* [0.x.5]*
     如果任何向量的值被选中，则返回true。   
* [0.x.6]*
     如果任何向量的梯度被选中，则返回true。   
* [0.x.7]*
     如果为任何矢量选择了 hessians，则返回 true。   
* [0.x.8]*
     数值的向量数    
* [0.x.9]*
     梯度的向量数    
* [0.x.10]*
     Hessians的向量数    
* [0.x.11]*
     第1个值的向量索引    
* [0.x.12]*
     第1个梯度的向量索引    
* [0.x.13]*
     第一位Hessian的向量索引    
* [0.x.14]*
     打印选择的内容到流中。   
* [0.x.15]*
     打印选择的数量到流中。   
* [0.x.16]*
     这个对象所使用的内存。   
* [0.x.17]*
     用来计算数值的向量的选择。   
* [0.x.18]*
     选择用于计算梯度的向量。   
* [0.x.19]*
     选择用于计算斜率的向量。   
* [0.x.20]*
   基于VectorSelector，这是IntegrationInfo用来计算正交点的源向量值的类。   
* [2.x.2]   
* [0.x.21]*
     构造函数    
* [0.x.22]*
     来自基类对象的构造函数    
* [0.x.23]*
     用一个AnyData对象初始化，并在VectorSelector基类中缓存索引。       
* [2.x.3]在调用此函数之前，确保VectorSelector基类被填充了合理的数据。   
* [0.x.24]*
     虚拟的，但空的析构器。   
* [0.x.25]*
     添加到VectorSelector的唯一函数是一个抽象的虚拟函数，在派生类模板中实现，由IntegrationInfo调用。        根据我们基类中的选择，它用有限元函数的局部数据填充前三个参数。它通常是为整个FES系统，或者为每个基元单独调用。         [2.x.4] values 是填充有正交点的有限元函数值的向量。         [2.x.5] 梯度是填充有限元函数在正交点的导数的向量。         [2.x.6] hessians是填充有限元函数在正交点的二次导数的向量。         [2.x.7] fe是FEValuesBase对象，用于计算函数值。它的UpdateFlags必须被适当地设置。         [2.x.8] index是本地索引向量。如果[2.x.9]指的是系统的基本元素，这个向量应该按块排序，下面的参数[2.x.10]和[2.x.11]指定使用[2.x.12]的子集。         [2.x.13] 分量是[2.x.14][2.x.15]和[2.x.16]在此函数中输入的第一个索引。         [2.x.17] n_comp是要填充的组件的数量。         [2.x.18] start是这个块在[2.x.19]中的第一个索引，如果没有使用基元，则为零。         [2.x.20]size是当前元素或基础元素的每个单元的道夫数量。   
* [0.x.26]*
     从水平向量填充本地数据向量。执行与其他fill()相同的操作，但使用单元格层次来访问层次向量中的一个层次，而不是活动单元格上的全局数据向量。   
* [0.x.27]*
   基于VectorSelector，这是为某种类型的向量实现函数[2.x.21]的类，使用AnyData按名称识别向量。   
* [2.x.22]   
* [0.x.28]*
     构造函数。   
* [0.x.29]*
     使用预填充VectorSelector的构造函数    
* [0.x.30]*
     用一个命名向量的对象进行初始化。   
* [0.x.31]*
     用一个单一的向量初始化，并在VectorSelector基类中缓存索引。       
* [2.x.23]在调用此函数之前，确保VectorSelector基类被填充了合理的数据。   
* [0.x.32]*
     这个对象所使用的内存。   
* [0.x.33]*
   基于VectorSelector，这是实现某类多级向量的函数[2.x.24]的类，使用AnyData按名称识别向量。   
* [2.x.25]   
* [0.x.34]*
     构造函数。   
* [0.x.35]*
     使用预填充VectorSelector的构造函数    
* [0.x.36]*
     用一个命名向量的对象进行初始化    
* [0.x.37]*
     用一个单一的向量初始化，并在VectorSelector基类中缓存索引。       
* [2.x.26] 在调用此函数之前，确保VectorSelector基类被填充了合理的数据。   
* [0.x.38]

