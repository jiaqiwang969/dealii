include/deal.II-translator/meshworker/assemble_flags_0.txt
[0.x.0]*
   给予Mesh_loop()函数的枚举类型，告诉该函数哪些元素需要被组装起来。    你可以用位法或[2.x.0]串联的方式选择多个标志。 
* [0.x.1]*
     什么都不做。   
* [0.x.2]*
     在本地拥有的单元上进行组合。   
* [0.x.3]*
     集合在幽灵细胞上。   
* [0.x.4]*
     在两个本地拥有的单元格之间的内部面上进行集合，每个面只访问一次。   
* [0.x.5]*
     在两个本地拥有的单元格之间的内部面上集合，对每个内部面访问两次，从相邻的两个单元格中各访问一次。   
* [0.x.6]*
     在一个本地拥有的单元和一个幽灵单元之间的面进行组装，确保只有一个进程将组装这些面（从较细的一面或具有较低mpi等级的进程）。   
* [0.x.7]*
     在一个本地拥有的单元和一个幽灵单元之间的面进行组装。两个进程都将组装这些面。请注意，它们永远不会在一个进程中从两边进行装配。   
* [0.x.8]*
     在本地拥有的单元格的边界面上进行组装。   
* [0.x.9]*
     默认情况下，我们会在面积分之前装配单元积分。如果指定了这个标志，单元格将在面和边界之后被装配。   
* [0.x.10]*
     结合标志来决定是否对单元进行任何工作。   
* [0.x.11]*
     结合标志来决定是否对面进行任何工作。   
* [0.x.12]*
     结合标志来确定是否对边界面做了任何工作。   
* [0.x.13]*
   输出运算符，将组合标志作为一组or'd文本值输出。     [2.x.1]   
* [0.x.14]*
   全局运算符，它返回一个对象，其中所有的位都被设置为第一或第二个参数中的设置。这个操作符的存在是因为如果它不存在，那么bit-or <tt>操作符|</tt>的结果将是一个整数，当我们试图将其分配给AssembleFlags类型的对象时，会引发编译器警告。     [2.x.2]   
* [0.x.15]*
   全局运算符，将第二个参数的位也设置在第一个参数中。     [2.x.3]   
* [0.x.16]*
   全局操作符，它返回一个对象，其中所有位都被设置在第一个和第二个参数中。这个操作符的存在是因为如果它不存在，那么比特和<tt>操作符&</tt>的结果将是一个整数，当我们试图将其分配给AssembleFlags类型的对象时，会引发编译器警告。     [2.x.4]   
* [0.x.17]*
   全局操作符，如果第一个参数中的所有位没有在第二个参数中设置，则清除它们。     [2.x.5]   
* [0.x.18]

