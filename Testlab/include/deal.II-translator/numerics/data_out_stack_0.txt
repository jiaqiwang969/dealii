include/deal.II-translator/numerics/data_out_stack_0.txt
[0.x.0]*
  [2.x.0] 使用DataOutStack<dim, spacedim>代替。

* 
* [0.x.1]*
 这个类用于将几个计算的输出堆叠到一个输出文件中，方法是将数据集在另一个与空间方向正交的坐标方向上堆叠。最常见的用途是将几个时间步骤的结果堆叠到一个时空输出文件中，或者例如将几个参数值的参数相关方程的解的结果连接到一起。该接口主要是以DataOut类为模型，更多的文件请看那里。
* 我们将为一个时间相关的问题解释这个概念，但是可以用任何参数来代替时间。在我们的例子中，一个方程的解被计算到每个离散的时间水平。然后，这将被添加到本类的一个对象中，在所有的时间层被添加后，一个空间-时间图将以基类支持的任何输出格式被写入。在输出时，每个时间层上的（空间）解被扩展到时间方向上，写两次，一次是时间层本身，一次是等于时间层减去给定时间步长的时间。这两个副本被连接起来，形成一个时空板块，在时间上有恒定的值。
* 由于时间上的片状常数输出，一般来说，写出的解在离散的时间水平上是不连续的，但在大多数情况下，输出仍然是足够的。未来可能会增加更复杂的时间内插值。
* 

* [1.x.0]
* 下面的小例子将说明该类的不同使用步骤。假设使用的有限元由两个部分组成，[2.x.1]和[2.x.2]，解向量被命名为[2.x.3]，并且计算了一个向量[2.x.4]，其中包含每个空间单元的误差指标。
* 请注意，与DataOut类不同的是，在第一次使用之前，有必要首先声明数据向量和组件的名称。这是因为在所有的时间层次上，都应该有相同的数据来产生合理的时间空间输出。生成的输出在每个空间和时间方向上都有两个分项，这适用于空间的二次有限元，例如。
* 

* 
* [1.x.1]
* 
* 

 
* [2.x.5] 

 
* [0.x.2]*
   补丁的尺寸参数。 
* [0.x.3]*
   声明该类中使用的两种类型的向量的数据类型。 
* [0.x.4]*
     数据描述每个单元的一个值。   
* [0.x.5]*
     数据为每个DoF描述一个值。   
* [0.x.6]*
   解构器。只声明使其成为[2.x.6]。  
* [0.x.7]*
   为一个特定的参数值开始下一组数据。参数[2.x.7]表示间隔（向后方向，从[2.x.8]算起），输出将以参数方向扩展，即与空间方向正交。 
* [0.x.8]*
   附加网格的DoF处理程序，以及与之前[2.x.9]设置的参数相关的数据 这必须在为当前参数值添加数据向量之前发生。 
* [0.x.9]*
   申报一个数据向量。[2.x.10]参数决定了数据向量是否将被视为DoF或单元数据。    如果DoFHandler目前使用的有限元（之前附加到这个对象）只有一个分量，因此只需要给出一个名称，则可以调用这个版本。 
* [0.x.10]*
   声明一个数据矢量。[2.x.11]参数决定了该数据向量将被视为DoF或单元格数据。    如果DoFHandler目前使用的有限元（之前附加到这个对象）有一个以上的分量，因此需要给出一个以上的名称，则必须调用这个版本。然而，如果有限元只有一个分量，你也可以用只包含一个元素的[2.x.12]调用这个函数。 
* [0.x.11]*
   为目前设定的参数值添加一个数据向量。    如果DoFHandler目前使用的有限元（之前附加到这个对象）只有一个分量，因此只需要给出一个名称，则可以调用这个版本。    如果[2.x.13]是一个有多个分量的向量，该函数将通过在[2.x.14]中添加下划线和每个分量的编号来为所有分量生成不同的名称。 数据向量在第一次实际使用之前必须使用[2.x.15]declare_data_vector函数注册。    请注意，这个向量的副本会一直保存到下一次调用[2.x.16]为止，所以如果你的内存不足，你可能想在所有涉及大矩阵的计算都已经完成之后再调用这个函数。 
* [0.x.12]*
   为目前设定的参数值添加一个数据向量。    如果DoFHandler目前使用的有限元（之前附加到这个对象上）有一个以上的分量，因此需要给出一个以上的名称，则必须调用这个版本。然而，如果有限元只有一个分量，你也可以用只包含一个元素的[2.x.17]调用这个函数。    在实际第一次使用之前，数据向量必须已经用[2.x.18] declare_data_vector函数注册。    请注意，这个向量的副本会一直保存到下一次调用[2.x.19]为止，所以如果你的内存不足，你可能希望在所有涉及大矩阵的计算都已经完成之后再调用这个函数。 
* [0.x.13]*
   这是这个类的中心函数，因为它建立了由基类的低级函数编写的补丁列表。从本质上讲，补丁是三角形和DoFHandler对象的每个单元上的数据的一些中间表示，然后可以用来以某种可视化程序可读的格式写入文件。    你可以在这个类的一般文档中找到关于这个函数的使用概述。在这个类的基类DataOut_DoFData的文档中也提供了一个例子。     [2.x.20] n_subdivisions 参见[2.x.21]对这个参数的广泛描述。分数的数量在这个类所使用的类似时间的参数的方向上总是一个。 
* [0.x.14]*
   一旦[2.x.22]被调用，释放所有不再需要的数据，并且所有其他针对给定参数值的事务都完成。    与[2.x.23]相对应。  
* [0.x.15]*
   确定这个对象的内存消耗（以字节为单位）的估计值。 
* [0.x.16]*
   例外情况  
* [0.x.17]*
   异常情况  
* [0.x.18]*
   异常情况  
* [0.x.19]*
   异常情况  
* [0.x.20]*
   目前的参数值。 
* [0.x.21]*
   目前的参数步骤，即接下来要写入的参数区间的长度。 
* [0.x.22]*
   对应于当前参数值的数据所使用的DoF处理程序。 
* [0.x.23]*
   所有过去和现在的参数值数据集的补丁列表。 
* [0.x.24]*
   保存当前参数值的数据向量（单元和dof数据）的结构。 
* [0.x.25]*
     数据向量。   
* [0.x.26]*
     每个这样的数据集内的不同组件的名称。   
* [0.x.27]*
     确定这个对象的内存消耗（以字节为单位）的估计值。   
* [0.x.28]*
   列表中的DoF数据向量。 
* [0.x.29]*
   单元数据向量的列表。 
* [0.x.30]*
   这是一个函数，派生类通过这个函数将Patch结构形式的预处理数据（在基类DataOutBase中声明）传播给实际的输出函数。 
* [0.x.31]*
   虚拟函数，基类的输出函数通过它获得数据集的名称。 
* [0.x.32]

