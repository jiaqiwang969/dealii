include/deal.II-translator/numerics/vector_tools_point_value_0.txt
[0.x.0]*
    [2.x.0] 右手边的组装  
* [0.x.1]*
   在点[2.x.1]处为点源创建一个右手边矢量 换句话说，它创建一个矢量[2.x.2]，以便[2.x.3]其中[2.x.4]是[2.x.5]描述的形状函数，[2.x.6]是delta函数所在的点。给定的[2.x.7]矢量的事先内容被删除。这个函数是针对标量有限元的情况。    这个函数通常在这两种情况下使用。
* 

* 
* 

 
 

 
 
* - 假设你想多次解决同一类问题，用不同的右手边或系数的值，然后每次都在同一点上评估解。你可以通过在每次解题后调用[2.x.8]来实现，或者你可以意识到在某一点[2.x.10]评估解[2.x.9]，你可以像这样重新安排操作。   
* [1.x.0]
* 与上面定义的向量。换句话说，只需一个向量-向量的乘积就可以实现点的评估，而向量[2.x.11]可以一次性计算出来，并在每次求解时重复使用，而不必每次都要翻阅网格，找出点[2.x.12]所在的单元（以及单元中的哪个位置）。
* 

* 
* 

* 
* 

 
* 
* - 如果你想计算你要解决的问题的格林函数，这个函数也很有用。这是因为格林函数[2.x.13]的定义为    
* [1.x.1]
*其中[2.x.14]是你问题的微分算子。离散版本需要计算右手边的向量[2.x.15]，这正是由当前函数计算的向量。    虽然可能与记录这个函数所做的[1.x.2]无关，但值得注意的是，delta函数在现实中并不存在，因此，使用这个函数并不能模拟任何真实情况。这是因为，没有一个真实的物体能够将无限大的力密度集中在领域的一个无限小的部分（相反，所有真实的设备都会将力分散在一个有限的区域内）；也不可能在单个点上测量值（但所有的测量值都会以某种方式在小区域内取平均值）。只有当这个区域非常小，以至于不能被任何网格所解决时，用一个具有相同的整体力或灵敏度的delta函数的方式来建模才有意义。另一方面，用delta函数模拟的情况可能更有成效，那就是点源的电动势；在这种情况下，已知解有一个对数奇点（在2D中）或一个[2.x.16]奇点（在3D中），这两个奇点都不受约束。    在数学上，使用delta函数通常会导致精确的解，而在数值上得到的近似解并不收敛。这是因为，以拉普拉斯方程为例，精确解和数值解之间的误差可以用以下表达式来限定  
* [1.x.3]
* 但当在右侧使用delta函数时，项[2.x.17]不是有限的。这可以通过使用拉普拉斯方程[2.x.18]的解的先验约束看出，该约束指出[2.x.19] 。  当使用delta函数作为右手时，[2.x.20] ，我们需要取delta函数的[2.x.21] 规范，然而这不是有限的，因为[2.x.22] 。    所有这些的结果是，拉普拉斯方程的精确解在右手边有一个delta函数
* 
*--即[1.x.4]。
* 
* 在[2.x.23]处有一个奇点，这个奇点非常强，不能用有限元解来解决，因此有限元近似值不能以任何通常的准则收敛于精确解。    所有这些对于所有其他二阶偏微分方程在二维或更高维度的情况也是如此。(因为在二维或更高维度上，[2.x.24]函数不一定是连续的，因此，delta函数不在对偶空间[2.x.25]中) 。 
* [0.x.2]*
   像前面的函数一样，但对hp-对象而言。 
* [0.x.3]*
   调用create_point_source_vector()函数，见上文，有一个隐含的默认[2.x.26]映射对象。    注意，如果你的DoFHandler使用了0以外的任何活动FE索引，那么你需要调用上面的函数，为每个活动FE索引提供一个映射对象。 
* [0.x.4]*
   为点[2.x.27]处的点源创建右手向量 这个函数的变化是为了解决恰好有二维分量的向量值问题（它也适用于有多于二维分量的问题，在这种情况下只需考虑形状函数的第一个二维分量）。它计算出一个对应于强迫函数的右手边，该强迫函数等于德尔塔函数乘以一个给定的方向。换句话说，它创建了一个向量[2.x.28]，以便[2.x.29] 。这里要注意，[2.x.30]是一个矢量值的函数。 [2.x.31]是源项[2.x.32]的给定方向，对应于要传递给该函数的[2.x.33]方向参数。    给定的[2.x.34]矢量的先前内容被删除。    关于delta函数的使用，请参见第一个create_point_source_vector()变量的讨论。 
* [0.x.5]*
   和前面的函数一样，但是针对hp-objects。 
* [0.x.6]*
   为矢量值的有限元调用create_point_source_vector()函数，见上文，有一个隐含的默认[2.x.35]映射对象。    注意，如果你的DoFHandler使用了零以外的任何活动FE索引，那么你需要调用上面的函数，为每个活动FE索引提供一个映射对象。 
* [0.x.7]*
    [2.x.36] 函数的评估和错误  
* [0.x.8]*
   点误差评估。找到包含给定点的第一个单元，并计算一个（可能是矢量值的）有限元函数和一个连续函数（具有与有限元一样多的矢量分量）在该点的差值。    这是一个使用Q1映射的单元格边界的封装函数，用于调用其他point_difference()函数。   
* [2.x.37]如果发现点所在的单元格不是本地拥有的，会抛出一个[2.x.38]类型的异常。 
* [0.x.9]*
   点的错误评估。找到包含给定点的第一个单元，并计算一个（可能是矢量值的）有限元函数和一个连续函数（具有与有限元一样多的矢量分量）在该点的差值。    与另一个同名的函数相比，这个函数使用一个任意的映射来评估差异。   
* [2.x.39]如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.40]类型的异常。 
* [0.x.10]*
   在给定的点[2.x.42]点评估一个由给定的DoFHandler和节点矢量[2.x.41]定义的可能是矢量值的有限元函数，并通过最后一个参数返回这个函数的（矢量）值。    这个函数对点被评估的单元格使用[2.x.43] -映射。如果你需要使用不同的映射来评估（例如，当使用弯曲的边界时），请使用接受映射的point_difference()函数。    这个函数不是特别便宜。这是因为它首先需要找到给定点所在的单元格，然后在参考单元格上找到与给定评估点相匹配的点，然后评估那里的形状函数。你可能不想用这个函数来评估[1.x.5]点的解。对于这种应用，FEFieldFunction类至少提供了一些优化。另一方面，如果你想在同一个点上评估[1.x.6]，你可能想看一下[2.x.44]函数。   
* [2.x.45] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.46]类型的异常。   
* [2.x.47] 这个函数需要找到一个点所在的单元格，当然这只能在一定的数字公差内完成。    因此，对于位于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.7]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.11]*
   与上述hp的情况相同。   
* [2.x.48] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.49]类型的异常。   
* [2.x.50] 这个函数需要找到一个点所在的单元格，当然，这只能在一定的数字公差内完成。    因此，对于位于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.8]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.12]*
   评估由给定的DoFHandler和节点向量[2.x.51]在给定点[2.x.52]定义的标量有限元函数，并返回该函数的值。    这个函数对点被评估的单元使用Q1映射。如果你需要使用不同的映射来评估（例如，当使用弯曲的边界时），请使用接受映射的point_difference()函数。    这个函数不是特别便宜。这是因为它首先需要找到给定点所在的单元格，然后在参考单元格上找到与给定评估点相匹配的点，然后评估那里的形状函数。你可能不想用这个函数来评估[1.x.9]点的解。对于这种应用，FEFieldFunction类至少提供了一些优化。另一方面，如果你想在同一个点上评估[1.x.10]，你可能想看一下[2.x.53]函数。    这个函数在[2.x.54]"[2.x.55]"的结果部分的 "扩展的可能性 "中使用。   
* [2.x.56] 如果找到的点所在的单元格不是本地拥有的，会抛出一个[2.x.57]类型的异常。   
* [2.x.58] 这个函数需要找到一个点所在的单元格，当然这只能在一定的数字公差内完成。    因此，对于处于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.11]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.13]*
   与上述hp的情况相同。   
* [2.x.59] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.60]类型的异常。   
* [2.x.61] 这个函数需要找到一个点所在的单元格，当然，这只能在一定的数字公差内完成。    因此，对于处于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.12]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.14]*
   评估由给定的DoFHandler和节点向量[2.x.62]在给定点[2.x.63]点定义的可能是矢量值的有限元函数，并通过最后一个参数返回该函数的（矢量）值。    与另一个同名的函数相比，这个函数使用一个任意的映射来评估点值。    这个函数不是特别便宜。这是因为它首先需要找到给定的点在哪个单元格中，然后在参考单元格上找到与给定的评估点相匹配的点，然后评估那里的形状函数。你可能不想用这个函数来评估[1.x.13]点的解。对于这种应用，FEFieldFunction类至少提供了一些优化。另一方面，如果你想在同一个点上评估[1.x.14]，你可能想看一下[2.x.64]函数。   
* [2.x.65] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.66]类型的异常。   
* [2.x.67] 这个函数需要找到一个点所在的单元格，当然这只能在一定的数字公差内完成。    因此，对于位于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.15]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.15]*
   与上述hp的情况相同。   
* [2.x.68] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.69]类型的异常。   
* [2.x.70] 这个函数需要找到一个点所在的单元格，当然，这只能在一定的数字公差内完成。    因此，对于位于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.16]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.16]*
   评估由给定的DoFHandler和节点向量[2.x.71]在给定点[2.x.72]定义的标量有限元函数，并返回这个函数的值。    与另一个同名的函数相比，这个函数使用一个任意的映射来评估差异。    这个函数不是特别便宜。这是因为它首先需要找到给定点所在的单元格，然后在参考单元格上找到与给定评估点相匹配的点，然后评估那里的形状函数。你可能不想用这个函数来评估[1.x.17]点的解。对于这种应用，FEFieldFunction类至少提供了一些优化。另一方面，如果你想在同一个点上评估[1.x.18]，你可能想看一下[2.x.73]函数。   
* [2.x.74] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.75]类型的异常。   
* [2.x.76] 这个函数需要找到一个点所在的单元格，当然这只能在一定的数字公差内完成。    因此，对于处于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.19]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.17]*
   与上述hp的情况相同。   
* [2.x.77] 如果发现点所在的单元格不是本地拥有的，就会抛出一个[2.x.78]类型的异常。   
* [2.x.79] 这个函数需要找到一个点所在的单元格，当然，这只能在一定的数字公差内完成。    因此，对于处于或接近单元边界的点，你可能会在这里或那里得到有限元场的值，这取决于该点是在哪个单元中找到的。如果有限元场是连续的，这并不重要（在相同的公差内）。另一方面，如果使用的有限元是[1.x.20]连续的，那么你会在单元格的边界上或接近边界的地方得到不可预测的值，正如人们在试图评估不连续函数的点值时所期望的那样。 
* [0.x.18]

