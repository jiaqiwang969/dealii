include/deal.II-translator/dofs/dof_handler_0.txt
[0.x.0]*
 给定一个三角形和一个有限元的描述，这个类列举了三角形的所有顶点、边、面和单元的自由度。因此，它也为离散空间[2.x.0]提供了一个[1.x.0]，其元素是由FiniteElement对象在每个单元上定义的有限元函数。这个类满足了[2.x.1]的 "MeshType概念 "要求。
* 它首次在[2.x.2]教程程序中使用。
* 对于每个顶点、直线、四边形等，这个类存储了一个生活在这个对象上的自由度指数的列表。这些指数指的是无约束的自由度，也就是说，有约束的自由度的编号与无约束的自由度的编号是一样的，只是后来被淘汰了。 这导致全局向量和矩阵中的指数也是指所有的自由度，需要进行某种浓缩来限制方程组只包括无约束的自由度。指数的实际存储布局在[2.x.3]类文档中描述。
* 该类提供了遍历所有单元的迭代器，与Triangulation类的方式基本相同。使用begin()和end()函数（和同伴，如begin_active()），可以获得遍历单元的迭代器，并查询自由度结构以及三角形的数据。这些迭代器建立在Triangulation类的迭代器之上，但与纯粹的三角形迭代器相比，提供了额外的自由度功能信息。自由度迭代器由<tt>++</tt>和<tt>--</tt>操作符呈现的顺序与遍历三角形的相应迭代器相同，该DoFHandler是在三角形上构建的。
* 如果要解决曲面上的问题，必须使用<tt>spacedim</tt>参数。如果没有指定，这个参数的默认值是<tt>=dim</tt>，意味着我们要在一个维度等于它所嵌入的空间维度的域中解决问题。
* 

* [1.x.1]
* 自由度（`dofs'）通过函数distribut_dofs()在给定的三角形上分布。它被传递给一个有限元对象，描述有多少自由度位于顶点、线等处。它逐个遍历三角形，如果尚未编号，则对该单元的自由度进行编号。对于非多重网格算法，只考虑活动单元。活动单元被定义为那些没有子单元的单元，也就是说，它们是最精细的单元。
* 由于三角形的遍历是从最粗的活动层的单元开始，然后到更细的层次，因此最大的单元以及它们的边界线和顶点的系数最低，更细的单元的系数更高。
* 这种编号方式意味着所得矩阵的带宽非常大，因此对于某些求解算法来说是非常不理想的。由于这个原因，DoFRenumbering类提供了几种算法来重新安排dof的编号。关于已实现的算法的讨论见这里。
* 

* [1.x.2]
* 在构造时，这个类需要一个对三角形对象的引用。在大多数情况下，这将是对Triangulation类型对象的引用，即代表完全驻留在单个处理器上的三角形的类。然而，它也可以是[2.x.4]类型（例如，见[2.x.5]、[2.x.6]，特别是[2.x.7]模块），在这种情况下，DoFHandler对象将只管理本地拥有的和幽灵单元的自由度。这个过程对使用者来说是完全透明的。
* 

* [1.x.3]
* DoFRenumbering类提供了许多重新编号的方案，如Cuthill-McKee方案。基本上，该函数设置了一个数组，在这个数组中，我们为每个自由度存储了重新编号后这个自由度应该有的新索引。使用这个数组，本类的renumber_dofs()函数被调用，它实际上执行了从旧的DoF指数到数组中给出的指数的改变。然而，在某些情况下，用户可能想计算他们自己的重新编号顺序；在这种情况下，可以分配一个数组，每个自由度有一个元素，并在其中填入各自自由度应被分配的编号。例如，这个数字可以通过对下风方向的自由度的支持点进行排序来获得。 然后用数组调用[2.x.8]函数，将旧的自由度指数转换为新的自由度指数。
* 

* [1.x.4]
* 像deal.II中的许多其他类一样，DoFHandler类可以使用BOOST的序列化设施将其内容流向一个存档。这样存储的数据以后可以再次从存档中检索，以恢复这个对象的内容。这个工具经常被用来将程序的状态保存到磁盘上，以便以后可能复活，通常是在长期运行的计算的检查点/重启策略的背景下，或者在不是很可靠的计算机上（例如，在非常大的集群上，个别节点偶尔会出现故障，然后导致整个MPI作业的失败）。
* DoFHandler类这样做的模式与Triangulation类相似（见该类的一般文档中的章节）。特别是，load()函数并不完全恢复与之前使用save()函数存储的相同状态。相反，该函数假设你将数据加载到一个DoFHandler对象中，该对象已经与一个三角测量相关联，其内容与保存数据时使用的三角测量一致。同样，load()函数假定当前对象已经与一个有限元对象相关联，该对象与数据保存时的对象相匹配；后者可以通过在从序列化存档中重新加载数据之前使用同种有限元调用[2.x.9]实现。
* 

* [1.x.5]
* 该类不允许在所有单元上只使用一个特定的有限元，而是允许在每个单元上列举不同有限元的自由度。为此，我们给每个单元格分配一个[2.x.10]，表示在有限元集合中的哪个元素（由[2.x.11]类型的对象代表）是住在这个单元格上的。然后，该类列举了三角形的每个单元上与这些有限元相关的自由度，如果可能的话，还可以识别单元界面上的自由度，如果它们匹配的话。如果相邻的单元沿共同界面的自由度不立即匹配（例如，如果你有[2.x.12]和[2.x.13]元素在一个共同的面相遇），那么就需要计算约束，以确保网格上产生的有限元空间保持一致。
* 使用这种类型的对象的整个过程在 [2.x.14] 中解释。这个类实现的许多算法在[2.x.15] "hp-paper "中描述。
* 

* [1.x.6]
* 使用这个类的典型工作流程是创建一个网格，给每个活动单元分配一个活动FE索引，调用[2.x.16]，然后在这个有限元空间上组装一个线性系统并解决问题。
* 活跃FE指数将在网格适应过程中自动从旧网格转移到新网格。未来的FE指数是用来确定网格适应后的活动FE指数，并用于为新网格准备旧网格上的数据。如果没有指定未来FE指数，则以有限元为准。
* 特别是在适应过程中，以下规则适用。
* 

* 
* 
* - 网格细化时，子单元会继承父单元的未来FE指数。
* 

* 
* 
* - 当粗化单元时，父单元（现在处于活动状态）将被分配一个未来的FE指数，该指数由其（不再活动的）子单元决定，遵循FiniteElementDomination逻辑。在以前分配给前子女的元素集合中，我们选择一个由所有子女支配的元素作为父单元。如果没有找到，我们就在整个集合中挑选一个被所有前子女支配的最主要的元素。关于这个主题的进一步信息，请参见[2.x.17]。
* 在[2.x.18]命名空间中，有自动hp-适应的策略，它将根据标准设置未来的FE指数。
* 

* [1.x.7]
* 当该类与 [2.x.19] 或 [2.x.20] 一起使用时，你只能通过 [2.x.21] 这样的调用，在本地拥有的单元上设置活动FE指数。另一方面，不允许在幽灵或人造单元上设置活动FE指数。
* 然而，幽灵单元确实获得了什么元素在其上处于活动状态的信息：每当你调用[2.x.22]时，所有参与并行网格的处理器都会以这样的方式交换信息，幽灵单元上的活动FE指数等于在拥有该特定幽灵单元的处理器上设置的活动FE指数。因此，人们可以在幽灵单元上[1.x.8][2.x.23]，只是不能用手去设置它。
* 在人工单元上，没有关于那里使用的[2.x.24]的信息。这是因为我们甚至不知道这些细胞是否存在，即使存在，目前的处理器也不知道关于它们的任何具体信息。更多信息见[2.x.25]"人工细胞的词汇表条目"。
* 在细化和粗化过程中，关于每个单元的[2.x.26]的信息将被自动转移。
* 然而，在hp模式下使用带有DoFHandler的[2.x.27]，在序列化过程中需要额外注意，因为没有关于活动FE指数的信息会被自动传输。这必须使用prepare_for_serialization_of_active_fe_indices()和deserialize_active_fe_indices()函数手动完成。前者必须在调用[2.x.28]之前调用，后者需要在[2.x.29]之后运行。 如果进一步的数据将通过[2.x.30][2.x.31]或[2.x.32]类附加到三角形上，所有相应的准备和反序列化函数调用需要以相同顺序发生。更多信息请参考[2.x.33]的文档。
* 

* 
* [2.x.34] 

 
* [0.x.1]*
   一个别名，用于识别DoFHandler对象中的单元格迭代器。  迭代器的概念在[2.x.35]"迭代器文档模块 "中有详细的讨论。    目前的别名在本质上与相应的[2.x.36]别名一样工作。然而，除了已经通过CellAccessor类提供的成员函数外，它还提供了DoFCellAccessor的成员函数。   
* [2.x.37]   
* [0.x.2]*
   一个别名，用于识别指向面的迭代器。  迭代器的概念在[2.x.38]"迭代器文档模块 "中有详细的讨论。    当前的别名在本质上与相应的[2.x.39]别名一样工作。然而，除了已经通过TriaAccessor类提供的成员函数外，它还提供了DoFAccessor的成员函数。   
* [2.x.40]   
* [0.x.3]*
   一个别名，定义了一个网格的（一维）线条的迭代器。在一维网格中，这些线是网格的单元，而在二维网格中，这些线是单元的面。   
* [2.x.41]   
* [0.x.4]*
   一个别名，允许在[1.x.9]线上迭代，即没有子节点的线的子集。在一维网格中，这些是网格的单元，而在二维网格中，线是单元的面。    在二维或三维网格中，没有子节点的线（即活动线）是至少一个活动单元的一部分。每条这样的线还可能是与活动单元相邻的更粗的单元的线的子线。(这个较粗的邻居也是活动的)。   
* [2.x.42]   
* [0.x.5]*
   一个别名，定义了一个网格的（二维）四边形的迭代器。在二维网格中，这些是网格的单元，而在三维网格中，四边形是单元的面。   
* [2.x.43]   
* [0.x.6]*
   一个允许在[1.x.10]四边形上迭代的别名，即没有子节点的四边形子集。在二维网格中，这些是网格的单元，而在三维网格中，四边形是单元的面。    在三维网格中，没有孩子的四边形（即活动四边形）是至少一个活动单元的面。每个这样的四边形还可能是与活动单元相邻的更粗的单元的四边形面的子。这个较粗的邻居也将是活动的）。   
* [2.x.44]   
* [0.x.7]*
   一个别名，定义了一个网格的（三维）六边形的迭代器。这个迭代器只有在三维网格中才有意义，在三维网格中六边形是网格的单元。   
* [2.x.45]   
* [0.x.8]*
   一个别名，允许遍历网格的[1.x.11]个六边形。  这个迭代器只有在三维网格中才有意义，在三维网格中六边形是网格的单元。因此，在这些三维网格中，这个迭代器等同于 [2.x.46] 别名。   
* [2.x.47]   
* [0.x.9]*
   一个别名，用于识别[2.x.48]"活动单元迭代器"。  迭代器的概念在[2.x.49]"迭代器文档模块 "中有详细讨论。    当前的别名用于识别DoFHandler对象中的活动单元。虽然别名的实际数据类型隐藏在几层（不幸的是必须的）间接因素之后，但它本质上是TriaActiveIterator<DoFCellAccessor>。TriaActiveIterator类的工作方式就像一个指向活动对象的指针，当你解除引用时，会产生一个DoFCellAccessor类型的对象。DoFCellAccessor是一个识别DoFHandler中单元格特定属性的类，但它派生（并因此继承）于DoFAccessor、TriaCellAccessor和TriaAccessor，它们描述了你可以对三角形和DoFHandler对象中更一般的对象（线、面以及单元格）提出什么要求。   
* [2.x.50]   
* [0.x.10]*
   一个别名，用于识别单元格迭代器。迭代器的概念在[2.x.51]"迭代器文档模块 "中有详细的讨论。    当前的别名标识了DoFHandler对象中的单元格。其中一些单元实际上可能是活动的（见[2.x.52]"活动单元迭代器"），在这种情况下，它们实际上可以被问及住在它们身上的自由度。另一方面，如果单元格不是活动的，任何这样的查询都会导致错误。请注意，这就是这个别名与level_cell_iterator别名的区别所在。    虽然这个别名的实际数据类型隐藏在几层（不幸的是必须的）间接性后面，但它本质上是TriaIterator<DoFCellAccessor>。TriaIterator类的工作方式就像一个指向对象的指针，当你解除引用时，会产生一个DoFCellAccessor类型的对象。DoFCellAccessor是一个识别DoFHandler中单元格特定属性的类，但它派生（并因此继承）于DoFAccessor、TriaCellAccessor和TriaAccessor，它们描述了你可以对三角形和DoFHandler对象中更一般的对象（线、面以及单元格）提出什么要求。   
* [2.x.53]   
* [0.x.11]*
   一个别名，用于识别指向面的迭代器。  迭代器的概念在[2.x.54]"迭代器文档模块 "中有详细的讨论。    虽然这个别名的实际数据类型隐藏在几层（不幸的是必须的）间接因素后面，但它本质上是TriaIterator<DoFAccessor>。TriaIterator类的工作方式就像一个指向对象的指针，当你解除引用时，会产生一个DoFAccessor类型的对象。DoFAccessor又是一个可以用来查询面的DoF索引的类，但它也是从TriaAccessor派生出来的，因此可以用来查询几何属性，如面的顶点、面积等。   
* [2.x.55]   
* [0.x.12]*
   一个别名，用于识别指向活动面的迭代器，即指向没有子节点的面。活动面必须是至少一个活动单元的面。    除了 "活动 "的限定，这个别名与[2.x.56]的别名相同。特别是，取消引用这两个别名都会产生相同的对象。   
* [2.x.57]   
* [0.x.13]*
   让维度在函数模板中可用。 
* [0.x.14]*
   使空间维度在函数模板中可用。 
* [0.x.15]*
   在给定单元上使用的有限元的默认索引。 
* [0.x.16]*
   在给定单元上使用的有限元的无效索引。 
* [0.x.17]*
   我们存储活动FE索引的类型。 
* [0.x.18]*
   我们在CRS数据结构中存储偏移量的类型。 
* [0.x.19]*
   无效的活动FE索引，它将被用作默认值，以确定未来的FE索引是否已经被设置。 
* [0.x.20]*
   标准构造函数，不初始化任何数据。用这个构造函数构造一个对象后，使用 reinit() 得到一个有效的 DoFHandler。 
* [0.x.21]*
   构造函数。以[2.x.58]作为工作中的三角关系。 
* [0.x.22]*
   复制构造函数。DoFHandler对象很大，很昂贵。  它们不应该被复制，特别是不应该被意外地复制，而应该被有意地构造。因此，这个构造函数被明确地从这个类的接口中移除。 
* [0.x.23]*
   解构器。 
* [0.x.24]*
   复制操作符。DoFHandler对象是大的和昂贵的。  它们不应该被复制，特别是不应该被意外地复制，而应该被有意地构建。因此，这个操作符被明确地从这个类的接口中移除。 
* [0.x.25]*
   给DoFHandler分配一个三角形和一个有限元素，并计算网格上的自由度分布。     [2.x.59] 使用 reinit() 和 distribute_dofs() 来代替。 
* [0.x.26]*
   与上述相同，但需要一个[2.x.60]对象。     [2.x.61] 使用 reinit() 和 distribute_dofs() 来代替。 
* [0.x.27]*
   给这个对象分配一个FiniteElement [2.x.62] 。   
* [2.x.63] 这个函数对作为参数的有限元进行复制，并将其作为成员变量存储。因此，可以编写如下代码  
* [1.x.12]
* 然后你可以通过调用[2.x.64]来访问有限元。然而，通常更方便的做法是将命名的有限元对象作为成员变量保存在你的主类中，当你需要访问有限元的属性时直接引用它（如[2.x.65]这就是所有教程程序的做法。     [2.x.66] 这个函数只设置一个FiniteElement。自由度要么还没有被分配，要么是使用先前设置的元素进行分配。在这两种情况下，访问自由度将导致无效的结果。为了恢复一致性，请调用distribution_dofs()。     [2.x.67] 用distribution_dofs()代替。 
* [0.x.28]*
   与上述相同，但需要一个[2.x.68]对象。     [2.x.69] 使用 distribute_dofs() 来代替。 
* [0.x.29]*
   穿过三角形，将所有活动单元的活动FE指数设置为[2.x.70]中给出的值。  
* [0.x.30]*
   通过三角剖分，将所有活动单元的活动FE指数存储到向量[2.x.71]中，如有必要，该向量将被调整大小。 
* [0.x.31]*
   给DoFHandler分配一个三角图。    移除与之前的Triangulation对象的所有关联，并与新对象建立连接。所有关于以前的自由度的信息将被删除。激活hp-mode。 
* [0.x.32]*
   通过三角剖分并 "分配 "给定有限元所需的自由度。"分布 "自由度包括分配内存来存储所有自由度的实体（如顶点、边、面等）的索引，然后列举所有自由度。换句话说，虽然网格和有限元对象本身只是定义了一个有限元空间[2.x.72]，但分配自由度的过程确保了这个空间有一个基础，并且这个基础的形状函数是以可索引、可预测的方式列举的。    网格上自由度的确切顺序，即有限元空间的基函数被列举的顺序，是deal.II作为一个实现细节处理的东西。一般来说，自由度的列举顺序与我们遍历单元的顺序相同，但你不应该依赖任何特定的编号。相反，如果你想要一个特定的顺序，可以使用命名空间DoFRenumbering中的函数。    这个函数在[2.x.73]教程程序的介绍中首次讨论。   
* [2.x.74]该函数对作为参数给定的有限元进行复制，并将其存储为成员变量，与上述函数set_fe()类似。 
* [0.x.33]*
   同上，但取一个[2.x.75]对象。 
* [0.x.34]*
   为几何多网格在每个层面上分配层面自由度。在调用此函数之前，需要使用distribut_dofs()来分配活动的自由度。 
* [0.x.35]*
   返回这个DoFHandler是否有hp能力。 
* [0.x.36]*
   这个函数返回这个DoFHandler是否有分布在每个多网格层次上的DoF，或者换句话说，如果distribution_mg_dofs()已经被调用。 
* [0.x.37]*
   这个函数返回这个DoFHandler是否有活动的DoF。这相当于询问(i)distribution_dofs()是否被调用，以及(ii)被分配自由度的有限元是否真的有自由度（例如FE_Nothing就不是这种情况）。    如果这个对象是基于[2.x.76]，那么如果平行DoFHandler对象的[1.x.13]分区有任何自由度，当前函数返回true。换句话说，即使Triangulation在当前MPI进程上不拥有任何活动单元，但至少有一个进程拥有单元，而且至少这一个进程有任何自由度与之相关，该函数也会返回true。 
* [0.x.38]*
   在用FESystem元素distribution_dofs()之后，全局和水平向量的块结构被存储在BlockInfo对象中，可以用block_info()访问。这个函数在同一对象的每个单元上初始化本地块结构。 
* [0.x.39]*
   清除此对象的所有数据。 
* [0.x.40]*
   根据每个自由度的新DoF指数列表对自由度重新编号。    这个函数是由DoFRenumbering函数中的函数在计算自由度指数的新排序后调用的。然而，它当然也可以从用户代码中调用。     [2.x.77] new_number 这个数组的大小必须等于当前处理器所拥有的自由度数量，也就是说，大小必须等于n_locally_owned_dofs()的返回值。如果只有一个处理器参与存储当前的网格，那么就等于总的自由度数，即n_dofs()的结果。这个数组的内容是由local_owned_dofs()返回的IndexSet中所列的每个自由度的新全局索引。在顺序网格的情况下，这意味着这个数组是当前网格上每个自由度的新索引列表。如果我们有一个[2.x.78]或[2.x.79]的底层DoFHandler对象，该数组是所有本地拥有的自由度的新索引列表，列举的顺序与当前本地拥有的DoF相同。换句话说，假设自由度[2.x.80]是当前本地拥有的，那么[2.x.81]返回新的全局自由度索引[2.x.82] 。由于在顺序的情况下，local_owned_dofs()的IndexSet是完整的，在只有一个处理器参与网格的情况下，后一种对数组内容的约定可以简化为前一种。   
* [2.x.83] 虽然从上面可以看出，知道并行计算中本地拥有的自由度的[1.x.14]是重新编号下的不变量可能会令人惊讶，即使与这些本地拥有的自由度相关的[1.x.15]不是。从根本上说，这个不变性的存在是因为[1.x.16]一个自由度是否为本地所有，与该自由度的（新旧）索引无关。事实上，如果自由度在本地拥有的单元上，而不是在相邻单元具有较低[2.x.84]"子域id "的单元之间的界面上，那么自由度就是本地拥有的。由于这两个条件都与与DoF相关的索引无关，一个本地拥有的自由度在重新编号后也将是本地拥有的。    另一方面，诸如本地拥有的DoF的索引集是否形成一个连续的范围（即Local_owned_dofs()是否返回[2.x.85]返回[2.x.86]的IndexSet对象）等属性当然会受到这里进行的确切重新编号的影响。例如，虽然在 distribute_dofs() 中对 DoF 指数进行的初始编号产生了一个连续的编号，但由 [2.x.87] 执行的重新编号通常不会产生连续的本地所有 DoF 指数。 
* [0.x.41]*
   与上述功能相同，但对多网格层次结构中的单层自由度进行重新编号。 
* [0.x.42]*
   返回给定三角结构中一个自由度与给定有限元可能耦合的最大自由度数。  这是系统矩阵中每行的最大条目数；因此这一信息可以在构建SparsityPattern对象时使用。    返回的数字并不是真正的最大数字，而是基于有限元和在一个顶点相遇的最大单元数的估计。这个数字对受限矩阵也是有效的。    耦合数的确定可以通过简单的画图来完成。在这个函数的实现中可以找到一个例子。   
* [2.x.88] 这个函数最常被用来确定稀疏模式的最大行长度。不幸的是，虽然这个函数返回的估计值在1d和2d中相当准确，但在3d中往往明显过高，导致SparsityPattern类在某些情况下分配太多的内存。除非有人能够改进目前的三维函数，否则对于这些情况，我们没有什么办法。解决这个问题的典型方法是使用一个中间压缩的稀疏模式，只在需要时分配内存。请参考[2.x.89]和[2.x.90]的例子程序，了解如何做到这一点。这个问题在 [2.x.91] 模块的文档中也有讨论。 
* [0.x.43]*
   返回位于边界上的自由度的数量，边界上的另一个自由度可以与之耦合。    这个数字与max_couplings_between_dofs()相同，少一个维度。   
* [2.x.92] 关于这个函数的性能，与max_couplings_per_dofs()相同。可以考虑用一个动态稀疏模式类来代替（见[2.x.93] ）。 
* [0.x.44]*
    [2.x.94] 细胞迭代器函数  
* [0.x.45] [2.x.95].   
* [0.x.46]*
   迭代到第一层使用的单元格 [2.x.96] 。  
* [0.x.47]*
   到第一层活动单元的迭代器 [2.x.97] 如果给定的层不包含任何活动单元（即该层的所有单元都被进一步细化），则该函数返回[2.x.98]，因此，此类的循环是  
* [1.x.17]
* 迭代次数为零，如果这一层没有活动单元，可能会出现这种情况。 
* [0.x.48]*
   过去结束的迭代器；这个迭代器用于比较过去结束或开始前状态的迭代器。 
* [0.x.49]*
   返回一个迭代器，它是第一个不在给定级别上的迭代器。如果[2.x.99]是最后一个层次，那么这将返回<tt>end()</tt>。 
* [0.x.50]*
   返回一个活动的迭代器，它是不在给定级别上的第一个活动迭代器。如果[2.x.100]是最后一层，那么这个返回<tt>end()</tt>。 
* [0.x.51]*
   迭代器到第[2.x.101]层的第一个使用的单元格，这将返回一个level_cell_iterator，当dof_indices()被调用时，会返回level dofs。 
* [0.x.52]*
   遍历最后一个单元的迭代器 [2.x.102] 当调用dof_indices()时，这将返回一个level_cell_iterator，返回level dofs。 
* [0.x.53]*
   过去的迭代器；这个迭代器用于比较具有过去或开始前状态的迭代器。 
* [0.x.54]*
    [2.x.103] 返回迭代器范围的单元格迭代器函数  
* [0.x.55]*
   返回一个迭代器范围，该范围包含了组成这个DoFHandler的所有单元格（活动或不活动）。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.104] 半开范围 [2.x.105]     
* [2.x.106]   
* [0.x.56]*
   返回一个迭代器范围，该范围包含组成这个DoFHandler的所有活动单元。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样，也请参见[2.x.107] "C++11标准"。    基于范围的for循环很有用，因为它们需要的代码比传统的循环少得多（关于它们如何工作的讨论，见[1.x.18]）。一个例子是，如果没有基于范围的for循环，人们往往会写出如下的代码。 
* [1.x.19]
* 使用C++11的基于范围的for循环，现在这完全等同于以下的代码。 
* [1.x.20]
* [2.x.108] 半开范围<code>[this->begin_active(), this->end())</code>。   
* [2.x.109]   
* [0.x.57]*
   返回一个迭代器范围，该范围包含了组成这个DoFHandler的所有单元格（无论是否激活）的水平单元格的形式。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.110] 半开范围<code>[this->begin_mg(), this->end_mg())</code>。   
* [2.x.111]   
* [0.x.58]*
   返回一个迭代器范围，该范围包含所有构成该DoFHandler的给定级别的单元格（无论是否激活）。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.112] level 这个三角结构的细化层次中的一个给定的层次。   [2.x.113] 半开放范围<code>[this->begin(level), this->end(level))</code> [2.x.114] level必须小于this->n_levels()。   
* [2.x.115]   
* [0.x.59]*
   返回一个迭代器范围，该范围包含所有构成此DoFHandler的给定级别的活动单元。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.116] level 这个三角结构的细化层次中的一个给定的层次。   [2.x.117] 半开放范围<code>[this->begin_active(level), this->end(level))</code> [2.x.118] level必须小于this->n_levels()。   
* [2.x.119]   
* [0.x.60]*
   返回一个迭代器范围，该范围包含所有构成该DoFHandler的给定级别的单元格（无论是否激活）的level-cell形式。这样的范围对于初始化基于范围的for循环是很有用的，正如C++11所支持的那样。 参见active_cell_iterators()文档中的例子。     [2.x.120] level 在这个三角结构的细化层次中的一个给定级别。   [2.x.121] 半开范围<code>[this->begin_mg(level), this->end_mg(level))</code> [2.x.122] level必须小于this->n_levels()。   
* [2.x.123]   
* [0.x.61] [2.x.124].   
* [0.x.62]*
   返回全局自由度的数量。如果当前对象自己处理所有的自由度（即使你可能打算并行解决你的线性系统，如[2.x.125]或[2.x.126]），那么这个数字等于本地拥有的自由度数，因为这个对象不知道你想用它做什么，并认为它拥有它知道的每一个自由度。    另一方面，如果这个对象在一个[2.x.127]对象上操作，那么这个函数返回全局自由度的数量，在所有处理器上累积。    在这两种情况下，返回的数字都包括那些被悬挂节点约束的自由度，见 [2.x.128] 。    从数学上讲，这个函数返回的数字等于有限元空间的尺寸（不考虑约束），对应于(i)它所定义的网格，和(ii)当前对象使用的有限元。当然，它也等于跨越这个空间的形状函数的数量。 
* [0.x.63]*
   某一层次上的多层次自由度的（全局）数量。    如果没有给这个层次分配自由度，则返回[2.x.129] 否则返回这个层次的自由度数。 
* [0.x.64]*
   返回位于边界上的本地拥有的自由度的数量。 
* [0.x.65]*
   返回位于边界上有边界指标的部分的本地拥有的自由度数，这些边界指标列在给定的集合中。  使用[2.x.130]而不是[2.x.131]的原因与[2.x.132]的变体文件中描述的相同，该变体需要一个地图。    然而，这个函数还有一个重载，需要一个[2.x.133]的参数（见下文）。 
* [0.x.66]*
   返回位于边界部分的自由度的数量，这些部分的边界指标列在给定的集合中。的  
* [0.x.67]*
   访问一个告知自由度处理程序块结构的对象。    如果在distribution_dofs()中使用了FESystem，自由度自然会被分成几个[2.x.134]"块"。  对于每个基本元素，出现的块数与它的倍数一样多。    在distribut_dofs()的最后，每个块中的自由度被计算出来，并存储在BlockInfo对象中，可以在这里访问。如果你之前调用了distribution_mg_dofs()，那么在多网格层次结构的每一层都会做同样的事情。此外，每个单元上的块结构可以通过调用initialize_local_block_info()在此对象中生成。 
* [0.x.68]*
   返回属于这个过程的自由度的数量。    如果这是一个连续的DoFHandler，那么这个结果等于n_dofs()产生的结果。这里，"顺序 "意味着要么整个程序不使用MPI，要么使用MPI但只使用一个MPI进程，要么有多个MPI进程，但这个DoFHandler建立的Triangulation只在一个MPI进程上工作）。  另一方面，如果我们在一个[2.x.135]或[2.x.136]上操作，那么它只包括当前处理器拥有的自由度。请注意，在这种情况下，这并不包括所有分布在当前处理器的网格图像上的自由度：特别是，这个处理器所拥有的单元和其他处理器所拥有的单元之间的界面上的一些自由度可能是他们的，而幽灵单元上的自由度也不一定包括在内。 
* [0.x.69]*
   返回一个IndexSet，描述本地拥有的自由度集合，作为0...n_dofs()的一个子集。这个集合的元素数等于n_locally_owned_dofs()。 
* [0.x.70]*
   返回一个IndexSet，描述用于给定多网格级别的本地拥有的DoF集合，作为0...n_dofs(level)的一个子集。 
* [0.x.71]*
   返回一个对该对象所使用的indexth有限元对象的常数引用。 
* [0.x.72]*
   返回对该对象所使用的有限元对象集合的常数引用。 
* [0.x.73]*
   返回对该对象所依据的三角形的常数引用。 
* [0.x.74]*
   返回底层三角法所使用的MPI通信器。 
* [0.x.75]*
   每当考虑用[2.x.137]作为底层三角结构进行序列化时，我们也需要考虑在所有活动单元上存储活动的FE指数。    这个函数注册了这些指数，当[2.x.138]函数在底层三角结构上被调用时，这些指数将被存储。   
* [2.x.139] 目前只对[2.x.140]类型的三角形实现，如果注册了不同的类型，将触发一个断言。     [2.x.141] [2.x.142]的文档有关于序列化的进一步信息。 
* [0.x.76]*
   每当考虑用[2.x.143]作为底层三角的序列化时，我们也需要考虑在所有活动单元上存储活动FE指数。    这个函数反序列化并将之前存储的活动FE指数分配到所有活动单元上。   
* [2.x.144] 目前只针对类型的三角形实现 [2.x.145] 如果注册了不同的类型，将触发一个断言。     [2.x.146] [2.x.147]的文档有关于序列化的进一步信息。 
* [0.x.77]*
   确定此对象的内存消耗（以字节为单位）的估计值。    这个函数是虚拟的，因为dof handler对象可能通过指向这个基类的指针来访问，尽管实际对象可能是一个派生类。 
* [0.x.78]*
   使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据写入一个流中，以便进行序列化。 
* [0.x.79]*
   为了序列化的目的，使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)从流中读取此对象的数据。 
* [0.x.80]*
   使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)从流中写入和读取此对象的数据，以达到序列化的目的。 
* [0.x.81]*
   异常情况  
* [0.x.82]*
   异常情况  
* [2.x.148]   
* [0.x.83]*
   异常情况  
* [2.x.149]   
* [0.x.84]*
   异常情况  
* [2.x.150]   
* [0.x.85]*
   异常情况  
* [0.x.86]*
   当DoFHandler没有hp-capabilities时，某种功能没有意义时使用的异常。 
* [0.x.87]*
   当DoFHandler有hp-capabilities时，某项功能没有实现时使用的异常。 
* [0.x.88]*
   一个数据结构，用于存储与特定顶点相关的DoF指数。与单元不同，顶点生活在多网格层次结构的多个层面上；因此，我们需要为每个顶点存储它所处的每个层面的DoF指数。这个类就是这样做的。 
* [0.x.89]*
     构造函数。   
* [0.x.90]*
     调用一个函数来分配必要的内存量，以存储该顶点在给定（包括）层次范围内的DoF的索引。   
* [0.x.91]*
     返回该结构存储数据的最粗的层次。   
* [0.x.92]*
     返回该结构存储数据的最细层次。   
* [0.x.93]*
     返回当前顶点存储的给定级别的[2.x.151]个自由度的索引。   
* [0.x.94]*
     为当前顶点存储的给定级别的[2.x.152]个自由度的索引设置为[2.x.153] 。   
* [0.x.95]*
     此对象存储自由度指数的最粗层次。   
* [0.x.96]*
     该对象存储DoF指数的最细级别。   
* [0.x.97]*
     一个指向数组的指针，在这个数组中，我们存储这个顶点存在的各个层次上的DoFs的索引。        属于[2.x.154]的DoF的起始偏移由[2.x.155]给出。 因此，[2.x.156]必须作为一个参数传递给设置或读取索引的函数。   
* [0.x.98]*
   每当底层三角结构通过h/p-refinement/coarsening和序列化发生变化时，单元格的活动FE索引就需要被转移。这个结构存储了该过程中所需要的所有临时信息。 
* [0.x.99]*
     用于临时存储迭代器和未来持续存在的单元格的活动FE索引的容器。   
* [0.x.100]*
     容器用于临时存储将被精炼的单元格的迭代器和未来的活动FE索引。   
* [0.x.101]*
     容器，用于临时存储粗化后将保留的父单元格的迭代器和未来有效的FE索引。   
* [0.x.102]*
     容器，用于临时存储每个本地拥有的单元格的活动FE索引，以便在[2.x.157]对象之间转移。   
* [0.x.103]*
     帮助对象，在细化/粗化和序列化过程中转移[2.x.158]对象上的所有活动FE指数。   
* [0.x.104]*
   一个包含块结构信息的对象。 
* [0.x.105]*
   表示当前DoFHandler是否有hp-能力的布尔值。 
* [0.x.106]*
   要工作的三角结构的地址。 
* [0.x.107]*
   存储一个[2.x.159]对象。如果在这个对象的初始化过程中只使用了一个FiniteElement，它就包含了（一个）FiniteElement。 
* [0.x.108]*
   一个描述自由度应如何分配和重新编号的对象。 
* [0.x.109]*
   一个包含各种数字的结构，这些数字表征了这个对象所工作的自由度。    对于这个结构的大多数成员，在这个类中有一个访问函数来返回其值。 
* [0.x.110]*
   像number_cache一样的数据结构，但为每个多网格层次。 
* [0.x.111]*
   缓存的所有活动单元的自由度指数。通过cell_dof_cache_ptr（CRS方案）来识别单元在向量中的适当位置。 
* [0.x.112]*
   指向cell_dof_cache_indices中活动单元的第一个缓存自由度的指针（通过级别和级别索引识别）。 
* [0.x.113]*
   所有相关活动有限元的每个d+1几何对象（3D：顶点、线、四边形、六边形）的自由度指数。通过object_dof_ptr（CRS方案）识别适当的位置。 
* [0.x.114]*
   指向所有相关活动有限元的几何对象的第一个缓存自由度的指针。   
* [2.x.160]在正常模式下，可以直接访问这个数据结构。    在hp模式下，需要通过hp_object_fe_indices/hp_object_fe_ptr进行转接。 
* [0.x.115]*
   每个几何对象的有效FE指数。通过hp_object_fe_ptr(CRS方案)来识别一个单元在向量中的适当位置。 
* [0.x.116]*
   指向一个几何对象的第一个FE索引的指针。 
* [0.x.117]*
   一个活动单元的活动FE索引（由级别和级别索引识别）。  这个向量只在hp模式下使用。 
* [0.x.118]*
   一个活动单元的未来FE指数（由级别和级别指数识别）。  这个向量只在hp模式下使用。 
* [0.x.119]*
   一个数组，用于存储位于顶点的水平自由度的索引。 
* [0.x.120]*
   用于存储不同多网格层次的自由度编号的空间。 
* [0.x.121]*
   用于存储多网格背景下面的自由度数的空间。 
* [0.x.122]*
   我们把我们的数据结构嵌入到一个指针中，以控制所有与传输有关的数据只在实际传输过程中存在。 
* [0.x.123]*
   一个连接的列表，这个对象用它连接到三角区，以获得三角区变化时的信息。 
* [0.x.124]*
   这个对象连接到三角测量的连接的列表。当数据由于细化或重新分区而需要传输时，它们会被特别触发。只有在hp模式下才有效。 
* [0.x.125]*
   释放所有用于非多重网格数据结构的内存。 
* [0.x.126]*
   释放所有用于多栅格数据结构的内存。 
* [0.x.127]*
   返回指定对象的dof索引。 
* [0.x.128]*
   返回指定对象的dof索引。 
* [0.x.129]*
   设置DoFHandler策略。 
* [0.x.130]*
   设置与底层三角结构的信号的连接。 
* [0.x.131]*
   为活动和未来的fe_indices创建默认表。    活动指数用一个零指标初始化，这意味着fe[0]将被默认使用。未来的指数被初始化为一个无效的指标，这意味着默认情况下不安排任何p-适应。    这个方法在构造时和底层三角结构被创建时被调用。这确保每个单元都有一个有效的活动和未来的fe_index。 
* [0.x.132]*
   更新活动和未来fe_indices的表格。    每当底层三角结构发生变化时（无论是通过适应还是反序列化），活动和未来的FE指数表将被调整为三角结构的当前结构。活动指数和未来指数的缺失值将被初始化为其默认值（参见create_active_fe_table()）。    这个方法在细化后和反序列化后被调用。这可以确保每个单元格都有一个有效的活动和未来的fe_index。 
* [0.x.133]*
   一个函数，它将在相关的三角函数或[2.x.161]被修改之前通过三角函数信号被触发。    在细化发生之前，存储所有将被细化或粗化的单元的活动FE指数的函数，以便在细化之后可以再次设置这些指数。 
* [0.x.134]*
   就在相关的三角化或[2.x.162]被修改后，将通过三角化信号触发的函数。    恢复所有被细化或粗化的单元的活动FE指数的函数。 
* [0.x.135]*
   在相关的[2.x.163]被修改之前，将通过三角测量信号触发的函数。    将所有活动的FE指数存储在本地拥有的单元上的函数，以分配给所有参与的处理器。 
* [0.x.136]*
   在相关的[2.x.164]被修改后，就会通过三角信号触发一个函数。    恢复本地拥有的单元上所有活动的FE指数的函数，这些单元已经被通信了。 
* [0.x.137]*
       给定一个hp模式的DoFHandler对象，确保用户为本地拥有的单元设置的未来FE指数也被传达给所有其他相关单元。            对于[2.x.165]对象，该信息同时分布在幽灵和人工单元上。            在使用[2.x.166]的情况下，指数只传达给幽灵单元。     
* [0.x.138]*
       返回来自整个[2.x.167]的有限元的索引，该有限元被分配给[2.x.168]的子单元的未来有限元所支配。 我们在该单元的子单元上的未来有限元中找到相应的有限元。如果没有一个符合条件，我们将搜索范围扩大到整个[2.x.169]，这是描述最小的有限元空间的元素，包括分配给子单元的所有未来有限元。如果该函数根本无法找到有限元，将触发一个断言。            通过这种方式，我们在hp-context中h-coarsening的情况下确定父单元的有限元。           
* [2.x.170] 这个函数只能在直接父单元上调用，即子单元都是活动的非活动单元。           
* [2.x.171] 在[2.x.172]对象中，兄弟姐妹单元可以是幽灵单元，请确保未来的FE指数已经正确地与communication_future_fe_indices()沟通。否则，在不同的处理器上，结果可能不同。没有检查未来FE指数的一致性。     
* [0.x.139]*
       异常情况      
* [0.x.140]*
   返回一个字符串，代表给定参数的动态类型。  这与typeid(...).name()的作用基本相同，但事实证明这在Intel 13+上是坏的。    定义在dof_handler.cc中。 
* [0.x.141]

