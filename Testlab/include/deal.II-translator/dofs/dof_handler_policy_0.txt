include/deal.II-translator/dofs/dof_handler_policy_0.txt
[0.x.0]*
     一个命名空间，我们在其中定义描述如何分配和重新编号自由度的类。   
* [0.x.1]*
       一个实现[2.x.0]和[2.x.1]函数应如何工作的策略的类。     
* [0.x.2]*
         解构器。       
* [0.x.3]*
         在与该策略对象相关的DoFHandler对象上分配自由度。参数是对DoFHandler对象的NumberCache的引用。该函数可以修改它以使DoFHandler相关的函数在政策类中调用时正常工作。更新后的NumberCache被写入该参数中。       
* [0.x.4]*
         在与此策略对象相关的DoFHandler的每一层上分布多网格Dofs。返回所有层次的数字缓存的向量。       
* [0.x.5]*
         按照第一个参数指定的自由度重新编号。                在重新编号后，为DoFHandler返回一个更新的NumberCache。       
* [0.x.6]*
         对多网格层次结构中的一个层次的多级自由度进行重新编号。第二个参数指定新的DoF索引集。                在重新编号后，为DoFHandler的指定层次返回一个更新的NumberCache。       
* [0.x.7]*
       该类实现了顺序操作的默认策略，即针对所有单元都得到自由度的情况。     
* [0.x.8]*
         构造函数。         [2.x.2] dof_handler 这个策略类应该在其上工作的DoFHandler对象。       
* [0.x.9]*
         这个策略对象赖以工作的DoFHandler对象。       
* [0.x.10]*
       当我们使用[2.x.3]对象时，这个类实现了操作的策略。     
* [0.x.11]*
         构造函数。         [2.x.4] dof_handler 这个策略类应该在其上工作的DoFHandler对象。       
* [0.x.12]*
         在作为第一个参数的对象上分配自由度。                在分配时，自由度按子域重新编号，number_cache.n_locally_owned_dofs_per_processor[i]和number_cache.locally_owned_dofs被一致更新。       
* [0.x.13]*
         这个函数还没有实现。       
* [0.x.14]*
         按照第一个参数指定的自由度重新编号。                输入参数[2.x.5]可以有和全局自由度一样多的条目（即dof_handler.n_dofs()）或者dof_handler.local_owned_dofs().n_elements()。因此，它可以利用为[2.x.6]情况下实施的重新编号函数。       
* [0.x.15]*
         这个策略对象所工作的DoFHandler对象。       
* [0.x.16]*
       这个类实现了我们使用[2.x.7]对象时的操作策略。     
* [0.x.17]*
         构造函数。         [2.x.8] dof_handler 这个策略类应该在其上工作的DoFHandler对象。       
* [0.x.18]*
         这个策略对象赖以工作的DoFHandler对象。       
* [0.x.19]

