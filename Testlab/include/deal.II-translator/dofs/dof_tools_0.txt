include/deal.II-translator/dofs/dof_tools_0.txt
[0.x.0] make_flux_sparsity_pattern的face_has_flux_coupling参数的默认值。在此定义（而不是使用参数列表中的默认lambda），以避免gcc中的一个bug，即同一个lambda被多次定义。   
* [0.x.1]*
 这是一个对自由度进行操作的函数集合，并对自由度的数量进行操作。成员函数的文档将提供更多的信息，但是对于存在于多个版本的函数，在这个全局文档中有一些章节说明了一些共同点。
* [1.x.0]
* 当组装系统矩阵时，条目通常是[2.x.0]的形式，其中[2.x.1]是一个双线性函数，通常是一个积分。因此，当使用稀疏矩阵时，我们只需要为那些[2.x.2]保留空间，它们是非零的，这等于说基函数[2.x.3]和[2.x.4]的支持有一个非空交点。由于基函数的支持只约束在它们所在的单元或与之相邻的单元上，为了确定稀疏模式，只需在所有单元上循环，并将每个单元上的所有基函数与该单元上的所有其他基函数连接起来。 可能有一些有限元，其单元上的所有基函数并不相互连接，但由于作者不知道有这种情况发生，所以没有使用这种情况。
* 

* [1.x.1]
* 当把函数的轨迹投射到边界或部分边界时，我们需要建立只作用于位于边界上的自由度的矩阵和向量，而不是作用于所有自由度。我们可以通过简单地建立所有内部自由度的条目为零的矩阵来做到这一点，但是这样的矩阵总是有很大的等级缺陷，而且在工作中不是很实用。
* 在这种情况下，需要的是对边界自由度进行编号，也就是说，我们应该列举所有位于边界的自由度，并排除所有其他（内部）自由度。map_dof_to_boundary_indices()函数正是这样做的：它提供一个矢量，其条目数与整个域上的自由度一样多，每个条目是边界编号中的数字，如果自由度不在边界上，则为[2.x.5]。
* 有了这个向量，对于任何给定的自由度，可以在那些位于边界上的自由度中得到一个唯一的数字；或者，如果你的自由度在域的内部，结果就是[2.x.6] 我们需要这个映射，例如，在边界上建立质量矩阵（关于这一点，见make_boundary_sparsity_pattern()函数，下面相应部分，以及MatrixCreator命名空间文档）。
* 实际上，有两个map_dof_to_boundary_indices()函数，一个产生所有边界自由度的编号，另一个只产生边界部分的编号，即那些边界指标被列在给函数的指标集中的部分。后一种情况是需要的，例如，我们只想投射边界的Dirichlet部分的边界值。然后，你给函数一个边界指标的列表，指的是要进行投影的Dirichlet部分。你想投射的边界部分不需要是连续的；但是，不保证每个边界部分的指数是连续的，也就是说，不同部分的自由度指数可能是混合的。
* 边界上的自由度但不在指定的边界部分之一的自由度被赋予指数[2.x.7]，就像它们在内部一样。如果没有给出边界指标，或者如果一个单元格的任何面都没有包含在给定列表中的边界指标，那么新指数的向量仅由[2.x.8]组成。
*（作为一个附带说明，对于角落的情况。边界上的自由度是什么，这个问题不是那么容易。 它实际上应该是一个自由度，其各自的基础函数在边界上有非零值。至少对于拉格朗日元素来说，这个定义等于说形状函数的离点，或者deal.II所说的支持点，即函数承担其名义值的点（对于拉格朗日元素来说，这是函数值为1的点），是位于边界上。我们并不直接检查这一点，这个标准是通过有限元类给出的信息来定义的：有限元类定义了每个顶点、每条线等的基函数数量，基函数是根据这些信息来编号的；一个基函数被认为是在一个单元的面上（如果该单元在边界上，也就在边界上），根据它属于一个顶点、线等，但不属于单元的内部。有限元使用相同的单元编号，因此我们可以说，如果一个自由度被编号为线上的一个道夫，我们就认为它位于线上。偏离点究竟在哪里，是有限元的秘密（好吧，你可以问，但我们在这里不做），在此不作讨论。
* 

* [1.x.2]
* 在某些情况下，人们只想处理位于边界上的DoF。例如，一个应用是，如果不是插值非同质的边界值，而是想投影它们。为此，我们需要两样东西：一种识别位于边界上（部分）的节点的方法，以及一种只用边界上的自由度建立矩阵的方法（即更小的矩阵，在其中我们甚至不建立大的零块，因为大多数自由度在域的边界上没有支持）。这些任务中的第一部分由map_dof_to_boundary_indices()函数完成（如上所述）。
* 第二部分要求我们首先为边界节点之间的耦合建立一个稀疏模式，然后实际建立这个矩阵的组成部分。虽然实际计算这些小边界矩阵的条目在MatrixCreator命名空间中讨论，但创建稀疏模式是由create_boundary_sparsity_pattern()函数完成的。对于它的工作，它需要有一个所有这些自由度的编号，这些自由度在我们感兴趣的边界的那些部分。你可以从map_dof_to_boundary_indices()函数中得到这个数字。然后它建立对应于[2.x.9]这样的积分的稀疏模式，其中[2.x.10]和[2.x.11]是矩阵的索引，[2.x.12]是位于边界上的自由度的全局DoF编号（即[2.x.13]是map_dof_to_boundary_indices() 函数返回的映射的逆值）。
* 

* 

* 
* [2.x.14] 

* 
* [0.x.2]*
   某些<tt>make_*_pattern</tt>函数在表格中使用的标志，用于描述解的两个分量是否在对应于单元项或面项的双线性形式中耦合。一个使用这些标志的例子在 [2.x.15] 的介绍中显示。    在下面对各个元素的描述中，请记住这些标志是作为大小为[2.x.16]乘以[2.x.17]的表格的元素使用的，其中每个元素表示两个组件是否耦合。 
* [0.x.3]*
     两个组件不耦合。   
* [0.x.4]*
     两个组件是耦合的。   
* [0.x.5]*
     只有当两个组件的形状函数在一个给定的面上都不为零时，它们才会耦合。这个标志只在计算单元格面上的积分时使用，例如，在[2.x.18]中 使用[2.x.19]在一般情况下，梯度等发生在面上的积分。   
* [0.x.6]*
    [2.x.20] DoF耦合 [2.x.21]   
* [0.x.7]*
   将一个耦合表从用户友好的按组件组织映射到按块组织。    返回的向量将被初始化为该函数中的正确长度。 
* [0.x.8]*
   给定一个有限元和它的向量分量如何相互耦合的表，计算并返回一个描述各个形状函数如何相互耦合的表。 
* [0.x.9]*
   与上述有限元集合的函数相同，返回一个表格的集合。    该函数目前对[2.x.22]的处理与[2.x.23]相同。 
* [0.x.10]*
    [2.x.24]   
* [0.x.11]*
    [2.x.25] 稀疏模式生成 [2.x.26] 。  
* [0.x.12]*
   计算建立在给定[2.x.27]上的矩阵的哪些条目可能是非零的，并创建一个代表这些非零位置的稀疏模式对象。    这个函数通过[1.x.3]计算全局系统矩阵中非零项的可能位置，在实际组装矩阵的过程中，人们会将这些条目写入全局系统矩阵。为此，该函数假设每个有限元基函数只有在其自由度与该单元的内部、面、边或顶点相关时，才是该单元的非零值。 因此，从两个具有（全局）指数[2.x.31]和[2.x.32]的基函数[2.x.29]和[2.x.30]计算出来的矩阵条目[2.x.28]（例如，使用双线性形式[2.x.33]）只有在这些形状函数对应于至少一个共同单元上定义的自由度时才可能是非零。因此，这个函数只是在所有单元中循环，找出所有自由度的全局指数，并假定所有与这些指数相联系的矩阵条目将导致一个非零矩阵条目。然后，这些将被添加到稀疏模式中。  由于这个生成稀疏性模式的过程没有考虑到以后要解决的方程，所以产生的稀疏性模式是对称的。    这种算法对每个单元上的形状函数不加区分，也就是说，它只是将一个单元上的所有自由度与一个单元上的所有其他自由度进行耦合。这通常是一种情况，而且总是一种安全的假设。然而，如果你对运算符的结构有所了解，知道它不会将某些形状函数与某些测试函数耦合，那么你可以通过调用下面描述的当前函数的变体来获得更稀疏的稀疏模式，该变体允许指定哪些向量分量与其他向量分量耦合。    上面描述的方法基于这样的假设：自由度之间的耦合只发生在形状函数至少在一个单元上重叠的情况下。这是最常见的涉及保形元素的有限元公式的情况。然而，对于诸如非连续Galerkin有限元方法这样的公式，双线性形式包含了单元之间的界面条款，这些条款将生活在一个单元上的形状函数与生活在相邻单元上的形状函数相耦合。当前函数不会看到这些耦合，因此不会在稀疏模式中分配条目。然后，你会在矩阵组装过程中遇到麻烦，因为你试图向矩阵条目中写入疏散模式中没有分配到的空间。  这可以通过调用[2.x.34]函数来避免，该函数考虑了相邻单元上自由度之间的耦合。    在其他情况下，双线性形式包含非局部项，例如在处理积分方程时。这些情况需要不同的方法来建立稀疏模式，这取决于问题的确切表述。那么，你必须自己做这件事。     [2.x.35] dof_handler 描述哪些自由度存在于哪些单元的DoFHandler对象。     [2.x.36] sparsity_pattern 要填入条目的稀疏性模式。     [2.x.37] 约束 上述生成条目的过程完全是每个单元的局部。因此，稀疏性模式没有规定只有在消除悬空节点或其他约束时才会被写入的矩阵条目。它们必须通过后续调用[2.x.38]来处理。另外，在创建稀疏模式时，自由度的约束已经被考虑在内。为此，将AffineConstraints对象作为第三个参数传递给当前函数。这样就不需要调用[2.x.39]了。这个过程在[2.x.40]、[2.x.41]和其他教程程序中都有解释。     [2.x.42] keep_constrained_dofs 如果约束条件已经通过传递AffineConstraints对象在该函数中得到了处理，那么如果这些条目在实际装配该疏散模式的矩阵时也不会被写入，那么就可以放弃疏散模式中的一些非对角线条目。具体来说，当使用[2.x.43]的装配方法时，没有条目会被写入那些对应于受限自由度的矩阵行或列中。在这种情况下，你可以将参数[2.x.44] keep_constrained_dofs设置为[2.x.45]来避免在稀疏模式中分配这些条目。     [2.x.46] subdomain_id 如果指定的话，疏散模式只建立在子域_id等于给定参数的单元上。这在矩阵和稀疏模式（例如[2.x.47]）可能是分布式的，并且不是每个MPI进程都需要构建整个稀疏模式的并行环境中很有用；在这种情况下，如果每个进程只构建与它负责的子域_id相对应的那部分稀疏模式就足够了。这个特征在[2.x.48]中使用。（对于[2.x.49]类型的对象通常不需要这个参数，因为当前函数无论如何只在本地拥有的单元上循环；因此，这个参数通常只在你想把子域_id用于指示哪个处理器拥有一个单元以外的事情时才有意义，例如一个单元属于域的哪个几何成分）。   
* [2.x.50] 稀疏模式的实际类型可以是SparsityPattern、DynamicSparsityPattern、BlockSparsityPattern、BlockDynamicSparsityPattern，或者其他任何满足类似要求的类。假设疏散模式的大小与自由度的数量相匹配，并且如果疏散模式是 "静态 "的，则有足够的未使用的非零条目来填充疏散模式（关于这意味着什么的更多信息，请参见[2.x.51]）。这个函数生成的非零条目被添加到对象以前可能的内容中，也就是说，以前添加的条目不会被删除。   
* [2.x.52] 如果稀疏模式由SparsityPattern类型的对象表示（而不是例如DynamicSparsityPattern），你需要记住在生成模式后使用[2.x.53]。   
* [2.x.54]   
* [0.x.13]*
   计算建立在给定的[2.x.55]上的矩阵的哪些条目可能是非零的，并创建一个代表这些非零位置的稀疏模式对象。    这个函数是以前的make_sparsity_pattern()函数的一个简单的变化（关于所有常用参数的描述见那里），但它为矢量有限元提供了功能，允许更具体地确定哪些变量在哪个方程中耦合。    例如，如果你想解决斯托克斯方程。   
* [1.x.4]
*在两个空间维度上，使用稳定的Q2/Q1混合元素（使用FESystem类），那么你不希望所有的自由度在每个方程中耦合。更具体地说，在第一个方程中，只有[2.x.56]和[2.x.57]出现；在第二个方程中，只有[2.x.58]和[2.x.59]出现；而在第三个方程中，只有[2.x.60]和[2.x.61]出现。(注意，这个讨论只谈及解变量的矢量分量和不同的方程，而与自由度无关，事实上也与任何一种离散化无关)。我们可以用以下的 "耦合 "模式来描述这一点。    1.x.5] 其中 "1 "表示两个变量（即FES系统的矢量分量）在各自的方程中耦合，而 "0 "表示没有耦合。  这些零意味着在通过标准的有限元公式进行离散化时，我们将不会向矩阵中写入条目，例如，将压力测试函数与压力形状函数耦合（与上述其他零类似）。那么为矩阵中的这些条目和稀疏模式分配内存就是一种浪费，你可以通过创建一个像上面那样的掩码来避免这种情况，该掩码向计算稀疏模式的（当前）函数描述这一点。如上所述，上面显示的掩码是指组成FES系统的组件，而不是自由度或形状函数。    这个函数被设计成通过[2.x.62]参数接受耦合模式，如上图所示，该参数包含#Coupling类型的值。它就像前面的函数一样建立矩阵结构，但如果不是由耦合模式指定的，就不创建矩阵元素。如果耦合是对称的，那么产生的稀疏模式也将是对称的。    如果使用中的有限元的一些或全部形状函数在一个以上的分量中是非零的（用交易二的话说：它们是[2.x.63]"非原始有限元"），就会有一个复杂的情况。  在这种情况下，采取对应于第一个非零分量的耦合元素，并忽略该分量的其他耦合元素。   
* [2.x.64]   
* [0.x.14]*
   构建一个稀疏模式，允许在两个不同但相关的网格上耦合自由度。    这个想法是，如果两个给定的DoFHandler对象对应于两个不同的网格（并且可能对应于在这些单元上使用的不同的有限元），但是如果它们所基于的两个三角形是通过分层细化从同一个粗网格导出的，那么人们可能会设置一个问题，想用一个网格的形状函数来测试另一个网格的形状函数。特别是，这意味着来自第一个网格上的单元的形状函数要与第二个网格上位于相应单元的形状函数进行测试；这种对应关系是IntergridMap类可以确定的。    这个函数然后构建一个稀疏模式，其中代表行的自由度来自第一个给定的DoFHandler，而对应列的自由度则来自第二个DoFHandler。 
* [0.x.15]*
   计算建立在给定[2.x.65]上的矩阵的哪些条目可能是非零的，并创建一个代表这些非零位置的稀疏模式对象。这个函数是上述make_sparsity_pattern()函数的一个变体，它假定你想用来生成矩阵的双线性形式也包含了单元格之间[1.x.6]的积分项（即，它包含了单元格之间的 "通量"，解释了这个函数的名称）。    这个函数对非连续加尔金方法很有用，标准的make_sparsity_pattern()函数只会为一个单元上的所有自由度与同一单元上的所有其他自由度耦合创建非零条目；然而，在DG方法中，每个单元上的所有或部分自由度也与通过共同面连接到当前单元的其他单元的自由度耦合。当前函数还创建了由这些额外耦合产生的矩阵中的非零条目。换句话说，与make_sparsity_pattern()所做的工作相比，这个函数计算了一个严格的非零项的超级集合。     [2.x.66] dof_handler 描述哪些自由度存在于哪些单元上的DoFHandler对象。     [2.x.67] sparsity_pattern 要填入的稀疏度模式。   
* [2.x.68] 稀疏度模式的实际类型可以是SparsityPattern、DynamicSparsityPattern、BlockSparsityPattern、BlockDynamicSparsityPattern或任何其他满足类似要求的类。假设疏散模式的大小与自由度的数量相匹配，并且如果疏散模式是 "静态 "的，则有足够的未使用的非零条目来填充疏散模式（关于这意味着什么的更多信息，请参见[2.x.69]）。这个函数生成的非零条目被添加到对象以前可能的内容中，也就是说，以前添加的条目不会被删除。   
* [2.x.70] 如果稀疏模式由SparsityPattern类型的对象表示（而不是例如DynamicSparsityPattern），你需要记住在生成模式后使用[2.x.71]。   
* [2.x.72]   
* [0.x.16]*
   这个函数的作用与其他make_flux_sparsity_pattern()函数基本相同，但允许指定一些额外的参数。这些参数的含义与上述第一个make_sparsity_pattern()函数中讨论的相同。   
* [2.x.73]   
* [0.x.17]*
   这个函数的作用与另一个make_flux_sparsity_pattern()函数基本相同，但允许指定耦合矩阵，说明在你离散化的每个方程中，解变量的哪些成分是耦合的。这与上面第二个make_sparsity_pattern()函数中讨论的完全类似。    事实上，这个函数需要两个这样的掩码，一个是描述哪些变量在构成双线性方程的单元积分中相互耦合，哪些变量在面积分中相互耦合。如果你把只由1组成的掩码传递给这两个掩码，那么你将得到与你调用上述make_sparsity_pattern()函数中的第一个相同的稀疏性模式。通过将这些掩码中的一些条目设置为0，你可以得到一个更稀疏的稀疏模式。   
* [2.x.74]   
* [0.x.18]*
   这个函数与之前的make_flux_sparsity_pattern()函数的功能基本相同，但允许应用AffineConstraints对象。这对于有限元的某些部分是连续的，某些部分是不连续的情况很有用，允许对连续部分施加约束，同时也建立不连续部分所需的通量项。    可选的[2.x.75]可以用来指定在哪些面上发生通量耦合。这允许在使用双线性形式时创建一个更稀疏的模式，即通量项只出现在三角结构中的一个子集的面上。默认情况下，通量耦合被添加到所有内部面。 [2.x.76]应该是一个函数，它接收一个active_cell_iterator和一个面的索引，如果该面有一个通量耦合，应该返回true。当使用[2.x.77]时，我们可以，比如说，使用    
* [1.x.7]
*   
* [0.x.19]*
   创建边界矩阵的稀疏模式。更多信息请参见该类的一般文档。    该函数基本上做了其他make_sparsity_pattern()函数所做的事情，但假定用于建立矩阵的双线性形式不包括域的积分，而只包括域的边界上的积分。 
* [0.x.20]*
   这个函数是之前make_boundary_sparsity_pattern()函数的一个变体，我们假设将产生矩阵的边界积分只延伸到边界的那些部分，这些部分的边界指标在这个函数的[2.x.78]参数中列出。    这个函数本来可以通过传递一个[2.x.79]的边界_id数字来写。然而，整个deal.II中处理边界指标的大多数函数都采取边界指标和相应的边界函数的映射，即一个[2.x.80] const Function<spacedim,number>*>参数。相应地，这个函数也是这样做的，尽管实际的边界函数在这里被忽略了。  因此，如果你没有任何这样的边界函数，只要用你想要的边界指标创建一个地图，并将函数指针设置为空指针）。 
* [0.x.21]*
    [2.x.81]   
* [0.x.22]*
    [2.x.82] 悬空节点和其他约束 [2.x.83] 。  
* [0.x.23]*
   计算因悬空节点的存在而产生的约束。  悬挂的节点最好用一张小图片来解释。     [2.x.84] 为了使有限元函数全局连续，我们必须确保暗红色节点的值与相邻的黄色节点兼容，这样函数从小单元到右上方的大单元时就没有跳跃。因此，我们必须添加条件来约束这些 "悬空节点"。    插入这些条件的对象后来被用来浓缩全局系统矩阵和右手边，并将解向量从真正的自由度也扩展到约束节点。  这个函数在[2.x.85]"[2.x.86]"教程程序中详细解释，几乎在所有的后续程序中也都使用。    这个函数在使用前不会清除AffineConstraints对象，以允许将不同来源的约束添加到同一个对象中。因此，你需要确保它只包含你仍然想要的约束；否则就调用[2.x.87]函数。  由于这个函数不检查是否会在[2.x.88]中添加周期，因此建议在其他约束DoF的函数之前调用这个函数，如make_periodicity_constraints()。  这个函数并不关闭对象，因为你可能想在以后自己输入其他约束。    使用具有hp-capabilities的DoFHandler，我们也会考虑由于在单元格之间的面的两边使用不同的有限元而产生的约束，作为悬挂节点。换句话说，在hp模式下，这个函数会计算所有由于相邻单元之间不同的网格尺寸（h）或多项式度数（p）而产生的约束。   
* [2.x.89]   
* [0.x.24]*
   当问题中的不同变量被离散在不同的网格上时，这个函数被使用，其中一个网格严格地比另一个更粗。一个例子是优化问题，控制变量通常在比状态变量更粗的网格上离散。    该函数的结果可以在数学上表述如下。让[2.x.90]和[2.x.91]是两个网格，其中[2.x.92]是由[2.x.93]严格通过细化或不考虑[2.x.94]的单元而得到的。在两者上使用相同的有限元，有与这些网格相关的函数空间[2.x.95]和[2.x.96]。那么每个函数[2.x.97]当然也可以在[2.x.98]中精确表示，因为通过构造[2.x.99] 。  然而，并不是[2.x.100]中的每个函数都能被表达为[2.x.101]的形状函数的线性组合。可以表示的函数位于[2.x.102]的一个同质子空间（即[2.x.103]，当然），这个子空间可以用[2.x.104]形式的线性约束来表示，其中[2.x.105]是函数[2.x.106]的结点值的向量。换句话说，每个同时满足 [2.x.108] 的函数 [2.x.107] 都自动满足 [2.x.109] 。这个函数以AffineConstraints对象的形式计算矩阵[2.x.110]。    这些约束的构造如下：对于粗网格上的每个自由度（即形状函数），我们计算它在细网格上的表现，即细网格上的形状函数的线性组合看起来如何与粗网格上的形状函数相像。从这些信息中，我们可以计算出如果一个线性方程在细网格上的解在粗网格上可以表示出来，那么这些约束就必须成立。如何计算这些约束条件的确切算法相当复杂，最好是通过阅读源代码来理解，其中包含许多注释。    这个函数的用法如下：它接受两个DoF处理程序作为参数，第一个是指粗网格，第二个是指细网格。在这两者上，一个有限元由DoF处理程序对象表示，通常会有几个向量分量，可能属于不同的基元。因此，这个函数的第二和第四个参数说明粗网格上的哪个矢量分量应被用来限制细网格上的所述分量。两个网格上的各个分量所使用的有限元必须是相同的。一个例子可以说明这一点：考虑一个优化问题，控制[2.x.111]在粗网格上离散，状态变量[2.x.112]（和相应的拉格朗日乘子[2.x.113]）在细网格上离散。它们分别使用片状常数不连续、连续线性和连续线性元素进行离散。在粗网格上只有参数[2.x.114]被表示，因此粗网格上的DoFHandler对象只表示一个变量，用片状常数不连续元素离散。那么，粗网格上表示矢量分量的参数将是零（唯一可能的选择，因为粗网格上的变量是标量）。如果细网格FES系统中变量的排序是[2.x.115]，那么对应于矢量分量的函数的第四个参数将是1（对应于变量[2.x.116]；0将是[2.x.117]，2将是[2.x.118]）。    该函数还需要一个IntergridMap类型的对象，代表如何从粗网格单元到细网格上的相应单元。原则上，这个对象可以由函数本身从两个DoFHandler对象中生成，但由于它在使用不同网格的程序中可能是可用的，所以函数只是把它作为一个参数。    计算出的约束被输入一个AffineConstraints类型的变量中；之前的内容不会被删除。 
* [0.x.25]*
   这个函数生成一个矩阵，当一个元素数与粗网格上该分量的自由度相同的数据向量乘以这个矩阵时，我们得到一个元素数与细网格上全局自由度相同的向量。细网格上有限元场的其他矢量分量的所有元素都不被触及。    细网格的三角化可以是分布式的。当并行调用时，每个进程必须有一份粗网格的副本。在这种情况下，函数返回本地拥有的一组单元的转移表示。    这个函数的输出是一种压缩格式，可以用来构造相应的稀疏转移矩阵。 
* [0.x.26]*
    [2.x.119]   
* [0.x.27]*
    [2.x.120] 周期性的边界条件 [2.x.121] 。  
* [0.x.28]*
   将周期性边界条件引起的（代数）约束插入AffineConstraints对象[2.x.122] 给定一对不一定活动的边界面[2.x.123]和[2.x.124]face_2，这个函数将与[2.x.125]描述的边界相关的所有DoF约束到[2.x.126]描述的边界的各自DoF 更确切地说。    如果[2.x.127]和[2.x.128]都是活动面，它将[2.x.129]面_1的DoFs添加到[2.x.130]的约束DoFs列表中，并添加条目将它们约束到[2.x.131]面_2的相应DoFs值。这发生在一个纯粹的代数层面上，意味着[2.x.132]上具有（局部面）索引<tt>i</tt>的全局DoF被约束到[2.x.133]上具有（局部面）索引<tt>i</tt>的DoF（可能被纠正方向，见下文）。    否则，如果[2.x.134]和[2.x.135]不是活动面，这个函数就会递归地在[2.x.136]和[2.x.137]的子代上循环，如果两个面中只有一个是活动的，那么我们就会递归地迭代非活动面的子代，并确保精炼面的解函数与非精炼面的解函数相等，这与我们在不同的精炼单元聚集的地方执行悬挂节点约束一样的方式。然而，与悬挂节点不同的是，我们并不强制要求域的两边只能有一个细化级别的差异，你希望是周期性的）。    这个程序只约束那些还没有被约束的DoF。如果这个例程遇到一个已经被约束的DoF（例如被Dirichlet边界条件约束），约束的旧设置（条目被约束的DoF，不均匀性）被保留，什么也不会发生。    [2.x.138]中的标志（见[2.x.139]）表示有限元空间的哪些部分应受到周期性边界条件的约束。如果它与默认值相同，则所有分量都受到约束。如果它与默认值不同，则假定条目数等于有限元的分量数。这可以用来强制执行方程组中只有一个变量的周期性。     [2.x.140] [2.x.141]和[2.x.142]描述了在匹配和约束DoF之前应该应用到[2.x.143]的方向。这与给定面在各自单元中的实际方向无关（对于边界面总是默认的），而是你想看到周期性被强制执行的方式。例如，通过使用这些标志，你可以执行[2.x.144]那种条件（即莫比乌斯带），或者在三维中执行扭曲的环。更确切地说，这些标志是以如下方式匹配局部面的DoF指数。    在2d中。<tt>face_orientation</tt>必须总是<tt>true</tt>，<tt>face_rotation</tt>总是<tt>false</tt>，face_flip具有<tt>line_flip</tt>的意义；这意味着，例如对于<tt>Q1</tt>。   
* [1.x.8]
* 同样地，对于Q1在3D中的情况也是如此。   
* [1.x.9]
* 可以指定一个矩阵[2.x.145]和一个[2.x.146][2.x.147]first_vector_components，描述在约束到[2.x.149]的DoF之前，[2.x.148]face_1的DoF应该如何被修改，这里有两种声明。如果[2.x.150] [2.x.151] first_vector_components是非空的，该矩阵被解释为一个[2.x.152] dim [2.x.153] [2.x.154] 旋转矩阵，它被应用于FESystem的[2.x.155]中列出的所有矢量值块。如果[2.x.156]first_vector_components为空，该矩阵将被解释为大小为no_face_dofs [2.x.157] no_face_dofs的插值矩阵。    这个函数确保身份约束不会在[2.x.158][2.x.159]中产生循环，可以用来实现[2.x.160]形式的布洛赫周期条件（又称相移周期条件），其中[2.x.161]是与晶格相同的周期性，[2.x.162]是波矢，见[https://en.wikipedia.org/wiki/Bloch_wave]（https://en.wikipedia.org/wiki/Bloch_wave）。  在[2.x.163]处的解等于[2.x.164]乘以[2.x.165]处的解。例如，如果[2.x.166]处的解是[2.x.167]，[2.x.168]是[2.x.169]上的相应点，那么[2.x.170]处的解应该是[2.x.171] 。这个条件可以用 [2.x.172] 来实现。    详细信息可参见 [2.x.173] "关于周期性边界条件的词汇条目"。 
* [0.x.29]*
   将周期性边界条件引起的（代数）约束插入AffineConstraints对象 [2.x.174] 这是上述make_periodicity_constraints()的低级变量的主要高级接口。它接受一个[2.x.175] [2.x.176]作为参数，并在每个条目上应用上面的make_periodicity_constraints()。 [2.x.177] 可以通过[2.x.178]创建。    
* [2.x.179] 对于建立在[2.x.180]对象上的DoFHandler对象，[2.x.181]在调用此函数之前必须被调用。     [2.x.182] [2.x.183] "关于周期性边界条件的词汇条目 "和[2.x.184]的进一步信息。 
* [0.x.30]*
   与上述相同。     [2.x.185] 使用以dim和spacedim为模板参数的函数。 
* [0.x.31]*
   将周期性边界条件引起的（代数）约束插入AffineConstraints [2.x.186] 这个函数作为make_periodicity_constraints()函数的一个高级接口。    定义一个 "第一 "边界为所有边界面，其边界ID为[2.x.187] b_id1，一个 "第二 "边界由所有属于[2.x.188] b_id2的面组成。    这个函数试图在orthogonal_equality()的帮助下将所有属于第一条边界的面与属于第二条边界的面相匹配。更确切地说，坐标只在[2.x.189]部分不同的面被识别。    如果这个匹配是成功的，它将所有与 "第一 "边界相关的DoFs约束到 "第二 "边界的相应DoFs，并尊重两个面的相对方向。   
* [2.x.190] 这个函数是一个方便的封装器。它在内部调用[2.x.191]的参数，并将输出结果反馈给上述make_periodicity_constraints()变量。如果你需要更多的功能，直接使用[2.x.192]。     [2.x.193] [2.x.194] "关于周期性边界条件的词汇条目"，以获得更多信息。 
* [0.x.32]*
   这个make_periodicity_constraints的兼容版本只适用于具有[2.x.195]"标准方向 "单元的网格。    这个函数没有用两个boundary_ids来定义 "第一 "和 "第二 "边界，而是将 "左 "边界定义为所有具有本地面指数[2.x.196]和边界指标[2.x.197]的面，同样，"右 "边界包括所有具有本地面指数[2.x.198]和边界指标[2.x.199]的面，其坐标只在[2.x.200]部分不同，被识别。   
* [2.x.201] 这个版本的make_periodicity_constraints将不会在单元格不在[2.x.202]"标准方向 "的网格上工作。   
* [2.x.203] 这个函数是一个方便的封装器。它在内部调用[2.x.204]中提供的参数，并将输出结果反馈给上述make_periodicity_constraints()变量。如果你需要更多的功能，请直接使用[2.x.205]。     [2.x.206] [2.x.207] "关于周期性边界条件的词汇条目"，以获得更多信息。 
* [0.x.33]*
    [2.x.208]   
* [0.x.34]*
    [2.x.209] 识别具有特殊性质的自由度子集 [2.x.210]。  
* [0.x.35]*
   返回一个IndexSet，描述所有将被接口约束的自由度，即所有悬挂节点。    在[2.x.211]或[2.x.212]的情况下，只考虑本地相关的道夫。 
* [0.x.36]*
   提取属于矢量值有限元的某些矢量分量的自由度的（本地拥有的）指数。[2.x.213]定义了要从DoFHandler[2.x.214]中提取FES系统或矢量值元素的哪些组件或块，然后输出对象中的条目对应于属于这些组件的自由度。    如果所考虑的有限元不是原始的，即它的一些或全部形状函数在一个以上的矢量分量中是非零的（例如，对于FE_Nedelec或FE_RaviartThomas元素来说，这一点是成立的），那么形状函数不能与单个矢量分量相关联。  在这种情况下，如果[2.x.215]这个元素的一个[2.x.216]形状向量分量在[2.x.217]中被标记（见[2.x.218]），那么这相当于选择[2.x.219]与这个非原始基础元素对应的所有[2.x.220]向量分量。     [2.x.221] dof_handler 其列举的自由度将被此函数过滤的DoFHandler。   [2.x.222] component_mask 一个说明你要选择哪些组件的掩码。该掩码的大小必须与[2.x.223]所使用的FiniteElement中的构件数量相匹配。更多信息请参见[2.x.224]"构件掩码的词汇表条目"。   [2.x.225] 一个IndexSet对象，它将确切地包含那些(i)对应于上述掩码所选择的自由度的条目，以及(ii)是本地拥有的条目。索引集的大小等于全局自由度的数量。请注意，产生的对象总是[2.x.226]返回的一个子集。 
* [0.x.37]*
   这个函数等同于上面的[2.x.227]函数，除了不是根据组件（见[2.x.228]）而是根据它们是否是特定块的一部分（见[2.x.229]）来选择提取哪些自由度。  因此，第二个参数不是一个ComponentMask，而是一个BlockMask对象。     [2.x.230] dof_handler 其列举的自由度将被这个函数过滤的DoFHandler。   [2.x.231] block_mask 一个说明你想选择哪些块的掩码。该掩码的大小必须与[2.x.232]所使用的FiniteElement中的块数相匹配。更多信息请参见[2.x.233]"关于块掩码的词汇表条目"。   [2.x.234] 一个IndexSet对象，它将确切地包含那些(i)对应于由上述掩码选择的自由度的条目，以及(ii)本地拥有的条目。索引集的大小等于全局自由度的数量。请注意，产生的对象总是[2.x.235]返回的一个子集。 
* [0.x.38]*
   对于多网格自由度编号的一个层次，做与相应的extract_dofs()函数相同的事情。 
* [0.x.39]*
   对一个多网格DoF编号的一个层次，做与相应的extract_dofs()函数相同的事情。 
* [0.x.40]*
   提取所有在边界的自由度，并属于解决方案的指定组件。该函数在最后一个非缺省值参数中返回其结果，如果一个自由度在边界并属于所选分量之一，该参数包含[2.x.236]，否则包含[2.x.237]。    通过指定[2.x.238]变量，你可以选择自由度所在的面必须有哪些边界指标才能被提取出来。如果它是一个空列表，那么所有的边界指标都被接受。    2.x.239]的大小（见[2.x.240]）应等于[2.x.241]自由度所使用的有限元中的组件数。2.x.242]的大小应等于<tt>dof_handler.n_dofs()</tt>。这个数组以前的内容会被覆盖掉。    使用通常的惯例，如果一个形状函数在一个以上的分量中是非零的（即它是非正则的），那么就使用分量掩码中对应于第一个非零分量的元素。  掩码中对应于后面分量的元素被忽略。     [2.x.243] 这个函数对建立在[2.x.244]对象上的DoFHandler对象不起作用。原因是输出参数[2.x.245]的长度必须等于[1.x.10]全局自由度。因此，这不能扩展到非常大的问题，这也是该函数被废弃的原因。如果你需要这个函数的功能来进行平行三角计算，那么你需要使用另一个[2.x.246]函数，它通过IndexSet对象返回信息。     [2.x.247] dof_handler 描述哪个自由度在哪个单元上的对象。   [2.x.248] component_mask 表示应考虑的有限元的矢量分量的掩码（也见[2.x.249]）。   [2.x.250] selected_dofs 一个被返回的布尔运算的向量，对于这个向量，如果相应的索引是位于边界上的自由度（并且对应于被选择的向量分量和边界指标，取决于[2.x.252]和[2.x.253]boundary_ids参数的值），则该元素将是[2.x.251]。   [2.x.254] boundary_ids 如果为空，该函数提取边界所有部分的自由度指数。如果它是一个非空的列表，那么这个函数只考虑具有这个参数中所列边界指标的边界面。     [2.x.255] [2.x.256] "关于边界指标的词汇条目"  
* [0.x.41]*
   提取在边界上的所有自由度，并属于解决方案的指定组件。该函数以IndexSet的形式返回其结果，IndexSet包含与这些选定的自由度相对应的条目，也就是说，这些自由度位于边界并属于选定的成分之一。    通过指定[2.x.257]变量，你可以选择要提取的自由度所在的面必须有哪些边界指标。如果它是一个空列表（默认），那么所有的边界指标都被接受。    这个功能在 [2.x.258] 和 [2.x.259] 中使用，例如。   
* [2.x.260] 如果DoFHandler对象被定义在一个平行的三角形对象上，那么计算的索引集将只包含边界上属于本地相关集的自由度（见[2.x.261] "本地相关DoF"），也就是说，该函数只考虑本地拥有的和鬼魂单元的面，但不考虑人工单元的面。     [2.x.262] dof_handler 描述哪个自由度住在哪个单元上的对象。   [2.x.263] component_mask 表示应该考虑的有限元矢量分量的掩码（也见[2.x.264] ）。如果保留默认值，分量掩码表示有限元的所有矢量分量都应被考虑。   [2.x.265] boundary_ids 如果为空，该函数将提取边界所有部分的自由度索引。如果它是一个非空的列表，那么该函数只考虑具有该参数中所列边界指标的边界面。   [2.x.266] IndexSet对象，它将包含位于边界上的自由度指数（并对应于选定的向量分量和边界指标，取决于[2.x.267]和[2.x.268]boundary_ids参数的值）。     [2.x.269] [2.x.270] "关于边界指标的词汇条目"  
* [0.x.42]*
   与前一个函数相同，只是它通过第三个参数返回其信息。     [2.x.271] 用前面的函数代替。 
* [0.x.43]*
   这个函数与extract_boundary_dofs()函数类似，但它提取那些形状函数在所选边界的至少一部分为非零的自由度。对于连续元素，这正是自由度定义在边界面上的形状函数的集合。另一方面，如果使用的有限元是不连续元，所有的自由度都定义在单元内部，因此没有一个是边界自由度。  然而，其中有几个自由度的形状函数在边界上是不为零的。因此，这个函数提取了所有那些[2.x.272]函数说它在所选边界部分的任何面上都是非零的。     [2.x.273] [2.x.274] "关于边界指标的词汇条目"  
* [0.x.44]*
   提取形状函数的所有索引，使其支持完全包含在[2.x.275]为[2.x.276]的单元格中。  结果以IndexSet的形式返回。    考虑以下的FE空间，其中谓词对域的左半部的所有单元格返回[2.x.277]。     [2.x.278] 这个函数将返回这些单元格上的所有DoF指数的联合，减去DoF 11, 13, 2和0；结果将是<code>[9,10], 12, [14,38]</code>。在上图中，返回的DoFs被红线隔开，从本质上讲，这个函数回答的问题如下。  给定一个带有相关DoFs的子域，这些DoFs中允许非零的最大子集是什么，以便在调用[2.x.279]后，得到的解向量将只在给定的域内有支持。这里，[2.x.280]是包含悬挂节点约束的AffineConstraints容器。    在[2.x.281]的情况下，[2.x.282]将只为本地拥有的和幽灵单元调用。产生的索引集可能包含与本地拥有的或幽灵单元相关的DoF，但不为当前MPI核所拥有。 
* [0.x.45]*
   提取一个向量，代表DoFHandler对<tt>component_mask</tt>（见[2.x.283]）选择的组件的恒定模式。  离散化的恒定模式是所选分量上的拉普拉斯算子的无效空间，并应用诺伊曼边界条件。在使用类[2.x.284]时，无效空间是获得良好的AMG预处理的必要成分，因为ML AMG包只对各自矩阵的代数属性工作，它没有机会检测矩阵是来自标量还是矢量值问题。  然而，一个近乎无效的空间正好提供了所需的关于矩阵中矢量分量位置的信息。空空间（或者说，常数模式）是由给定的DoFHandler底层的有限元提供的，对于大多数元素，空空间将由与<tt>component_mask</tt>（见[2.x.285]）中的真实参数一样多的向量组成，每个向量在一个向量分量中为1，在所有其他分量中为0。  然而，例如FE_DGP的常数函数的表示是不同的（每个元素上的第一个分量为一，其他所有分量为零），有些标量元素甚至可能有两个常数模式（FE_Q_DG0）。因此，我们将这个对象存储在一个向量中，其中外向量包含DoFHandler上的实际恒定模式的集合。每个内向量有多少个分量，就有多少个所选分量中的（本地拥有的）自由度。请注意，任何与这个无效空间相关的矩阵都必须使用相同的<tt>component_mask</tt>参数来构建，因为自由度的编号是相对于所选的道夫而言的，而不是相对于所有道夫而言的。    这个程序的主要原因是使用AMG预处理程序的空空间。 
* [0.x.46]*
    [2.x.286] 并行化和域分解[2.x.287] 。  
* [0.x.47]*
   标记所有在给定子域id的单元上的自由度。请注意，面的自由度可以属于不同子域id的单元，所以对于不同的子域id来说，被标记的自由度集并不相互排斥。    如果你想得到自由度与子域的唯一关联，请使用[2.x.288]函数。 
* [0.x.48]*
   提取在当前DoFHandler上有效的全局DoF指数集合。对于普通的DoFHandler来说，这些都是DoF指数，但是对于建立在[2.x.289]上的DoFHandler对象来说，这个集合是[2.x.290]的超集，包含了所有住在本地拥有的单元上的DoF指数（包括在与幽灵单元的接口上）。然而，它不包含专门定义在幽灵或人工单元上的自由度指数（见[2.x.291]"词汇表"）。    这个函数识别的自由度等于从Dof_indices_with_subdomain_association()函数中获得的自由度，当调用本地拥有的子域ID时。 
* [0.x.49]*
   与上述函数相同，但适用于某个（多网格）层次。  这个函数返回在给定层次上所有本地拥有的单元（包括与幽灵单元的接口）上的所有DoF指数。 
* [0.x.50]*
   提取在当前DoFHandler上活动的全局DoF指数集合。对于普通的DoFHandler，这些都是DoF指数，但是对于建立在[2.x.292]上的DoFHandler对象，这个集合是[2.x.293]和所有鬼魂单元上的DoF指数的联合。实质上，它是所有非人造单元上的DoF指数（见[2.x.294]"术语表"）。 
* [0.x.51]*
   为掩码内的每个组件提取本地拥有的DoF指数集，这些指数为当前处理器所拥有。对于被掩码禁用的组件，会返回一个空的IndexSet。对于建立在顺序三角形上的标量DoFHandler，返回的向量包含一个包含所有DoF指数的完整IndexSet。如果掩码包含所有组件（这也对应于默认值），那么返回的索引集的联合就相当于[2.x.295]的返回值。 
* [0.x.52]*
   对于每个处理器，确定本地拥有的自由度集合为一个IndexSet。然后这个函数返回一个索引集的向量，其中向量的大小等于参与自由度处理对象的MPI进程的数量。    该函数可用于[2.x.296]或[2.x.297]类型的对象，但对[2.x.298]类型的对象不起作用，因为对于这样的三角形，我们没有关于三角形的所有单元的本地可用信息，因此不能对其他处理器本地拥有的单元上的自由度有任何明确的说法。 
* [0.x.53]*
     对于每个处理器，确定本地相关自由度的集合为IndexSet。然后这个函数返回一个索引集的向量，其中向量的大小等于参与自由度处理对象的MPI进程的数量。    该函数可用于[2.x.299]或[2.x.300]类型的对象，但对[2.x.301]类型的对象不起作用，因为对于这样的三角形，我们没有关于三角形的所有单元的本地可用信息，因此不能对其他处理器本地拥有的单元上的自由度有任何明确的说法。 
* [0.x.54]*
   与extract_locally_relevant_dofs()相同，但对于给定的[2.x.302]的多网格DoFs。  
* [0.x.55]*
   对于每个自由度，在输出数组中返回它属于哪个子域（由<tt>cell->subdomain_id()</tt>函数给出）。在调用这个函数时，输出数组应该已经有了合适的大小。    请注意，与面、边和顶点相关的自由度如果位于分区的边界上，可能与多个子域相关。在这种情况下，我们将它们分配给具有较小子域ID的进程。这可能会导致分区中自由度的数量不同，即使单元格的数量是完全等分的。虽然这是令人遗憾的，但在实践中这并不是一个问题，因为只要分区的数量保持不变，当我们细化网格时，分区边界上的自由度数量是渐进式消失的。    这个函数返回每个DoF与一个子域的关联。如果你正在寻找每个[2.x.303]单元与一个子域的关联，可以查询<tt>cell->subdomain_id()</tt>函数，或者使用[2.x.304]函数。    请注意，这个函数对于建立在[2.x.305]上的DoFHandler对象的用途值得怀疑，因为在这种情况下，MPI进程对各个自由度的所有权是由DoF handler对象控制的，而不是基于某种几何算法与子域id相结合。特别是，这个命名空间中的函数所识别的与子域相关的自由度与DoFHandler类所识别的自由度不一样。 
* [0.x.56]*
   计算有多少个自由度与给定的[2.x.306]索引唯一相关。    请注意，可能有一些罕见的情况，即具有给定[2.x.307]索引的单元格存在，但它的自由度实际上都没有与之相关。在这种情况下，返回值将为零。    如果没有具有给定[2.x.308]索引的单元格，该函数将产生一个异常。    该函数返回与一个子域相关的DoFs数量。  如果你要寻找与这个子域相关的[2.x.309]单元，请使用[2.x.310]函数。    注意这个函数对于建立在[2.x.311]上的DoFHandler对象的用途值得怀疑，因为在这种情况下，MPI进程对单个自由度的所有权是由DoF handler对象控制的，而不是基于一些与子域id相关的几何算法。特别是，这个命名空间中的函数所识别的与子域相关的自由度与DoFHandler类所识别的自由度不一样。 
* [0.x.57]*
   计算有多少个自由度与给定的[2.x.312]索引唯一相关。    这个函数的作用与前一个函数相同，只是它将结果在DoFHandler对象所使用的有限元的向量分量之间进行分割。因此，最后一个参数（其长度必须等于矢量分量的数量）将存储每个矢量分量的多少个自由度与给定的子域相关。    注意这个函数对于建立在[2.x.313]上的DoFHandler对象的用途是值得怀疑的，因为在这种情况下，MPI进程对各个自由度的所有权是由DoF handler对象控制的，而不是基于一些与子域id相关的几何算法。特别是，这个命名空间中的函数所识别的与子域相关的自由度与DoFHandler类所识别的自由度不一样。 
* [0.x.58]*
   返回一组索引，表示生活在给定子域上的自由度，即当前处理器拥有的单元上的自由度。请注意，这包括这个子域 "拥有 "的自由度（即get_subdomain_association()返回的值等于这里给出的子域，并且被[2.x.314]函数选中的自由度），也包括所有位于给定子域和其他子域之间边界上的自由度。从本质上讲，位于子域之间边界的自由度将出现在这个函数返回的多个子域的索引集中。    注意这个函数对于建立在[2.x.315]上的DoFHandler对象的用途是值得怀疑的，因为在这种情况下，MPI进程对各个自由度的所有权是由DoF handler对象控制的，而不是基于一些与子域id相关的几何算法。特别是，这个命名空间中的函数所识别的与子域相关的自由度与DoFHandler类所识别的自由度不一样。 
* [0.x.59]*
    [2.x.316] 细胞斑块上的DoF指数 为小块的细胞斑块创建包含大量自由度的结构。由此产生的对象可用于RelaxationBlockSOR和相关类，以实现Schwarz预处理和平滑器，其中子域仅由少量单元组成。 
* [0.x.60]*
   返回由参数描述的一组单元（即补丁）上的自由度集合。    补丁通常用于定义误差估计器，这些估计器需要解决网格中每个单元周围补丁上的局部问题。你可以使用[2.x.317]得到一个构成给定单元周围补丁的单元列表。虽然[2.x.318]可以用来确定这些局部问题的大小，这样就可以组装局部系统，然后进行求解，但仍然有必要提供一个住在补丁上的自由度的全局索引和局部枚举之间的映射。这个函数通过返回住在补丁上的自由度的集合来提供这样一个局部列举。    由于这个集合是以[2.x.319]的形式返回的，我们也可以把它看成是一个映射  
* [1.x.11]
* 其中[2.x.320]是返回向量的索引（即补丁上一个自由度的[1.x.12]索引），[2.x.321]是位于补丁上的自由度的全局索引。返回的数组大小等于[2.x.322]。    
* [2.x.323] 返回的数组是按全局自由度索引排序的。因此，如果我们认为这个数组的索引是本地DoF索引，那么产生的本地系统就保留了全局系统的块状结构。     [2.x.324] 补丁 一个DoFHandler<dim, [2.x.325] [2.x.326] 位于补丁上的那些全局自由度的列表，如上定义。   
* [2.x.327] 在并行分布式计算的背景下，只有在本地拥有的单元周围的补丁上调用这个函数才有意义。这是因为本地拥有的单元的邻居要么是本地拥有的单元，要么是幽灵单元。对于这两种情况，我们知道这些单元实际上是完整的、平行的三角形的真实单元。我们还可以查询这些单元的自由度。换句话说，这个函数只有在补丁中的所有单元都是本地拥有的或者是幽灵单元的情况下才能工作。 
* [0.x.61]*
   与上述相同。     [2.x.328] 使用以dim和spacedim为模板参数的函数。 
* [0.x.62]*
   创建一个稀疏模式，它列出了与给定层次上每个单元相关的自由度。这种模式可以在RelaxationBlock类中作为加法和乘法施瓦茨方法的块列表。    该模式中的行指数是通过三角法的一个层次进行标准迭代而得到的单元格指数。对于一个[2.x.329]来说，只有本地拥有的单元被输入。    稀疏模式在这个函数中被调整为包含与给定级别上本地拥有的单元格一样多的行，与该级别上的自由度一样多的列。    <tt>selected_dofs</tt>是一个由单元上的局部自由度索引的向量。如果它被使用，只有这些自由度被输入到块列表中被选择。例如，这允许排除组件或边界上的道夫。 
* [0.x.63]*
   创建一个入射矩阵，对于多级DoFHandler的某一层的每一个顶点，标志着哪些自由度与相邻单元相关。这个数据结构是一个矩阵，有多少行就有多少顶点，有多少列就有多少自由度，条目是真还是假。这个数据结构由一个SparsityPattern对象方便地表示。  在进入这个函数时，稀疏性模式可能是空的，将被重新初始化为正确的大小。    该函数有一些布尔参数（列在下面）控制生成补丁的细节。默认设置是Arnold-Falk-Winther类型的平滑器，用于具有基本边界条件的发散和曲率符合的有限元。其他应用也是可能的，特别是改变<tt>boundary_patches</tt>用于非基本边界条件。    这个函数返回<tt>vertex_mapping</tt>，它包含从顶点索引到<tt>block_list</tt>块索引的映射。对于没有导致顶点补丁的顶点，<tt>vertex_mapping</tt>中的条目包含值<tt>invalid_unsigned_int</tt>。如果<tt>invert_vertex_mapping</tt>被设置为<tt>true</tt>，那么<tt>vertex_mapping</tt>将被倒置，这样它就包含了从块索引到相应顶点索引的映射。     [2.x.330] <tt>block_list</tt>：将存储补丁的SparsityPattern。     [2.x.331] <tt>dof_handler</tt>：提供拓扑结构操作的多级dof处理程序。     [2.x.332] <tt>interior_dofs_only</tt>：对于一个顶点周围的每个单元补丁，只收集该补丁的内部自由度，而不考虑该补丁边界上的自由度。例如，这是Arnold-Falk-Winther类型的平滑器的设置。     [2.x.333] <tt>boundary_patches</tt>：包括域的边界顶点周围的补丁。如果不包括，将只生成内部顶点周围的补丁。     [2.x.334] <tt>level_boundary_patches</tt>：对朝向更粗的单元的细化边也是如此。     [2.x.335] <tt>single_cell_patches</tt>：如果不为真，包含单个单元的补丁会被消除。     [2.x.336] <tt>invert_vertex_mapping</tt>：如果为真，那么返回值包含每个块的一个顶点索引；如果为假，那么返回值包含每个顶点的一个块索引或<tt>invalid_unsigned_int</tt>。 
* [0.x.64]*
   与上述相同，但允许单独排除块上的边界道夫。    如果你想使用，例如，Taylor Hood元素，这很有帮助，因为它允许你不包括速度块在补丁上的边界DoFs，同时也允许你包括压力块的边界DoFs。    对于顶点周围的每个单元补丁，如果[2.x.337]的BlockMask中对应块的布尔值为false，则收集该补丁的所有内部自由度并忽略该补丁边界上的自由度。 
* [0.x.65]*
   创建一个入射矩阵，对于多级DoFHandler的某一层的每一个单元，都标志着哪些自由度与这个单元的子代相关。这个数据结构可以方便地用SparsityPattern对象表示。    因此，该函数创建了一个稀疏模式，在每一行（行对应于该层的单元）列出与该单元的子单元相关的自由度。这里使用的自由度指数是多级层次结构中的一级自由度指数，也就是说，它们可能与本身并不活跃的子单元有关。进入这个函数时，稀疏模式可能是空的，将被重新初始化为正确的大小。    该函数有一些布尔参数（列在下面）控制生成补丁的细节。默认设置是Arnold-Falk-Winther类型的平滑器，用于具有基本边界条件的发散和曲率符合的有限元。其他应用也是可能的，特别是改变<tt>boundary_dofs</tt>用于非基本边界条件。     [2.x.338] <tt>block_list</tt>：将存储补丁的SparsityPattern。     [2.x.339] <tt>dof_handler</tt>：提供所操作的拓扑结构的多级dof处理器。     [2.x.340] <tt>interior_dofs_only</tt>：对于顶点周围的每个单元补丁，只收集该补丁的内部自由度，而忽略该补丁边界上的自由度。例如，这就是Arnold-Falk-Winther类型的平滑器的设置。     [2.x.341] <tt>boundary_dofs</tt>: 包括自由度，这些自由度将被<tt>interior_dofs_only</tt>排除，但位于域的边界上，因此需要平滑。如果<tt>interior_dofs_only</tt>是假的，这个参数就没有影响。 
* [0.x.66]*
   创建一个只有一个补丁的块列表，它又包含了给定层次上的所有自由度。    这个函数主要是对make_child_patches()和make_vertex_patches()等函数在第0层的一个闭合，这些函数可能会产生一个空的补丁列表。     [2.x.342] <tt>block_list</tt>: 补丁将被存储到的SparsityPattern。     [2.x.343] <tt>dof_handler</tt>：提供拓扑结构操作的多级dof处理程序。     [2.x.344] <tt>level</tt> 用于建立列表的网格级别。     [2.x.345] <tt>interior_dofs_only</tt>: 如果为真，排除域的边界上的自由度。 
* [0.x.67]*
    [2.x.346]   
* [0.x.68]*
    [2.x.347] 计算自由度和相关函数 [2.x.348] 。  
* [0.x.69]*
   计算在总数中，有多少自由度属于每个组件。如果有限元的构件数是一个（即你只有一个标量变量），那么这个构件中的数字显然等于自由度总数。  否则，所有组件中的自由度之和需要等于总数量。    然而，如果有限元不是原始的，即它的一些或全部形状函数在一个以上的矢量分量中是非零的，那么最后一句话就不成立了。例如，这适用于Nedelec或Raviart-Thomas元素。在这种情况下，一个自由度在每个分量中都被计算为非零，因此上述的总和大于自由度的总数。    这种行为可以通过可选的参数<tt>vector_valued_once</tt>来关闭。如果这是<tt>true</tt>，非原始向量值元素的成分数只收集在第一个成分中。所有其他分量的计数将为零。    额外的可选参数[2.x.349]允许对组件进行重新排序和分组。为此，它包含了每个组件的组件编号，它应该被计算为。如果多次输入相同的号码，就会把几个组件归为同一个。这个参数的应用之一是当你想形成块状矩阵和向量，但又想把几个分量打包到同一个块中时（例如，当你有[2.x.350]速度和一个压力时，要把所有速度放到一个块中，而把压力放到另一个块中）。    结果在[2.x.351]中返回。注意，[2.x.352]dofs_per_component的大小需要足以容纳[2.x.353]中指定的所有索引。如果不是这样，会抛出一个断言。  没有被target_components锁定的索引将不被触及。 
* [0.x.70]*
   计算每个块中的自由度。这个函数类似于count_dofs_per_component()，不同的是，计数是按块进行的。详见术语表中的[2.x.354] "块"。在调用这个函数之前，再次假设向量具有正确的大小。如果不是这样，就会抛出一个断言。    这个函数在 [2.x.355] , [2.x.356] , 和 [2.x.357] 教程中使用，还有其他一些程序。     [2.x.358] dofs_per_block变量具有与dof_handler参数所使用的有限元的块数相同的组件，或者与target_blocks参数中列举的块数相同（如果给出的话）。 
* [0.x.71]*
   对于DoFHandler的每个活动单元，提取活动的有限元索引并填充作为第二个参数的矢量。这个向量被认为具有与活动单元相同数量的条目。    对于没有hp-capabilities作为第一个参数的DoFHandler对象，返回的向量将只由0组成，表示所有单元使用相同的有限元。在hp模式下，这些值可能是不同的，但是。 
* [0.x.72]*
   计算参数所描述的一组单元（即一个补丁）上有多少自由度。    补丁通常用于定义误差估计器，这些估计器需要解决网格中每个单元周围补丁上的局部问题。你可以使用[2.x.359]得到一个围绕给定单元的补丁的单元列表，这个函数在设置用于解决单元周围补丁的局部问题的线性系统的大小时非常有用。然后，函数[2.x.360]将有助于建立全局自由度和局部自由度之间的联系。     [2.x.361] patch 一个DoFHandler<dim, spacedim>类型的对象内的单元的集合 [2.x.362] 与这个补丁的单元相关的自由度数。   
* [2.x.363] 在并行分布式计算的背景下，只有在本地拥有的单元格周围的补丁上调用这个函数才有意义。这是因为本地拥有的单元的邻居要么是本地拥有的单元，要么是幽灵单元。对于这两种情况，我们知道这些单元实际上是完整的、平行的三角形的真实单元。我们还可以查询这些单元的自由度。换句话说，这个函数只有在补丁中的所有单元都是本地拥有的或者是幽灵单元的情况下才能工作。 
* [0.x.73]*
   与上述相同。     [2.x.364] 使用以dim和spacedim为模板参数的函数。 
* [0.x.74]*
    [2.x.365]   
* [0.x.75]*
    [2.x.366] 返回不同DoF映射的函数 [2.x.367].   
* [0.x.76]*
   创建一个从自由度指数到该自由度在边界上的指数的映射。在此操作之后，<tt>mapping[dof]</tt>给出边界上自由度列表中全局编号为[2.x.368]的自由度的索引。  如果要求的自由度不在边界上，则<tt>mapping[dof]</tt>的值为[2.x.369]该函数主要用于从试验函数中设置边界上的矩阵和向量，而矩阵和向量使用边界本地的试验函数的编号。    [2.x.370]的先前内容被删除。 
* [0.x.77]*
   与之前的函数相同，只是只考虑边界的那些部分，对于这些部分的边界指标列在第二个参数中。    更多信息请参见本类的一般文档。     [2.x.371] [2.x.372] "关于边界指标的词汇条目"  
* [0.x.78]*
   返回该DoF处理对象处理的所有自由度的支持点（见此[2.x.373]"术语条目"）的列表。当然，这个函数只有在DoF处理对象使用的有限元对象实际提供支持点时才起作用，即没有边缘元素或类似的东西。否则，就会抛出一个异常。     [2.x.374] 给定的数组的长度必须与自由度的元素数量相同。   
* [2.x.375] 这个函数的前提条件是输出参数的大小必须等于自由度的总数，这使得这个函数不适合给定的DoFHandler对象派生自[2.x.376]对象的情况（或任何派生自[2.x.377]的类，因此，如果用这样的DoFHandler调用，这个函数将产生一个错误。     [2.x.378] 映射 从参考单元到定义DoF的实际单元的映射。   [2.x.379] dof_handler 描述哪个DoF指数在三角结构的哪个单元上的对象。   [2.x.380] support_points 存储实空间坐标中斗室的相应位置的向量。这个对象以前的内容在这个函数中被删除。   [2.x.381] mask 一个可选的分量掩码，用于限制从中提取支持点的分量。 
* [0.x.79]*
   与前面的函数相同，但用于hp-case。 
* [0.x.80]*
   这个函数是上述map_dofs_to_support_points函数的一个版本，它不是简单地返回一个支持点的向量（见这个[2.x.382]"词汇表条目"），每个全局自由度有一个条目，而是一个从DoFs索引映射到其位置的地图。这个函数的意义在于，在DoFHandler基于[2.x.383]对象（或任何从[2.x.384]派生的类）的情况下，它也是可用的。 在这种情况下，每个处理器将无法确定所有DoFs的支持点位置，更糟糕的是，即使知道所有DoFs的位置，也没有处理器能够持有一个包含这些位置的向量。因此，这个函数构建了一个从我们可以知道位置的DoFs（即那些局部相关的DoFs（见[2.x.385]"局部相关DoFs"）到其位置的地图。    对于非分布式三角形，作为[2.x.386]返回的地图当然是密集的，也就是说，每个DoF都可以在其中找到。     [2.x.387] 映射 从参考单元到定义了DoF的实际单元的映射。   [2.x.388] dof_handler 描述哪个DoF指数存在于三角结构的哪个单元的对象。   [2.x.389] support_points 对于每个本地相关的DoF指数，包含实空间坐标的相应位置的地图。  这个对象以前的内容在这个函数中被删除。   [2.x.390] mask 一个可选的分量掩码，用于限制从中提取支持点的分量。 
* [0.x.81]*
   与前面的函数相同，但用于hp-case。 
* [0.x.82]*
   这是一个与上面那个相反的函数。它生成一个地图，其中键是自由度的支持点，而值是自由度指数。关于支持点的定义，请看这个[2.x.391]"词汇表条目"。    由于在点的空间中没有自然的顺序（除了1d的情况），你必须提供一个带有明确指定的比较器对象的地图。因此，这个函数在比较器对象上被模板化。  在这个函数中，地图对象的先前内容被删除。    就像上面的函数一样，假定这里使用的有限元实际上支持其所有组件的支持点的概念。     [2.x.392] 这个函数应该生成一个多图，而不仅仅是一个地图，因为几个道夫可能位于同一个支持点。目前，只有map_dofs_to_support_points()为每个点返回的地图中的最后一个值将被返回。 
* [0.x.83]*
    [2.x.393]   
* [0.x.84]*
    [2.x.394] 杂项 [2.x.395]。  
* [0.x.85]*
   取一个住在单元上的值的向量（例如，每个单元的误差），并以这样的方式将其分配到道夫上，从而产生一个有限元场，然后可以进一步处理，例如，用于输出。你应该注意到，所产生的场在悬挂的节点上将不是连续的。  然而，这可以通过在矢量完全组装后调用为该DoFHandler对象创建的AffineConstraints对象的适当[2.x.396]分布函数来轻松安排。    假设[2.x.397]中的元素数等于活动单元的数量，[2.x.398]中的元素数等于<tt>dof_handler.n_dofs()</tt>。    注意，输入向量可以是任何数据类型的向量，只要它可以转换为[2.x.399] 输出向量，作为DoF处理程序上的数据向量，总是由[2.x.400]类型的元素组成。 如果这个DoFHandler使用的有限元由一个以上的分量组成，你需要指定输出向量中的哪个分量应该用来存储有限元场；默认是0（如果有限元只由一个分量组成则不允许有其他值）。矢量的所有其他分量保持不动，即它们的内容不被改变。    如果所使用的有限元的形状函数在一个以上的向量分量中是非零的（用deal.II的话说：它们是非正则的），则不能使用这个函数。 
* [0.x.86]*
   根据给定的地图，用点数据生成gnuplot可读的文本输出 [2.x.401] 对于每个支持点的位置，生成一个包含地图上所有DoF列表的字符串标签。 该地图可以通过调用map_dofs_to_support_points()来生成，对于可视化未知数的位置和全局编号非常有用。    输出中每一行的格式的例子是。 
* [1.x.13]
* 其中x、y和z（只存在于相应的维度）是支持点的坐标，后面是一串DoF编号。    带标签的点可以在gnuplot中作如下图示。 
* [1.x.14]
* 例子（这也包括用GridOut单独编写的网格）。   [2.x.402] 要在单个gnuplot文件中生成网格和支撑点信息，请使用类似的代码  
* [1.x.15]
* 并在gnuplot中执行以下命令。 
* [1.x.16]
* 或者，以下gnuplot脚本在命令行中以<tt>gnuplot gnuplot.gpl</tt>的形式执行时将生成一个png文件。 
* [1.x.17]
*   
* [0.x.87]*
   为[2.x.403]添加约束，对应于在给定的边界指标上强制执行零边界条件。    这个函数约束了边界给定部分的所有自由度。    在[2.x.404]中使用了这个函数的一个变体，参数不同。     [2.x.405] dof 要工作的DoFHandler。   [2.x.406] boundary_id 应该被计算约束的那部分边界的指标。如果这个数字等于[2.x.407]，那么该域的所有边界都将被处理。   [2.x.408] zero_boundary_constraints 约束对象，约束条件将被写入其中。由于零边界值而产生的新约束将被简单地添加，保留之前存在的任何其他约束。然而，这只有在该对象以前的内容由不在这里处理的边界上的自由度的约束组成时才有效。如果以前有位于边界上的自由度的约束，那么这将构成冲突。参见[2.x.409]模块，以处理个别自由度上存在冲突约束的情况。   [2.x.410] component_mask 一个可选的组件掩码，将这个函数的功能限制在一个FES系统的子集上。对于非[2.x.411]"原始 "形状函数，任何属于形状函数的自由度都会受到影响，其中至少有一个非零分量受到分量屏蔽的影响（见[2.x.412] ）。  如果省略这个参数，有限元中所有在边界上有自由度的分量将被考虑。   
* [2.x.413] [2.x.414] [2.x.415] "关于边界指标的词汇条目"  
* [0.x.88]*
   与前一个函数相同，只是对边界的所有部分进行处理，而不仅仅是那些有特定边界指标的部分。那么这个函数就相当于以[2.x.416]为第二个参数调用前一个函数。    这个函数在 [2.x.417] 中使用，例如。   
* [2.x.418]   
* [0.x.89]*
    [2.x.419]   
* [0.x.90]*
    [2.x.420] 异常情况 [2.x.421] 。  
* [0.x.91]*
    [2.x.422] 编写说明    
   
* [0.x.92]*
    [2.x.424] 撰写描述    
* [2.x.425]   
* [0.x.93]*
    [2.x.426] 编写描述 异常情况  
* [2.x.427]   
* [0.x.94]*
   DoFHandler没有用有限元进行初始化。请先调用[2.x.428]。   
* [2.x.429]   
* [0.x.95]*
    [2.x.430] 编写说明    
* [2.x.431]   
* [0.x.96]*
       
* [0.x.97]*
   操作员计算出两个中的最大耦合度。     [2.x.433] DoFTools  
* [0.x.98]*
   计算两个人中的最大耦合度的操作者。     [2.x.434] DoFTools  
* [0.x.99]

