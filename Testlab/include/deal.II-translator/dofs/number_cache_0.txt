include/deal.II-translator/dofs/number_cache_0.txt
[0.x.0]*
     一个由DoFHandler类使用的结构，用于存储它们所处理的自由度信息。   
* [0.x.1]*
       默认构造函数。     
* [0.x.2]*
       复制构造函数。简单地将引用对象的所有成员复制到当前对象中。     
* [0.x.3]*
       移动构造函数。简单地将被引用对象的所有成员移到当前对象中。     
* [0.x.4]*
       创建一个NumberCache对象，对应于一个顺序DoFHandler对象，其中一个处理器存储所有自由度。(这里，"顺序 "意味着要么整个程序不使用MPI，要么使用MPI但只使用一个MPI进程，要么有多个MPI进程，但这个DoFHandler建立的Triangulation只在一个MPI进程上工作。)      
* [0.x.5]*
       创建一个NumberCache对象，该对象对应于一个并行的DoFHandler对象，其处理器数量与给定参数的大小相同，其中每个处理器存储作为第一个参数传递的向量的相应元素所指示的自由度。第二个参数表示当前处理器在所有参与处理器中的等级，这样我们就可以设置[2.x.0]和[2.x.1]字段。            所有其他由当前对象存储的字段都可以并且是由参数计算出来的。     
* [0.x.6]*
       复制操作符。简单地将被引用对象的所有成员复制到当前对象中。     
* [0.x.7]*
       移动赋值运算符。简单地将被引用对象的所有成员移到当前对象上。     
* [0.x.8]*
       确定这个对象的内存消耗（以字节为单位）的估计值。     
* [0.x.9]*
       这个函数重置了所有的存储信息。     
* [0.x.10]*
       返回[2.x.2]的表示，既是在它被设置的情况下（直接返回数组），也是在我们需要在所有处理器上积累一些信息的情况下。后一种情况涉及到全局通信，通常设置起来比较昂贵，因为它调用了MPI_Allgather。     
* [0.x.11]*
       返回[2.x.3]的表示，既是在它被设置的情况下（直接返回IndexSet字段的数组），也是在我们需要在所有处理器上积累一些信息的情况下。后一种情况涉及到全局通信，通常设置起来比较昂贵，因为它调用了MPI_Allgather。     
* [0.x.12]*
       道夫总数，在所有可能参与这个网格的处理器上累积。     
* [0.x.13]*
       这个MPI进程所拥有的道夫数量。如果这是一个连续的计算，那么这等于n_global_dofs。这里，"顺序 "意味着要么整个程序不使用MPI，要么使用MPI但只使用一个MPI进程，要么有多个MPI进程，但这个DoFHandler建立的三角计算只在一个MPI进程上工作）。     
* [0.x.14]*
       一个索引集，表示本地拥有的DoF的集合。如果这是一个顺序计算，那么它包含整个[0,n_global_dofs]范围。这里，"顺序 "意味着要么整个程序不使用MPI，要么使用MPI但只使用一个MPI进程，要么有多个MPI进程，但这个DoFHandler建立的Triangulation只在一个MPI进程上工作）。     
* [0.x.15]*
       各个MPI进程所拥有的DoF的数量。如果这是一个连续的计算，那么该向量包含一个等于n_global_dofs的单元素。这里，"顺序 "意味着要么整个程序不使用MPI，要么使用MPI但只使用一个MPI进程，要么有多个MPI进程，但这个DoFHandler建立的三角计算只在一个MPI进程上工作）。     
* [0.x.16]*
       各个MPI进程所拥有的DoF。如果这是一个连续的DoFHandler，那么该向量有一个等于local_owned_dofs的单元素。(这里，"顺序 "意味着要么整个程序不使用MPI，要么使用MPI但只使用一个MPI进程，要么有多个MPI进程，但这个DoFHandler建立的Triangulation只在一个MPI进程上工作。)      
* [0.x.17]*
       使用[BOOST序列化库](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html)将此对象的数据读入或写入一个流中，以便进行序列化。     
* [0.x.18]

