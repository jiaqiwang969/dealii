include/deal.II-translator/A-headers/laoperators_0.txt
[0.x.0]*


* 
* [2.x.0] 
* [1.x.0]
* deal.II包括支持以一种非常普遍的方式来描述线性变换。这是用LinearOperator类来完成的，就像[2.x.1]"MatrixType概念 "一样，它为[1.x.1]向量上的线性操作定义了一个最小的接口。
* 

* 
* [1.x.2]
 
* 因此，这样的对象可以在所有[2.x.2]"迭代求解器 "类中作为矩阵对象使用，或者作为[2.x.3]"预处理器"。
* LinearOperator类的最大优势在于它为复杂的矩阵-向量操作提供了语法糖。作为一个例子，考虑操作 [2.x.4] ，其中 [2.x.5] 、 [2.x.6] 和 [2.x.7] 表示（可能不同的）稀疏矩阵对象。为了构建一个LinearOperator [2.x.8]，在应用于向量时执行上述计算，我们可以这样写。

* 
* [1.x.3]
* 现在，[2.x.9]可以作为一个矩阵对象用于进一步的计算。
* linear_operator()函数可以用来将一个普通的矩阵或预处理对象包装成一个LinearOperator。线性算子可以用transpose_operator()进行转置，或者通过使用inverse_operator()与迭代求解器一起进行反转。
* 对于LinearOperator类型的对象，所有的向量空间操作，即加减法、标量乘法和组合（兼容的线性算子）都被实现。

* 
* [1.x.4]
* 
* block_operator()和block_diagonal_operator()提供了对单个线性算子的进一步封装，使之成为封锁的线性算子变体。
* [2.x.10] 教程中有一个LinearOperator类的详细使用例子。
* 

* 
* [2.x.11] 如下所述，当使用LinearOperator作为[2.x.12]时，会在幕后生成PackagedOperation类实例。因此，用户程序必须包括这两个类的头文件才能编译成功。为了更容易决定在什么情况下包含哪些头文件，并防止隐藏的与模板相关的编译器错误，所有与LinearOperator相关的头文件都被归入了`<deal.II/lac/linear_operator_tools.h>`头文件。
* [1.x.5]
* 通过[2.x.13]将LinearOperator对象应用于一个向量，会产生一个PackagedOperation对象来存储这个计算。
* PackagedOperation类允许对涉及向量和线性运算符的表达式进行懒惰评估。这是通过存储计算表达式来实现的，只有当对象被隐含地转换为向量对象，或者[2.x.14]（或[2.x.15]被手动调用时才执行计算。这就避免了不必要的中间结果的临时存储。
* 作为一个例子，考虑多个向量的相加。

* 
* [1.x.6]
* 转换打包操作<code>a + b
* 
* - c + d</code>到一个向量的结果是，代码相当于以下代码

* 
* [1.x.7]
*这就避免了任何中间存储。作为第二个例子（涉及一个LinearOperator对象），考虑计算一个残差 [2.x.16] 。
* 

* 
* [1.x.8]
* 这里，表达式<code>b
* 
* - op_a x</code>的结果又是一个PackagedOperation类型的对象，它存储了应该使用两个向量和线性运算符执行的[1.x.9]。将表达式转换为矢量（就像这里发生的对矢量[2.x.17]的赋值一样），执行计算（见下面的注释）。
* 

* 
* [2.x.18] 计算表达式的懒惰评估必然涉及对底层向量和矩阵对象的引用。例如，创建一个[2.x.19]对象

* 
* [1.x.10]
* 存储残差的计算表达式，并引用向量 [2.x.20] 。在这一点上，它不执行任何计算。特别是，如果[2.x.21]或[2.x.22]被改变，[1.x.11]创建的[2.x.23]的每一个后续表达式的评估都是用新值进行的

* 
* [1.x.12]
* 因此，作为一种保障，如果你想立即计算一个表达式的结果，总是明确地在左边使用一个矢量类型（而不是[2.x.24]）。

* 
* [1.x.13]
* 
* 

* 
* [2.x.25] [2.x.26] 教程中有一个PackagedOperation类的详细使用例子。
* 

* 
* [2.x.27] LinearOperator的许多用例导致中间表达式需要一个PackagedOperation。为了一次性包含所有必要的头文件，可以考虑使用

* 
* [1.x.14]
* 
* 

* 

 
* [2.x.28] 

* 
* [2.x.29] 

* 
* [0.x.1]

