include/deal.II-translator/algorithms/operator_0.txt
[0.x.0]*
 包含统一形式的数字算法的命名空间。
* 这个命名空间中的所有算法类都是从Operator或OutputOperator派生出来的，这取决于它们是否返回一个值。关于如何使用这些类的更多详细信息，请参见这些类的文档。

* 
* [0.x.1]*
    [2.x.0] 更新本文档和Operator的文档 本库中所有算法的抽象基类。操作符是一个具有operator()的对象，它将一组命名的向量转换成另一组命名的向量。    此外，一个运算符可以被调用例程通知参数的变化。外层迭代可以通知()运算器一个事件，例如，网格的改变、不同的时间步长或牛顿方法的收敛速度太慢，这将触发矩阵的重新组合或类似的事情。    [1.x.0] 这可能是Operator最突出的用途，一个外部迭代方法调用一个内部求解器，等等。通常，在这样的嵌套系统中，最内层的方法必须使用所有外层迭代的值来计算一个残差。由于这种嵌套的深度和顺序在设计通用工具时很难预测，我们使用AnyData来访问这些向量。通常，<tt>out</tt>中的第一个向量包含调用operator()()时的起始向量，以及函数返回时的解决方案。对象<tt>in</tt>是提供额外的信息，并转发给嵌套迭代的内部Operator对象。 
* [0.x.2]*
     虚拟析构器。   
* [0.x.3]*
     实际的操作，在一个派生类中实现。   
* [0.x.4]*
     注册一个由外部迭代触发的事件。   
* [0.x.5]*
     清除所有的#通知。   
* [0.x.6]*
     在这里累积事件。如果其中任何一个被设置，终端应用程序的函数solve()必须负责重新组装矩阵。   
* [0.x.7]*
   一个单数运算器基类，目的是在迭代的每个步骤中输出AnyData中的向量。 
* [0.x.8]*
     用无效数据初始化成员变量的构造器。   
* [0.x.9]*
     复制构造函数被删除，因为这个类的对象不应该被复制。   
* [0.x.10]*
     空的虚拟析构器。   
* [0.x.11]*
     设置数据被写入的流[2.x.1]。如果没有用这个函数选择流，数据将进入[2.x.2]。    
* [0.x.12]*
     设置当前的步骤。   
* [0.x.13]*
     输出AnyData中的所有向量。   
* [0.x.14]*
   在OutputOperator中通过移位一个整数值来设置步数。     [2.x.3] OutputOperator  
* [0.x.15]

