include/deal.II-translator/distributed/cell_weights_0.txt
[0.x.0]*
   任何时候[2.x.0]被重新分区，不管是根据要求还是通过细化/粗化，单元格将被分配到所有子域中，以达到平等的平衡工作量。如果每个单元的工作量不同，对于具有hp-capabilities的DoFHandler对象来说通常是这样的，我们可以通过为不同的单元引入单独的权重来考虑到这一点。    这个类允许通过查询与DoFHandler的每个单元相关联的FiniteElement来计算这些用于负载平衡的权重。人们可以从该类提供的预定义权重算法中选择，也可以提供一个自定义的算法。    如果相关的DoFHandler还没有被初始化，即它的[2.x.1]是空的，所有单元的权重将被评估为零。    该类提供了两种不同的方式来连接所选择的加权函数和链接的[2.x.2]的相应信号。推荐的方式包括创建一个该类的对象，该对象将在创建时自动负责注册加权函数，并在销毁时取消其注册。为了达到令人满意的工作平衡结果，每个与我们工作的三角形相关的DoFHandler都需要存在这个类的一个对象。  连接的加权函数可以使用[2.x.3]函数随时改变。下面的代码片断演示了如何实现每个单元按其当前自由度数加权。我们选择了一个`1000`的系数，对应于每个单元在创建时被分配到的初始权重。 
* [1.x.0]
* 另一方面，你也能够通过使用这个类的静态成员函数来手动处理信号连接。在这种情况下，一个类似的代码例子看起来如下。 
* [1.x.1]
* 这个类的使用在 [2.x.4] 中演示。   
* [2.x.5] 参见[2.x.6]，了解更多关于加权和负载平衡的信息。   
* [2.x.7] 注意这个类在这个类的构造函数中把权重函数连接到Triangulation。如果与DoFHandler相关的Triangulation在后者的生命周期内通过[2.x.8]发生变化，将在weight_callback()函数中触发断言。使用[2.x.9]取消对旧三角函数的注册，并将其连接到新的三角函数。   
* [2.x.10]   
* [0.x.1]*
     一个别名，它定义了一个函数的特性，可以在负载平衡期间用于加权单元。        这种加权函数的参数是一个单元的迭代器和重新分区后将分配给它的未来有限元。    它们返回一个无符号整数，被解释为单元的权重，或者说，与之相关的额外计算负荷。   
* [0.x.2]*
     构造函数。         [2.x.11] dof_handler 将被用于确定每个单元的有限元的DoFHandler。     [2.x.12] weighting_function 在负载平衡期间确定每个单元重量的函数。   
* [0.x.3]*
     解构器。        断开之前连接到权重信号的函数。   
* [0.x.4]*
     将不同的[2.x.13]连接到与[2.x.14]相关的三角图上 断开先前连接到加权信号的函数。   
* [0.x.5]*
     将[2.x.15]转换为符合回调函数条件的不同类型，可以连接到Triangulation的加权信号。        这个函数确实[1.x.2]将转换后的函数连接到与[2.x.16]相关的Triangulation。    
* [0.x.6]*
      [2.x.17] 选择加权函数[2.x.18] 。    
* [0.x.7]*
     在每个单元格上选择一个常数权重[2.x.19]。   
* [0.x.8]*
     通过[2.x.21]提供的一对浮点数[2.x.20]以下列方式确定每个具有[2.x.24]自由度的单元[2.x.23]的权重。[1.x.3]由于要求细胞权重为整数，所以右边将被四舍五入为最接近的整数。   
* [0.x.9]*
     容器[2.x.25]提供了成对的浮点数[2.x.26]，它们以下列方式确定每个具有[2.x.29]自由度的单元[2.x.28]的权重[2.x.27]。[1.x.4]由于要求单元格权重为整数，所以右手边将被四舍五入为最近的整数。   
* [0.x.10]*
      [2.x.30]     
* [0.x.11]*
     与连接到DoFHandler的Triangulation的相应cell_weight信号的连接。   
* [0.x.12]*
     一个回调函数，它将连接到[2.x.31]的cell_weight信号，[2.x.32]被连接到该信号。最终返回每个单元的重量，由作为参数提供的[2.x.33]决定。如果[2.x.34]还没有被初始化，则返回0。   
* [0.x.13]

