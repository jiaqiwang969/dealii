include/deal.II-translator/matrix_free/dof_info_0.txt
[0.x.0]*
     一个结构，它接收描述约束的条目，并将其放入一个排序的列表中，其中重复的内容被过滤掉。   
* [0.x.1]*
       这个函数在所有值的集合中插入一些受约束的条目。它将道夫的（重新排序的）编号（根据与函数相匹配的排序）存储在new_indices中，并返回存储位置的双数组，以便以后访问。     
* [0.x.2]*
     存储所有单元格自由度的索引的类。本质上，这是一个DoFHandler风格的智能数字缓存，同时也将约束的描述直接嵌入到单元格层面，而不需要引用外部AffineConstraints对象。        这个类只存储索引关系。悬挂节点约束的权重被存储在一个不同的字段中。这是因为不同的字段允许在不同的DoFHandlers上对矢量值问题进行相同的压缩权重数据。在那里，指数可能在不同的分量上受到不同的约束（例如，Dirichlet条件只在选定的分量上），而来自悬挂节点的权重是相同的，只需要存储一次。这种组合将在MatrixFree类中处理。       
* [2.x.0]     
* [0.x.3]*
       这个值用来定义向量中的子范围，我们可以在[2.x.1]的调用中归零。我们的目标是每次只清除向量的一部分，以保持缓存中被清零的值，为应用这个方法的情况节省一个全局向量访问，而不是`vector = 0. ;`。            我们将颗粒度设置为64
* 
* - 这是一个足够大的数字，以尽量减少工作中的循环剥离开销（并与高达16的矢量化长度兼容），并且足够小，不会浪费在单个块的大小上。     
* [0.x.4]*
       默认的空构造函数。     
* [0.x.5]*
       复制构造函数。     
* [0.x.6]*
       移动构造函数。     
* [0.x.7]*
       解除构造器。     
* [0.x.8]*
       复制赋值操作符。     
* [0.x.9]*
       移动赋值运算符。     
* [0.x.10]*
       清除该类中的所有数据字段。     
* [0.x.11]*
       返回一个给定的有限元度的FE索引。如果不是在hp-模式下，这个函数总是返回索引0。如果在hp-模式下没有找到索引，则返回[2.x.2] 。      
* [0.x.12]*
       用存储在单元块[2.x.4]上的本地拥有的自由度填充向量[2.x.3] 如果[2.x.5]是`true`，那么返回的向量将包含解决约束条件所需的索引。            下面的图片说明了这个函数对单元块0和1的输出，域的底部是零Dirichlet边界条件。请注意，由于约束条件的存在，在 "with_constraints = true "的情况下，该函数返回的DoFs不是单元块上每个单元DoFs的简单联合 [2.x.6] [2.x.7] 。            
* [2.x.8] 返回的索引可能包含重复的。使用[2.x.9]和[2.x.10]可以获得唯一的集合。      
* [0.x.13]*
       这个内部方法获取单元格上的局部索引，并将其填入该类。它解决了约束条件并分配了结果。鬼魂索引，即位于另一个处理器上的索引，通过这个函数得到一个临时数字，以后在所有鬼魂索引被调用[2.x.12]收集后，将被分配到正确的索引。      
* [0.x.14]*
       这种方法从[2.x.13]函数采用的临时编号中为鬼魂指数分配了正确的指数。这些数字相对于MPI进程来说是本地化的，而鬼魂则从本地拥有的范围的末端开始。这样，我们就可以直接访问所有的向量条目。     
* [0.x.15]*
       这个方法根据给定的单元格的重新编号，重新排列单元格的走法。它还将[2.x.14]单元格放在一起，并将它们解释为只有一个单元格，这是矢量化的需要。     
* [0.x.16]*
       查找可能的单元格索引压缩，我们可以应用它来提高效率。在reorder_cells的最后运行。     
* [0.x.17]*
       查找可能的压缩面的指数，我们可以应用这些指数来提高效率。在reorder_cells的结尾处运行。     
* [0.x.18]*
       这个函数计算当前存储的指数在各个单元之间的连接性，并将结构填充为稀疏模式。     
* [0.x.19]*
       在启用面积分的情况下，找出某些对未知数的循环是否只访问我们在主分区器中保存的所有鬼魂道夫的子集。     
* [0.x.20]*
       给出[2.x.15]包含宏面（内/外）和宏面的单元格的局部索引，计算dof_indices_contiguous_sm。     
* [0.x.21]*
       计算自由度的重新编号，以改善该类的数据访问模式，可以被IndexStorageVariants枚举中的类别所利用。例如，对于典型的DG元素，可以通过将成批的单元格的自由度交错排列来改善索引排序，这就避免了[2.x.16]中明确的数据转置。 目前，这些更高级的功能没有实现，所以这个函数的价值有限。     
* [0.x.22]*
       填充数组，该数组定义了如何在单元格循环内将结果向量中的选定范围归零，填充两个成员变量[2.x.17] vector_zero_range_list_index和[2.x.18] 这个模式的意图是将向量条目在时间上与第一次访问相近的地方归零，从而将向量条目保留在缓存中。     
* [0.x.23]*
       返回该类的内存消耗，以字节为单位。     
* [0.x.24]*
       在给定的输出流中打印出该类不同结构的内存消耗的详细摘要。     
* [0.x.25]*
       在给定的输出流中打印该类中的索引表示。     
* [0.x.26]*
       用于索引的各种存储变体的枚举。这种存储格式用于在底层数据结构允许的情况下实现更有效的索引方案，并告知[2.x.19]中的访问函数要从哪个数组中获取数据。更有效存储的一个例子是枚举值[2.x.20]，这意味着只需读取每个单元的第一个索引就可以获得单元的所有自由度的索引，而所有后续的索引仅仅是第一个索引的一个偏移。     
* [0.x.27]*
         这个值表示没有找到索引压缩，唯一有效的存储是访问单元上存在的所有索引，可能包括约束。对于这种索引类型的单元格/面，FEEvaluationBase中的数据访问被引向数组[2.x.21] dof_indices，索引为`row_starts[cell_index*n_vectorization*n_components].first`。       
* [0.x.28]*
         这个值表示指数是交错的，以便用矢量的聚集和分散操作来访问。这种存储变体在单元格没有约束条件，且该批单元格中的指数没有指向矢量化数组不同槽位中的同一个全局指数的情况下是可能的（为了支持散点操作）。对于这种索引类型的单元格/面，FEEvaluationBase中的数据访问是指向索引为 "row_starts[cell_index*n_vectorization*n_components].first "的阵列`dof_indices_interleaved`。       
* [0.x.29]*
         这个值表示一个单元格内的索引都是连续的，人们可以通过读取该单元格批中每个单元格的这个单一值来获得该单元格的索引。对于这种索引类型的单元格/面，FEEvaluationBase中的数据访问是指向索引为 "cell_index*n_vectorization*n_components "的数组`dof_indices_contiguous`。       
* [0.x.30]*
         这个值表示与一个单元的索引是连续的，并交错进行矢量化，即一个单元上的第一个DoF索引到矢量化批次中的四个或八个单元先到，比第二个DoF索引，以此类推。此外，单元格之间的交错意味着只有用于矢量化的批次可以被有效地访问，而对于只获得部分条目的访问则是一种分层访问。                两个额外的类别`interleaved_contiguous_strided`和`interleaved_contiguous_mixed_strides`是这种存储类型的结果。前者适用于相邻的两个面中至少有一个面会因交错存储而断开。那么我们就必须按照下一个类别的描述进行串联访问。最后一个类别`interleaved_contiguous_mixed_strides`出现在ghost层，见下面对该类别的详细描述。        同样，一旦我们在单元格之间交错索引，这也是一般情况下无法避免的事情。                对于这种索引类型的单元格/面，FEEvaluationBase中的数据访问是指向索引为`cell_index*n_vectorization*n_components`的`dof_indices_contiguous`数组。       
* [0.x.31]*
         与Interleaved_contiguous存储类似，但适用于Interleaved指数只在自由度内连续，而不是在矢量数组的组件上连续的情况。        这种情况通常发生在有DG的面，其中的单元有`交错_连续`存储，但面的编号与单元的编号不一样。对于这种索引类型的单元格/面，FEEvaluationBase中的数据访问被引导到索引为`cell_index*n_vectorization*n_components'的`dof_indices_contiguous'阵列。       
* [0.x.32]*
         类似于interleaved_contiguous_separate存储，但针对的是交错索引不相隔`n_vectorization`的情况。这种情况通常发生在DG的幽灵层中，远程所有者应用了交错存储，而当前的处理器只看到其中的一些单元。对于这种索引类型的单元/面，FEEvaluationBase中的数据访问被引向索引为`cell_index*n_vectorization*n_components'的`dof_indices_contiguous'数组，包括实际跨度信息的`dof_indices_interleave_strides`数组。       
* [0.x.33]*
       用于区分单元格和面的矢量化类型的数据阵列的枚举。     
* [0.x.34]*
         指定为内部的面的数据索引        
* [0.x.35]*
         指定为外部的面的数据索引        
* [0.x.36]*
         单元的数据索引        
* [0.x.37]*
       存储底层DoFHandler的尺寸。由于索引不是模板化的，这是一个变量，可以在这个类中需要的（很少）情况下访问尺寸。     
* [0.x.38]*
       出于效率的考虑，总是将具有类似属性的单元格的固定数量放在一起。这个变量控制着被分在一起的单元格的数量。相对于其他类在数字类型上的模板化，这个类作为一个纯粹的索引容器是没有模板化的，所以我们需要保留否则包含在[2.x.22]的信息。      
* [0.x.39]*
       存储所有单元和面批的索引存储变体。            这里给出的三个数组根据CellOrFaceAccess解决作为内部装饰的面（0）、作为外部装饰的面（1）和单元（2）的类型。     
* [0.x.40]*
       在[2.x.23] dof_indices和[2.x.24]字段中存储压缩行存储的行起始指数。这两个字段总是被一起访问，所以只为它们保留一个变量会更简单。这也避免了保持两个行开始向量的同步。     
* [0.x.41]*
       存储每个单元的自由度指数。这些指数是在MPI本地索引空间中计算的，即每个处理器将本地拥有的指数存储为<tt>0</tt>和<tt>n_locally_owned_dofs-1</tt>之间的数字，以及<tt>n_locally_owned_dofs</tt>到<tt>n_locally_owned_dofs+n_ghost_dofs</tt>范围内的幽灵指数。这个MPI本地索引空间和全局自由度编号之间的转换被存储在[2.x.25]数据结构中。 这个数组还包括来自约束的间接贡献，由[2.x.26]字段描述。由于行的长度可变，这将是一个矢量的矢量。      然而，我们使用一个连续的内存区域，并将行开始存储在变量[2.x.27]中       
* [0.x.42]*
       这个变量以单元上自由度的局部编号来描述约束的位置。第一个数字存储了从一个约束自由度到下一个约束自由度的距离。当我们从矢量中读出或写入单元的局部自由度时，这可以确定受约束自由度的位置。第二个数字存储的是约束权重的索引，存储在变量constraint_pool_data中。     
* [0.x.43]*
       为[2.x.28]重新排序的索引存储。      
* [0.x.44]*
       压缩的索引存储，比通过[2.x.29] dof_indices使用的索引存储更快，根据IndexStorageVariants中的描述。            这里给出的三个数组根据CellOrFaceAccess处理内部装饰的面（0）、外部装饰的面（1）和单元格（2）的类型。     
* [0.x.45]*
       与上述相同，但用于共享内存的使用。对的第一个值是识别拥有的进程，第二个是该进程的本地拥有数据中的索引。           
* [2.x.30]这个数据结构只有在index_storage_variants[2]中的所有条目都是[2.x.31]时才会设置。      
* [0.x.46]*
       压缩索引存储，比通过根据IndexStorageVariants中的描述使用的[2.x.32] dof_indices更快地访问。            这里给出的三个数组解决了装饰为减号的面（0）、装饰为加号的面（1）和细胞（2）的类型。     
* [0.x.47]*
       缓存矢量化时填充的索引数。这个信息可以隐含地从row_starts数据字段中推导出来，但是这个字段允许更快的访问。            这里给出的三个数组根据CellOrFaceAccess来处理内部装饰的面（0）、外部装饰的面（1）和单元格（2）的类型。     
* [0.x.48]*
       这存储了可用于设置向量的平行分区。分区器包括对向量中局部范围的描述，也包括鬼魂的样子。这使得基于DoFInfo字段的向量的初始化成为可能。     
* [0.x.49]*
       与vector_partitioner兼容的向量交换器。     
* [0.x.50]*
       与分区器兼容的向量交换器，该分区器选择了存储在[2.x.33]中的完整向量分区器的鬼魂索引子集。这些分区器用于专门的循环，只导入鬼魂区域的一部分，以减少通信量。有五种变体的分区器被初始化。
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
 

 
 
* - 一个是只查询单元格的值。
 

 
 

 
 

 
 

 
 

 
 

 
 

 
* 
* - 一个额外描述在相关面上评估函数值的指数。
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
 

 
* 
* - 一个描述用于评估函数值和邻近本地所有单元的相关面上的梯度的指数。
 

* 
 

 
* 

 
 

 
 

 
 

 
 

 
* 
* - 一个额外描述在所有面上评估函数值的索引，以及
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
 

 
* 
* - 一个描述用于评估函数值和梯度的指数，在与本地所有单元相邻的所有面上。     
* [0.x.51]*
       这存储了所有本地拥有的自由度的（排序）列表，这些自由度被约束。     
* [0.x.52]*
       在[2.x.34] plain_dof_indices字段中存储压缩行存储的行开始指数。     
* [0.x.53]*
       存储每个单元的自由度指数。这个数组不包括约束条件的间接贡献，这些贡献包括在[2.x.35]中。 由于行的长度可变，这将是一个矢量的矢量。然而，我们使用一个连续的内存区域，并将行开始存储在变量[2.x.36] row_starts_plain_indices中。     
* [0.x.54]*
       以所有DoFInfo对象的基数元素的数量来存储偏移量。     
* [0.x.55]*
       存储从DoFHandler中读出指数的基本元素的数量。     
* [0.x.56]*
       储存有限元中每个基元的分量数，索引是从那里读来的。     
* [0.x.57]*
       这个向量的第1个条目存储了给定基元的分量号。     
* [0.x.58]*
       对于FES系统中的一个给定的分量，这个变量告诉人们该索引属于哪个基元。     
* [0.x.59]*
       对于一个矢量值元素，这给出了从给定组件开始的自由度数量中的常数偏移，因为自由度是按自由度编号的。这个数据结构没有考虑到可能的约束，因此，更短或更长的列表。这一信息直接编码在row_starts变量中。            外围向量在hp情况下经过各种FE指数，与[2.x.37]变量类似。     
* [0.x.60]*
       存储每个单元的自由度数。     
* [0.x.61]*
       存储每个面的自由度数。     
* [0.x.62]*
       告知平原指数是否被缓存。     
* [0.x.63]*
       存储hp情况下的活动有限元的索引。     
* [0.x.64]*
       存储hp-情况下不同有限元的最大度数。     
* [0.x.65]*
       对hp-adaptive case中的每个槽，内向量存储相应的元素度。这被FEEvaluationBase的构造器用来识别hp-案例中的正确数据槽。     
* [0.x.66]*
       在设置过程中临时存储鬼魂的数量。在调用[2.x.38]时被清除。然后，所有的信息都由分区器收集。     
* [0.x.67]*
       为TaskInfo中的每个分区存储一个整数，表明如果用户在[2.x.39]中用相应的参数要求，是否清除结果向量中的某些部分。      
* [0.x.68]*
       存储要清除的向量中的实际范围。     
* [0.x.69]*
       为TaskInfo中的每个分区存储一个整数，表明何时安排操作，这些操作将在对向量项的任何访问之前完成。     
* [0.x.70]*
       在对向量项进行任何访问之前，存储操作的实际范围。     
* [0.x.71]*
       为TaskInfo中的每个分区存储一个整数，表明何时安排将在所有访问向量项之后进行的操作。     
* [0.x.72]*
       存储在所有访问向量项之后的操作的实际范围。     
* [0.x.73]

