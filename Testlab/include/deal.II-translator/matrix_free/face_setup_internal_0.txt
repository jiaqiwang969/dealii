include/deal.II-translator/matrix_free/face_setup_internal_0.txt
[0.x.0]*
     一个结构，用于表示一个进程的面孔集合，其邻居之一在结构FaceInfo中完成的设置。   
* [0.x.1]*
     一个结构，用于提取与给定单元集相关的面，包括分配子域边界的两个相邻处理器中的哪一个应该进行整合（从两边）。这个数据结构用于设置面和单元之间的连接，以及识别用于面积分的dof指数。   
* [0.x.2]*
       在读取单元格上的指数之前，进行面的初始检测。这并不是在添加面孔，而只是决定是否应该考虑对一些面孔进行本地处理。     
* [0.x.3]*
       在完成dof指数后，这个函数提取与FaceToCellTopology相关的信息，并将面孔分为内部面孔、边界面孔和幽灵面孔（未在本地处理但与本地存在的一些单元相邻）。     
* [0.x.4]*
       将单元格的信息、面数和MatrixFree中的纯数组表示法中的数字填入FaceToCellTopology中（没有矢量化，这是在后面应用的东西）。     
* [0.x.5]*
       一个在第一个initialize()函数中对面孔进行分类的类型，这样我们以后可以在generate_faces()中得到它们的正确值。     
* [0.x.6]*
     实际上形成了脸部积分的矢量执行的批次。   
* [0.x.7]*
     这个用于collect_faces_vectorization()的简单比较可以识别相同类型的面，即所有内部和外部面的编号、子面索引和方向都相同。这被用来将相似的面孔集中起来进行矢量化。   
* [0.x.8]*
     这个比较器在collect_faces_vectorization()中被用来创建一个基于标识符的FaceToCellTopology对象的排序。这被用来在处理脸部积分时获得良好的数据定位。   
* [0.x.9]

