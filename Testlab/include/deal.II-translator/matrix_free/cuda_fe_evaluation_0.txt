include/deal.II-translator/matrix_free/cuda_fe_evaluation_0.txt
[0.x.0]*
 用于CUDA包装器的命名空间

* 
* [0.x.1]*
     计算给定的线程ID、维度和每个空间维度中的点的数量的Dof/Quad索引。   
* [0.x.2]*
   该类提供了在正交点和单元格积分上评估函数所需的所有函数。在功能上，这个类类似于FEValues<dim>。    该类有五个模板参数。     [2.x.0] dim 本类使用的维度 [2.x.1] fe_degree 每一坐标方向具有fe_degree+1个自由度的张量指令有限元的度数 [2.x.2] n_q_points_1d 一维正交公式中的点数，默认为fe_degree+1 [2.x.3] n_components 解决PDEs系统时的矢量元件数量。如果同一个操作被应用于一个PDE的几个分量（例如，一个矢量拉普拉斯方程），它们可以通过一次调用同时应用（而且通常更有效率）。默认为1 [2.x.4] 数字 数字格式，[2.x.5] 或 [2.x.6] 默认为 [2.x.7] 双重。   
* [2.x.8]   
* [0.x.3]*
     标量的一个别名。   
* [0.x.4]*
     矢量的别名。   
* [0.x.5]*
     内核特定信息的别名。   
* [0.x.6]*
     尺寸。   
* [0.x.7]*
     组件的数量。   
* [0.x.8]*
     每个单元的正交点的数量。   
* [0.x.9]*
     每个单元的张量自由度的数量。   
* [0.x.10]*
     构造函数。   
* [0.x.11]*
     对于向量[2.x.9]读出当前单元的自由度的值，并在内部存储。当没有约束条件时，与函数[2.x.10]的功能类似，但它也包括来自悬挂节点的约束条件，所以一旦也可以把它看作是与[2.x.11]类似的函数。   
* [0.x.12]*
     取当前单元格的dof值内部存储的值，并将其加到向量中[2.x.12] 该函数也在写操作过程中应用约束。因此，其功能与函数[2.x.13]相似。    
* [0.x.13]*
     在单元格上的正交点上评估输入矢量中的DoF值的函数值和FE函数的梯度。函数参数指定哪些部分应被实际计算。这个函数需要在函数[2.x.14]或[2.x.15]提供有用信息之前调用。   
* [0.x.14]*
     该函数获取存储在正交点上的值和/或梯度，通过单元上的所有基函数/梯度进行测试，并执行单元积分。两个函数参数[2.x.16]和[2.x.17]用于启用/禁用某些值或梯度。   
* [0.x.15]*
     与上述相同，只是正交点是由线程id计算的。   
* [0.x.16]*
     同上，除了本地的dof指数是由线程id计算出来的。   
* [0.x.17]*
     同上，除了正交点是由线程ID计算出来的。   
* [0.x.18]*
     同上，除了本地的dof指数是由线程id计算出来的。   
* [0.x.19]*
     同上，除了正交点是由线程ID计算出来的。   
* [0.x.20]*
     同上，除了正交点是由线程ID计算出来的。   
* [0.x.21]*
     同上，只是函数器[2.x.18]只接受一个输入参数（fe_eval），并从线程id计算正交点。         [2.x.19] 需要定义代码 __device__ void operator()( [2.x.20] fe_degree, n_q_points_1d, n_components, Number>fe_eval) const; /endcode    
* [0.x.22]

