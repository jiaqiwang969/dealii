include/deal.II-translator/matrix_free/fe_point_evaluation_0.txt
[0.x.0]*
     用于区分FlexibleEvaluator类所使用的不同数量组件的值和梯度类型的结构。   
* [0.x.1]*
 该类提供了一个接口，用于评估任意参考点位置上的单元格的内插解数值和梯度。这些点可以从一个单元格到另一个单元格，在数量和位置方面都可以改变。两个典型的用例是在非匹配网格上的评估和粒子模拟。
* 该类的使用与FEValues或FEEvaluation类似。该类首先通过调用[2.x.0] unit_points)`初始化为一个单元，与其他概念的主要区别是需要传递参考坐标的底层点。然后，在调用evaluation()或integration()时，用户可以计算给定点的信息。最终，访问函数get_value()或get_gradient()允许在一个特定的点索引上查询这些信息。
* 该功能类似于在每个单元的`unit_points`上分别创建一个带有正交对象的FEValues对象，然后调用[2.x.1]或[2.x.2]，对于一些元素和映射，这就是内部实际发生的情况。然而，对于映射和有限元素的特定组合，有一种更有效的实现方式，可以避免FEValues的内存分配和其他昂贵的启动成本。目前，该功能专门用于从MappingQGeneric派生的映射，以及与[2.x.3]模块一起工作的具有张量积结构的有限元。在这些情况下，该类所隐含的成本与使用[2.x.4]和[2.x.5]相似（有时甚至更低）。

* 
* [0.x.2]*
   构建器。     [2.x.6] mapping 描述传递给evaluation()函数的单元格的实际几何形状的Mapping类。     [2.x.7] fe 用于评估的FiniteElement对象，通常在所有要评估的单元上都是一样的。     [2.x.8] update_flags 指定在调用reinit()时由映射计算的数量。在evaluation()或integration()期间，这些数据被查询以产生所需的结果（例如，有限元解的梯度）。     [2.x.9] first_selected_component 对于多分量的FiniteElement对象，该参数允许从该参数开始选择`n_components`分量范围。 
* [0.x.3]*
   设置给定单元的映射信息，例如，如果要求函数的梯度，通过计算给定点的映射的雅各布系数。     [2.x.10] cell 当前单元的迭代器 [2.x.11] unit_points 当前单元参考位置的点的列表，在evaluate()和integration()函数中，FiniteElement对象应被评估/整合。 
* [0.x.4]*
   这个函数在传递给reinit()的单元和`unit_points`上插值有限元解，由`solution_values`表示。     [2.x.12] solution_values 这个数组应该包含由`cell->get_dof_values(global_vector, solution_values)'返回的元素上的未知值。     [2.x.13] evaluation_flags 指明哪些量应该在点上被评估的标志。 
* [0.x.5]*
   这个函数将之前submit_value()或submit_gradient()调用所传递的量乘以测试函数的值或梯度，并对所有给定的点进行求和。这类似于测试函数的双线性形式的积分，不同的是这个公式不包括`JxW`因子。这就使得该类方法可以自然地将点信息（如粒子）嵌入到有限元公式中。当然，通过给submit_value()的数据乘以一个`JxW`信息，积分也可以用这个类来表示。     [2.x.14] solution_values 这个数组将包含积分的结果，可以用来在`cell->set_dof_values(solution_values, global_vector)`或`cell->distribute_local_to_global(solution_values, global_vector)`时使用。注意，对于多分量系统，只有部分分量被本类选择，本类未触及的条目将被清零。     [2.x.15] integration_flags 指明哪些量应该在点上进行积分的标志。   
* [0.x.6]*
   在调用[2.x.17]并设置了[2.x.18]后，返回正交点编号[2.x.16]的值，或者调用[2.x.19]后，返回已经存储在那里的值，如果该对象是矢量值的，将给出一个矢量值的返回参数。 
* [0.x.7]*
   写一个值到包含有point_index组件的点上的值的字段。与通过get_value()访问同一字段。如果在调用设置了[2.x.21]的函数[2.x.20]之前应用，这指定了由当前单元格上的所有基函数测试并整合的值。 
* [0.x.8]*
   在调用[2.x.22]并设置[2.x.23]后，返回索引为`point_index`的点的实坐标梯度，或者调用[2.x.24]后存储在那里的梯度。 实坐标梯度是通过获取单位梯度（也可以通过get_unit_gradient()获取）并应用映射的逆雅各布系数获得。如果对象是矢量值的，则会给出一个矢量值的返回参数。 
* [0.x.9]*
   在调用[2.x.25]并设置[2.x.26]后，返回索引为`point_index`的点的单位坐标梯度，或者在调用[2.x.27]后，返回已经存储在那里的梯度 如果对象是矢量值的，将给出一个矢量值的返回参数。请注意，当矢量化被启用时，来自几个点的值会被分组在一起。 
* [0.x.10]*
   写一个贡献值，这个贡献值被梯度测试到包含给定`point_index`的点上的值的区域。与通过get_gradient()访问的字段相同。如果在调用函数[2.x.28]之前应用，这将指定由当前单元上的所有基函数梯度测试的内容，并对其进行整合。 
* [0.x.11]*
   返回当前单元格上给定点指数的变换的雅各布系数。前提是。这个类需要用包含`update_jacobian`的UpdateFlags构建。 
* [0.x.12]*
   返回当前单元格上给定点指数的变形的雅各布系数的逆值。前提是。这个类需要用包含`update_inverse_jacobian`或`update_gradients`的UpdateFlags构建。 
* [0.x.13]*
   返回传给reinit()的点中，给定的点的实坐标位置。 
* [0.x.14]*
   返回给定的点索引的单位/参考坐标位置，即传递给reinit()函数的各个点。 
* [0.x.15]*
   指向传递给构造函数的Mapping对象的指针。 
* [0.x.16]*
   指向MappingQGeneric类的指针，使该类的快速路径。 
* [0.x.17]*
   指向传递给构造函数的FiniteElement对象的指针。 
* [0.x.18]*
   描述用于该类的快速路径的张量积元素的一维多项式基础，使用张量积评估器。 
* [0.x.19]*
   存储多项式是否是线性的，节点在0和1。 
* [0.x.20]*
   在FiniteElement类所隐含的未知数的未知数和用于张量代码路径的词典式编号之间重新编号。 
* [0.x.21]*
   临时数组，用于存储传递给evaluate()函数的`solution_values'，其格式与张量积评估器兼容。对于矢量值的设置，这个数组使用`张量<1, n_components>`类型来收集特定基函数的未知数。 
* [0.x.22]*
   临时数组用于存储在`integrate()`过程中计算的`solution_values`的矢量版本，其格式与张量积评估器兼容。对于矢量值的设置，这个数组使用`Tensor<1, n_components, VectorizedArray<Number>>格式。 
* [0.x.23]*
   临时数组来存储各点的数值。 
* [0.x.24]*
   临时数组用于存储各点的单位坐标的梯度。 
* [0.x.25]*
   临时数组，用于存储各点的实坐标梯度。 
* [0.x.26]*
   每个组件的未知数，即唯一的基函数的数量，对于所选择的FiniteElement（或基础元素）。 
* [0.x.27]*
   对于复杂的FiniteElement对象，这个变量告诉我们哪些未知数在所选组件中实际带有自由度。 
* [0.x.28]*
   评估所需的更新标志。 
* [0.x.29]*
   快速评估路径中特定于映射的更新标志。 
* [0.x.30]*
   慢速评估路径下的FEValues对象。 
* [0.x.31]*
   用于存储快速评估路径的映射所计算的临时数据的数组。 
* [0.x.32]*
   在reinit()中指定的参考点。 
* [0.x.33]

