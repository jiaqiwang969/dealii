include/deal.II-translator/multigrid/mg_transfer_block_0.txt
[0.x.0] MGTransferBase在mg_base.h中定义。

* 
* [0.x.1]*
 实现MGTransferBlock的矩阵生成。
* 这是MGTransfer对象的基类，用于多网格只应用于一个或一些块的方程系统，其中一个[2.x.0]包括由一个基元产生的所有自由度。

* 
* [0.x.2]*
   没有约束矩阵的构造函数。只在不连续的有限元或没有局部细化的情况下使用此构造函数。 
* [0.x.3]*
   带有约束矩阵以及mg_constrained_dofs的构造函数。 
* [0.x.4]*
   这个对象所使用的内存。 
* [0.x.5]*
   实际建立每个层次的延长矩阵。    这个函数只被派生类调用。这些也可以设置成员变量#selected和其他来限制传送矩阵到某些区块。 
* [0.x.6]*
   所选块的标志。    转移运算符只作用于这里有<tt>true</tt>项的块。 
* [0.x.7]*
   多网格矢量的块数。 
* [0.x.8]*
   对于整个块向量的每个块，列出它被映射到多网格向量的哪个块。因为根据#selected，多层次块可能比原始块少，所以有些条目可能是非法的无符号整数。 
* [0.x.9]*
   多级向量的大小。 
* [0.x.10]*
   每个区块的起始索引。 
* [0.x.11]*
   所有级别上每个块的起始索引。 
* [0.x.12]*
   先调用build()函数。 
* [0.x.13]*
   实际的延长矩阵。列指数属于母单元的道夫指数，即粗级别。而行指数属于子单元，即细级别。 
* [0.x.14]*
   用于<tt>copy_to/from_mg</tt>-函数的映射。进入这个向量的索引是（按这个顺序）：全局块号，级别号。数据首先是块内的全局索引，然后是块内的级别索引。 
* [0.x.15]*
   级系统的mg_constrained_dofs。 
* [0.x.16]*
 实现块矩阵和块向量的MGTransferBase接口。
* [2.x.1]该类处于未测试状态。如果你使用它时遇到了问题，请联系Guido Kanschat。
* 除了MGTransferPrebuilt的功能外，操作可以被限制在向量的某些块上。
* 如果选择了限制模式，在转移例程中使用的块向量可能只有选择字段中的[2.x.2]那么多块。
* 请参阅MGTransferBase，了解哪种转移类最适合你的需要。

* 
* [0.x.17]*
   默认构造函数。 
* [0.x.18]*
   解构器。 
* [0.x.19]*
   如果要对块的限制进行不同的加权，则初始化额外的#因素和#内存。 
* [0.x.20]*
   为每一层建立延长矩阵。    这个函数是MGTransferBlockBase中同一函数的前端。 
* [0.x.21]*
   从全局网格上的向量转移到活动自由度的多级向量。特别是，对于全局细化的网格，只有[2.x.3]中最细的层次被填充为[2.x.4]的普通拷贝，其他的层次对象都没有被触动。    对不连续元素的操作如下：在一个活动的网格单元上，全局向量条目被简单地复制到水平向量的相应条目上。然后，这些值被限制到最粗的级别。 
* [0.x.22]*
   从多级向量转移到普通向量。    将数据从多级向量的活动部分复制到全局向量的相应位置。 
* [0.x.23]*
   将一个多级向量添加到一个法向量中。    和前面的函数一样工作，但可能不适合连续元素。 
* [0.x.24]*
   每个区块的可选乘法因子。需要初始化#memory。 
* [0.x.25]*
   如果需要使用#因子的额外乘法，则需要内存池。 
* [0.x.26]*
 MGTransferBase接口的实现，用于块状矩阵和简单向量。该类使用MGTransferBlockBase选择单一块。对Vector对象实现了网格间转移操作，对Vector和BlockVector实现了常规和多网格向量间的复制功能。
* 请参阅MGTransferBase来了解哪一个转移类最适合你的需要。

* 
* [0.x.27]*
   没有约束矩阵的构造函数。只在不连续的有限元或没有局部细化的情况下使用这个构造函数。 
* [0.x.28]*
   带有约束矩阵以及mg_constrained_dofs的构造函数。 
* [0.x.29]*
   解构器。 
* [0.x.30]*
   实际上是为分组的块建立延长矩阵。    这个函数是MGTransferBlockBase中相同函数的前端。     [2.x.5] dof_handler 要使用的DoFHandler。   [2.x.6] selected 应建立转移矩阵的块的编号。 
* [0.x.31]*
   改变选定的区块。小心处理!  
* [0.x.32]*
   将单一块从全局网格上的矢量转移到活动自由度的多级矢量上。特别是，对于一个全局细化的网格，只有[2.x.7]中最细的层次被填充为[2.x.8]的普通拷贝，其他的层次对象都没有被触动。 
* [0.x.33]*
   从多级向量转移到普通向量。    将一个多级向量的活动部分的数据复制到向量的相应位置。 
* [0.x.34]*
   将一个多级向量添加到一个正常向量。    和前面的函数一样工作，但可能不适合连续元素。 
* [0.x.35]*
   从全局网格上的一个向量转移一个块到多级向量。  只有所选块的活动自由度的值被转移。特别是，对于一个全局细化的网格，只有[2.x.9]中最细的层次被填充为[2.x.10]的普通拷贝，所有其他的层次对象都不被触动。 
* [0.x.36]*
   从多级向量转移到普通向量。    将多级向量的活动部分的数据复制到全局BlockVector的相应位置。 
* [0.x.37]*
   将一个多级向量添加到一个正常向量。    和前面的函数一样工作，但可能不适合连续元素。 
* [0.x.38]*
   这个对象使用的内存。 
* [0.x.39]*
   公共函数的实现。 
* [0.x.40]*
   公共函数的实现。 
* [0.x.41]*
   copy_to_mg()的实际实现。 
* [0.x.42]*
   选定的块。 
* [0.x.43]

