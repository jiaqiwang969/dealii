include/deal.II-translator/multigrid/mg_tools_0.txt
[0.x.0]*
 这是在多级三角中操作和处理自由度数量的函数集合。它在目的和功能上与[2.x.0]命名空间相似，但对DoFHandler对象的层次进行操作。更多信息见那里和成员函数的文档。

* 
* [0.x.1]*
   计算多层次方法的行长向量。 
* [0.x.2]*
   计算多级方法的行长向量，对块状耦合进行优化。 
* [0.x.3]*
   写出属于指定[2.x.1]级的矩阵的稀疏性结构。稀疏性模式没有被压缩，所以在创建实际的矩阵之前，你必须自己压缩矩阵，使用[2.x.2] 可选的AffineConstraints参数允许定义水平矩阵的约束，如Dirichlet边界条件。请注意，需要考虑典型层次矩阵上的悬空节点，因为只考虑一个层次。关于参数的更多细节见[2.x.3]。 
* [0.x.4]*
   做一个包括通量的不连续Galerkin方法的稀疏模式。   [2.x.4] [2.x.5] 和 [2.x.6]。  
* [0.x.5]*
   为细化边缘的通量创建稀疏模式。矩阵将精细层次空间[2.x.7]的函数映射到更粗的空间。 make_flux_sparsity_pattern()  
* [0.x.6]*
   这个函数与另一个同名函数的作用相同，但它得到两个额外的系数矩阵。如果在系数矩阵中有一个非零的条目连接它们的相关组件，则只会为两个基函数生成一个矩阵条目。    一个单元中的耦合有一个矩阵，通量中出现的耦合有一个矩阵。 
* [0.x.7]*
   为细化边缘的通量创建稀疏模式。该矩阵将精细层次空间[2.x.8]的一个函数映射到较粗的空间。  这是一个将模式限制在实际需要的元素上的版本。 make_flux_sparsity_pattern()  
* [0.x.8]*
   为多网格计算中使用的interface_in/out矩阵创建稀疏性模式。这些矩阵包含一个条目，代表细化边上的自由度与不在某一级细化边上的自由度的耦合。 
* [0.x.9]*
   计算每个层次上的自由度块。    结果是一个向量，其中包含每个级别的向量，包含每个块的自由度数量（访问是<tt>result[level][block]</tt>）。 
* [0.x.10]*
   在每一级上逐一计算道夫。    结果是一个向量，其中包含每个级别的向量，包含每个组件的道夫数（访问是<tt>result[level][component]</tt>）。 
* [0.x.11]*
   生成一个在域的边界上的自由度的列表，这些自由度应该从矩阵中消除，因为它们将受到Dirichlet边界条件的限制。    这相当于[2.x.9]的多级方法，但由于多级方法没有自己的右手边，作为function_map参数一部分的函数对象所返回的函数值被忽略了。     [2.x.10] <tt>boundary_indices</tt>是一个向量，返回时包含每个层次的自由度的所有索引，这些自由度在function_map参数确定的边界部分。它的长度必须与自由度处理程序对象中的级别数相匹配。    [2.x.11]中以前的内容不会被覆盖，而是被添加到。 
* [0.x.12]*
   与上面的函数相同，但在每个级别上返回一个IndexSet而不是一个[2.x.12] int>。    [2.x.13]中以前的内容不会被覆盖，而是被添加到。 
* [0.x.13]*
   与上面的函数相同，但在每一层上返回一个IndexSet而不是一个[2.x.14] int>，并使用一个[2.x.15] 的boundary_ids作为输入。    以前在[2.x.16]中的内容不会被覆盖，而是添加到。 
* [0.x.14]*
   对于多网格层次结构中的每一层，产生一个IndexSet，表明哪些自由度是沿着这一层的界面到只存在于更粗层的单元。 
* [0.x.15]*
   返回可以作为多重网格计算中最粗层次的最高层次，即层次结构中网格覆盖整个领域的最高层次。这相当于活动网格上一个单元的最小级别。由于每个处理器只有一个网格的局部视图，每个处理器都必须调用这个函数。请注意，这是一个覆盖整个网格的全局最小值，因此每个处理器将返回相同的值。 
* [0.x.16]*
   返回多网格层次的平行分布的不平衡度。理想情况下，这个值等于1（每个处理器在每个层次上拥有相同数量的单元，对于大多数全局细化的网格来说，大约是真的）。大于1的值估计在一个几何多网格v-cycle中，与在一个完全分布的网格层次上的相同计算相比，应该看到的速度下降。    这个函数是Triangulation所有等级之间的MPI集体调用，因此需要从所有等级调用。   
* [2.x.17] 这个函数要求[2.x.18]为真，这可以通过在构造三角结构时设置construct_multigrid_hierarchy标志来控制。 
* [0.x.17]

