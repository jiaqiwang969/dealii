include/deal.II-translator/lac/trilinos_sparse_matrix_0.txt
[0.x.0]*
   Trilinos矩阵的迭代器  
* [0.x.1]*
     异常情况    
* [0.x.2]*
     异常情况    
* [0.x.3]*
     处理常数和非常数访问器对象的指数 对于普通的[2.x.0]，我们将使用一个访问器来处理稀疏模式。对于Trilinos矩阵，这似乎并不那么简单，因此，我们在这里写一个小的基类。   
* [0.x.4]*
       声明容器大小的类型。     
* [0.x.5]*
       构造函数。     
* [0.x.6]*
       这个对象所代表的元素的行数。     
* [0.x.7]*
       这个对象所代表的元素在行中的索引。     
* [0.x.8]*
       这个对象所代表的元素的列号。     
* [0.x.9]*
       指向矩阵对象的指针。这个对象应该被适当的派生类作为常量指针或非常量来处理。为了能够同时实现这两个对象，这里不是常数，所以要小心处理      
* [0.x.10]*
       当前的行数。     
* [0.x.11]*
       当前在行中的索引。     
* [0.x.12]*
       丢弃旧的行缓存（它们可能仍然被其他访问器使用），并为这个访问器目前所指向的行生成新的行缓存。     
* [0.x.13]*
       缓存，我们在这里存储当前行的列索引。这是必要的，因为Trilinos对其矩阵元素的访问相当困难，当我们进入某一行时，一次性复制该行的所有列项比反复向Trilinos索取单个列项要有效得多。这也有一定的意义，因为无论如何，我们很可能会按顺序访问它们。            为了使迭代器/存取器的复制具有可接受的性能，我们为这些条目保留了一个共享指针，以便在必要时有多个存取器可以访问这些数据。     
* [0.x.14]*
       该行的值的缓存。     
* [0.x.15]*
     稀疏矩阵访问器的通用模板。第一个模板参数表示底层数字类型，第二个表示矩阵的常数。        一般的模板没有被实现，只有针对第二个模板参数的两个可能值的特殊化。因此，这里列出的接口只是作为提供的模板，因为doxygen并没有链接这些特殊化。   
* [0.x.16]*
       这个矩阵条目的值。     
* [0.x.17]*
       此矩阵条目的值。     
* [0.x.18]*
     const Accessor的特殊化。   
* [0.x.19]*
       这里要使用的矩阵的类型（包括constness）的类型定义。     
* [0.x.20]*
       构造器。因为我们只使用访问器进行读取访问，所以一个常数矩阵指针就足够了。     
* [0.x.21]*
       复制构造函数，从一个常量或非常量访问器获取到一个常量访问器。     
* [0.x.22]*
       这个矩阵条目的值。     
* [0.x.23]*
     可变访问器的特殊化。   
* [0.x.24]*
         构造函数。       
* [0.x.25]*
         对矩阵数据类型的转换操作。       
* [0.x.26]*
         将我们目前指向的矩阵的元素设置为[2.x.1]。        
* [0.x.27]*
         将[2.x.2]添加到我们目前指向的矩阵元素中。       
* [0.x.28]*
         从我们现在指向的矩阵元素中减去[2.x.3]。       
* [0.x.29]*
         将我们现在指向的矩阵元素乘以[2.x.4]。        
* [0.x.30]*
         用我们现在指向的矩阵的元素除以[2.x.5]。        
* [0.x.31]*
         指向访问器的指针，表示我们目前指向哪个元素。       
* [0.x.32]*
       这里要使用的矩阵的类型（包括常数）的类型定义。     
* [0.x.33]*
       构造函数。因为我们只使用访问器进行读取访问，所以一个常数矩阵指针就足够了。     
* [0.x.34]*
       这个矩阵条目的值。     
* [0.x.35]*
     这个类作为一个迭代器，在特里诺斯矩阵的元素上行走。这个类的实现与PETSc矩阵的实现类似。        请注意，Trilinos以升序的方式存储每一行的元素。这与deal.II稀疏矩阵风格相反，在这种风格中，对角线元素（如果存在的话）被存储在所有其他数值之前，而在PETSc稀疏矩阵中，人们无法保证元素的一定顺序。       
* [2.x.6]     
* [0.x.36]*
       声明容器大小的类型。     
* [0.x.37]*
       为我们要操作的矩阵类型（包括constness）提供类型定义。     
* [0.x.38]*
       构造函数。在矩阵[2.x.7]中创建一个迭代器，用于给定行和其中的索引。     
* [0.x.39]*
       复制构造函数，可选择改变常态。     
* [0.x.40]*
       前缀增量。     
* [0.x.41]*
       后缀增量。     
* [0.x.42]*
       撤消运算符。     
* [0.x.43]*
       解除引用操作符。     
* [0.x.44]*
       比较。真，如果两个迭代器都指向同一个矩阵位置。     
* [0.x.45]*
       <tt>==</tt>的倒数。     
* [0.x.46]*
       比较运算符。如果第一行数字较小，或者行数字相等且第一个索引较小，则结果为真。     
* [0.x.47]*
       比较运算符。与前一个运算符相反。     
* [0.x.48]*
       异常情况      
* [0.x.49]*
       存储一个访问器类的对象。     
* [0.x.50]*
   这个类实现了一个包装器，用于使用Trilinos分布式稀疏矩阵类Epetra_FECrsMatrix。这正是我们一直在处理的那种矩阵
* 
* - 我们很可能从一些装配过程中得到它，其中不属于本地的条目也可能需要被写入，因此需要转发给所有者过程。 这个类被设计用来在分布式内存架构中使用，底部有一个MPI编译器，但也同样适用于串行进程。  该类工作的唯一要求是，Trilinos已经安装了与生成deal.II相同的编译器。    这个类的接口是以deal.II中现有的SparseMatrix类为模型的。它有几乎相同的成员函数，而且通常是可以交换的。然而，由于Trilinos只支持单一的标量类型（double），所以它没有模板化，只对double起作用。    请注意，Trilinos只保证在矩阵装配后调用了函数[2.x.8]的情况下，操作才会达到你的期望。  因此，你需要在实际使用矩阵之前调用[2.x.9]。这也会调用[2.x.10]，通过丢弃未使用的元素来压缩稀疏矩阵的存储格式。  不过，Trilinos允许在调用这些函数后继续组装矩阵。    [1.x.0] 当从共享内存中的几个线程向Trilinos矩阵写入时，必须记住几件事，因为这个类中没有内置锁来防止数据竞赛。在同一时间内同时访问同一矩阵行会导致数据竞赛，用户必须明确避免。然而，在以下三个条件下，可以从几个线程同时访问矩阵的[1.x.1]行。   [2.x.11] [2.x.12] 矩阵只使用一个MPI进程。   [2.x.13] 矩阵已经用reinit()方法进行了初始化，并采用了DynamicSparsityPattern（包括本地相关行的集合，即汇编程序可能写入的行）。   [2.x.14] 矩阵已经从一个[2.x.15]对象中初始化，该对象又被reinit函数初始化，指定了三个索引集，一个用于行，一个用于列，以及更大的[2.x.16]可写行集，操作是一个加法。在未来的某个时间点，Trilinos的支持可能足够完整，以至于从一个已经被类似于[2.x.18]的函数填充的[2.x.17]初始化，总是会产生一个允许多个进程写入同一矩阵行的矩阵。  然而，Trilinos至少在11.12版本之前并不正确支持这一功能。   [2.x.19] 请注意，[2.x.20]的所有其他reinit方法和构造函数都会导致矩阵需要按需分配非进程条目，这就破坏了线程安全。当然，对块状Trilinos稀疏模式和块状矩阵使用各自的reinit方法也会导致线程安全。   
* [2.x.21]   
* [2.x.22]   
* [0.x.51]*
     声明容器大小的类型。   
* [0.x.52]*
     异常情况    
* [0.x.53]*
     一个描述这个类在运行时行为方面的一些特征的结构。其他一些以一个或其他矩阵类作为其模板参数的类（如块状矩阵类），可以根据这个类中的变量来调整其行为。   
* [0.x.54]*
       对该矩阵的单个元素进行零的添加是安全的。     
* [0.x.55]*
     为迭代器类声明一个别名。   
* [0.x.56]*
     为常量迭代器类声明一个别名。   
* [0.x.57]*
     为所有其他的容器类声明一个别名，以示类比。   
* [0.x.58]*
      [2.x.23] 构造函数和初始化。   
* [0.x.59]*
     默认构造函数。生成一个空的（零大小）矩阵。   
* [0.x.60]*
     生成一个完全存储在本地的矩阵，有#m行和#n列。        每行的列条目数被指定为最大条目数参数。   
* [0.x.61]*
     生成一个完全存储在本地的矩阵，有#m行和#n列。        向量<tt>n_entries_per_row</tt>指定了每一行的条目数。   
* [0.x.62]*
     从Trilinos稀疏模式对象生成一个矩阵。   
* [0.x.63]*
     移动构造函数。通过窃取内部数据创建一个新的稀疏矩阵。   
* [0.x.64]*
     复制构造函数被删除。   
* [0.x.65]*
     operator=被删除。   
* [0.x.66]*
     解构器。做成了虚拟，这样就可以使用指向这个类的指针。   
* [0.x.67]*
     这个函数用deal.II稀疏模式初始化Trilinos矩阵，也就是说，它使Trilinos Epetra矩阵根据稀疏模式知道非零项的位置。这个函数是为了在串行程序中使用，不需要指定矩阵如何在不同处理器之间分配。这个函数也可以在%并行中使用，但建议使用Epetra_Map手动指定矩阵的%并行分区。    当以%并行方式运行时，目前需要每个处理器都持有sparsity_pattern结构，因为每个处理器都要设置其行数。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.68]*
     这个函数从一个（可能是分布式的）Trilinos稀疏模式重新初始化Trilinos稀疏矩阵。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。        如果你想从几个线程写到矩阵并使用MPI，你需要使用这个reinit方法，并使用已经创建的明确说明可写行的稀疏度模式。在所有其他情况下，你不能把MPI和多线程写进矩阵中。   
* [0.x.69]*
     这个函数将[2.x.24]的布局复制到调用矩阵中。值不会被复制，但你可以使用copy_from()来实现。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.70]*
     这个函数使用deal.II稀疏矩阵和存储在其中的条目来初始化Trilinos矩阵。它使用一个阈值，只复制模数大于阈值的元素（所以deal.II矩阵中的零可以被过滤掉）。        可选参数<tt>copy_values</tt>决定是只使用输入矩阵的稀疏结构，还是也要复制矩阵的条目。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。       
* [2.x.25] 如果在最后一个参数中给出了不同的稀疏模式（即与第一个参数中给出的稀疏矩阵中使用的模式不同），那么生成的特里诺斯矩阵将具有如此给出的稀疏模式。当然，这也意味着给定的矩阵中所有不属于这个单独的稀疏模式的条目实际上将被删除。   
* [0.x.71]*
     这个reinit函数将一个Trilinos Epetra_CrsMatrix作为输入，并复制其稀疏性模式。如果有此要求，甚至连内容（值）也将被复制。   
* [0.x.72]*
      [2.x.26] 使用IndexSet描述的构造器和初始化    
* [0.x.73]*
     使用一个IndexSet和一个MPI通信器的构造器来描述%并行分区。参数[2.x.27]设置将被分配的每一行中的非零条目的数量。注意，这个数字不需要精确，甚至允许实际的矩阵结构有比构造函数中指定的更多的非零条目。但是在这里提供良好的估计仍然是有利的，因为这将大大增加矩阵设置的性能。然而，对矩阵-向量乘积的性能没有影响，因为Trilinos在使用前（在compress()步骤中）重新组织了矩阵内存。   
* [0.x.74]*
     与之前相同，但现在单独设置每个矩阵行中的非零的数量。因为在这种情况下，我们确切地知道矩阵中的元素数量，所以我们已经可以分配合适的内存数量，这使得创建过程（包括通过各自的[2.x.28]调用插入非零元素）大大加快。   
* [0.x.75]*
     这个构造函数与上面的构造函数类似，但现在它为行和列采取了两个不同的 IndexSet 分区。这个接口是用来生成矩形矩阵的，其中第一个索引集描述了与矩阵行相关的自由度的平行分区，第二个索引集描述了矩阵列的分区。第二个索引集指定了这个矩阵要与之相乘的向量的分区，而不是实际出现在矩阵中的元素的分布。        参数[2.x.29]定义了将为每一行分配多少内存。这个数字不需要准确，因为结构会在compress()调用中被重组。   
* [0.x.76]*
     这个构造函数与上面的构造函数类似，但它现在需要两个不同的Epetra映射来表示行和列。这个接口是用来生成矩形矩阵的，其中一个映射指定了与矩阵行相关的自由度的平行分布%，第二个映射指定了与矩阵中的列相关的自由度的平行分布%。第二个映射也为矩阵向量乘积中的内部排列提供信息（即这个矩阵要与之相乘的向量分布），但不用于列的分布&ndash；相反，在任何情况下，一行的所有列元素都存储在同一个处理器上。向量<tt>n_entries_per_row</tt>指定了新生成的矩阵中每一行的条目数。   
* [0.x.77]*
     这个函数是根据指定的稀疏性_模式初始化Tridinos Epetra矩阵，同时根据用户提供的索引集和%并行通信器，将矩阵的行数重新分配给不同进程。在遵循教程程序风格的程序中，这个函数（以及对矩形矩阵的相应调用）是初始化矩阵大小、其在MPI进程中的分布（如果在%parallel中运行）以及非零元素位置的自然方式。Trilinos在内部存储了稀疏模式，所以在这个调用之后就不再需要它了，与deal.II自己的对象相反。可选的参数[2.x.30]可用于重新初始化未完全构建的稀疏度模式。这个功能只对动态稀疏模式类型的输入稀疏模式实现。如果没有设置该标志，每个处理器只是设置疏散度模式中属于其行的元素。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.78]*
     这个函数类似于上面的另一个初始化函数，但现在也根据两个用户提供的索引集重新分配矩阵的行和列。 要用于矩形矩阵。可选的参数[2.x.31]可用于用未完全构建的稀疏模式进行重新初始化。这个功能只对动态稀疏模式类型的输入稀疏模式实现。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.79]*
     这个函数使用deal.II稀疏矩阵和存储在其中的条目来初始化Trilinos矩阵。它使用一个阈值，只复制模数大于阈值的元素（所以deal.II矩阵中的零可以被过滤掉）。与其他带有deal.II稀疏矩阵参数的reinit函数不同的是，该函数采用用户指定的%并行分区，而不是内部生成的。        可选参数<tt>copy_values</tt>决定是只使用输入矩阵的稀疏结构还是也要复制矩阵条目。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.80]*
     这个函数类似于上面的另一个初始化函数与deal.II稀疏矩阵输入，但现在需要矩阵的行和列的索引集。选用于矩形矩阵。        可选参数<tt>copy_values</tt>决定是只使用输入矩阵的稀疏结构还是也复制矩阵条目。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.81]*
      [2.x.32] 矩阵的信息    
* [0.x.82]*
     返回这个矩阵的行数。   
* [0.x.83]*
     返回此矩阵中的列数。   
* [0.x.84]*
     返回矩阵的本地维度，即存储在当前MPI进程中的行数。对于顺序矩阵，这个数字与m()相同，但对于%并行矩阵，这个数字可能更小。        要想知道哪些元素被存储在本地，可以使用local_range()。   
* [0.x.85]*
     返回一对指数，表明该矩阵的哪些行是本地存储的。第一个数字是存储的第一行的索引，第二个数字是本地存储的最后一行之后的那一行的索引。如果这是一个连续的矩阵，那么结果将是一对(0,m())，否则将是一对(i,i+n)，其中<tt>n=local_size()</tt>。   
* [0.x.86]*
     返回[2.x.33]是否在本地范围内，另见local_range()。   
* [0.x.87]*
     返回这个矩阵的非零元素的总数（所有MPI进程的总和）。   
* [0.x.88]*
     特定行中的条目数。   
* [0.x.89]*
     返回矩阵的状态，即在需要数据交换的操作之后是否需要调用compress()。当方法set()被调用时，也需要调用compress()（即使在串行工作时）。   
* [0.x.90]*
     确定这个对象的内存消耗（以字节为单位）的估计值。注意，如果在基于MPI的程序中调用这个方法，则只返回当前处理器上保留的内存。   
* [0.x.91]*
     返回与该矩阵一起使用的MPI通信器对象。   
* [0.x.92]*
      [2.x.34] 修改条目    
* [0.x.93]*
     这个操作符将一个标量分配给一个矩阵。因为这通常没有什么意义（我们应该把所有的矩阵条目都设置为这个值吗？ 仅仅是稀疏模式的非零条目？），只有当要分配的实际值为零时，才允许这个操作。这个操作符的存在只是为了允许明显的符号<tt>matrix=0</tt>，它将矩阵的所有元素设置为零，但保留了之前使用的稀疏模式。   
* [0.x.94]*
     释放所有内存并返回到与调用默认构造函数后相同的状态。        这是一个集体操作，需要在所有处理器上调用，以避免出现死锁。   
* [0.x.95]*
     这个命令做两件事。     [2.x.35] [2.x.36] 如果矩阵在初始化时没有稀疏模式，则使用set()命令手动添加元素。当这个过程完成后，对compress()的调用重组了内部数据结构（稀疏模式），这样就可以在矩阵-向量产品中快速访问数据。     [2.x.37] 如果矩阵结构已经被固定（通过初始化稀疏模式或在设置阶段调用compress()），该命令将进行数据的%并行交换。    当我们在一个以上的（MPI）进程上进行装配时，这是必要的，因为这时一些非本地的行数据会积累在属于当前的处理器元素的节点上，但实际上是由另一个处理器持有的。这个命令通常在所有元素都被遍历后调用。     [2.x.38] 在这两种情况下，这个函数都会压缩数据结构，并允许产生的矩阵用于所有其他操作，如矩阵-向量乘积。这是一个集体操作，也就是说，在%并行使用时，需要在所有处理器上运行。        更多信息见[2.x.39]"压缩分布式对象"。   
* [0.x.96]*
     将元素（[1.x.2]）设置为[2.x.40] 只要compress()没有被调用，这个函数就能够在矩阵中插入新的元素，所以稀疏模式将被扩展。当compress()第一次被调用时（或者在矩阵被初始化为稀疏模式的情况下），不能添加新的元素，在未被初始化的位置插入元素会引发异常。        如果矩阵是在没有稀疏模式的情况下构建的，并且新的矩阵条目是按需添加的，请注意底层Epetra_FECrsMatrix数据结构施加的以下行为。    如果同一个矩阵条目被多次插入，那么即使[2.x.41]被指定为compress()的参数，矩阵条目也会在调用compress()时被添加（因为Epetra不会在最终调用compress()前跟踪同一个条目的值）。如果你不能确保矩阵条目只被设置一次，那么在插入元素之前，用稀疏模式初始化矩阵，固定矩阵结构。   
* [0.x.97]*
     将FullMatrix<double>中给出的所有元素设置到<tt>indices</tt>给出的稀疏矩阵位置。换句话说，这个函数将<tt>full_matrix</tt>中的元素写入调用的矩阵中，对矩阵的行和列都使用<tt>indices</tt>指定的本地到全球的索引。这个函数假设一个二次稀疏矩阵和一个二次全矩阵，这是FE计算中的通常情况。        只要没有调用compress()，这个函数就能够在矩阵中插入新的元素，所以稀疏模式将被扩展。在第一次调用compress()后，或者矩阵被初始化为稀疏模式后，扩展稀疏模式就不再可能了，在未初始化的位置插入元素会产生一个异常。        可选参数<tt>elide_zero_values</tt>可以用来指定零值是否应该被插入，或者应该被过滤掉。默认值是<tt>false</tt>，也就是说，即使是零值也要插入/替换。        对于矩阵的构建没有稀疏模式，新的矩阵条目是按需添加的情况，请注意底层Epetra_FECrsMatrix数据结构施加的以下行为。    如果同一个矩阵条目被多次插入，那么即使[2.x.42]被指定为compress()的参数，矩阵条目也会在调用compress()时被添加（因为Epetra不会在最终调用compress()前跟踪同一个条目的值）。如果你不能确保矩阵条目只被设置一次，那么在插入元素之前，用稀疏模式初始化矩阵，固定矩阵结构。   
* [0.x.98]*
     与之前的功能相同，但现在包括了使用矩形full_matrices的可能性，以及在行和列上分别使用不同的局部到全局的索引。   
* [0.x.99]*
     将矩阵指定行中的几个元素与<tt>col_indices</tt>给出的列索引设置为相应的值。        只要没有调用compress()，这个函数就能够在矩阵中插入新的元素，所以稀疏模式将被扩展。在第一次调用compress()后，或者矩阵被初始化为稀疏模式后，扩展稀疏模式就不再可能了，在未初始化的位置插入元素将引发异常。        可选参数<tt>elide_zero_values</tt>可以用来指定零值是否应该被插入，或者应该被过滤掉。默认值是<tt>false</tt>，也就是说，即使是零值也要插入/替换。        对于矩阵的构建没有稀疏模式，新的矩阵条目是按需添加的情况，请注意底层Epetra_FECrsMatrix数据结构施加的以下行为。    如果同一个矩阵条目被多次插入，那么即使[2.x.43]被指定为compress()的参数，矩阵条目也会在调用compress()时被添加（因为Epetra不会在最终调用compress()前跟踪同一条目的值）。如果你不能确保矩阵条目只被设置一次，那么在插入元素之前，用稀疏模式初始化矩阵，固定矩阵结构。   
* [0.x.100]*
     将几个元素设置为<tt>values</tt>所给的值，在稀疏矩阵的col_indices所给的列中的某一行。        只要没有调用compress()，这个函数就能够在矩阵中插入新的元素，所以稀疏模式将被扩展。在第一次调用compress()后，或者矩阵被初始化为稀疏模式后，扩展稀疏模式就不再可能了，在未初始化的位置插入元素将引发异常。        可选参数<tt>elide_zero_values</tt>可以用来指定零值是否应该被插入，或者应该被过滤掉。默认值是<tt>false</tt>，也就是说，即使是零值也要插入/替换。        对于矩阵的构建没有稀疏模式，新的矩阵条目是按需添加的情况，请注意底层Epetra_FECrsMatrix数据结构施加的以下行为。    如果同一个矩阵条目被多次插入，那么即使[2.x.44]被指定为compress()的参数，矩阵条目也会在调用compress()时被添加（因为Epetra不会在最终调用compress()前跟踪同一个条目的值）。如果你不能确保矩阵条目只被设置一次，那么在插入元素之前，用稀疏模式初始化矩阵，固定矩阵结构。   
* [0.x.101]*
     在元素（[1.x.3]）上添加[2.x.45]。        就像deal.II SparseMatrix<Number>类中的相应调用一样（但与基于PETSc的矩阵的情况不同），如果稀疏模式中不存在一个条目，这个函数会抛出一个异常。    此外，如果<tt>value</tt>不是一个有限的数字，也会抛出一个异常。   
* [0.x.102]*
     将FullMatrix<double>中给出的所有元素添加到由<tt>indices</tt>给出的稀疏矩阵位置。换句话说，这个函数将<tt>full_matrix</tt>中的元素添加到调用矩阵的相应条目中，使用<tt>indices</tt>为矩阵的行和列指定的本地到全球索引。这个函数假设了一个二次稀疏矩阵和一个二次全矩阵，这是FE计算中的通常情况。        就像deal.II SparseMatrix<Number>类中的相应调用一样（但与基于PETSc的矩阵的情况不同），如果稀疏模式中不存在一个条目，这个函数会抛出一个异常。        可选参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要添加零值，还是要过滤掉这些零值，只添加非零数据。默认值是<tt>true</tt>，也就是说，零值不会被添加到矩阵中。   
* [0.x.103]*
     与之前的函数相同，但现在包括了使用矩形full_matrices的可能性，以及在行和列上分别使用不同的本地到全球索引。   
* [0.x.104]*
     将矩阵的指定行中的几个元素与<tt>col_indices</tt>给出的列索引设置为相应的值。        就像deal.II SparseMatrix<Number>类中的相应调用一样（但与基于PETSc的矩阵的情况不同），如果稀疏模式中不存在一个条目，这个函数会抛出一个异常。        可选参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要添加零值，还是要过滤掉这些零值，只添加非零数据。默认值是<tt>true</tt>，也就是说，零值不会被添加到矩阵中。   
* [0.x.105]*
     在给定的全局矩阵行中，在稀疏矩阵中由col_indices指定的列中添加一个由<tt>values</tt>给出的数值阵列。        就像deal.II SparseMatrix<Number>类中的相应调用一样（但与基于PETSc的矩阵的情况不同），如果在稀疏模式中不存在条目，这个函数会抛出一个异常。        可选参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要添加零值，还是要过滤掉这些零值，只添加非零数据。默认值是<tt>true</tt>，也就是说，零值不会被添加到矩阵中。   
* [0.x.106]*
     将整个矩阵乘以一个固定系数。   
* [0.x.107]*
     用整个矩阵除以一个固定系数。   
* [0.x.108]*
     复制给定的（Trilinos）矩阵（稀疏模式和条目）。   
* [0.x.109]*
     将<tt>matrix</tt>按<tt>factor</tt>的比例添加到该矩阵中，即<tt>factor*matrix</tt>的矩阵被添加到<tt>this</tt>。如果调用矩阵的稀疏性模式不包含输入矩阵的稀疏性模式中的所有元素，这个函数将抛出一个异常。   
* [0.x.110]*
     将此<tt>行</tt>中的所有元素设置为零，将其删除。这个函数并不修改分配的非零条目的数量，它只是将这些条目设置为零。        这个操作用于消除约束（例如由于挂起的节点），并确保我们可以将这个修改写入矩阵，而不必从矩阵中读取条目（例如非零元素的位置）&mdash；如果没有这个操作，消除%并行矩阵的约束是一个相当复杂的程序。        第二个参数可以用来将该行的对角线条目设置为一个不同于零的值。默认是将其设置为零。       
* [2.x.46] 如果矩阵是使用MPI在多个处理器之间并行存储的，这个函数只触及本地存储的行，而简单地忽略所有其他行的索引。此外，在并行计算的背景下，如果你清除了某一行，而其他处理器对同一行仍有待处理的写入或添加，你会陷入麻烦。换句话说，如果另一个处理器仍然想向某行的某个元素添加东西，而你调用这个函数将该行清零，那么你下次调用compress()时可能会将远程值添加到你刚刚创建的零上。因此，你要在对矩阵进行最后一次修改后，在开始清空行之前调用compress()。   
* [0.x.111]*
     与clear_row()相同，不同的是，它一次对若干行进行操作。        第二个参数可以用来将所有被清除的行的对角线项设置为不同于0的内容。请注意，所有这些对角线项都得到相同的值
* 
* - 如果你想要不同的对角线条目的值，你必须手动设置它们。       
* [2.x.47] 如果矩阵是用MPI在多个处理器之间并行存储的，这个函数只触及本地存储的行，而简单地忽略所有其他行的索引。此外，在并行计算的背景下，如果你清除了某一行，而其他处理器对同一行仍有待处理的写入或添加，你会陷入麻烦。换句话说，如果另一个处理器仍然想向某行的某个元素添加东西，而你调用这个函数将该行清零，那么你下次调用compress()时可能会将远程值添加到你刚刚创建的零上。因此，你要在对矩阵进行最后一次修改后，在开始清空行之前调用compress()。   
* [0.x.112]*
     设置一个内部标志，使矩阵进行的所有操作，即乘法，都以转置的顺序进行。然而，这并不能直接将矩阵重塑为转置的形式，所以在使用这个标志时应该注意。       
* [2.x.48]连续调用此函数的任何偶数次，都将使对象返回到其原始状态。   
* [0.x.113]*
      [2.x.49] 入口访问    
* [0.x.114]*
     返回条目的值（[1.x.4]）。 这可能是一个昂贵的操作，你应该始终注意在哪里调用这个函数。    正如在deal.II稀疏矩阵类中，如果相应的条目不存在于该类的稀疏模式中，我们会抛出一个异常，这是从Trilinos中请求的。此外，如果要求的元素没有保存在调用过程中，也会抛出一个异常。   
* [0.x.115]*
     返回矩阵条目的值（[1.x.5]）。如果这个条目在稀疏模式中不存在，那么将返回0。虽然这在某些情况下可能很方便，但请注意，由于没有使用矩阵的稀疏性，写出的算法与最优解相比很简单，很慢。 另一方面，如果你想确定条目存在，你应该使用operator()来代替。        如果你有一个并行的矩阵，这个函数中缺乏错误检查，也会产生令人惊讶的结果。在这种情况下，你从这个函数中得到一个零的结果，并不意味着该条目在稀疏模式中不存在，或者它存在但数值为零。相反，也可能是它根本就没有存储在当前的处理器上；在这种情况下，它可能被存储在另一个处理器上，而且可能是以非零值存储的。   
* [0.x.116]*
     返回第[1.x.6]行的主对角线元素。如果矩阵不是二次方的，这个函数会抛出一个错误，如果[1.x.7]不是本地矩阵的元素，它也会抛出一个错误。 参见trilinos_sparse_matrix.cc中的注释。   
* [0.x.117]*
      [2.x.50] 乘法运算    
* [0.x.118]*
     矩阵-向量乘法：让[1.x.8]与[1.x.9]为该矩阵。        源和目的不能是同一个向量。        这个函数可以用几种类型的向量对象来调用，即[2.x.51]可以是[2.x.52] [2.x.53] [2.x.54] [2.x.55] [2.x.56] [2.x.57] [2.x.58] [2.x.59] Vector<double>，[2.x.60] [2.x.61] [2.x.62] 当使用类型为[2.x.63 ]的向量[2.x.64]必须用用于矩阵行索引的相同IndexSet进行初始化，向量[2.x.65]必须用用于矩阵列索引的相同IndexSet进行初始化。        当矩阵对象和向量对象的底层数字类型相同时，这个函数将被调用。    尽管看起来很复杂，但其返回类型只是 "void"。        如果是一个串行向量，这个函数只有在一个处理器上运行时才会起作用，因为矩阵对象本身就是分布的。否则，会产生一个异常。   
* [0.x.119]*
     与上面的函数相同，适用于矩阵对象的底层数字类型和向量对象的数字类型不一致的情况。    这种情况没有实现。调用它将导致一个运行时错误。    尽管看起来很复杂，但其返回类型只是 "void"。   
* [0.x.120]*
     矩阵-向量乘法：让[1.x.10]与[1.x.11]是这个矩阵。这个函数与vmult()的作用相同，但需要转置的矩阵。        源和目的不能是同一个向量。        这个函数可以用几种类型的向量对象调用，见vmult()中关于[2.x.66]的讨论。        当矩阵对象的底层数字类型和向量对象的底层数字类型相同时，该函数将被调用。    尽管看起来很复杂，但其返回类型只是 "void"。   
* [0.x.121]*
     与上面的函数相同，适用于矩阵对象的底层数字类型和向量对象的底层数字类型不一致的情况。    这种情况没有实现。调用它将导致一个运行时错误。    尽管看起来很复杂，但其返回类型只是 "void"。   
* [0.x.122]*
     添加矩阵-向量的乘法。在[1.x.13]上添加[1.x.12]，[1.x.14]为该矩阵。        源和目的不能是同一个向量。        这个函数可以用几种类型的向量对象调用，见vmult()中关于[2.x.67]的讨论。   
* [0.x.123]*
     添加矩阵-向量的乘法。将[1.x.15]加到[1.x.16]，[1.x.17]是这个矩阵。这个函数的作用与vmult_add()相同，但取的是转置的矩阵。        来源和目的地不能是同一个向量。        这个函数可以用几种类型的向量对象调用，见vmult()中关于[2.x.68]的讨论。   
* [0.x.124]*
     返回向量[2.x.69]相对于该矩阵引起的规范的平方，即[2.x.70] 。这很有用，例如在有限元背景下，一个函数的[2.x.71]规范等于相对于代表有限元函数节点值的向量的质量矩阵的矩阵规范。        很明显，对于这个操作，矩阵需要是二次的。        这个函数的实现没有deal.II中使用的[2.x.72]类（即原始的，而不是Trilinos包装类）的效率高，因为Trilinos不支持这个操作，需要一个临时向量。        矢量必须用矩阵初始化的相同IndexSet进行初始化。        如果是一个本地化的Vector，这个函数只有在一个处理器上运行时才会起作用，因为矩阵对象本身就是分布的。否则，将抛出一个异常。   
* [0.x.125]*
     计算矩阵标量乘积 [2.x.73] 。        这个函数的实现没有deal.II中使用的[2.x.74]类（即原始的，而不是Trilinos包装类）的效率高，因为Trilinos不支持这个操作，需要一个临时矢量。        矢量[2.x.75]必须用用于矩阵行索引的相同IndexSet进行初始化，矢量[2.x.76]必须用用于矩阵列索引的相同IndexSet进行初始化。        如果是一个本地化的Vector，这个函数只有在一个处理器上运行时才会起作用，因为矩阵对象本身是分布式的。否则，将抛出一个异常。        这个函数只对方形矩阵实现。   
* [0.x.126]*
     计算方程[1.x.18]的残差，其中残差被定义为[1.x.19]。将残差写入[2.x.77] 返回残差向量的[1.x.20]准则。        源[1.x.21]和目的[1.x.22]不能是同一个向量。        向量[2.x.78]和[2.x.79]必须用用于矩阵行索引的相同IndexSet进行初始化，向量[2.x.80]必须用用于矩阵列索引的相同IndexSet进行初始化。        如果是一个本地化的Vector，这个函数只有在一个处理器上运行时才会起作用，因为矩阵对象本身是分布式的。否则，将抛出一个异常。   
* [0.x.127]*
     执行矩阵-矩阵乘法<tt>C = A B</tt>，或者，如果给出一个可选的矢量参数，<tt>C = A diag(V) B</tt>，其中<tt>diag(V)</tt>定义了一个带有矢量条目的对角矩阵。        这个函数假定调用矩阵<tt>A</tt>和<tt>B</tt>的大小是兼容的。<tt>C</tt>的大小将在本函数中设置。        矩阵C的内容和稀疏模式将被这个函数改变，所以要确保稀疏模式没有在你的程序中其他地方使用。这是一个昂贵的操作，所以在使用这个函数之前请三思。   
* [0.x.128]*
     用<tt>this</tt>的转置进行矩阵-矩阵相乘，即<tt>C = A<sup>T</sup> B</tt>，或者，如果给出了可选的矢量参数，<tt>C = A<sup>T</sup> diag(V) B</tt>，其中<tt>diag(V)</tt>定义了一个带有矢量项的对角矩阵。        这个函数假定调用矩阵<tt>A</tt>和<tt>B</tt>的大小兼容。<tt>C</tt>的大小将在本函数中设置。        矩阵C的内容和稀疏模式将被这个函数改变，所以要确保稀疏模式没有在你的程序中其他地方使用。这是一个昂贵的操作，所以在使用这个函数之前请三思。   
* [0.x.129]*
      [2.x.81] 矩阵规范    
* [0.x.130]*
     返回矩阵的[1.x.23]<sub>1</sub>规范，即[2.x.82] ，（最大列之和）。 这是自然的矩阵准则，与向量的l1准则兼容，即[2.x.83] 。 (参看Haemmerlin-Hoffmann: Numerische Mathematik)    
* [0.x.131]*
     返回矩阵的linfty-norm，即[2.x.84] , (行的最大和)。 这是一个自然的矩阵规范，与向量的linfty-norm兼容，即[2.x.85] 。 (参看Haemmerlin-Hoffmann: Numerische Mathematik)    
* [0.x.132]*
     返回矩阵的frobenius norm，即矩阵中所有条目的平方之和的平方根。   
* [0.x.133]*
      [2.x.86] 访问底层Trilinos数据    
* [0.x.134]*
     返回对底层Trilinos Epetra_CrsMatrix数据的一个常量引用。   
* [0.x.135]*
     返回一个对底层Trilinos Epetra_CrsGraph数据的常量引用，该数据存储了矩阵的稀疏性模式。   
* [0.x.136]*
      [2.x.87] 分割器    
* [0.x.137]*
     返回该矩阵的域空间的分区，即该矩阵要与之相乘的向量的分区。   
* [0.x.138]*
     返回该矩阵的范围空间的划分，即由矩阵-向量乘积产生的向量的划分。   
* [0.x.139]*
      [2.x.88] 迭代器    
* [0.x.140]*
     返回一个指向矩阵的第一个元素的迭代器。        迭代器在每一行中访问的元素是按照Trilinos的存储方式来排序的，尽管实现上保证了一行的所有元素在下一行的元素之前被访问。如果你的算法依赖于访问一行中的元素，你将需要咨询Trilinos文档，了解它存储数据的顺序。然而，如果你对元素进行迭代，依靠接收元素的顺序通常不是一个好的和长期稳定的想法。        当你遍历一个并行矩阵的元素时，你将只能访问本地拥有的行。(你也可以访问其他行，但它们看起来是空的。)在这种情况下，你可能想调用begin()函数，该函数将行作为一个参数，以限制要循环的元素范围。   
* [0.x.141]*
     像上面的函数一样，但对于非恒定矩阵。   
* [0.x.142]*
     返回一个迭代器，指向这个矩阵的最后一个以上的元素。   
* [0.x.143]*
     像上面的函数一样，但对于非静态矩阵。   
* [0.x.144]*
     返回一个指向行[2.x.89]第一个元素的迭代器 注意，如果给定的行是空的，即不包含任何非零条目，那么这个函数返回的迭代器就等于<tt>end(r)</tt>。在这种情况下，如果行[2.x.90]和下面的任何一行都不包含任何非零条目，那么返回的迭代器可能无法被解除引用。        迭代器在每一行中访问的元素是按照Trilinos的存储方式排序的，尽管实现上保证了一行的所有元素在下一行的元素之前被访问。如果你的算法依赖于访问一行中的元素，你将需要咨询Trilinos文档，了解它存储数据的顺序。然而，如果你对元素进行迭代，依靠接收元素的顺序通常不是一个好的和长期稳定的想法。       
* [2.x.91] 当你访问一个并行矩阵的元素时，你只能访问实际存储在本地的行的元素。(你也可以访问其他行，但它们看起来是空的。)即使如此，如果另一个处理器后来写进或增加了存储在当前处理器上的矩阵元素，那么你仍然会看到这个条目的旧值，除非你在远程处理器上修改矩阵元素和在当前处理器上访问它之间调用compress()。更多信息请参见compress()函数的文档。   
* [0.x.145]*
     像上面的函数一样，但是对于非恒定矩阵。   
* [0.x.146]*
     返回一个指向第[2.x.92]行最后一个元素的迭代器，如果第[2.x.93]行之后没有任何条目，则指向整个稀疏模式的末端。        请注意，结束迭代器不一定是可被解读的。特别是如果它是一个矩阵的最后一行的结束迭代器，情况更是如此。   
* [0.x.147]*
     像上面的函数一样，但是对于非恒定矩阵。   
* [0.x.148]*
      [2.x.94] 输入/输出    
* [0.x.149]*
     抽象的Trilinos对象，帮助以ASCII格式查看其他Trilinos对象。目前这个功能还没有实现。 TODO：没有实现。   
* [0.x.150]*
     打印矩阵到给定的流中，使用格式<tt>(line,col) value</tt>，即每行一个非零的矩阵条目。可选的标志以Trilinos风格输出稀疏模式，在打印到流中时，数据根据处理器编号进行排序，以及矩阵的摘要，如全局大小。   
* [0.x.151]*
      [2.x.95] 异常情况    
* [0.x.152]*
     异常情况    
* [0.x.153]*
     异常情况    
* [0.x.154]*
     异常情况    
* [0.x.155]*
     异常情况    
* [0.x.156]*
     异常情况    
* [0.x.157]*
     异常情况    
* [0.x.158]*
     对于某些矩阵存储格式，特别是PETSc分布式块矩阵，对单个元素的设置和添加操作不能自由混合。相反，当我们想从设置元素切换到添加元素时，我们必须同步操作。 BlockMatrixBase通过为每个块调用这个辅助函数来自动同步访问。 这个函数确保矩阵处于一个允许添加元素的状态；如果它之前已经处于这个状态，那么这个函数就不会做任何事情。   
* [0.x.159]*
     与prepare_add()相同，但如果该类中的元素表示法需要这样的操作，则为设置元素准备矩阵。   
* [0.x.160]*
     指向用户提供的矩阵列的Epetra Trilinos映射的指针，该映射将矩阵的一部分分配给各个进程。   
* [0.x.161]*
     Trilinos中的一个稀疏矩阵对象，用于基于有限元的问题，允许组装成非局部元素。 实际的类型是稀疏矩阵，在构造函数中设置。   
* [0.x.162]*
     Trilinos中的一个稀疏矩阵对象，用于收集非局部元素，如果该矩阵是由Trilinos稀疏模式构建的，并有相应的选项。   
* [0.x.163]*
     一个用于交流非本地矩阵的导出对象。   
* [0.x.164]*
     Trilinos不允许混合添加矩阵条目和覆盖它们（以使%并行计算的同步更简单）。我们的方法是，对于每个访问操作，存储它是插入还是添加。如果前一个是不同的类型，那么我们首先要刷新Trilinos缓冲区；否则，我们可以简单地继续下去。幸运的是，Trilinos有一个这样的对象，在这种情况下已经完成了所有的%并行通信，所以我们只需使用他们的模型，它存储了上一个操作是加法还是插入。   
* [0.x.165]*
     一个布尔变量，用来保存关于向量是否被压缩的信息。   
* [0.x.166]*
       这是对Trilinos稀疏矩阵和预处理类型的LinearOperators的一个扩展类。它提供了对Trilinos向量类型进行基本操作（<tt>vmult</tt>和<tt>Tvmult</tt>）的接口。它满足了将调用Epetra_Operator函数的Trilinos求解器包装成LinearOperator的必要条件。           
* [2.x.96] 这个有效载荷所包装的[2.x.97]或[2.x.98]是通过引用传递给<tt>vmult</tt>和<tt>Tvmult</tt>函数。当它或它所引用的Trilinos对象上设置了转置标志时，这个对象不是线程安全的。更多细节请参见[2.x.99]函数的文档。                 
* [2.x.100]       
* [0.x.167]*
         内部支持的向量类型的定义。       
* [0.x.168]*
         运算器领域空间的向量类型的定义。       
* [0.x.169]*
         运算器的范围空间的向量类型的定义。       
* [0.x.170]*
          [2.x.101] 构造函数/解构函数        
* [0.x.171]*
         默认构造函数                
* [2.x.102]根据设计，由于没有足够的信息来构建域和范围图，因此产生的对象是不可操作的。       
* [0.x.172]*
         基于典范矩阵的稀疏矩阵的构造函数        
* [0.x.173]*
         基于典范矩阵的预处理器的构造器        
* [0.x.174]*
         基于示范性预处理的预处理器的构造器        
* [0.x.175]*
         默认的复制构造器        
* [0.x.176]*
         复合复制构造函数 这是PackagedOperations所需要的，因为它设置了域和范围图，以及基于两个操作的复合<tt>vmult</tt>和<tt>Tvmult</tt>操作的组合操作        
* [0.x.177]*
         破坏器        
* [0.x.178]*
         返回一个为身份操作配置的有效载荷        
* [0.x.179]*
         返回一个为空操作而配置的有效载荷        
* [0.x.180]*
         返回一个为转置操作配置的有效载荷        
* [0.x.181]*
         返回一个为反转操作配置的有效载荷 调用这个工厂函数将配置两个额外的函数，即<tt>inv_vmult</tt>和<tt>inv_Tvmult</tt>，这两个函数都包裹了反转操作。<tt>vmult</tt>和<tt>Tvmult</tt>操作保留了从[2.x.103]继承的标准定义。                
* [2.x.104] 只有当求解器和预处理器派生自各自的TrilinosWrappers基类时，该功能才会启用。        因此，C++编译器只有在满足以下标准的情况下才会考虑这个功能。        1. [2.x.105]派生自[2.x.106]，2. [2.x.107]派生自[2.x.108] 。        
* [0.x.182]*
         返回一个为逆运算配置的有效载荷 调用这个工厂函数将配置两个额外的函数，即<tt>inv_vmult</tt>和<tt>inv_Tvmult</tt>，这两个函数被禁用，因为[2.x.109]或[2.x.110]与Epetra_MultiVector不兼容。        <tt>vmult</tt>和<tt>Tvmult</tt>操作保留了从[2.x.111]继承的标准定义。                
* [2.x.112] 只有满足以下标准，C++编译器才会考虑这个函数。        1. [2.x.113]不从[2.x.114]派生，2. [2.x.115]不从[2.x.116]派生。        
* [0.x.183]*
          [2.x.117] LinearOperator功能        
* [0.x.184]*
         返回一个IndexSet，它定义了这个矩阵的域空间的分区，即这个矩阵要与之相乘/操作的向量的分区。       
* [0.x.185]*
         返回一个IndexSet，它定义了这个矩阵的范围空间的划分，即由矩阵-向量积产生的向量的划分。       
* [0.x.186]*
         返回与该有效载荷一起使用的MPI通信器对象。       
* [0.x.187]*
         设置一个内部标志，使矩阵进行的所有操作，即乘法，都以转置的顺序进行。       
* [2.x.118]这并不直接将矩阵重塑为转置形式，所以在使用这个标志时要注意。       
* [0.x.188]*
         当Apply被调用时，将由有效载荷执行的标准矩阵-向量操作。               
* [2.x.119]这不是由LinearOperator调用的，而是由Trilinos函数调用的，这些函数希望以此来模仿LinearOperator的动作。       
* [0.x.189]*
         当Apply被调用时，标准的转置矩阵-向量操作将由有效载荷执行。               
* [2.x.120]这不是由LinearOperator调用的，而是由Trilinos函数调用的，该函数希望以此来模仿LinearOperator的动作。       
* [0.x.190]*
         当ApplyInverse被调用时，有效载荷将进行矩阵-向量的逆运算。               
* [2.x.121]这不是由LinearOperator调用的，而是由Trilinos函数调用的，这些函数希望以此来模仿InverseOperator的动作。       
* [0.x.191]*
         当ApplyInverse被调用时，将由有效载荷执行的矩阵-向量的反转操作。               
* [2.x.122]这不是由LinearOperator调用的，而是由Trilinos函数调用的，该函数期望以此来模仿InverseOperator的动作。       
* [0.x.192]*
          [2.x.123] 核心Epetra_Operator功能        
* [0.x.193]*
         返回该运算符的转置标志状态 这是对Trilinos类Epetra_Operator的同一函数的重载。       
* [0.x.194]*
         设置一个内部标志，使矩阵进行的所有操作，即乘法，都以转置的顺序进行。                这是对Trilinos类Epetra_Operator的相同函数的重载。               
* [2.x.124] 这并不直接将矩阵重塑为转置形式，所以在使用这个标志时要注意。当该标志被设置为 "true "时（无论是在这里还是直接在底层的Tridinos对象本身），该对象不再是线程安全的。从本质上讲，它不可能确保LinearOperator和底层Trilinos对象的转置状态在可能同时发生在不同线程上的所有操作中保持同步。       
* [0.x.195]*
         对一个向量[2.x.125]（内部定义的VectorType类型）应用vmult操作，并将结果存储在向量中 [2.x.126] 这是从Trilinos类Epetra_Operator中重载的相同函数。               
* [2.x.127] 预定的操作取决于内部转置标志的状态。如果这个标志被设置为 "真"，那么结果将相当于执行一个Tvmult操作。       
* [0.x.196]*
         对一个向量[2.x.128]（内部定义的VectorType类型）应用vmult逆运算，并将结果存储在向量[2.x.129]中。 实际上，只有当包裹的对象作为预处理程序时，才会从特里诺斯求解器调用这个函数。                这是从Tridinos类Epetra_Operator中重载的相同函数。               
* [2.x.130] 只有当有效载荷被InverseOperator初始化，或者是一个预处理程序的包装器时，这个函数才可操作。如果没有，那么使用这个函数将导致抛出一个错误。       
* [2.x.131] 预期的操作取决于内部转置标志的状态。如果这个标志被设置为 "true"，那么结果将等同于执行一个Tvmult操作。       
* [0.x.197]*
          [2.x.132] 附加Epetra_Operator功能        
* [0.x.198]*
         返回一个标签来描述这个类。                这重载了Trilinos类Epetra_Operator中的相同功能。       
* [0.x.199]*
         返回这个对象的底层MPI通信器的引用。                这是从Trilinos类Epetra_Operator中重载的相同函数。       
* [0.x.200]*
         返回该矩阵的域空间的划分，即该矩阵必须与之相乘的向量的划分。                这是对Trilinos类Epetra_Operator的相同函数的重载。       
* [0.x.201]*
         返回该矩阵的范围空间的划分，即由矩阵-向量乘积产生的向量的划分。                这是对Trilinos类Epetra_Operator的相同函数的重载。       
* [0.x.202]*
         一个记录运算器是执行标准的矩阵-向量乘法，还是转置运算的标志。       
* [0.x.203]*
         内部通信模式，以防矩阵需要从deal.II格式中复制。       
* [0.x.204]*
         Epetra_Map，用于设置该运算器的域空间的划分。       
* [0.x.205]*
         Epetra_Map，设置此运算符的范围空间的划分。       
* [0.x.206]*
         返回一个标志，描述该算子是否可以返回无穷大准则的计算。因为一般情况下不是这样的，所以总是返回一个否定的结果。                这是对Trilinos类Epetra_Operator的相同函数的重载。       
* [0.x.207]*
         返回该运算符的无穷大规范。        抛出一个错误，因为一般来说，我们无法计算这个值。                这是对Trilinos类Epetra_Operator中相同函数的重载。       
* [0.x.208]*
       返回一个运算器，该运算器返回一个配置为支持两个LinearOperator相加的有效载荷      
* [0.x.209]*
       返回一个操作符，该操作符返回一个被配置为支持两个LinearOperator的乘法的有效载荷。     
* [0.x.210]

