include/deal.II-translator/lac/trilinos_precondition_0.txt
[0.x.0]!  [2.x.0] TrilinosWrappers [2.x.1]! 

 
* [0.x.1]*
   所有基于Trilinos稀疏矩阵的预处理器的基类。   
* [2.x.2]   
* [2.x.3]   
* [0.x.2]*
     声明容器大小的类型。   
* [0.x.3]*
     标准化的数据结构，用于向预处理程序输送附加标志。   
* [0.x.4]*
     构造函数。不做任何事情。派生类的<tt>initialize</tt>函数将不得不从给定的稀疏矩阵中创建预处理程序。   
* [0.x.5]*
     复制构造函数。   
* [0.x.6]*
     解构器。   
* [0.x.7]*
     销毁预处理程序，留下一个像刚刚调用构造函数后的对象。   
* [0.x.8]*
     返回与该矩阵一起使用的MPI通信器对象。   
* [0.x.9]*
     设置一个内部标志，使矩阵进行的所有操作，即乘法，都以转置的顺序进行。然而，这并不能直接将矩阵重塑为转置的形式，所以在使用这个标志时要注意。       
* [2.x.4]连续调用此函数的任何偶数次，都将使对象返回到其原始状态。   
* [0.x.10]*
     应用预处理程序。   
* [0.x.11]*
     应用转置预处理程序。   
* [0.x.12]*
     在deal.II数据结构上应用预处理程序，而不是在Trilinos包装类中提供的数据结构。   
* [0.x.13]*
     在deal.II数据结构上应用转置预处理程序，而不是在Trilinos包装类中提供的那些。   
* [0.x.14]*
     在deal.II并行数据结构上应用预处理程序，而不是在Trilinos包装类中提供的结构。   
* [0.x.15]*
     在deal.II并行数据结构上应用转置预处理程序，而不是在Trilinos包装类中提供的数据结构。   
* [0.x.16]*
      [2.x.5] 访问底层Trilinos数据    
* [0.x.17]*
         从一个未初始化的对象中调用这个函数将导致一个异常。   
* [0.x.18]*
      [2.x.6] 分区器    
* [0.x.19]*
     返回这个矩阵的域空间的分区，即这个矩阵要与之相乘的向量的分区。   
* [0.x.20]*
     返回该矩阵的范围空间的划分，即由矩阵-向量乘积产生的向量的划分。   
* [0.x.21]*
      [2.x.7] 例外情况    
* [0.x.22]*
     异常情况。   
* [0.x.23]*
     这是一个指向预处理器对象的指针，在应用预处理器时使用。   
* [0.x.24]*
     内部通信模式，以防矩阵需要从deal.II格式中复制。   
* [0.x.25]*
     内部Trilinos图，以防矩阵需要从deal.II格式中复制。   
* [0.x.26]*
   一个用于Trilinos矩阵的（点）雅可比预处理的封装类。这个预处理器既可以在串行中工作，也可以在并行中工作，这取决于它所基于的矩阵。    AdditionalData数据结构允许设置预处理器选项。  对于雅可比预处理程序，这些选项是阻尼参数<tt>omega</tt>和<tt>min_diagonal</tt>参数，可以用来使预处理程序工作，即使矩阵的对角线上包含一些零元素。默认设置是阻尼参数为1，对角线增量为0。   
* [2.x.8]   
* [2.x.9]   
* [0.x.27]*
     标准化的数据结构，用于向预处理程序输送附加标志。参数<tt>omega</tt>指定雅可比预处理程序中的松弛参数。参数<tt>min_diagonal</tt>可用于在一些对角线元素为零时也可以应用预处理程序。在默认的应用中，这意味着我们要除以0，所以通过设置参数<tt>min_diagonal</tt>到一个小的非零值，SOR将在一个与我们要处理的矩阵不太远的地方工作。   
* [0.x.28]*
       构造函数。默认情况下，将阻尼参数设置为1，并且不修改对角线。     
* [0.x.29]*
       这指定了雅可比预处理程序中的松弛参数。     
* [0.x.30]*
       这指定了对角线元素应该具有的最小值。      当雅可比预处理器用于对角线元素为零的矩阵时，这可能是必要的。在这种情况下，直接应用是不可能的，因为我们要除以零。     
* [0.x.31]*
       设置在vmult()操作中应该应用多少次给定的操作。     
* [0.x.32]*
     取预处理对象应建立的稀疏矩阵，如果有额外的标志（阻尼参数等）。   
* [0.x.33]*
   Trilinos矩阵的（点）SSOR预处理器的封装类。这个预处理程序既可以在串行中工作，也可以在并行中工作，这取决于它所基于的矩阵。    AdditionalData数据结构允许设置预处理器选项。  对于SSOR预处理程序，这些选项是阻尼/松弛参数<tt>omega</tt>，<tt>min_diagonal</tt>参数，可以用来使预处理程序工作，即使矩阵在对角线上包含一些零元素，以及<tt>overlap</tt>参数，决定在不同MPI进程的矩阵分区之间是否应该有重叠以及有多少。默认设置是松弛参数为1，对角线增强为0，重叠为0。    请注意，SSOR预处理的并行应用实际上是一个块状Jacobi预处理，块状大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.0]与SSOR[2.x.10]近似求解[2.x.11]作为内部求解器，基于外部并行分区。   
* [2.x.12]   
* [2.x.13]   
* [0.x.34]*
     标准化的数据结构，用于向预处理程序输送附加标志。参数<tt>omega</tt>指定了SSOR预处理程序中的松弛参数。参数<tt>min_diagonal</tt>可用于在一些对角线元素为零时也可以应用预处理程序。在默认的应用中，这意味着我们要除以0，所以通过设置参数<tt>min_diagonal</tt>到一个小的非零值，SOR将在一个与我们要处理的矩阵相差不大的矩阵上工作。最后，<tt>overlap</tt>管理预处理程序并行运行时分区的重叠，形成所谓的加法施瓦茨预处理程序。   
* [0.x.35]*
       构造器。默认情况下，将阻尼参数设置为1，我们不修改对角线，并且没有重叠（即在并行情况下，我们运行BlockJacobi预处理程序，其中每个块被SSOR近似倒置）。     
* [0.x.36]*
       这指定了SSOR预处理程序中的（过度）放松参数。     
* [0.x.37]*
       这指定了对角线元素应该具有的最小值。      当SSOR预处理程序用于对角线元素为零的矩阵时，这可能是必要的。在这种情况下，直接应用是不可能的，因为我们要除以对角线元素。     
* [0.x.38]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.39]*
       设置在vmult()操作过程中应该应用多少次给定的操作。     
* [0.x.40]*
     取出预处理对象应建立的稀疏矩阵，以及额外的标志（阻尼参数、并行计算中的重叠等），如果有的话。   
* [0.x.41]*
   Trilinos矩阵的（点）SOR预处理的封装类。这个预处理程序既可以在串行中工作，也可以在并行中工作，这取决于它所基于的矩阵。    AdditionalData数据结构允许设置预处理器选项。  对于SOR预处理程序，这些选项是阻尼/松弛参数<tt>omega</tt>，<tt>min_diagonal</tt>参数，可以用来使预处理程序工作，即使矩阵在对角线上包含一些零元素，以及<tt>overlap</tt>参数，决定在不同MPI进程的矩阵分区之间是否应该有重叠以及有多少。默认设置是松弛参数为1，对角线增强为0，重叠为0。    请注意，SOR预处理的并行应用实际上是一个块状Jacobi预处理，块状大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.1]，有一个SOR[2.x.14]近似求解[2.x.15]作为内部求解器，基于外部并行划分。   
* [2.x.16]   
* [2.x.17]   
* [0.x.42]*
     标准化的数据结构，用于向预处理程序输送附加标志。参数<tt>omega</tt>指定了SOR预处理程序中的松弛参数。参数<tt>min_diagonal</tt>可用于在一些对角线元素为零时也可以应用预处理程序。在默认的应用中，这意味着我们要除以0，所以通过设置参数<tt>min_diagonal</tt>到一个小的非零值，SOR将在一个与我们要处理的矩阵相差不大的矩阵上工作。最后，<tt>overlap</tt>管理预处理程序并行运行时分区的重叠，形成所谓的加法施瓦茨预处理程序。   
* [0.x.43]*
       构造器。默认情况下，将阻尼参数设置为1，我们不修改对角线，并且没有重叠（即在并行情况下，我们运行BlockJacobi预处理程序，其中每个块都被一个SOR近似倒置。     
* [0.x.44]*
       这指定了SOR预处理程序中的（过度）放松参数。     
* [0.x.45]*
       这指定了对角线元素应该具有的最小值。      当SOR预处理程序用于对角线元素为零的矩阵时，这可能是必要的。在这种情况下，直接应用是不可能的，因为我们要除以对角线元素。     
* [0.x.46]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.47]*
       设置在vmult()操作过程中应该应用多少次给定的操作。     
* [0.x.48]*
     取出预处理对象应建立的稀疏矩阵，以及额外的标志（阻尼参数、并行计算中的重叠等），如果有的话。   
* [0.x.49]*
   Trilinos矩阵的块状雅可比预处理器的封装类。  与PreconditionSOR不同的是，在PreconditionSOR中，每一行都是单独处理的，这个方案收集特定大小的块，并同时对所有这些行进行全矩阵反演。Trilinos允许选择几种策略来选择哪些行构成一个块，包括 "线性"（即把矩阵的局部范围划分为块大小的片断）、"贪婪 "或 "metis"。请注意，术语[2.x.18]块Jacobi[2.x.19]并不涉及MPI设置中的可能块，而是从每个处理器本地的稀疏矩阵中提取的密集矩阵的小块。    AdditionalData数据结构允许设置预处理程序选项。   
* [2.x.20]   
* [2.x.21]   
* [0.x.50]*
     标准化的数据结构，用于向预处理程序输送附加标志。参数<tt>block_size</tt>设置小块的大小。建议选择这个参数不要太大（最多几百个），因为这个实现对块使用密集的矩阵。参数<tt>block_creation_type</tt>允许传递给Ifpack寻找块的策略。参数<tt>omega</tt>指定了SOR预处理程序中的松弛参数。参数<tt>min_diagonal</tt>可用于在某些对角线元素为零时也可以应用预处理程序。在默认的应用中，这意味着我们要除以0，所以通过设置参数<tt>min_diagonal</tt>到一个小的非零值，SOR将在一个与我们要处理的矩阵不太远的地方工作。   
* [0.x.51]*
       构造函数。默认情况下，使用块大小为1，使用行的线性细分，将阻尼参数设置为1，并且不修改对角线。     
* [0.x.52]*
       这指定了块的大小。     
* [0.x.53]*
       传递给Ifpack块放松（变量'partitioner: type'）的块的创建策略，该字符串为给定值。      在Ifpack中可用的类型包括 "线性"（即把矩阵的局部范围划分为块大小的片状），"贪婪""metis"。      完整的列表请参见Ifpack的文档。     
* [0.x.54]*
       这指定了雅可比预处理程序中的（过度）放松参数。     
* [0.x.55]*
       这指定了对角线元素应该具有的最小值。      当块状雅可比预处理器用于对角线元素为零的矩阵时，这可能是必要的。在这种情况下，直接应用是不可能的，因为我们要除以对角线元素。     
* [0.x.56]*
       设置在vmult()操作中应该应用多少次给定的操作。     
* [0.x.57]*
     取预处理对象应建立的稀疏矩阵，如果有额外的标志（阻尼参数等）。   
* [0.x.58]*
   一个用于特里诺斯矩阵的块状SSOR预处理的封装类。与PreconditionSSOR不同的是，在PreconditionSSOR中，每一行都是单独处理的（从点到面），这个方案收集一定大小的块，并同时对所有这些行进行全矩阵逆变。Trilinos允许选择几种策略来选择哪些行构成一个块，包括 "线性"（即把矩阵的局部范围划分为块大小的片断）、"贪婪 "或 "metis"。    AdditionalData数据结构允许设置预处理选项。    请注意，这个预处理程序的并行应用实际上是一个块-雅各比预处理程序，其（外部）块大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.2]，以块SSOR[2.x.22]近似求解[2.x.23]为内部求解器，基于外部并行分区。   
* [2.x.24]   
* [2.x.25]   
* [0.x.59]*
     标准化的数据结构，用于向预处理程序输送附加标志。参数<tt>block_size</tt>设置小块的大小。建议选择这个参数不要太大（最多几百个），因为这个实现对块使用密集的矩阵。参数<tt>block_creation_type</tt>允许传递给Ifpack寻找块的策略。参数<tt>omega</tt>指定了SSOR预处理程序中的松弛参数。参数<tt>min_diagonal</tt>可用于在某些对角线元素为零时也可以应用预处理程序。在默认的应用中，这意味着我们要除以0，所以通过设置参数<tt>min_diagonal</tt>到一个小的非零值，SOR将在一个与我们要处理的矩阵相差不大的矩阵上工作。最后，<tt>overlap</tt>管理预处理程序并行运行时分区的重叠，形成所谓的加法施瓦茨预处理程序。   
* [0.x.60]*
       构造器。默认情况下，使用块大小为1，使用行的线性细分，将阻尼参数设置为1，我们不修改对角线，并且没有重叠（即在并行情况下，我们运行BlockJacobi预处理程序，每个块大约由一个块SOR来反转）。     
* [0.x.61]*
       这指定了块的大小。     
* [0.x.62]*
       创建块的策略传递给Ifpack块放松（变量'partitioner: type'），以这个字符串为给定值。      在Ifpack中可用的类型包括 "线性"（即把矩阵的局部范围划分为块大小的片状），"贪婪""metis"。      完整的列表请参见Ifpack的文档。     
* [0.x.63]*
       这指定了SOR预处理程序中的（过度）放松参数。     
* [0.x.64]*
       这指定了对角线元素应该具有的最小值。      当SSOR预处理器用于对角线元素为零的矩阵时，这可能是必要的。在这种情况下，直接应用是不可能的，因为我们要除以对角线元素。     
* [0.x.65]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.66]*
       设置在vmult()操作过程中应该应用多少次给定的操作。     
* [0.x.67]*
     取出预处理对象应建立的稀疏矩阵，以及额外的标志（阻尼参数、并行计算中的重叠等），如果有的话。   
* [0.x.68]*
   Trilinos矩阵的块状SOR预处理器的封装类。与PreconditionSOR不同的是，在PreconditionSOR中，每一行都是单独处理的，这个方案收集一定大小的块，并同时对所有这些行进行全矩阵逆变。Trilinos允许选择几种策略来选择哪些行构成一个块，包括 "线性"（即把矩阵的局部范围划分为块大小的片断）、"贪婪 "或 "metis"。    AdditionalData数据结构允许设置预处理选项。    请注意，这个预处理程序的并行应用实际上是一个块-雅各比预处理程序，其（外部）块大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.3]，有一个块SOR[2.x.26]近似求解[2.x.27]作为内部求解器，基于外部并行分区。   
* [2.x.28]   
* [2.x.29]   
* [0.x.69]*
     标准化的数据结构，用于向预处理程序输送额外的标志。参数<tt>block_size</tt>设置小块的大小。建议选择这个参数不要太大（最多几百个），因为这个实现对块使用密集的矩阵。参数<tt>block_creation_type</tt>允许传递给Ifpack寻找块的策略。参数<tt>omega</tt>指定了SOR预处理程序中的松弛参数。参数<tt>min_diagonal</tt>可用于在某些对角线元素为零时也可以应用预处理程序。在默认的应用中，这意味着我们要除以0，所以通过设置参数<tt>min_diagonal</tt>到一个小的非零值，SOR将在一个与我们要处理的矩阵相差不大的矩阵上工作。最后，<tt>overlap</tt>管理预处理程序并行运行时分区的重叠，形成所谓的加法施瓦茨预处理程序。   
* [0.x.70]*
       构造器。默认情况下，使用块大小为1，使用行的线性细分，将阻尼参数设置为1，我们不修改对角线，并且没有重叠（即在并行情况下，我们运行BlockJacobi预处理程序，每个块大约由一个块SOR来反转）。     
* [0.x.71]*
       这指定了块的大小。     
* [0.x.72]*
       创建块的策略传递给Ifpack块放松（变量'partitioner: type'），以这个字符串为给定值。      在Ifpack中可用的类型包括 "线性"（即把矩阵的局部范围划分为块大小的片状），"贪婪""metis"。      完整的列表请参见Ifpack的文档。     
* [0.x.73]*
       这指定了SOR预处理程序中的（过度）放松参数。     
* [0.x.74]*
       这指定了对角线元素应该具有的最小值。      当SOR预处理器用于对角线元素为零的矩阵时，这可能是必要的。在这种情况下，直接应用是不可能的，因为我们要除以对角线元素。     
* [0.x.75]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.76]*
       设置在vmult()操作过程中应该应用多少次给定的操作。     
* [0.x.77]*
     取出预处理对象应建立的稀疏矩阵，以及额外的标志（阻尼参数、并行计算中的重叠等），如果有的话。   
* [0.x.78]*
   用于[2.x.30]对称Trilinos矩阵的不完全Cholesky因子化（IC）预处理的封装类。这个预处理程序既可以串行工作也可以并行工作，这取决于它所基于的矩阵。一般来说，不完全因式分解并不包含所有会出现在完全因式分解中的填充元素（这是直接求解的基础）。Trilinos允许设置填充元素的数量，由附加数据参数<tt>ic_fill</tt>控制，因此可以逐步选择只对稀疏矩阵结构进行因式分解（<tt>ic_fill=0</tt>）到完全因式分解（<tt>ic_fill</tt>在10到50之间，取决于PDE问题的空间维度和有限元基函数的程度；通常，更多需要的填充元素需要将该参数设置为更高的整数值）。    AdditionalData数据结构允许设置预处理器选项。  除了填充参数外，这些选项还有一些用于扰动的选项（详见AdditionalData结构的文档），以及一个参数<tt>overlap</tt>，该参数决定了不同MPI进程上的矩阵分区之间是否应该有重叠以及重叠的程度。 默认设置为：额外填充为0，绝对增容为0，相对增容为1，重叠为0。    请注意，IC预处理的并行应用实际上是一个块状Jacobi预处理，块状大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.4]，有一个IC[2.x.31]近似求解[2.x.32]作为内部求解器，基于（外部）并行分区的。   
* [2.x.33]   
* [2.x.34]   
* [0.x.79]*
     标准化的数据结构，用于向预处理程序输送附加参数。Trilinos IC分解允许一些填充，所以它实际上是一个阈值不完整的Cholesky分解。填充量，以及该预处理程序使用的内存量，由参数<tt>ic_fill</tt>控制，该参数将其指定为双数。在形成预处理程序时，对于某些问题，不好的条件（或者只是运气不好）会导致预处理程序的条件很差。因此，将对角线扰动添加到原始矩阵中，并为这个稍好的矩阵形成预处理程序，会有所帮助。<tt>ic_atol</tt>是一个绝对扰动，在形成prec之前加到对角线上，<tt>ic_rtol</tt>是一个缩放系数 [2.x.35] 。最后一个参数指定了预处理程序并行运行时分区的重叠情况。   
* [0.x.80]*
       构造函数。默认情况下，将下降容忍度设置为0，额外填充物的级别设置为0（只使用矩阵结构，不产生任何额外的填充物），容忍度级别分别为0和1，在并行执行的情况下，重叠度为0。在并行情况下，IC的块状应用中的这种重叠使预处理器成为所谓的加性施瓦兹预处理器。     
* [0.x.81]*
       这指定了除了稀疏矩阵结构之外的额外填充元素的数量。当<tt>ic_fill</tt>较大时，这意味着将添加许多填充元素，从而使IC预处理程序更接近于直接稀疏Cholesky分解。但是请注意，这将极大地增加内存需求，特别是当预处理程序在三维中使用时。     
* [0.x.82]*
       这指定了将被添加到矩阵对角线上的绝对扰动量，有时这有助于获得更好的预处理。     
* [0.x.83]*
       这指定了矩阵的对角线将被缩放的系数，这有时有助于获得更好的预处理程序。     
* [0.x.84]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.85]*
     初始化函数。接收预处理程序应该计算的矩阵，如果有额外的标志，则接收额外的标志。   
* [0.x.86]*
   一个用于特里诺斯矩阵的不完全LU分解（ILU(k)）预处理的封装类。这个预处理程序既可以串行工作也可以并行工作，这取决于它所基于的矩阵。一般来说，不完全因式分解并不包含所有会出现在完全因式分解中的填充元素（这是直接求解的基础）。Trilinos允许设置填充元素的数量，由附加数据参数<tt>ilu_fill</tt>控制，因此可以逐步选择只对稀疏矩阵结构进行因式分解（<tt>ilu_fill=0</tt>）到完全因式分解（<tt>ilu_fill</tt>在10到50之间，取决于PDE问题的空间维度和有限元基函数的程度；通常，更多需要填充的元素需要将该参数设置为更高的整数值）。    AdditionalData数据结构允许设置预处理器选项。  详情见AdditionalData结构的文档。    请注意，ILU预处理的并行应用实际上是一个块状Jacobi预处理，块状大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.5]，以ILU[2.x.36]近似求解[2.x.37]为内部求解器，基于（外部）并行划分。   
* [2.x.38]   
* [2.x.39]   
* [0.x.87]*
     标准化的数据结构，用于向预处理程序输送附加参数。     [2.x.40] [2.x.41] [2.x.42] 这指定了除原始稀疏矩阵结构外的额外填充元素的数量。如果[2.x.43]是[2.x.44]填充，[2.x.45]的稀疏模式被用于存储高斯消除的结果。这在文献中被称为ILU( [2.x.46] ) 。 当[2.x.47]较大时，预调节器更接近于（直接）稀疏LU分解。但是请注意，这将极大地增加内存需求，特别是当预处理程序在三维中使用时。         [2.x.48] [2.x.49] 和 [2.x.50] 这两个参数允许对矩阵的对角线进行扰动，这有时可以帮助获得更好的预处理程序，特别是在条件不好的情况下。    在因式分解之前，对角线条目[2.x.51]被[2.x.52]取代，其中[2.x.53]是绝对阈值[2.x.54]，[2.x.55]是相对阈值[2.x.56] 默认值（[2.x.57] ，[2.x.58] ）因此使用原始，未修改的对角线条目。建议值是[2.x.59]到[2.x.60]的顺序，对于[2.x.62] [2.x.63] [2.x.64] 这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该是多大。    0的重叠对应于每个处理器上的块状对角线分解，1的重叠将额外包括一个行j，如果在自己的行中的第j列有一个非零条目。更高的重叠数以递归的方式相应地工作。增加[2.x.65]将增加通信和存储成本。根据IFPACK文档，1的重叠通常是有效的，超过3的值很少需要。         [2.x.66]     
* [0.x.88]*
       具有所有参数默认值的构造函数。     
* [0.x.89]*
       额外的填充，见上面的类文件。     
* [0.x.90]*
       添加到对角线条目的扰动量。详见上面的类文件。     
* [0.x.91]*
       对角线条目的缩放演员。详见上面的类文件。     
* [0.x.92]*
       处理器之间的重叠。详见上面的类文件。     
* [0.x.93]*
     初始化函数。接受用于形成预处理程序的矩阵，如果有额外的标志，则接受额外的标志。   
* [0.x.94]*
   用于Trilinos矩阵的阈值不完全LU分解（ILU-T）预处理的封装类。这个预处理程序既可以串行工作也可以并行工作，这取决于它所基于的矩阵。一般来说，不完全因式分解并不包含所有会出现在完全因式分解中的填充元素（那是直接求解的基础）。对于ILU-T预处理程序，参数<tt>ilut_drop</tt>让用户指定哪些元素应该被放弃（即不应该成为不完全分解的一部分）。Trilinos首先计算一行的完整分解，然后跳过那些低于阈值的元素。这是与非阈值ILU预处理程序的主要区别，其中参数<tt>ilut_fill</tt>控制着不完全因式分解结构。这个参数在这里也是可用的，但在这里只提供一些额外的信息。    AdditionalData数据结构允许设置预处理程序选项。  除了填充参数外，这些选项还有一些用于扰动的选项（详见AdditionalData结构的文档），以及一个参数<tt>overlap</tt>，该参数决定了不同MPI进程上的矩阵分区之间是否应该有重叠以及有多少重叠。默认设置是额外填充为0，绝对增容为0，相对增容为1，重叠为0。    请注意，ILU-T预处理的并行应用实际上是一个块状Jacobi预处理，块状大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.6]，以ILU[2.x.67]近似求解[2.x.68]为内部求解器，基于（外部）并行分区。   
* [2.x.69]   
* [2.x.70]   
* [0.x.95]*
     标准化的数据结构，用于向预处理程序输送附加参数。Trilinos ILU-T分解允许一些填充，所以它实际上是一个不完整的LU因子化门槛。填充量以及该预处理程序使用的内存量由参数<tt>ilut_drop</tt>和<tt>ilut_fill</tt>控制，这些参数指定了关于哪些值应该形成不完全因式分解的阈值以及额外填充的程度。在形成预处理程序时，对于某些问题，不好的条件（或者只是运气不好）会导致预处理程序的条件很差。因此，将对角线扰动添加到原始矩阵中，并为这个稍好的矩阵形成预处理器，会有帮助。<tt>ilut_atol</tt>是一个绝对扰动，在形成prec之前加到对角线上，<tt>ilu_rtol</tt>是一个缩放系数 [2.x.71] 。最后一个参数指定了预处理程序并行运行时分区的重叠情况。   
* [0.x.96]*
       构造函数。默认情况下，没有元素会被丢弃，额外的填充水平被设置为零（只使用矩阵结构，不产生任何额外的填充，除了不丢弃大元素而产生的填充），容忍度分别为0和1，在并行执行的情况下，重叠度为零。在并行情况下，ILU的块应用中的这种重叠使预处理程序成为所谓的加性施瓦茨预处理程序。     
* [0.x.97]*
       这指定了在形成不完整的LU分解时应该放弃的元素的相对大小，并带有阈值。     
* [0.x.98]*
       这指定了除了稀疏矩阵结构之外的额外填充元素的数量。当<tt>ilu_fill</tt>较大时，这意味着许多填充元素将被添加，从而使ILU预处理程序更接近于（直接）稀疏LU分解。但是请注意，这将极大地增加内存需求，特别是当预处理程序用于三维时。     
* [0.x.99]*
       这指定了将被添加到矩阵对角线上的绝对扰动量，这有时可以帮助获得更好的预处理程序。     
* [0.x.100]*
       这指定了矩阵的对角线将被缩放的系数，这有时有助于获得更好的预处理程序。     
* [0.x.101]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.102]*
     初始化函数。接受用于形成预处理程序的矩阵，如果有额外的标志，则接受额外的标志。   
* [0.x.103]*
   稀疏直接LU分解的包装类，适用于Trilinos矩阵的并行块。当以串行方式运行时，这相当于对矩阵进行直接求解。    AdditionalData数据结构允许设置预处理选项。    请注意，块状直接求解预处理的并行应用实际上是一个块状Jacobi预处理，块状大小等于本地矩阵大小。说得更专业一点，这个并行操作是一个[1.x.7]，有一个[2.x.72]精确求解[2.x.73]作为内部求解器，基于（外部）并行分区的。   
* [2.x.74]   
* [2.x.75]   
* [0.x.104]*
     标准化的数据结构，用于向预处理程序输送附加参数。   
* [0.x.105]*
       构造器。     
* [0.x.106]*
       这决定了并行应用中每个处理器上的局部矩阵部分的重叠应该有多大。     
* [0.x.107]*
     初始化函数。接受用于形成预处理程序的矩阵，如果有额外的标志，则接受额外的标志。   
* [0.x.108]*
   一个用于特里诺斯矩阵的切比雪夫预处理的封装类。    AdditionalData数据结构允许设置预处理器选项。   
* [2.x.76]   
* [2.x.77]   
* [0.x.109]*
     标准化的数据结构，用于向预处理程序输送额外的参数。   
* [0.x.110]*
       构造器。     
* [0.x.111]*
       这决定了切比雪夫多项式的程度。多项式的度数给出了应用vmult()操作所要进行的矩阵-向量乘积的数量。     
* [0.x.112]*
       这设置了矩阵的最大特征值，为了使切比雪夫预处理程序有适当的性能，需要适当设置。     
* [0.x.113]*
       这设置了最大特征值和最小特征值之间的比率。     
* [0.x.114]*
       这设置了最小特征值，这是一个可选的参数，只在内部用于检查我们是否使用了一个身份矩阵。     
* [0.x.115]*
       这设置了一个阈值，低于这个阈值的对角线元素将不会在切比雪夫算法中被倒置。     
* [0.x.116]*
       当这个标志被设置为<tt>true</tt>时，它使方法<tt>vmult(dst, src)</tt>使用向量<tt>dst</tt>中的非零数据，将切比雪夫修正附加到它。这在某些情况下是有用的（例如用于高频误差平滑时），但不是求解器类期望的预处理工作方式（在预处理应用中忽略<tt>dst</tt>中的内容）。用户在触摸这个标志时，应该真正知道他们在做什么。     
* [0.x.117]*
     初始化函数。接受用于形成预处理程序的矩阵，如果有额外的标志，则接受额外的标志。   
* [0.x.118]*
   这个类实现了一个基于Trilinos ML实现的代数多网格（AMG）预处理，它是一个黑盒预处理，对许多基于PDE的线性问题很有效。 这个类的作用有两个方面。 当调用initialize()函数时，基于我们希望预处理器所基于的矩阵，创建一个ML预处理器对象。调用相应的 [2.x.78] 函数确实会调用Trilinos包中的相应操作，在那里它被称为 [2.x.79] 。这个类的使用在[2.x.80]的教程程序中解释。    由于我们要使用的Trilinos对象在很大程度上依赖于Epetra对象，我们建议将这个类与Trilinos（Epetra）稀疏矩阵和向量结合起来使用。也支持与[2.x.81]类的矩阵和相应的向量一起使用，但这需要生成矩阵的副本，这样会比较慢，而且占用（更多）内存。在进行这样的复制操作时，我们仍然可以从预处理矩阵中的一些条目为零的事实中获益，因此可以忽略不计。    该实现能够区分椭圆问题的矩阵和对流主导的问题。我们使用Trilinos ML为椭圆问题提供的标准选项，但我们使用Chebyshev平滑器而不是对称的Gauss-Seidel平滑器。 对于大多数椭圆问题，Chebyshev比Gauss-Seidel（SSOR）提供了更好的高频阻尼（在代数意义上），而且速度更快（Chebyshev只需要一些矩阵-向量乘积，而SSOR需要进行替换，费用更高）。此外，Chebyshev是完全并行的，因为它在许多处理器上使用时不会退化。另一方面，SSOR在许多处理器上变得更像雅可比。    为了使这个类的功能正常，我们建议使用Trilinos v9.0及以上版本。旧版本在使用每行有许多非零项的矩阵（即源于高阶有限元离散化的矩阵）时，可能在生成粗略的矩阵结构方面有问题。   
* [2.x.82]   
* [2.x.83]   
* [0.x.119]*
     一个数据结构，用于控制代数多重网格的设置细节。这里详述的标志会被传递给Trilinos ML实现。一个当前类型的结构被传递给PreconditionAMG的构造函数。   
* [0.x.120]*
       构造函数。默认情况下，我们假装在标量方程上用线性有限元处理椭圆问题。            利用[2.x.84]函数，[2.x.85]向量可以按以下方式对给定的场进行初始化。           
* [1.x.8]
*       
* [0.x.121]*
       填入一个[2.x.86]，可用于初始化AMG预处理器。            2.x.87]与[2.x.88]结合使用，用于配置预处理程序的无效空间设置。      [2.x.89]由该函数初始化，在[2.x.90]被调用之前必须保持其范围。           
* [2.x.91] 设置参数反映了这个对象中的当前设置，各种选项既可以通过成员变量的状态直接设置（例如 "平滑器：类型"），也可以间接设置（例如 "聚合：类型"）。如果你希望对AMG预处理程序的配置进行精细控制，那么你可以使用这个函数创建参数列表（方便地设置运算符的空位），改变相关设置，并使用修正后的参数列表作为[2.x.92]的参数，而不是AdditionalData对象本身。            关于有哪些选项可供修改，请参见[1.x.9]的文档。           
* [2.x.93]任何与此数据结构设置的参数不冲突的用户定义的参数将被保留。     
* [0.x.122]*
       填入一个参数列表，可用于初始化AMG预处理程序。           
* [2.x.94]任何与此数据结构设置的参数不冲突的用户定义的参数将被保留。     
* [0.x.123]*
       根据[2.x.97]变量的状态，为输入[2.x.96]配置[2.x.95]中的无效空间设置。     
* [0.x.124]*
       根据[2.x.100]变量的状态，为输入[2.x.99]配置[2.x.98]中的无效空间设置。     
* [0.x.125]*
       决定AMG预处理是否应该针对椭圆问题（ML选项平滑聚合SA，使用切比雪夫平滑器）或非椭圆问题（ML选项非对称平滑聚合NSSA，平滑器为SSOR与欠放松）进行优化。     
* [0.x.126]*
       决定预处理程序所依据的矩阵是由线性元素还是高阶元素生成。     
* [0.x.127]*
       定义预处理程序应执行多少个多重网格循环。     
* [0.x.128]*
       定义是否应使用w循环而不是标准设置的v循环。     
* [0.x.129]*
       这个阈值告诉AMG设置应该如何进行粗化。在ML使用的AMG中，所有与暂定的粗放级点强烈耦合的点形成一个集合体。术语[2.x.101]强耦合[2.x.102]由变量<tt>aggregation_threshold</tt>控制，意味着所有不小于<tt>aggregation_threshold</tt>的对角线元素都做强耦合。     
* [0.x.130]*
       指定矩阵的恒定模式（近空空间）。这个参数告诉AMG我们是在标量方程（近空空间只由1组成，默认值为OK）还是在矢量值方程上工作。对于有<tt>n_component</tt>的向量值方程问题，提供的[2.x.103]应满足以下要求。       [2.x.104] [2.x.105] n_component.size() == <tt>n_component</tt> [2.x.106] [2.x.107] n_component[*].size() == n_dof_local 或者 n_component[*].size() == n_dof_global [2.x.108 ] [2.x.109] n_component[<tt>ic</tt>][<tt>id</tt>] =="<tt>id</tt> [2.x.110] th [2.x.111] DoF是对应于组件<tt>ic</tt> [2.x.112] [2.x.113] 的。      
* [0.x.131]*
       决定应该进行多少次平滑器的扫频。当标志<tt>elliptic</tt>被设置为<tt>true</tt>，即对于椭圆或几乎椭圆的问题，切比雪夫平滑器的多项式程度被设置为<tt>smoother_sweeps</tt>。扫频指的是在切比雪夫情况下进行的矩阵-向量乘积的数量。在非椭圆情况下，<tt>smoother_sweeps</tt>设置后平滑的SSOR松弛扫频次数。     
* [0.x.132]*
       确定并行运行时SSOR/Chebyshev误差平滑器的重叠度。     
* [0.x.133]*
       如果这个标志被设置为<tt>true</tt>，那么来自ML预处理程序的内部信息将被打印到屏幕上。这在调试预处理程序时很有用。     
* [0.x.134]*
       决定在AMG循环中使用哪个平滑器。smoother_type的可能性有以下几种。       [2.x.114] [2.x.115] "Aztec" [2.x.116] [2.x.117] "IFPACK" [2.x.118] [2.x.119] "Jacobi" [2.x.120] [2.x.121 ] "ML对称高斯-塞德尔" [2.x.122] [2.x.123] "对称高斯-塞德尔" [2.x.124] [2.x.125] "ML高斯-塞德尔" [2.x.126] [2.x.127 ] "高斯-赛德尔" [2.x.128] [2.x.129] "高斯-赛德尔块" [2.x.130] [2.x.131] "对称块高斯-赛德尔" [2.x.132] [2.x.133 ] "切比雪夫" [2.x.134] [2.x.135] "MLS" [2.x.136] [2.x.137] "Hiptmair" [2.x.138] [2.x.139] "Amesos-KLU" [2.x.140] [2.x.141 ] "Amesos-Superlu" [2.x.142] [2.x.143] "Amesos-UMFPACK" [2.x.144] [2.x.145] "Amesos-Superludist" [2.x.146] [2.x.147 ] "Amesos-MUMPS" [2.x.148] [2.x.149] "用户定义" [2.x.150] [2.x.151] "SuperLU" [2.x.152] [2.x.153] "IFPACK-Chebyshev" [2.x.154] [2.x.155 ] "自己" [2.x.156] [2.x.157] "无为" [2.x.158] [2.x.159] "IC" [2.x.160] [2.x.161] "ICT" [2.x.162] [2.x.163] "ILU" [2.x.164 ] [2.x.165] "ILUT" [2.x.166] [2.x.167] "Block Chebyshev" [2.x.168] [2.x.169] "IFPACK-Block Chebyshev" [2.x.170] [2.x.171]       
* [0.x.135]*
       决定在最粗糙的层次上使用哪种求解器。可以使用与平滑类型相同的设置。     
* [0.x.136]*
     解构器。   
* [0.x.137]*
     让Trilinos为给定矩阵的线性系统的解计算一个多层次的层次。该函数使用[2.x.172]中指定的矩阵格式。    
* [0.x.138]*
     让Trilinos为给定矩阵的线性系统的解计算一个多级层次结构。与上面的其他初始化函数不同，这个函数使用了一个抽象的接口，指向Epetra_RowMatrix类型的对象，允许用户向ML预处理程序传递相当一般的对象。        这个初始化例程在需要预处理的运算符不是[2.x.173]对象的情况下非常有用，但仍然可以获得本地拥有的矩阵行的每个条目的副本（方法ExtractMyRowCopy），并实现矩阵-向量乘积（方法Multiply或Apply）。一个例子是提供比使用矩阵条目更快的矩阵-向量乘法的运算符（无矩阵方法）。这些实现可以与只执行矩阵-向量乘积的切比雪夫平滑器有益地结合起来。接口类Epetra_RowMatrix非常灵活，可以实现这种实现方式。   
* [0.x.139]*
     让Trilinos为给定矩阵的线性系统的解计算一个多层次的层次。该函数使用[2.x.174]中指定的矩阵格式，该函数与上述函数类似，但允许用户设置Trilinos ML预处理程序的所有选项。为了了解ML的所有选项，我们参考了[1.x.10]。特别是在需要解决矢量值问题的情况下，用户需要遵循ML指令。   
* [0.x.140]*
     让Trilinos计算一个多级层次的线性系统的解决方案，并给出矩阵。与上面的其他初始化函数不同，这个函数使用了一个抽象的接口，指向Epetra_RowMatrix类型的对象，允许用户向ML预处理程序传递相当一般的对象。   
* [0.x.141]*
     让Trilinos为给定矩阵的线性系统的解计算一个多级层次结构。这个函数需要一个deal.II矩阵，并将其内容复制到Trilinos矩阵中，所以这个函数可以说是相当低效的。   
* [0.x.142]*
     当预处理器的基础矩阵条目发生变化，但矩阵的稀疏模式保持不变时，该函数可用于更快地重新计算预处理器的构造。这个函数的作用是利用已经生成的粗化结构，根据平滑聚合策略计算AMG延长和限制，然后建立整个多级层次结构。这个函数可以比初始化函数快得多，因为粗化模式通常是设置AMG ML预处理程序时最困难的事情。   
* [0.x.143]*
     销毁预处理程序，留下一个像刚刚调用构造函数后的对象。   
* [0.x.144]*
     打印该类的内存消耗估计值。   
* [0.x.145]*
     将deal.II矩阵复制成Trilinos格式。   
* [0.x.146]*
   该类实现了基于Trilinos MueLu实现的代数多网格（AMG）预处理，这是一个黑盒预处理，对许多基于PDE的线性问题都很有效。PreconditionerAMGMueLu的接口与PreconditionerAMG的接口相同，只是Higher_order_elements参数在PreconditionerAMGMueLu中不存在。   
* [2.x.175] 你需要配置支持MueLU的Trilinos才能使这个预处理程序工作。   
* [2.x.176] 目前不支持64位指数。     [2.x.177] 这个接口不应该被认为是稳定的。   
* [2.x.178]   
* [2.x.179]   
* [0.x.147]*
     一个数据结构，用于控制代数多重网格的设置细节。这里详述的标志被传递给Trilinos MueLu的实现。当前类型的结构被传递给PreconditionAMGMueLu的构造函数。   
* [0.x.148]*
       构造函数。默认情况下，我们假装在标量方程上用线性有限元处理椭圆问题。     
* [0.x.149]*
       决定AMG预处理是否应该针对椭圆问题（MueLu选项平滑聚合SA，使用Chebyshev平滑器）或非椭圆问题（MueLu选项非对称平滑聚合NSSA，平滑器为SSOR与欠放松）进行优化。     
* [0.x.150]*
       定义预处理程序应执行多少个多重网格循环。     
* [0.x.151]*
       定义是否应使用w循环而不是标准设置的v循环。     
* [0.x.152]*
       这个阈值告诉AMG设置应该如何进行粗化。在MueLu使用的AMG中，所有与暂定粗略级点强烈耦合的点形成一个集合体。术语[2.x.180]强耦合[2.x.181]由变量<tt>aggregation_threshold</tt>控制，意味着所有不小于<tt>aggregation_threshold</tt>的对角线元素都做强耦合。     
* [0.x.153]*
       指定矩阵的恒定模式（近空空间）。这个参数告诉AMG我们是在标量方程（近空空间只由1组成）还是在矢量值方程上工作。     
* [0.x.154]*
       决定应该执行多少次平滑器扫频。当标志<tt>elliptic</tt>被设置为<tt>true</tt>，即对于椭圆或几乎椭圆的问题，切比雪夫平滑器的多项式程度被设置为<tt>smoother_sweeps</tt>。扫频指的是在切比雪夫情况下进行的矩阵-向量乘积的数量。在非椭圆情况下，<tt>smoother_sweeps</tt>设置后平滑的SSOR松弛扫频次数。     
* [0.x.155]*
       确定并行运行时SSOR/Chebyshev误差平滑器的重叠度。     
* [0.x.156]*
       如果这个标志被设置为<tt>true</tt>，那么来自ML预处理程序的内部信息将被打印到屏幕上。这在调试预处理程序时很有用。     
* [0.x.157]*
       决定在AMG循环中使用哪个平滑器。smoother_type的可能性有以下几种。       [2.x.182] [2.x.183] "Aztec" [2.x.184] [2.x.185] "IFPACK" [2.x.186] [2.x.187] "Jacobi" [2.x.188] [2.x.189 ] "ML对称高斯-塞德尔" [2.x.190] [2.x.191] "对称高斯-塞德尔" [2.x.192] [2.x.193] "ML高斯-塞德尔" [2.x.194] [2.x.195 ] "高斯-赛德尔" [2.x.196] [2.x.197] "高斯-赛德尔块" [2.x.198] [2.x.199] "对称块高斯-赛德尔" [2.x.200] [2.x.201 ] "切比雪夫" [2.x.202] [2.x.203] "MLS" [2.x.204] [2.x.205] "Hiptmair" [2.x.206] [2.x.207] "Amesos-KLU" [2.x.208] [2.x.209 ] "Amesos-Superlu" [2.x.210] [2.x.211] "Amesos-UMFPACK" [2.x.212] [2.x.213] "Amesos-Superludist" [2.x.214] [2.x.215 ] "Amesos-MUMPS" [2.x.216] [2.x.217] "用户定义" [2.x.218] [2.x.219] "SuperLU" [2.x.220] [2.x.221] "IFPACK-Chebyshev" [2.x.222] [2.x.223 ] "自我" [2.x.224] [2.x.225] "无为" [2.x.226] [2.x.227] "IC" [2.x.228] [2.x.229] "ICT" [2.x.230] [2.x.231] "ILU" [2.x.232 ] [2.x.233] "ILUT" [2.x.234] [2.x.235] "Block Chebyshev" [2.x.236] [2.x.237] "IFPACK-Block Chebyshev" [2.x.238] [2.x.239]       
* [0.x.158]*
       决定在最粗糙的层次上使用哪种求解器。可以使用与平滑类型相同的设置。     
* [0.x.159]*
     构造函数。   
* [0.x.160]*
     销毁器。   
* [0.x.161]*
     让Trilinos计算一个多级层次的线性系统的解决方案，并给出矩阵。该函数使用[2.x.240]中指定的矩阵格式。    
* [0.x.162]*
     让Trilinos为给定矩阵的线性系统的解计算一个多级层次结构。与上面的其他初始化函数不同，这个函数使用一个Epetra_CrsMatrixCrs类型的对象。   
* [0.x.163]*
     让Trilinos计算一个多级层次的线性系统的解决方案，给定的矩阵。该函数使用[2.x.241]中指定的矩阵格式 该函数与上述函数类似，但允许用户设置Trilinos ML预处理程序的大部分选项。为了了解ML的所有选项，我们参考了[1.x.11]。不是所有的ML选项都有相应的MueLu选项。   
* [0.x.164]*
     让Trilinos为给定矩阵的线性系统的解计算出一个多级层次结构。与上面的其他初始化函数不同，这个函数使用一个Epetra_CrsMatrix类型的对象。   
* [0.x.165]*
     让Trilinos计算一个多级层次的线性系统的解决方案，给定的矩阵。这个函数接收一个deal.ii矩阵，并将其内容复制到Trilinos矩阵中，所以这个函数可以说是相当低效的。   
* [0.x.166]*
     销毁预处理程序，留下一个像刚刚调用构造函数后的对象。   
* [0.x.167]*
     打印这个类的内存消耗估计值。   
* [0.x.168]*
     将deal.II矩阵复制成Trilinos格式。   
* [0.x.169]*
   一个用于Trilinos矩阵的身份预处理的封装类。   
* [2.x.242]   
* [2.x.243]   
* [0.x.170]*
     这个函数的出现只是为了提供一个预处理程序的接口，以交给平滑器。 这个功能什么都不做。   
* [0.x.171]*
     矩阵参数被忽略，这里只是为了与更复杂的预处理程序兼容。   
* [2.x.244]当这个预处理程序要被包裹在一个没有典范母体的LinearOperator中时，必须调用这个函数。   
* [0.x.172]*
     应用预处理程序，即dst = src。   
* [0.x.173]*
     应用传输调节器，即dst = src。   
* [0.x.174]*
     在deal.II数据结构上应用前置条件器，而不是Trilinos包装类中提供的数据结构，即dst = src。   
* [0.x.175]*
     对deal.II数据结构应用转置预处理，而不是Trilinos包装类中提供的数据结构，即dst = src。   
* [0.x.176]*
     在deal.II并行数据结构上应用预处理程序，而不是Trilinos包装类中提供的数据结构，即dst = src。   
* [0.x.177]*
     在deal.II并行数据结构上应用转置预处理程序，而不是Trilinos包装类中提供的数据结构，即dst = src。   
* [0.x.178]

