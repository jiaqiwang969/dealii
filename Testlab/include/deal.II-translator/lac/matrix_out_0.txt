include/deal.II-translator/lac/matrix_out_0.txt
[0.x.0]*
 使用基类的通用格式独立输出例程以图形形式输出一个矩阵。矩阵被转换为一个二维领域上的补丁列表，其中高度由矩阵的元素给出。基准类的函数可以将这个矩阵的 "山形表示法 "写成各种图形输出格式。矩阵输出的坐标是：像往常一样，列从零开始随着X轴的增加而运行，而行则从零开始进入负Y轴。注意，由于一些内部限制，这个类一次只能输出一个矩阵，也就是说，它不能利用基类的多数据集功能。
* 这个类的一个典型用法如下。

* 
* [1.x.0]
* 当然，你也可以选择不同的图形输出格式。另外，这个类支持任何矩阵，不仅仅是FullMatrix类型的，只要它满足一些要求，用这个类的成员函数说明。
* 通过build_patches()函数生成的补丁可以通过给它一个持有某些标志的对象来修改。关于这些标志的描述，请参见Options类成员的文档。
* 

* 

* 
* [2.x.0] 

 
* [0.x.1]*
   声明容器尺寸的类型。 
* [0.x.2]*
   持有各种变量的类，这些变量用于修改MatrixOut类的输出。 
* [0.x.3]*
     如果[2.x.1]只显示矩阵项的绝对值，而不是包括符号的真实值。默认值为[2.x.2]。    
* [0.x.4]*
     如果大于1，则不显示矩阵的每个元素，而是显示若干条目的平均值。输出补丁的数量也相应变小。这个标志决定了每个显示的区块应该有多大（以行/列为单位）。例如，如果它是两个，那么总是四个条目被整理成一个。        默认值是1。   
* [0.x.5]*
     如果为真，绘制不连续的斑块，每个条目一个。   
* [0.x.6]*
     默认构造函数。将此结构的所有元素设置为其默认值。   
* [0.x.7]*
   解构器。为了使它成为虚拟的而声明的。 
* [0.x.8]*
   从给定的矩阵生成一个补丁列表，并在写入文件时使用给定的字符串作为数据集的名称。一旦补丁被建立，你可以使用基类的函数将数据写入文件，使用支持的输出格式之一。    你可以给一个持有各种选项的结构。更多信息请看这个结构的字段描述。    注意，这个函数要求我们能够提取矩阵的元素，这可以通过内部命名空间中声明的get_element()函数来完成。通过添加特殊化，你可以将这个类扩展到目前不支持的其他矩阵类。此外，我们需要能够提取矩阵的大小，为此我们假设矩阵类型提供了成员函数<tt>m()</tt>和<tt>n()</tt>，它们分别返回行和列的数量。 
* [0.x.9]*
   缩写[2.x.3]类的有点冗长的名字。 
* [0.x.10]*
   这是一个补丁列表，每次build_patches()被调用时都会创建一个补丁。这些补丁在基类的输出例程中使用。 
* [0.x.11]*
   要写入的矩阵的名称。 
* [0.x.12]*
   %函数，基类的函数通过这个函数知道他们应该写什么补丁到文件中。 
* [0.x.13]*
   虚拟函数，基类的输出函数通过它获得数据集的名称。 
* [0.x.14]*
   获取网格点<tt>(i,j)</tt>处的矩阵值。根据给定的标志，这可能意味着不同的事情，例如，如果只应显示绝对值，则取矩阵条目的绝对值。如果块的大小大于1，那么就取几个矩阵项的平均值。 
* [0.x.15]*
     返回稀疏矩阵中具有给定索引的元素。   
* [0.x.16]*
     返回一个块状稀疏矩阵的给定指数的元素。   
* [0.x.17]*
     以给定的指数返回一个特里诺斯稀疏矩阵的元素。   
* [0.x.18]*
     以给定的指数返回一个特里诺斯块状稀疏矩阵的元素。   
* [0.x.19]*
     从上面没有声明此函数特殊化的任何矩阵类型中，返回具有给定指数的元素。这将在矩阵上调用<tt>operator()</tt>。   
* [0.x.20]

