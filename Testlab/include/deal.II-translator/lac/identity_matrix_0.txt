include/deal.II-translator/lac/identity_matrix_0.txt
[0.x.0]!  [2.x.0] Matrix1 [2.x.1]! 

 
* [0.x.1]*
 实现一个简单的类，代表给定大小的身份矩阵，即一个条目为 [2.x.2] 的矩阵。虽然它具有矩阵的最重要的成分，特别是可以询问它的大小并对它进行矩阵-向量乘积，但这种类型的矩阵实际上只在两种情况下有用：预处理和初始化其他矩阵。
* [1.x.0]
* 这个类的主要用处在于它能够初始化其他矩阵，就像这样。

* 
* [1.x.1]
* 
* 这将创建一个[2.x.3]矩阵，对角线上是1，其他地方是0。大多数矩阵类型，特别是FullMatrix和SparseMatrix，都有IdentityMatrix的转换构造函数和赋值运算符，因此可以相当容易地用身份矩阵来填充。
* 

* [1.x.2]
* deal.II有一个专门的类用于此目的，即PreconditionIdentity，比可以在该类的文档中所示的背景下使用。本类可以用大致相同的方式使用，尽管没有任何额外的好处。

* 
* [1.x.3]
* 

* 
* [0.x.2]*
   声明容器尺寸的类型。 
* [0.x.3]*
   默认构造函数。创建一个零大小的矩阵，以后应该使用reinit()函数来调整其大小。 
* [0.x.4]*
   构造函数。创建一个大小为#n的身份矩阵。 
* [0.x.5]*
   调整矩阵的大小为#n乘#n。 
* [0.x.6]*
   该矩阵的行数。对于本矩阵，行数和列数当然是相等的。 
* [0.x.7]*
   该矩阵的列数。对于本矩阵，行数和列数当然是相等的。 
* [0.x.8]*
   矩阵-向量的乘法。对于本例来说，这当然相当于简单地将输入向量复制到输出向量。 
* [0.x.9]*
   矩阵向量乘以输出向量的加法。在本例中，这当然相当于简单地将输入向量加到输出向量上。 
* [0.x.10]*
   矩阵-向量乘以转置矩阵。在本例中，这当然相当于简单地将输入向量复制到输出向量。 
* [0.x.11]*
   与转置矩阵的矩阵向量乘法，并在输出向量上做加法。对于目前的情况，这当然相当于简单地将输入向量加到输出向量。 
* [0.x.12]*
   这个矩阵的行和列的数量。 
* [0.x.13]

