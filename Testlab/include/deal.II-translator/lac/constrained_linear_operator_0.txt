include/deal.II-translator/lac/constrained_linear_operator_0.txt
[0.x.0]*
  [2.x.0] 间接对LinearOperator施加约束

* 
* [0.x.1]*
 这个函数接收一个AffineConstraints对象[2.x.1]和一个运算器示例[2.x.2]（这个示例通常是一个描述系统矩阵的线性运算器
* 
*-它只用于创建适当大小的域和范围向量，它的动作<tt>vmult</tt>从不使用）。) 一个与底层AffineConstraints对象的 "同质动作 "相关的LinearOperator对象被返回。
* 在向量[2.x.3]上应用LinearOperator对象的结果是一个向量[2.x.4]，它存储了在[2.x.6]上调用[2.x.5]的结果。
* 
* - 有一个重要的区别：不均匀性不被应用，而是始终被视为0。
* 这个函数创建的LinearOperator对象主要在内部用于constrained_linear_operator()，以建立一个修正的线性方程组。如何用这种方法解决线性方程组，在[2.x.7]模块中有详细解释。
* 

* 

* 
* [2.x.8] 目前，这个函数对于分布式数据结构可能无法正确工作。
* [2.x.9] LinearOperator

 
* [2.x.10] 

 
* [0.x.2]*
 给定一个AffineConstraints[2.x.11]和一个运算符示例[2.x.12]示例，返回一个LinearOperator，该运算符是对受限自由度子空间的投影，即结果向量中对应于非受限自由度的所有条目被设置为零。
* 

* [2.x.13] LinearOperator

* 
* [2.x.14] 

 
* [0.x.3]*
 给定一个AffineConstraints对象[2.x.15]和一个LinearOperator[2.x.16]，该函数创建一个LinearOperator对象，由三个操作和一个正则化组成。

* 
* [1.x.0]
* 与

* 
* [1.x.1]
* 而[2.x.17]是对由所有与受限自由度相关的向量条目组成的子空间的投影。
* 这个LinearOperator对象与constrained_right_hand_side()一起使用，建立了以下修改后的线性方程系统。[1.x.2] 具有给定的（无约束的）系统矩阵 [2.x.18] ，右手边 [2.x.19] ，以及具有不均匀性的线性约束 [2.x.20] 。
* 在[2.x.22]模块中对这种方法进行了详细解释。
* 

* 

* 
* [2.x.23] 目前，这个函数对于分布式数据结构可能无法正确工作。
* [2.x.24] LinearOperator

 
* [2.x.25] 

 
* [0.x.4]*
 给定一个AffineConstraints对象[2.x.26]一个LinearOperator[2.x.27]linop和一个右手边[2.x.28]，这个函数创建一个PackagedOperation，存储以下计算结果。

* 
* [1.x.3]
* 与

* 
* [1.x.4]
* 
* 这个LinearOperator对象与constrained_right_hand_side()一起用于建立以下修改后的线性方程组。[1.x.5] 具有给定的（无约束的）系统矩阵 [2.x.29] ，右手边 [2.x.30] ，以及具有不均匀性的线性约束 [2.x.31] 。
* 在[2.x.33]模块中对这种方法进行了详细解释。
* 

* 

* 
* [2.x.34] 目前，这个函数对于分布式数据结构可能无法正确工作。
* [2.x.35] LinearOperator

 
* [2.x.36] 

* 
* [0.x.5]

