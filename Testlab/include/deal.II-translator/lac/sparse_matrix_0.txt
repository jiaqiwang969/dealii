include/deal.II-translator/lac/sparse_matrix_0.txt
[0.x.0]*
  [2.x.0] Matrix1 [2.x.1]. 

* 
* [0.x.1]*
 一个命名空间，我们在其中声明对稀疏矩阵元素的迭代器。

* 
* [0.x.2]*
   声明容器大小的类型。 
* [0.x.3]*
   稀疏矩阵访问器的通用模板。第一个模板参数表示底层数字类型，第二个表示矩阵的常数。    通用模板没有被实现，只有针对第二个模板参数的两个可能值的特殊化。因此，这里列出的接口只是作为提供的模板，因为doxygen并没有链接这些特殊化。 
* [0.x.4]*
     这个矩阵条目的值。   
* [0.x.5]*
     此矩阵条目的值。   
* [0.x.6]*
     返回该访问器所指向的矩阵的引用。注意，在本例中，这是一个常数引用。   
* [0.x.7]*
   用于常数矩阵的访问器类，在const_iterators中使用。这个类建立在用于稀疏模式的访问器类的基础上，在所有非零条目上循环，只增加了访问器函数，以获得存储在某一位置的实际值。 
* [0.x.8]*
     这里要使用的矩阵的类型（包括常数）的类型定义。   
* [0.x.9]*
     构造函数。   
* [0.x.10]*
     构造器。构建给定矩阵的终端访问器。   
* [0.x.11]*
     复制构造器，从一个非常量访问器到一个常量访问器。   
* [0.x.12]*
     这个矩阵条目的值。   
* [0.x.13]*
     返回该访问器所指向的矩阵的引用。注意，在本例中，这是一个常量引用。   
* [0.x.14]*
     指向我们使用的矩阵的指针。   
* [0.x.15]*
     使基类的前进函数可用。   
* [0.x.16]*
   用于非恒定矩阵的访问器类，在迭代器中使用。这个类建立在用于稀疏模式的访问器类的基础上，在所有非零条目上循环，只增加了访问器函数，以获得存储在某一位置的实际值。 
* [0.x.17]*
     参考类。这是访问器类在你调用value()函数时返回的东西。引用的作用就像它是对矩阵条目实际值的引用一样，也就是说，你可以读写它，可以对它进行加法和乘法，等等，但是由于矩阵并没有给出这个矩阵条目的地址，我们必须通过函数来完成这一切。        构造函数需要一个指向访问器对象的指针，描述它指向矩阵的哪个元素。当人们写像iterator->value()=0（而不是iterator->value()=0.0）这样的代码时，就会产生歧义，因为右边是一个整数，既可以转换为<tt>数字</tt>（即最常见的双数），也可以转换为另一个<tt>参考</tt>类型的对象。然后编译器抱怨说不知道该采取哪种转换。        由于某些原因，添加另一个重载operator=(int)似乎并不能解决这个问题。然而，我们通过向Reference构造函数添加第二个假参数来避免这个问题，该参数未被使用，但可以确保没有第二个匹配的转换序列，使用单参数的右侧。        测试案例oliver_01检查了这一方法是否真的能按预期工作。   
* [0.x.18]*
       构造函数。关于第二个参数，请参见一般的类文档。     
* [0.x.19]*
       对矩阵的数据类型的转换操作。     
* [0.x.20]*
       将我们目前指向的矩阵的元素设置为[2.x.2]。      
* [0.x.21]*
       将[2.x.3]添加到我们目前指向的矩阵元素中。     
* [0.x.22]*
       从我们现在指向的矩阵元素中减去[2.x.4]。     
* [0.x.23]*
       将我们现在指向的矩阵元素乘以[2.x.5]。      
* [0.x.24]*
       用我们现在指向的矩阵的元素除以[2.x.6]。      
* [0.x.25]*
       指向访问器的指针，表示我们目前指向哪个元素。     
* [0.x.26]*
     这里要使用的矩阵的类型（包括常数）的类型定义。   
* [0.x.27]*
     构造函数。   
* [0.x.28]*
     构造器。构建给定矩阵的终端访问器。   
* [0.x.29]*
     该矩阵条目的值，作为可读可写的引用返回。   
* [0.x.30]*
     返回该访问器所指向的矩阵的引用。注意，在本例中，这是一个非常量的引用。   
* [0.x.31]*
     指向我们使用的矩阵的指针。   
* [0.x.32]*
     使基类的前进函数可用。   
* [0.x.33]*
   用于常数和非常数矩阵的迭代器。    这些迭代器的典型用途是迭代稀疏矩阵的元素或单个行的元素。注意，不能保证行的元素实际上是按照列单调增加的顺序来遍历的。更多信息请参见SparsityPattern类的文档。    第一个模板参数表示基础数字类型，第二个模板参数表示矩阵的常数。    因为这个类有一个专门的<tt>Constness=false</tt>，所以这个类是用于常数矩阵的迭代器。   
* [2.x.7] 该类直接对SparsityPattern和SparseMatrix类的内部数据结构进行操作。因此，有些操作很便宜，有些则不然。特别是，访问列索引和指向的条目的值是很便宜的。另一方面，访问行索引是很昂贵的（对于一个有[2.x.9]行的矩阵，这需要[2.x.8]次操作）。因此，当你设计使用这些迭代器的算法时，通常的做法是不一次性循环稀疏矩阵的[1.x.0]个元素，而是在所有行上有一个外循环，并在这个循环中迭代这个行的元素。这样，你只需要解除对迭代器的引用来获得列索引和值，而通过使用循环索引可以避免对行索引的（昂贵）查找。 
* [0.x.34]*
     我们要操作的矩阵类型（包括常数）的类型定义。   
* [0.x.35]*
     当你解除对当前类型的迭代器的定义时，你得到的类型的别名。   
* [0.x.36]*
     构造函数。在矩阵[2.x.10]中创建一个迭代器，用于完整矩阵中的给定索引（从第2个条目开始计算）。   
* [0.x.37]*
     构造函数。为给定的矩阵创建终端迭代器。   
* [0.x.38]*
     转换构造函数，从非常量迭代器到常量迭代器。   
* [0.x.39]*
     从非定常迭代器到定常迭代器的复制赋值操作符。   
* [0.x.40]*
     前缀增量。   
* [0.x.41]*
     后缀增量。   
* [0.x.42]*
     撤消运算符。   
* [0.x.43]*
     解除引用操作符。   
* [0.x.44]*
     比较。真，如果两个迭代器都指向同一个矩阵位置。   
* [0.x.45]*
     <tt>==</tt>的倒数。   
* [0.x.46]*
     比较运算符。如果第一个行号较小，或者行号相等且第一个索引较小，则结果为真。        这个函数只有在两个迭代器都指向同一个矩阵时才有效。   
* [0.x.47]*
     比较运算符。与上述运算符的工作方式相同，只是反过来了。   
* [0.x.48]*
     返回当前迭代器和参数之间的距离。这个距离是通过对当前迭代器应用operator++多少次才能得到参数（对于正的返回值），或者operator--（对于负的返回值）而给出。   
* [0.x.49]*
     返回一个比当前迭代器领先[2.x.11]的迭代器。   
* [0.x.50]*
     存储一个访问器类的对象。   
* [0.x.51]*
  [2.x.12] 

* 
* [0.x.52]*
 稀疏矩阵。这个类实现了在SparsityPattern表示的位置存储矩阵入口值的功能。参见[2.x.13]中关于稀疏模式和矩阵之间分离的讨论。
* SparseMatrix的元素是按照SparsityPattern类存储其条目的相同顺序来存储的。在每一行中，元素通常以列索引递增的顺序从左到右存储；这一规则的例外是，如果矩阵是正方形（m() == n()），那么对角线条目就会被存储为每一行的第一个元素，以使应用雅可比或SSOR预处理程序等操作更快。因此，如果你用迭代器遍历稀疏矩阵的某一行的元素（使用[2.x.14]和[2.x.15]，你会发现只要矩阵是平方的，每一行的元素就不会按列索引排序。
* 

* 
* [2.x.16] 这个模板的实例化提供给<tt> [2.x.17] 和 [2.x.18] 其他的可以在应用程序中生成（见手册中[2.x.19]一节）。
* 

* 
* [2.x.20] 

* 
* [0.x.53]*
   声明容器尺寸的类型。 
* [0.x.54]*
   矩阵条目的类型。这个别名类似于标准库容器中的<tt>value_type</tt>。 
* [0.x.55]*
   声明一个类型，该类型持有与本类的模板参数相同精度的实值数。如果这个类的模板参数是一个实数数据类型，那么real_type就等于模板参数。  如果模板参数是一个[2.x.21]类型，那么real_type等于复数的基础类型。    这个别名被用来表示规范的返回类型。 
* [0.x.56]*
   一个迭代器类的类型定义，在这个矩阵的所有非零项上行走。这个迭代器不能改变矩阵的值。 
* [0.x.57]*
   走过该矩阵所有非零项的迭代器类的类型定义。这个迭代器[2.x.22]可以改变矩阵的值，但当然不能改变稀疏模式，因为一旦稀疏矩阵被附加到它上面，这个模式就固定了。 
* [0.x.58]*
   一个描述这个类在运行时行为方面的一些特征的结构。其他一些以一个或其他矩阵类作为模板参数的类（如块状矩阵类）可以根据这个类中的变量来调整其行为。 
* [0.x.59]*
     对该矩阵的单个元素进行零的添加是安全的。   
* [0.x.60]*
    [2.x.23] 构造函数和初始化  
* [0.x.61]*
   构造函数；将矩阵初始化为空，没有任何结构，也就是说，矩阵根本无法使用。因此，这个构造函数只对作为类的成员的矩阵有用。所有其他的矩阵都应该在数据流中的一个点上创建，在那里所有必要的信息都是可用的。    你必须在使用前用reinit(const SparsityPattern&)初始化矩阵。 
* [0.x.62]*
   复制构造函数。只有当要复制的矩阵为空时，才允许调用该构造函数。这与SparsityPattern的原因相同，详见那里。    如果你真的想复制一个完整的矩阵，你可以通过使用copy_from()函数来实现。 
* [0.x.63]*
   移动构造函数。通过将矩阵的内部数据[2.x.24]转移到一个新的对象中，构造一个新的稀疏矩阵。    移动构造允许一个对象从一个函数中返回或打包成一个元组，即使该类不能被复制构造。 
* [0.x.64]*
   构造器。接受给定的矩阵稀疏度结构来表示这个矩阵的稀疏度模式。你可以在以后通过调用reinit(const SparsityPattern&)函数来改变稀疏性模式。    你必须确保稀疏结构的寿命至少与该矩阵的寿命一样长，或者只要reinit(const SparsityPattern&)没有被调用新的稀疏模式。    构造函数被明确标记，以便不允许有人将稀疏模式代替稀疏矩阵传递给某个函数，这样就会生成一个空矩阵。 
* [0.x.65]*
   拷贝构造函数：用身份矩阵初始化矩阵。如果稀疏模式和身份矩阵的大小不一致，或者如果稀疏模式没有在整个对角线上提供非零条目，这个构造函数将抛出一个异常。 
* [0.x.66]*
   解构器。释放所有内存，但不释放稀疏结构的内存。 
* [0.x.67]*
   复制操作符。由于复制整个稀疏矩阵是一个非常昂贵的操作，我们不允许这样做，除了大小为0的空矩阵这一特殊情况。这看起来不是特别有用，但如果想有一个[2.x.25]，这正是人们所需要的：在这种情况下，人们可以创建一个空矩阵的向量（需要复制对象的能力），然后用有用的东西来填充。 
* [0.x.68]*
   移动赋值运算符。这个操作符通过转移[2.x.27]的内部数据，将目前的矩阵替换成[2.x.26]。  
* [0.x.69]*
   复制运算符：用身份矩阵初始化矩阵。如果稀疏模式和身份矩阵的大小不一致，或者如果稀疏模式没有规定整个对角线上的非零条目，这个操作符将抛出一个异常。 
* [0.x.70]*
   这个操作符将一个标量分配给一个矩阵。因为这通常没有什么意义（我们应该把所有的矩阵条目都设置为这个值吗？ 仅仅是稀疏模式的非零条目？），这个操作只允许在实际要分配的值为零时进行。这个操作符的存在只是为了允许明显的符号<tt>matrix=0</tt>，它将矩阵的所有元素设置为零，但保留之前使用的稀疏模式。     [2.x.28]   
* [0.x.71]*
   用给定的稀疏模式重新初始化稀疏矩阵。后者告诉矩阵需要保留多少个非零元素。    关于内存分配，和上面说的一样。    你必须确保稀疏结构的寿命至少与该矩阵的寿命一样长，或者只要reinit(const SparsityPattern &)没有被调用，就不会有新的稀疏结构。    矩阵的元素被这个函数设置为零。 
* [0.x.72]*
   释放所有内存并返回到与调用默认构造函数后相同的状态。它也会忘记它之前绑定的稀疏模式。 
* [0.x.73]*
    [2.x.29] 矩阵的信息  
* [0.x.74]*
   返回该对象是否为空。如果两个维度都是零或者没有关联的SparsityPattern，它就是空的。 
* [0.x.75]*
   返回共域（或范围）空间的维度。注意，矩阵的维度是[2.x.30] 。 
* [0.x.76]*
   返回域空间的维度。请注意，矩阵的维度是[2.x.31] .  
* [0.x.77]*
   返回特定行中的条目数。 
* [0.x.78]*
   返回该矩阵的非零元素的数量。实际上，它返回的是稀疏模式中的条目数；如果任何一个条目恰好是零，无论如何都会被计算在内。 
* [0.x.79]*
   返回这个矩阵中实际非零元素的数量。可以指定参数<tt>threshold</tt>，以便只计算绝对值大于阈值的元素。    注意，这个函数（与n_nonzero_elements()相反）不计算稀疏模式的所有条目，而只计算非零的（或绝对值大于阈值的）。 
* [0.x.80]*
   返回一个对该矩阵底层稀疏性模式的（常量）引用。    尽管返回值被声明为<tt>const</tt>，但你应该注意，如果你调用任何对其进行操作的对象的非常量函数，它可能会改变。 
* [0.x.81]*
   确定此对象的内存消耗（以字节为单位）的估计值。参见MemoryConsumption。 
* [0.x.82]*
   虚函数，与分布式并行矩阵兼容。 
* [0.x.83]*
    [2.x.32] 修改条目  
* [0.x.84]*
   设置元素（[1.x.1]）为<tt>value</tt>。如果条目不存在或者<tt>value</tt>不是一个有限的数字，则抛出一个错误。尽管如此，它仍然允许在不存在的字段中存储零值。 
* [0.x.85]*
   将FullMatrix中给出的所有元素设置到<tt>indices</tt>给出的稀疏矩阵位置。换句话说，这个函数将<tt>full_matrix</tt>中的元素写入调用的矩阵中，对矩阵的行和列都使用<tt>indices</tt>指定的本地到全球的索引。这个函数假设一个二次稀疏矩阵和一个二次全矩阵，这是FE计算中的通常情况。    可选参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要设置零值，还是要过滤掉零值（如果存在的话，不改变相应元素中的先前内容）。默认值是<tt>false</tt>，也就是说，即使是零值也要处理。 
* [0.x.86]*
   与之前的函数相同，但现在包括了使用矩形full_matrices的可能性，以及在行和列上分别使用不同的本地到全球索引。 
* [0.x.87]*
   将矩阵的指定行中的几个元素与<tt>col_indices</tt>给出的列索引设置为相应的值。    可选的参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要设置零值，还是要过滤掉零值（如果存在的话，不改变相应元素中的先前内容）。默认值是<tt>false</tt>，也就是说，即使是零值也要处理。 
* [0.x.88]*
   将几个元素设置为由<tt>values</tt>给出的值，在给定的行和col_indices给出的列中设置为稀疏矩阵。    可选的参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要插入零值还是要过滤掉它们。默认值是<tt>false</tt>，也就是说，即使是零值也要插入/替换。 
* [0.x.89]*
   向元素添加<tt>value</tt>（[1.x.2]）。 如果该条目不存在或者<tt>value</tt>不是一个有限的数字，则抛出一个错误。尽管如此，它仍然允许在不存在的字段中存储零值。 
* [0.x.90]*
   将FullMatrix<double>中给出的所有元素添加到由<tt>indices</tt>给出的稀疏矩阵位置。换句话说，这个函数将<tt>full_matrix</tt>中的元素添加到调用矩阵的相应条目中，使用<tt>indices</tt>为矩阵的行和列指定的本地到全球索引。这个函数假定一个二次稀疏矩阵和一个二次全矩阵，这是FE计算中通常的情况。    可选参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要添加零值，还是要过滤掉这些零值，只添加非零数据。默认值是<tt>true</tt>，也就是说，零值不会被添加到矩阵中。 
* [0.x.91]*
   与之前的函数相同，但现在包括了使用矩形full_matrices的可能性，以及在行和列上分别使用不同的本地到全球索引。 
* [0.x.92]*
   将矩阵的指定行中的几个元素与<tt>col_indices</tt>给出的列索引设置为相应的值。    可选参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要添加零值，还是要过滤掉这些零值，只添加非零数据。默认值是<tt>true</tt>，也就是说，零值不会被添加到矩阵中。 
* [0.x.93]*
   在给定的全局矩阵行中，在稀疏矩阵中由col_indices指定的列中添加一个由<tt>values</tt>给出的数值阵列。    可选的参数<tt>elide_zero_values</tt>可以用来指定是无论如何都要添加零值，还是要过滤掉这些数据，只添加非零值。默认值是<tt>true</tt>，也就是说，零值不会被添加到矩阵中。 
* [0.x.94]*
   将整个矩阵乘以一个固定系数。 
* [0.x.95]*
   用整个矩阵除以一个固定系数。 
* [0.x.96]*
   通过形成现有矩阵和其转置之间的平均值来对称矩阵， [2.x.33] 。    这个操作假设底层的稀疏模式代表一个对称的对象。如果不是这样，那么这个操作的结果将不是一个对称矩阵，因为出于效率的考虑，它只通过在左下角的三角形部分进行循环来明确地进行对称；如果右上角的三角形有条目，那么这些元素在对称过程中会被遗漏。稀疏模式的对称化可以通过[2.x.34]得到。  
* [0.x.97]*
   将作为参数给出的矩阵复制到当前对象中。    复制矩阵是一个昂贵的操作，我们不希望通过编译器生成的代码[2.x.35]而意外发生（例如，如果不小心声明了当前类型的函数参数为[1.x.3]而不是[1.x.4]，就会发生这种情况）。复制矩阵的功能是在这个成员函数中实现的。因此，该类型对象的所有复制操作都需要一个明确的函数调用。    源矩阵可以是一个任意类型的矩阵，只要其数据类型可以转换为该矩阵的数据类型。    该函数返回一个对<tt>*this</tt>的引用。 
* [0.x.98]*
   这个函数完全类似于[2.x.36]函数，它允许在一个步骤中初始化整个矩阵。关于参数类型及其含义的更多信息请见那里。你还可以在那里找到一个关于如何使用这个函数的小例子。    与引用的函数唯一不同的是，内部迭代器指向的对象需要是[2.x.37] int, value</tt>类型，其中<tt>value</tt>需要可转换为该类的元素类型，由<tt>number</tt>模板参数指定。    矩阵以前的内容被覆盖。注意，由输入参数指定的条目不一定要覆盖矩阵的所有元素。未覆盖的元素保持不动。 
* [0.x.99]*
   将一个完整矩阵的非零条目复制到此对象中。之前的内容被删除。    请注意，底层的稀疏模式必须适合容纳全矩阵的非零条目。这可以使用[2.x.38]的那个版本来实现，该版本以FullMatrix作为参数。 
* [0.x.100]*
   将给定的特里诺斯矩阵复制到这个矩阵中。如果当前对象的稀疏模式不包含给定参数的非零条目的位置，该操作会触发一个断言。    这个函数假设两个矩阵有相同的大小。    该函数返回一个对<tt>*this</tt>的引用。 
* [0.x.101]*
   将<tt>matrix</tt>按<tt>factor</tt>的比例添加到这个矩阵中，也就是说，将<tt>factor*matrix</tt>的矩阵添加到<tt>this</tt>。如果所涉及的两个矩阵的稀疏性模式不指向同一个对象，这个函数会抛出一个错误，因为在这种情况下，操作会比较便宜。    源矩阵可以是一个任意底层标量类型的稀疏矩阵，只要其数据类型可以转换为这个矩阵的数据类型。 
* [0.x.102]*
    [2.x.39]条目访问  
* [0.x.103]*
   返回条目的值（[1.x.5]）。 这可能是一个昂贵的操作，你应该始终注意在哪里调用这个函数。为了避免滥用，如果所需元素在矩阵中不存在，该函数会抛出一个异常。    如果你想要一个返回零的函数（对于不在矩阵的稀疏模式中的条目），请使用el()函数。    如果你要在所有元素上循环，可以考虑使用一个迭代器类来代替，因为它们更适合稀疏的矩阵结构。 
* [0.x.104]*
   与上面那个相反，这个函数允许修改对象。 
* [0.x.105]*
   这个函数主要像operator()()，它返回矩阵条目的值（[1.x.6]）。唯一的区别是，如果这个条目不存在于稀疏模式中，那么就不会引发异常，而是返回0。虽然这在某些情况下可能很方便，但请注意，由于没有使用矩阵的稀疏性，所以很容易写出与最优解相比很慢的算法。    如果你要在所有元素上循环，可以考虑使用一个迭代器类来代替，因为它们更适合稀疏的矩阵结构。 
* [0.x.106]*
   返回第[1.x.7]行中的主对角线元素。如果矩阵不是二次方的，这个函数会抛出一个错误。    这个函数比operator()()快得多，因为对于二次矩阵来说，对角线条目可能是每行中第一个被存储的，因此访问时不需要搜索正确的列号。 
* [0.x.107]*
   和上面一样，但返回一个可写的引用。你确定你知道你在做什么吗？ 
* [0.x.108]*
    [2.x.40] 乘法运算  
* [0.x.109]*
   矩阵-向量乘法：让[1.x.8]与[1.x.9]是这个矩阵。    注意，虽然这个函数可以对所有提供迭代器类的向量进行操作，但它只对类型为 [2.x.41] 的对象真正有效。  对于所有迭代元素或随机成员访问昂贵的类来说，这个函数并不高效。特别是，如果你想与BlockVector对象相乘，你应该考虑同时使用BlockSparseMatrix。    源和目的不能是同一个向量。     [2.x.42]   
* [0.x.110]*
   矩阵-向量乘法：让[1.x.10]与[1.x.11]是这个矩阵。这个函数与vmult()的作用相同，但需要转置的矩阵。    注意，虽然这个函数可以对所有提供迭代器类的向量进行操作，但它只对类型为 [2.x.43] 的对象真正有效。  对于所有迭代元素或随机成员访问昂贵的类来说，这个函数并不高效。特别是，如果你想与BlockVector对象相乘，你应该考虑同时使用BlockSparseMatrix。    源和目的不能是同一个向量。 
* [0.x.111]*
   添加矩阵-向量的乘法。在[1.x.13]上添加[1.x.12]，[1.x.14]是这个矩阵。    注意，虽然这个函数可以对所有提供迭代器类的向量进行操作，但它只对类型为 [2.x.44] 的对象真正有效。  对于所有迭代元素或随机成员访问昂贵的类来说，这个函数并不高效。特别是，如果你想与BlockVector对象相乘，你应该考虑同时使用BlockSparseMatrix。    源和目的不能是同一个向量。     [2.x.45]   
* [0.x.112]*
   添加矩阵-向量的乘法。将[1.x.15]加到[1.x.16]，[1.x.17]是这个矩阵。这个函数与vmult_add()的操作相同，但取的是转置的矩阵。    注意，虽然这个函数可以对所有提供迭代器类的向量进行操作，但它只对类型为 [2.x.46] 的对象真正有效。  对于所有迭代元素或随机成员访问昂贵的类来说，这个函数并不高效。特别是，如果你想与BlockVector对象相乘，你应该考虑同时使用BlockSparseMatrix。    源和目的不能是同一个向量。 
* [0.x.113]*
   返回向量 [2.x.47] 相对于该矩阵诱导的法线的平方，即 [2.x.48] 。这很有用，例如在有限元背景下，一个函数的[2.x.49]规范等于相对于代表有限元函数节点值的向量的质量矩阵的矩阵规范。    显然，对于这个操作来说，矩阵需要是二次的，而且为了使结果真正成为一个规范，它还需要是实数对称的或复数隐式的。    该矩阵和给定向量的底层模板类型应该都是实值或复值，但不是混合的，这样这个函数才有意义。     [2.x.50]   
* [0.x.114]*
   计算矩阵标量乘积 [2.x.51] 。     [2.x.52]   
* [0.x.115]*
   计算方程[1.x.18]的残差，其中残差被定义为[1.x.19]。将残差写入<tt>dst</tt>。残差向量的[1.x.20]准则被返回。    源[1.x.21]和目的[1.x.22]不能是同一个向量。     [2.x.53]   
* [0.x.116]*
   执行矩阵-矩阵乘法<tt>C = A B</tt>，或者，如果给出一个可选的矢量参数，则<tt>C = A diag(V) B</tt>，其中<tt>diag(V)</tt>定义了一个带有矢量项的对角矩阵。    这个函数假定调用矩阵[2.x.54]和参数[2.x.55]的大小兼容。默认情况下，输出矩阵[2.x.56]将被适当调整大小。    默认情况下，即如果可选的参数[2.x.57]是[2.x.58]，矩阵C的稀疏模式将被改变，以确保由乘积[2.x.59]产生的所有条目可以被存储在[2.x.60]中。这是一个昂贵的操作，如果有办法预先预测稀疏模式，你可能应该在以[2.x.61]为最后一个参数调用这个函数之前自己建立它。在这种情况下，疏密模式的重建被绕过了。    当把[2.x.62]设置为[2.x.63]时（即把它留在默认值），必须意识到作为第一个参数传递的矩阵[2.x.64]仍然需要用稀疏模式进行初始化（可以在创建稀疏矩阵对象时，或者通过[2.x.65]函数）。这是因为我们可以在当前函数中创建一个稀疏模式，然后将[2.x.66]与之关联，但一旦当前函数结束，就没有办法将这个稀疏模式的所有权转移给任何人。因此，该函数要求[2.x.67]已经与一个稀疏模式对象相关联，然后该对象被重置为适合[2.x.68]和[2.x.69]的乘积。 然而，作为其结果，还必须认识到[2.x.70]的稀疏模式被修改，这将使碰巧[1.x.24]使用该稀疏模式对象的[1.x.23]无效。 
* [0.x.117]*
   用<tt>this</tt>的转置执行矩阵-矩阵乘法，即<tt>C = A<sup>T</sup> B</tt>，或者，如果给出了可选的矢量参数，<tt>C = A<sup>T</sup> diag(V) B</tt>，其中<tt>diag(V)</tt>定义了一个带有矢量项的对角矩阵。    这个函数假定调用矩阵<tt>A</tt>和<tt>B</tt>的大小兼容。<tt>C</tt>的大小将在本函数中设置。    矩阵C的内容和稀疏模式将被这个函数改变，所以要确保稀疏模式没有在你的程序中其他地方使用。这是一个昂贵的操作，所以在你使用这个函数之前要三思而后行。    有一个可选的标志<tt>rebuild_sparsity_pattern</tt>，可以用来绕过创建一个新的稀疏度模式，而使用存储在<tt>C</tt>中的稀疏度模式。在这种情况下，要确保它真的适合。默认情况下是重建稀疏度模式。   
* [2.x.71] 重建稀疏度模式需要改变它。这意味着所有与该稀疏性模式相关的其他矩阵将有无效的条目。 
* [0.x.118]*
    [2.x.72] 矩阵规范  
* [0.x.119]*
   返回矩阵的[2.x.73]规范，即[2.x.74] ，（最大列数之和）。 这是自然的矩阵准则，与向量的[2.x.75]准则兼容，即[2.x.76] 。(参见Haemmerlin- Hoffmann: Numerische Mathematik)  
* [0.x.120]*
   返回矩阵的[2.x.77]准则，即[2.x.78] , (行的最大和)。 这是自然的矩阵准则，与向量的[2.x.79]准则兼容，即[2.x.80] 。 (参看Haemmerlin-Hoffmann: Numerische Mathematik)  
* [0.x.121]*
   返回矩阵的frobenius norm，即矩阵中所有条目的平方之和的平方根。 
* [0.x.122]*
    [2.x.81] 预处理方法  
* [0.x.123]*
   应用雅可比预处理，将<tt>src</tt>向量的每个元素乘以各自对角线元素的逆值，并将结果乘以松弛因子<tt>omega</tt>。 
* [0.x.124]*
   对<tt>src</tt>应用SSOR预处理，阻尼<tt>omega</tt>。  可选的参数<tt>pos_right_of_diagonal</tt>应该提供一个数组，其中每个条目指定全局非零点阵列中对角线的右边位置。 
* [0.x.125]*
   将SOR预处理矩阵应用于<tt>src</tt>。 
* [0.x.126]*
   对<tt>src</tt>应用转置的SOR预处理矩阵。 
* [0.x.127]*
   就地执行SSOR预处理。 应用预处理矩阵而不复制到第二个向量。 <tt>omega</tt>是放松参数。 
* [0.x.128]*
   就地执行SOR预处理。 <tt>omega</tt>是松弛参数。 
* [0.x.129]*
   就地进行转置SOR预处理。 <tt>omega</tt>是松弛参数。 
* [0.x.130]*
   就地进行移置的SOR预处理。    标准的SOR方法是按照<tt>permutation</tt>规定的顺序应用的，即首先是行<tt>permutation[0]</tt>，然后是<tt>permutation[1]</tt>，依此类推。出于效率的考虑，需要排列组合以及它的逆向排列。    <tt>omega</tt>是放松参数。 
* [0.x.131]*
   就地进行转置的包络SOR预处理。    转置的SOR方法按照<tt>permutation</tt>规定的顺序应用，即首先是行<tt>permutation[m()-1]</tt>，然后是<tt>permutation[m()-2]</tt>，依此类推。出于效率的考虑，需要用到permutation以及它的逆向。    <tt>omega</tt>是放松参数。 
* [0.x.132]*
   对<tt>v</tt>做一个雅可比步骤。 对<tt>b</tt>做一个直接的雅可比步骤，右手边<tt>b</tt>。这个函数需要一个辅助向量，它从GrowingVectorMemory中获取。 
* [0.x.133]*
   对<tt>v</tt>做一个SOR步骤。 对右手边的<tt>b</tt>直接执行SOR步骤。 
* [0.x.134]*
   对<tt>v</tt>做一个邻接的SOR步骤。 对<tt>b</tt>做一个直接的TSOR步骤，右手边<tt>b</tt>。 
* [0.x.135]*
   对<tt>v</tt>做一个SSOR步骤。 通过在SOR之后执行TSOR，对右手边的<tt>b</tt>直接执行SSOR步骤。 
* [0.x.136]*
    [2.x.82] 迭代器  
* [0.x.137]*
   返回一个指向矩阵的第一个元素的迭代器。    注意这个类的一般文档中关于元素访问顺序的讨论。 
* [0.x.138]*
   像上面的函数一样，但是对于非恒定矩阵。 
* [0.x.139]*
   返回一个迭代器，指向这个矩阵的最后一个以上的元素。 
* [0.x.140]*
   像上面的函数一样，但对于非静态矩阵。 
* [0.x.141]*
   返回一个指向行[2.x.83]第一个元素的迭代器 注意，如果给定的行是空的，即不包含任何非零条目，那么这个函数返回的迭代器等于<tt>end(r)</tt>。在这种情况下，如果行[2.x.84]和以下任何一行都不包含任何非零条目，则返回的迭代器可能无法被解除引用。 
* [0.x.142]*
   像上面的函数一样，但对于非恒定矩阵。 
* [0.x.143]*
   返回一个指向第[2.x.85]行最后一个元素的迭代器，如果[2.x.86]之后的行根本不包含任何条目，则指向整个稀疏模式的末端。    请注意，结束迭代器不一定是可被解读的。特别是如果它是一个矩阵的最后一行的结束迭代器，情况更是如此。 
* [0.x.144]*
   像上面的函数一样，但是对于非恒定矩阵。 
* [0.x.145]*
    [2.x.87] 输入/输出  
* [0.x.146]*
   打印矩阵到给定的流，使用格式<tt>(row,column) value</tt>，即每行打印矩阵的一个非零条目。如果<tt>across</tt>为真，则在单行上打印所有条目，使用格式row,column:value。    如果参数<tt>diagonal_first</tt>为真，则二次方矩阵的对角线元素在其行中首先打印，对应于内部存储方案。如果它是假的，一行中的元素将按升列顺序写入。 
* [0.x.147]*
   以通常的格式打印矩阵，即作为矩阵，而不是作为非零元素的列表。为了提高可读性，不在矩阵中的元素显示为空白，而明确设置为零的矩阵元素则显示为空白。    参数允许对输出格式进行灵活设置。  <tt>precision</tt>和<tt>scientific</tt>用于确定数字格式，其中<tt>scientific = false</tt>表示固定点符号。 <tt>width</tt>的一个零条目使函数计算出一个宽度，但如果输出粗略的话，可以将其改为一个正值。    此外，还可以指定一个空值的字符。    最后，整个矩阵可以与一个共同的分母相乘，以产生更可读的输出，甚至是整数。     [2.x.88] 如果应用于一个大的矩阵，这个函数可能会产生[1.x.25]量的输出!  
* [0.x.148]*
   打印矩阵的实际模式。对于每个绝对值大于阈值的条目，打印一个'*'，对于每个较小的数值打印一个':'，对于每个未分配的条目打印一个'.'。 
* [0.x.149]*
   将矩阵打印到输出流[2.x.89]中，其格式可以被[2.x.90]读取 要在python中加载矩阵，只需做<code> [data, row, column] = numpy.loadtxt('my_matrix.txt') sparse_matrix = scipy.sparse.csr_matrix((data, (row, column))   </code>  
* [0.x.150]*
   把这个对象的数据全部写到一个文件中。这是以二进制模式进行的，所以输出的数据既不能被人类阅读，也不能（可能）被其他使用不同操作系统的数字格式的计算机阅读。    这个函数的目的是，如果你的内存不足，想在不同的程序之间进行交流，或者允许对象在程序的不同运行中持续存在，你可以把矩阵和稀疏模式换出来。 
* [0.x.151]*
   从文件中读取先前由block_write()写入的数据。  这是用上述函数的逆运算来完成的，所以它的速度相当快，因为除了前面的几个数字，比特流是不被解释的。    在这个操作中，对象被调整了大小，所有以前的内容都会丢失。然而，请注意，没有对新数据和底层的SparsityPattern对象是否适合在一起进行检查。你有责任确保稀疏度模式和要读取的数据是匹配的。    一个原始形式的错误检查会被执行，它将识别最直白的尝试，即把一些数据解释为一个矩阵，以比特方式存储到一个实际上不是这样创建的文件中，但不是更多。 
* [0.x.152]*
    [2.x.91] 异常情况 [2.x.92].   
* [0.x.153]*
   异常情况  
* [0.x.154]*
   异常情况  
* [0.x.155]*
   异常情况  
* [0.x.156]*
   异常情况  
* [0.x.157]*
   对于某些矩阵存储格式，特别是PETSc分布式块矩阵，对单个元素的设置和添加操作不能自由混合。相反，当我们想从设置元素切换到添加元素时，我们必须同步操作。 BlockMatrixBase通过为每个块调用这个辅助函数来自动同步访问。 这个函数确保矩阵处于一个允许添加元素的状态；如果它之前已经处于这个状态，那么这个函数就不会做任何事情。 
* [0.x.158]*
   与prepare_add()相同，但如果该类中的元素表示法需要这样的操作，则为设置元素准备矩阵。 
* [0.x.159]*
   指向该矩阵使用的稀疏模式的指针。为了保证它在使用中不被删除，我们使用SmartPointer类来订阅它。 
* [0.x.160]*
   所有非零条目的数值数组。一个条目在矩阵中的位置，也就是这个数组中给定值的行号和列号，只能用稀疏模式来推导。同样的道理也适用于更常见的通过坐标寻找一个条目的操作。 
* [0.x.161]*
   拨出的#val的大小。如果在过去的某个时候，通过使用reinit()函数将具有较小尺寸的稀疏模式关联到该对象，从而减少了矩阵的尺寸，那么这个尺寸可能大于实际使用的部分。 
* [0.x.162]

