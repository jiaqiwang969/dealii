include/deal.II-translator/lac/trilinos_solver_0.txt
[0.x.0]*
   使用Trilinos求解器的求解器类的基类。由于Trilinos中的求解器是根据传递给通用求解器对象的标志来选择的，基本上所有实际的求解器调用都发生在这个类中，派生类只是设置正确的标志来选择一个或另一个求解器，或者为单个求解器设置某些参数。关于Trilinos求解器包AztecOO的一般讨论，我们参考了[1.x.0]。    这个求解器类也可以作为一个独立的类来使用，通过标志<tt>solver_name</tt>来设置各自的Krylov方法。这可以在运行时进行（例如，在从ParameterList解析求解器时），与deal.II类SolverSelector类似。   
* [2.x.0]   
* [0.x.1]*
     枚举对象，在派生类的构造函数中设置，并告诉Trilinos要使用哪个求解器。这个选项也可以在用户程序中设置，所以当解算器应该在运行时设置时，人们可能会使用这个基类而不是某个专门的派生类。目前启用的选项有。   
* [0.x.2]*
       使用共轭梯度（CG）算法。     
* [0.x.3]*
       使用共轭梯度平方（CGS）算法。     
* [0.x.4]*
       使用广义最小残差（GMRES）算法。     
* [0.x.5]*
       使用双共轭梯度稳定化（BICGStab）算法。     
* [0.x.6]*
       使用无转置的准最小残差（TFQMR）方法。     
* [0.x.7]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.8]*
       将附加数据字段设置为所需的输出格式，并在派生类为GMRES的情况下放入重启参数。            TODO: 找到一个更好的方法来设置GMRES重启参数，因为在基类中为所有求解器设置一个求解器的特定选项是相当不优雅的。     
* [0.x.9]*
       启用/禁用求解器细节的输出（每次迭代的残差等）。     
* [0.x.10]*
       GMRES求解器的重新启动参数。     
* [0.x.11]*
     构造函数。接受求解器控制对象并创建求解器。   
* [0.x.12]*
     第二个构造函数。这个构造函数接收一个指定求解器名称的枚举对象，并设置适当的Krylov方法。   
* [0.x.13]*
     解构器。   
* [0.x.14]*
     解决线性系统<tt>Ax=b</tt>。根据派生类提供的信息和作为预处理程序传递的对象，选择Trilinos的线性求解器和预处理程序中的一个。   
* [0.x.15]*
     解决线性系统<tt>Ax=b</tt>，其中<tt>A</tt>是一个算子。    这个函数可以用来进行无矩阵计算。根据派生类提供的信息和作为预处理程序传递的对象，选择Trilinos的线性求解器和预处理程序中的一个。   
* [0.x.16]*
     求解线性系统<tt>Ax=b</tt>，其中<tt>A</tt>和其[2.x.1]都是一个算子。    当<tt>A</tt>和[2.x.2]都是由TrilinosPayload派生的LinearOperators时，就可以使用这个函数。    根据派生类提供的信息和作为预处理程序传递的对象，会选择Trilinos的线性求解器和预处理程序之一。   
* [0.x.17]*
     求解线性系统<tt>Ax=b</tt>，其中<tt>A</tt>是一个算子，向量[2.x.3]和[2.x.4]是Trilinos本地的向量类型。    当<tt>A</tt>是一个从TrilinosPayload派生的LinearOperators时，可以使用这个函数。    根据派生类提供的信息和作为预处理程序传递的对象，会选择Trilinos的线性求解器和预处理程序之一。   
* [0.x.18]*
     求解线性系统<tt>Ax=b</tt>，其中<tt>A</tt>及其[2.x.5]都是一个算子，而向量[2.x.6]和[2.x.7]是Trilinos的本地向量类型。    当<tt>A</tt>和[2.x.8]都是源自TrilinosPayload的LinearOperators时，可以使用这个函数。    根据派生类提供的信息和作为预处理程序传递的对象，会选择Trilinos的线性求解器和预处理程序之一。   
* [0.x.19]*
     解决线性系统<tt>Ax=b</tt>。根据派生类提供的信息和作为预处理程序传递的对象，选择Trilinos的线性求解器和预处理程序中的一个。    该类按照TrilinosWrappers的格式处理矩阵，但可以将deal.II向量作为参数。由于deal.II是串行向量（非分布式），这个函数只在矩阵为本地所有的情况下做你期望的事情。否则，会产生一个异常。   
* [0.x.20]*
     解决线性系统<tt>Ax=b</tt>，其中<tt>A</tt>是一个运算符。    这个函数可用于无矩阵计算。根据派生类提供的信息和作为预处理程序传递的对象，会选择Trilinos的线性求解器和预处理程序之一。该类根据TrilinosWrappers的格式处理矩阵，但可以将deal.II向量作为参数。    由于deal.II是串行向量（非分布式），这个函数只在矩阵为本地所有的情况下做你期望的事情。否则，会产生一个异常。   
* [0.x.21]*
     为deal.II的平行分布向量求解线性系统<tt>Ax=b</tt>。根据派生类提供的信息和作为预处理器传递的对象，选择Trilinos的线性求解器和预处理器中的一个。   
* [0.x.22]*
     解决线性系统<tt>Ax=b</tt>，其中<tt>A</tt>是一个算子。    这个函数可以用来进行无矩阵计算。根据派生类提供的信息和作为预处理程序传递的对象，选择Trilinos的线性求解器和预处理程序中的一个。   
* [0.x.23]*
     访问控制收敛的对象。   
* [0.x.24]*
     异常情况    
* [0.x.25]*
     对控制迭代求解器收敛性的对象的引用。事实上，对于这些Trilinos包装器来说，Trilinos本身就这样做了，但是我们在开始求解过程之前从这个对象中复制数据，之后再把数据复制回这个对象中。   
* [0.x.26]*
     解决函数用于正确设置Epetra_LinearProblem，一旦完成，这个函数就能解决线性问题。   
* [0.x.27]*
     一个设置解算器将应用的预处理程序的函数。   
* [0.x.28]*
     一个收集Trilinos稀疏矩阵、右手向量和解向量的结构，它被传递给Trilinos求解器。   
* [0.x.29]*
     一个包含Trilinos对象的结构，可以查询线性求解器并确定是否达到收敛标准。   
* [0.x.30]*
     一个包含Trilinos求解器和预处理器对象的结构。   
* [0.x.31]*
     存储这个特定求解器的标志的副本。   
* [0.x.32]*
   使用Trilinos CG求解器的求解器接口的实现。   
* [2.x.9]   
* [0.x.33]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.34]*
       将附加数据字段设置为所需的输出格式。     
* [0.x.35]*
     构造器。与deal.II自己的求解器相比，不需要给出一个矢量内存对象。        最后一个参数是一个结构，带有额外的、与求解器相关的标志，用于调整。   
* [0.x.36]*
     存储这个特定求解器的标志的副本。   
* [0.x.37]*
   使用Trilinos CGS求解器的求解器接口的实现。   
* [2.x.10]   
* [0.x.38]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.39]*
       将附加数据字段设置为所需的输出格式。     
* [0.x.40]*
     构造器。与deal.II自己的求解器相比，不需要给出一个矢量内存对象。        最后一个参数是一个结构，带有额外的、与求解器相关的标志，用于调整。   
* [0.x.41]*
     存储这个特定求解器的标志的副本。   
* [0.x.42]*
   使用Trilinos GMRES求解器的求解器接口的实现。 
* [0.x.43]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.44]*
       构造函数。默认情况下，设置临时向量的数量为30，即每30次迭代做一次重启。     
* [0.x.45]*
     构造函数。与deal.II自己的求解器相比，不需要给出一个向量存储对象。        最后一个参数是一个结构，包含额外的、与求解器相关的标志，用于调谐。   
* [0.x.46]*
     存储这个特定求解器的标志的副本。   
* [0.x.47]*
   使用Trilinos BiCGStab求解器的求解器接口的实现。   
* [2.x.11]   
* [0.x.48]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.49]*
       将附加数据字段设置为所需的输出格式。     
* [0.x.50]*
     构造器。与deal.II自己的求解器相比，不需要给出一个矢量内存对象。        最后一个参数是一个结构，带有额外的、与求解器相关的标志，用于调整。   
* [0.x.51]*
     存储这个特定求解器的标志的副本。   
* [0.x.52]*
   使用Trilinos TFQMR求解器的求解器接口的实现。   
* [2.x.12]   
* [0.x.53]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.54]*
       将附加数据字段设置为所需的输出格式。     
* [0.x.55]*
     构造器。与deal.II自己的求解器相比，不需要给出一个矢量内存对象。        最后一个参数是一个结构，带有额外的、与求解器相关的标志，用于调整。   
* [0.x.56]*
     存储这个特定求解器的标志的副本。   
* [0.x.57]*
   Trilinos直接求解器的一个实现（使用Amesos包）。  数据域[2.x.13]可以用来指定求解器的类型。它允许使用内置解算器Amesos_Klu以及第三方解算器Amesos_Superludist或Amesos_Mumps。    关于如何安装Trilinos以使用KLU以外的直接求解器的说明，请参见deal.II ReadMe文件中链接的Trilinos安装说明。   
* [2.x.14]   
* [0.x.58]*
     标准化的数据结构，用于向求解器输送额外的数据。   
* [0.x.59]*
       将附加数据字段设置为所需的输出格式。     
* [0.x.60]*
       启用/禁用求解器细节的输出（每次迭代的残差等）。     
* [0.x.61]*
       设置求解器类型（用于支持Triminos Amesos软件包的第三方求解器）。可能的情况是。       [2.x.15] [2.x.16] "Amesos_Lapack" [2.x.17] [2.x.18] "Amesos_Scalapack" [2.x.19] [2.x.20] "Amesos_Klu" [2.x.21] [2.x.22 ] "Amesos_Umfpack" [2.x.23] [2.x.24] "Amesos_Pardiso" [2.x.25] [2.x.26] "Amesos_Taucs" [2.x.27] [2.x.28] "Amesos_Superlu" [2.x.29 ] [2.x.30] "Amesos_Superludist" [2.x.31] [2.x.32] "Amesos_Dscpack" [2.x.33] [2.x.34] "Amesos_Mumps" [2.x.35] [2.x.36] 注意，这些求解器在 deal.II 的可用性取决于配置 Trilinos 时设置了哪些求解器。     
* [0.x.62]*
     构造函数。接受求解器控制对象并创建求解器。   
* [0.x.63]*
     解构器。   
* [0.x.64]*
     初始化矩阵<tt>A</tt>的直接求解器，并用从附加数据结构中选择的包为它创建一个因式分解。请注意，这里不需要预处理程序，也不调用solve()。   
* [0.x.65]*
     根据initialize()中设置的包，解决线性系统<tt>Ax=b</tt>。注意在这个调用过程中，矩阵没有被重构。   
* [0.x.66]*
     根据initialize()中设置的软件包，为deal.II自己的平行向量求解线性系统<tt>Ax=b</tt>。注意在这个调用过程中，矩阵没有被重构。   
* [0.x.67]*
     解决线性系统<tt>Ax=b</tt>。用从附加数据结构中选择的包创建一个矩阵的因式分解，并执行求解。注意，这里不需要预处理程序。   
* [0.x.68]*
     解决线性系统<tt>Ax=b</tt>。这个类对Trilinos矩阵起作用，但需要deal.II串行向量作为参数。由于这些向量不是分布式的，这个函数只在矩阵是串行的情况下（即本地拥有）做你所期望的事情。否则，将抛出一个异常。   
* [0.x.69]*
     为deal.II自己的并行向量求解线性系统<tt>Ax=b</tt>。用从附加数据结构中选择的包创建一个矩阵的因式分解，并执行求解。注意，这里不需要预处理程序。   
* [0.x.70]*
     访问控制收敛的对象。   
* [0.x.71]*
     异常情况    
* [0.x.72]*
     实际执行解决线性系统的操作，包括因式分解和前向、后向替换。   
* [0.x.73]*
     对控制迭代求解器收敛的对象的引用。事实上，对于这些Trilinos包装器来说，Trilinos本身就是这样做的，但是我们在开始求解过程之前从这个对象中复制数据，之后再将数据复制回对象中。   
* [0.x.74]*
     一个收集Trilinos稀疏矩阵、右手边向量和求解向量的结构，它被传递给Trilinos求解器。   
* [0.x.75]*
     一个包含Trilinos求解器和预处理器对象的结构。   
* [0.x.76]*
     存储这个特定求解器的标志的副本。   
* [0.x.77]

