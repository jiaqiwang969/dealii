include/deal.II-translator/lac/solver_idr_0.txt
[0.x.0]*
   一个用于IDR(s)求解器的辅助类的命名空间。 
* [0.x.1]*
     保存临时向量的类，其大小取决于求解器的参数s。   
* [0.x.2]*
       构造函数。准备一个长度为[2.x.1]的[2.x.0]阵列。      
* [0.x.3]*
       销毁器。删除所有分配的向量。     
* [0.x.4]*
       获取向量编号 [2.x.2] 如果这个向量之前未被使用，会发生错误。     
* [0.x.5]*
       获取向量编号 [2.x.3] 必要时分配它。            如果必须分配一个向量，则使用[2.x.4]将其重新设定为适当的尺寸。     
* [0.x.6]*
       获取向量的池子。     
* [0.x.7]*
       用于存储向量的字段。     
* [0.x.8]*
 该类实现了IDR(s)方法，用于求解非对称、不确定的线性系统，在[1.x.0]中开发。这里的实现是[1.x.1]中的预处理版本。本地结构[2.x.5]的参数s的值可以是大于等于1的任何整数。对于[2.x.6]，该方法的收敛性与BiCGStab相似。
* 

* 
* [2.x.7] IDR(s)的每一次迭代都需要[2.x.8]的预处理步骤和矩阵-向量积。在这个实现中，残差被更新，并在外迭代内部的每个步骤后检查收敛性。如果用户启用历史数据，这些步骤的残差将被存储，因此每次迭代将有多个值。

* 
* [0.x.9]*
   用于存储求解器所需的额外数据的结构。 
* [0.x.10]*
     构造函数。默认情况下，使用一个IDR(2)方法。   
* [0.x.11]*
   构造函数。 
* [0.x.12]*
   构造函数。使用一个GrowingVectorMemory类型的对象作为默认分配内存。 
* [0.x.13]*
   虚拟解构器。 
* [0.x.14]*
   求解x的线性系统[2.x.9]。 
* [0.x.15]*
   派生类的接口。这个函数在每一步中获得当前的迭代向量，残差和更新向量。它可以用于收敛历史的图形输出。 
* [0.x.16]*
   附加求解器参数。 
* [0.x.17]

