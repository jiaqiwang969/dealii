include/deal.II-translator/lac/petsc_block_sparse_matrix_0.txt
[0.x.0]!  [2.x.0] PETScWrappers [2.x.1]!     
* [0.x.1]*
     基于[2.x.2]类的阻塞式稀疏矩阵。这个类实现了封锁稀疏矩阵的PETSc SparseMatrix基对象所特有的函数，并将实际工作中对各个块的大部分调用留给基类中实现的函数。关于这个类何时有用的描述，也请参见这里。        与deal.II-type SparseMatrix类相比，PETSc矩阵没有外部对象来表示稀疏性模式。因此，我们不能通过附加一个块状稀疏模式来确定这种类型的块状矩阵的各个块的大小，而是通过调用 reinit() 来设置块的数量，然后分别设置每个块的大小。为了固定块矩阵的数据结构，有必要让它知道我们已经改变了基础矩阵的大小。为此，我们必须调用collect_sizes()函数，其原因与BlockSparsityPattern类所记载的大致相同。       
* [2.x.3] [2.x.4] "块（线性代数）"    
* [0.x.2]*
       对基类进行类型化定义，以便更简单地访问它自己的别名。     
* [0.x.3]*
       对底层矩阵的类型进行类型化定义。     
* [0.x.4]*
       从基类中导入别名。     
* [0.x.5]*
       构造函数；将矩阵初始化为空，没有任何结构，也就是说，矩阵根本无法使用。因此，这个构造函数只对作为类的成员的矩阵有用。所有其他的矩阵都应该在数据流中的一个点上创建，在那里所有必要的信息都是可用的。            你必须在使用前用reinit(BlockSparsityPattern)初始化矩阵。然后每行和每列的块数由该函数决定。     
* [0.x.6]*
       解构器。     
* [0.x.7]*
       伪拷贝操作符只拷贝空对象。块状矩阵的大小需要相同。     
* [0.x.8]*
       这个操作符将一个标量分配给一个矩阵。因为这通常没有什么意义（我们应该把所有的矩阵条目都设置为这个值吗？      仅仅是稀疏模式的非零条目？），这个操作只允许在实际要分配的值为零的情况下进行。这个操作符的存在只是为了允许明显的符号<tt>matrix=0</tt>，它将矩阵的所有元素设置为零，但保留之前使用的稀疏模式。     
* [0.x.9]*
       调整矩阵的大小，通过设置块的行数和列数。      这将删除所有的块，并用未初始化的块代替，也就是那些尚未设置大小的块。你必须通过调用块本身的[2.x.5]函数来做到这一点。不要忘了之后在这个对象上调用collect_sizes()。            你必须自己设置块的大小的原因是，大小可能是变化的，每行的最大元素数可能是变化的，等等。在这里不复制SparsityPattern类的接口是比较简单的，而是让用户调用他们想要的任何函数。     
* [0.x.10]*
       有效地重新引用块状矩阵进行并行计算。只有简单类型的BlockSparsityPattern可以有效地并行存储大型稀疏模式，所以这是唯一支持的参数。IndexSets描述了每个块的本地拥有的DoF的范围。注意，IndexSets需要升序和1:1。      对于一个对称的结构，前两个参数使用同一个向量。     
* [0.x.11]*
       与上述相同，但只针对对称结构。     
* [0.x.12]*
       矩阵-向量乘法：让[2.x.6]与[2.x.7]为该矩阵。     
* [0.x.13]*
       矩阵-向量乘法。就像前面的函数一样，但只适用于矩阵只有一个块列的情况。     
* [0.x.14]*
       矩阵-向量乘法。就像前面的函数，但只适用于矩阵只有一个块行的情况。     
* [0.x.15]*
       矩阵-向量乘法。就像前面的函数，但只适用于矩阵只有一个块的情况。     
* [0.x.16]*
       矩阵-向量乘法：让[2.x.8]与[2.x.9]为这个矩阵。这个函数与vmult()的作用相同，但需要转置的矩阵。     
* [0.x.17]*
       矩阵-向量乘法。就像前面的函数一样，但只适用于矩阵只有一个块行的情况。     
* [0.x.18]*
       矩阵-向量乘法。就像前面的函数一样，但只适用于矩阵只有一个块列的情况。     
* [0.x.19]*
       矩阵-向量乘法。就像前面的函数，但只适用于矩阵只有一个块的情况。     
* [0.x.20]*
       这个函数收集了子对象的大小，并将其存储在内部数组中，以便能够将矩阵的全局索引转为子对象的索引。在你改变子对象的大小后，你必须*每次都调用这个函数。     
* [0.x.21]*
       返回该矩阵的域空间的划分，即该矩阵必须与之相乘的向量的划分。     
* [0.x.22]*
       返回该矩阵的范围空间的划分，即由矩阵-向量乘积产生的向量的划分。     
* [0.x.23]*
       返回对与该矩阵一起使用的MPI通信器对象的一个引用。     
* [0.x.24]*
       使基类中的clear()函数可见，尽管它是受保护的。     
* [0.x.25]

