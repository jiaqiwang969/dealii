include/deal.II-translator/lac/linear_operator_0.txt
[0.x.0]*
 一个用于存储线性算子的抽象概念的类。
* 该类本质上由[2.x.0]对象组成，这些对象通过实现抽象的[2.x.1]接口来存储如何应用线性运算符的知识。

* 
* [1.x.0]
* 
* 但是，与通常的矩阵对象不同，线性运算符的域和范围也被绑定到类型级别的LinearOperator类上。因为这个原因，[2.x.2]有两个额外的函数对象

* 
* [1.x.1]
* 储存了如何初始化（调整大小+内部数据结构）[2.x.3]和[2.x.4]空间的任意矢量的知识。
* 这个类的主要目的是为复杂的矩阵-向量操作提供语法糖，使用户不必手工创建、设置和处理中间存储位置。
* 作为一个例子，考虑操作[2.x.5]，其中[2.x.6]、[2.x.7]和[2.x.8]表示（可能不同的）矩阵。为了构造一个LinearOperator [2.x.9]来存储这个操作的知识，我们可以这样写。
* 

* 
* [1.x.2]
* 
* 

* 
* [2.x.10] 这个类大量使用了[2.x.11]对象和lambda函数。这种灵活性带来了运行时间的惩罚。只用这个对象来封装大中型的矩阵对象（作为经验法则，稀疏矩阵的大小为[2.x.12]，或更大）。
* 

* 
* [2.x.13] 为了将Trilinos或PETSc稀疏矩阵和预处理程序与LinearOperator类结合使用，有必要通过一个额外的Payload来扩展LinearOperator类的功能。
* 例如。代表矩阵求逆的LinearOperator实例通常需要调用一些线性求解器。这些求解器可能没有与LinearOperator的接口（例如，它可能代表一个复合操作）。因此，[2.x.14]为LinearOperator提供了一个接口扩展，以便它可以被传递给求解器并被求解器使用，就像它是一个Trilinos算子一样。这意味着特定Trilinos算子的所有必要功能都在Payload类中被重载。这包括算子-向量乘法和反算子-向量乘法，其中算子可以是[2.x.15]或[2.x.16]，向量是本地Trilinos向量。
* 另一种情况是，当构建复合运算时（通过运算符重载），有效载荷为LinearOperator类提供了重要补充。在这种情况下，又有必要提供一个接口，以产生与Trilinos求解器使用的Trilinos算子兼容的这种复合操作的结果。
* 

* 
* [2.x.17] LinearOperator的许多用例会导致中间表达式需要一个PackagedOperation。为了一次性包含所有必要的头文件，可以考虑使用

* 
* [1.x.3]
* 
* 为了使用完整的LinearOperator和PackagedOperation
* 

* 
* [2.x.18] 为了确保提供正确的有效载荷，在各自的TrilinosWrappers（以及未来的PETScWrappers）命名空间中提供了线性操作符的封装函数。
* 

* 
* [2.x.19] [2.x.20] 教程中有一个LinearOperator类的详细使用例子。
* 

* 

* 
* [2.x.21] 

 
* [0.x.1]*
   创建一个空的LinearOperator对象。  当一个有效载荷被传递给这个构造函数时，产生的运算器会被构造成一个功能性的有效载荷。  在这两种情况下，这个构造函数产生的对象实际上不能用于任何线性运算符的操作，并且在调用时将抛出一个异常。 
* [0.x.2]*
   默认的复制构造函数。 
* [0.x.3]*
   模板化的复制构造函数，从定义了转换函数[2.x.23]的对象[2.x.22]中创建一个LinearOperator对象。 
* [0.x.4]*
   默认的复制赋值运算符。 
* [0.x.5]*
   定义了转换函数[2.x.25]的对象[2.x.24]的模板化的复制赋值运算符。 
* [0.x.6]*
   将LinearOperator对象应用于[2.x.26]空间的向量u，得到[2.x.27]空间的向量v。 
* [0.x.7]*
   将LinearOperator对象应用于[2.x.28]空间的向量u。其结果被添加到向量v中。 
* [0.x.8]*
   对[2.x.29]空间的向量u应用转置LinearOperator对象，得到[2.x.30]空间的向量v。 
* [0.x.9]*
   对[2.x.32]空间的向量[2.x.31]应用转置LinearOperator对象。结果被添加到向量[2.x.33]。  
* [0.x.10]*
   初始化Range空间的一个向量v，可以直接作为vmult应用中的目标参数使用。与向量类的reinit函数类似，布尔值决定是否进行快速初始化，也就是说，如果它被设置为false，向量的内容就被设置为0。 
* [0.x.11]*
   初始化域空间的一个向量，以便在vmult的应用中可以直接作为源参数使用。与向量类的reinit函数类似，布尔值决定是否进行快速初始化，也就是说，如果它被设置为false，向量的内容就被设置为0。 
* [0.x.12]*
    [2.x.34] 原地向量空间操作  
* [0.x.13]*
   用LinearOperator[2.x.35]进行加法运算，同[2.x.36]和[2.x.37]。  
* [0.x.14]*
   用LinearOperator [2.x.38]和[2.x.40]做减法。  
* [0.x.15]*
   与[2.x.42]空间的内形态[2.x.41]的LinearOperator的构成。 
* [0.x.16]*
   LinearOperator与[2.x.43]从右边开始的标量乘法。 
* [0.x.17]*
   这个bool用于确定线性运算符是否是空运算符。在这种情况下，该类能够优化一些操作，如乘法或加法。 
* [0.x.18]*
  [2.x.44] 矢量空间操作

* 
* [0.x.19]*
  [2.x.45] 线性运算器
* 两个线性运算符[2.x.46]和[2.x.47]的相加，由[2.x.48]给出。
 

* 
* [2.x.49] 

 
* [0.x.20]*
  [2.x.50] 线性运算器
* 两个线性运算符[2.x.51]和[2.x.52]的减法，由[2.x.53]给出。
 

* 
* [2.x.54] 

 
* [0.x.21]*
  [2.x.55] LinearOperator
* ScalarOperator对象[2.x.56]与[2.x.57]的标量乘法，从左边开始。
* [2.x.58]和[2.x.59]类型必须实现以下[2.x.60]成员函数，接受适当的标量Number类型进行重新缩放。
* 

* 
* [1.x.4]
 
* 

* 
* [2.x.61] 

 
* [0.x.22]*
  [2.x.62] LinearOperator
* 从右边开始对一个ScalarOperator对象进行标量乘法。
* [2.x.63]和[2.x.64]类型必须实现以下[2.x.65]成员函数，用于重新缩放。
* 

* 
* [1.x.5]
* 
* 

* 
* [2.x.66] 

* 
* [0.x.23]*
  [2.x.67] LinearOperator的组成和操作

* 
* [0.x.24]*
  [2.x.68] 线性运算器
* 两个线性运算符[2.x.69]和[2.x.70]的组合，由[2.x.71]给出。
* 

* 
* [2.x.72] 

* 
* [0.x.25]*
  [2.x.73] LinearOperator
* 返回[2.x.74]的转置线性运算。
 

* 

* 
* [2.x.75] 

 
* [0.x.26]*
  [2.x.76] LinearOperator
* 返回一个代表LinearOperator的逆运算的对象 [2.x.77] 。
* 该函数需要引用[2.x.78]和[2.x.79]一个迭代求解器和一个预处理器，这些都是LinearOperator对象的[2.x.80]实现中使用的。
* 创建的 LinearOperator 对象存储了对 [2.x.81] 和 [2.x.82] 的引用。因此，这两个对象必须在 LinearOperator 对象的整个生命周期内保持有效引用。[2.x.83] 对象的内部数据结构将在调用 [2.x.84] 时被修改。
* 

* 

* 
* [2.x.85] 

 
* [0.x.27]*
  [2.x.86] LinearOperator
* 上述函数的变体，接受 LinearOperator [2.x.87] 作为预处理参数。
* 

 
* [2.x.88] 

* 
* [0.x.28]*
  [2.x.89] LinearOperator
* 上述函数的变体，没有预处理参数。在这种情况下，[2.x.90]参数的ident_operator()被用作预处理。这等同于使用PreconditionIdentity。
* 

* 
* [2.x.91] 

 
* [0.x.29]*
  [2.x.92] LinearOperator
* 上述函数的特殊重载，需要一个PreconditionIdentity参数。
* 

* 
* [2.x.93] 

* 
* [0.x.30]*
  [2.x.94] 创建一个LinearOperator

* 
* [0.x.31]*
  [2.x.95] LinearOperator
* 返回一个LinearOperator，它是向量空间的标识 [2.x.96] 。
* 该函数需要一个[2.x.97]对象[2.x.98]作为参数，以初始化LinearOperator对象的[2.x.99]和[2.x.100]对象。
* 

* 
* [2.x.101] 

* 
* [0.x.32]*
  [2.x.102] LinearOperator
* 返回一个LinearOperator，它是向量空间的标识 [2.x.103] 。
* 该函数接收一个LinearOperator [2.x.104] 并使用其范围初始化器来创建一个身份算子。与上面的函数不同，这个函数还确保底层的Payload与输入的Payload相匹配[2.x.105] 
* 

* 
* [2.x.106] 

* 
* [0.x.33]*
  [2.x.107] LinearOperator
* 返回LinearOperator [2.x.108]的空变体，即具有优化的[2.x.109][2.x.110]等函数，并将[2.x.111]设置为真。
* 

* 
* [2.x.112] 

* 
* [0.x.34]*
  [2.x.113] LinearOperator
* 返回一个LinearOperator，作为一个均值过滤器。这个矩阵的vmult()函数减去向量的均值。
* 该函数需要一个[2.x.114]对象[2.x.115]作为参数来初始化LinearOperator对象的[2.x.116]和[2.x.117]对象。
* 

* 
* [2.x.118] 

 
* [0.x.35]*
  [2.x.119] LinearOperator
* 返回一个LinearOperator，作为一个均值过滤器。这个矩阵的vmult()函数减去向量的均值。
* 该函数接收一个LinearOperator [2.x.120] 并使用其范围初始化器来创建一个均值过滤器运算器。该函数还确保底层的Payload与输入的Payload相匹配 [2.x.121] 。
* 

* 
* [2.x.122] 

 
* [0.x.36]*
     一个辅助类，负责初始化一个向量，使其可以直接作为目标参数，或者在矩阵的vmult应用中的源参数。        这个类的通用版本只是分别调用[2.x.123]和[2.x.124]的结果。    这个类专门用于更复杂的数据结构，如[2.x.125]等。   
* [0.x.37]*
       初始化Range空间的一个向量v，以便在vmult的应用中直接作为目标参数使用。与向量类的reinit函数类似，布尔值决定是否进行快速初始化，即如果它被设置为false，向量的内容就被设置为0。这个类的通用版本只是调用[2.x.126]，其结果是[2.x.127] 。     
* [0.x.38]*
       初始化域空间的一个向量，在vmult的应用中可直接作为源参数使用。与向量类的reinit函数类似，布尔值决定是否进行快速初始化，也就是说，如果它被设置为false，向量的内容就被设置为0。     
* [0.x.39]*
     一个假的类，用于不需要任何扩展的LinearOperators，以方便对矩阵进行操作。        这是通常与deal.II的原生SparseMatrix相关的Payload类。为了使用Trilinos和PETSc稀疏矩阵类，有必要用它们相关的Payload初始化LinearOperator。           
* [2.x.130]     
* [0.x.40]*
       默认构造函数 由于这个类不做任何特别的事情，也不需要特别的配置，所以我们只有一个通用构造函数，可以在任何条件下调用。     
* [0.x.41]*
       返回一个为身份操作配置的有效载荷      
* [0.x.42]*
       返回一个为空操作而配置的有效载荷      
* [0.x.43]*
       返回一个为转置操作配置的有效载荷      
* [0.x.44]*
       返回一个为反转操作配置的有效载荷      
* [0.x.45]*
     返回一个配置为支持两个LinearOperators相加的有效载荷的操作符    
* [0.x.46]*
     返回被配置为支持两个LinearOperators的乘法的有效载荷的操作符。   
* [0.x.47]*
  [2.x.131] LinearOperator
* 一个将作用于兼容矢量类型的通用[2.x.132]对象封装为LinearOperator的函数。被创建的LinearOperator对象存储了一个对矩阵对象的引用。因此，[2.x.133]必须在LinearOperator对象的整个生命周期内保持有效引用。
* 在创建LinearOperator对象之后，对[2.x.134]所做的所有更改都会被操作者对象所反映。例如，首先创建一个LinearOperator，然后调整大小，以后再重新组合矩阵，这是一个有效的程序。
* 有关的矩阵类必须提供以下最小接口。
* 

* 
* [1.x.6]
* 
* 如果有以下（可选）接口，则使用该接口。
* 

* 
* [1.x.7]
* 
* 如果矩阵不提供[2.x.135]和[2.x.136]，则以[2.x.137]的方式实现（需要中间存储）。
* 

* 

* 
* [2.x.138] 

 
* [0.x.48]*
  [2.x.139] LinearOperator
* 上述函数的变体，需要一个操作者对象[2.x.140]operator_exemplar作为额外参考。这个对象被用来填充 reinit_domain_vector 和 reinit_range_vector 函数对象。引用[2.x.141]用于构造vmult、Tvmult等。
* 这个变体可以，例如，用于封装预处理程序（通常不暴露任何关于底层矩阵的信息）。
* 

* 

* 
* [2.x.142] 

 
* [0.x.49]*
  [2.x.143] LinearOperator
* 上述函数的变体，将LinearOperator [2.x.144] operator_exemplar作为一个额外的引用。reinit_domain_vector 和 reinit_range_vector 函数是从 [2.x.145] 对象中复制的。
* 参考[2.x.146]用于构造vmult、Tvmult等。
* 这个变体可以，例如，用于封装预处理程序（通常不暴露任何关于底层矩阵的信息）。
* 

* 

* 
* [2.x.147] 

 
* [0.x.50]

