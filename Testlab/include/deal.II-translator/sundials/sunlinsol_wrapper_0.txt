include/deal.II-translator/sundials/sunlinsol_wrapper_0.txt
[0.x.0]*
   一个包裹SUNDIALS功能的线性运算符。 
* [0.x.1]*
     将此线性运算符应用于[2.x.0]并将结果存储在[2.x.1]中。    
* [0.x.2]*
     构造函数。         [2.x.2] A_data [2.x.3]所需的数据 [2.x.4] a_times_fn 一个指向计算A*v的函数的指针。   
* [0.x.3]*
     评估a_times_fn的必要数据。   
* [0.x.4]*
     由SUNDIALS声明的%函数指针，用于评估矩阵向量乘积。   
* [0.x.5]*
   由SUNDIALS指定的包裹预处理功能的线性运算器。vmult()函数解决预处理方程[2.x.5]，即计算[2.x.6] 。 
* [0.x.6]*
     应用包裹的预处理程序，即解出 [2.x.7] ，其中 [2.x.8] 是 [2.x.9] 矢量， [2.x.10] 是 [2.x.11] 矢量。         [2.x.12] dst 前处理程序应用的结果向量 [2.x.13] src 前处理程序应用的目标向量    
* [0.x.7]*
     构造函数。         [2.x.14] P_data [2.x.15]所需的数据 [2.x.16] p_solve_fn 计算A*v的函数指针 [2.x.17] tol 迭代求解器用来判断收敛的公差    
* [0.x.8]*
     调用p_solve_fn的必要数据    
* [0.x.9]*
     %函数指针，用于计算预调节器应用的函数。   
* [0.x.10]*
     潜在的容忍度，用于预处理程序方程的内部求解。   
* [0.x.11]*
   与SUNDIALS线性求解器接口的函数对象类型 该函数类型封装了求解的动作 [2.x.18] 。  LinearOperator [2.x.19] 封装了矩阵向量乘积 [2.x.20] ，LinearOperator [2.x.21] 封装了前置条件器的应用 [2.x.22] 。  用户可以指定这种类型的函数对象，将自定义的线性求解器例程附加到SUNDIALS。两个LinearOperators [2.x.23] 和 [2.x.24] 是由SUNDIALS根据用户的设置在内部建立的。参数的解释如下。     [2.x.25] op 一个应用矩阵向量乘积的LinearOperator [2.x.26] prec 一个应用预处理的LinearOperator [2.x.27] x 输出的解向量 [2.x.28] b 右手边 [2.x.29] tol 迭代求解器的公差 这个函数应该返回。
* 

* 
* 

* 
* 

 
 
* - 0: 成功
 

 
* 

* 
* 

 
* 
* - >0: 可恢复的错误，ARKode将重新尝试解决方案并再次调用此函数。
* 

* 
* 

* 
* 

 
* 
* - <0: 无法恢复的错误，计算将被中止，并抛出一个断言。 
* [0.x.12]!     为SUNDIALS的线性求解器接口附加包装函数。我们假装用户提供的线性求解器是无矩阵的，尽管它可以是基于矩阵的。这样，SUNDIALS就不需要理解我们的矩阵类型。   
* [0.x.13]*
       隐式转换为SUNLinearSolver。     
* [0.x.14]
