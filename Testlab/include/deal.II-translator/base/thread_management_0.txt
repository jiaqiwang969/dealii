include/deal.II-translator/base/thread_management_0.txt
[0.x.0]*
 一个用于实现deal.II中线程管理的命名空间。这个命名空间的大部分内容在deal.II的文档页面上链接到的一份报告中详细讨论过。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
   一个实现[1.x.0]的类。  Mutexes用于锁定数据结构，以确保在同一时间内只有一个执行线程可以访问它们。    这个类是对[2.x.1]的一个薄包装，唯一的区别是这个类是可复制的，而[2.x.2]是不可复制的。 事实上，当复制时，接收对象不会从被复制的对象中复制任何状态，也就是说，会创建一个全新的mutex。如果一个突变体被用作成员变量来锁定一个类的其他成员变量，那么这些语义与常见的使用情况是一致的：在这种情况下，被复制到对象的突变体应该只保护被复制到对象的成员，而不是被复制到对象和被复制从对象的成员。因为在类被复制的时候，目的地的成员变量还没有被使用，其对应的mutex也应该保持在原来的状态。 
* [0.x.2]*
     默认构造函数。   
* [0.x.3]*
     复制构造函数。正如在这个类的文档中所讨论的，不会从作为参数给出的对象中复制状态。   
* [0.x.4]*
     拷贝操作符。正如在这个类的文档中所讨论的，不从作为参数的对象中复制状态。   
* [0.x.5]*
   将范围[2.x.3]分割为大小相等的子区间。如果整个范围内的元素数不正好被[2.x.4]整除，最后一个区间会稍微大一点。迭代器的类型必须满足前向迭代器的要求，即[2.x.5]必须可用，当然也必须是可分配的。    一个子间隔的列表以一对迭代器的向量形式返回，其中每一对迭代器表示的范围是[2.x.6] .    
* [2.x.7]   
* [0.x.6]*
   将区间[2.x.8]分割成（几乎）同等大小的子区间。这个函数的工作原理与之前的函数基本相同，不同的是，现在取的是定义整个区间的值，而不是迭代器。   
* [2.x.9]   
* [0.x.7]*
    [2.x.10]内部  
* [0.x.8]*
   一个命名空间，用于实现线程子系统的辅助函数和类似功能。这个命名空间的成员不打算公开使用。 
* [0.x.9]*
      [2.x.11] 如果在子线程中抛出了一个异常，它不会被传播到主线程中。因此，由应用程序的主函数或其他一些部分提供的异常处理程序将无法捕捉这些异常。因此，我们必须在每个子线程的顶层函数中提供一个异常处理程序，至少要捕捉到异常并打印出一些信息，而不是让操作系统在没有信息的情况下直接杀死程序。因此，在我们用作新线程入口的每个函数中，我们都安装了一个try-catch块，如果捕获到[2.x.12]类型的异常，它就会将控制权移交给这个函数，然后它将提供一些输出。   
* [0.x.10]*
      [2.x.13] 和上面一样，但是异常的类型不是从[2.x.14]派生出来的，所以没有什么办法提供更有用的东西。   
* [0.x.11]*
    [2.x.15]   
* [0.x.12]*
      [2.x.16] 给定一个任意类型的RT，存储其中的一个元素，并通过函数get()和set()授予对它的访问。对于引用类型（需要作为指向被引用对象的指针来存储）和void类型，有专门的规定。        这个函数与[2.x.17]的类的组合没有什么不同。不同的是，一个[2.x.18]只能通过[2.x.19]读取一次（据推测，这种设计是由于[2.x.20]可以抛出一个先前存储在[2.x.21]中的异常 另一方面，这个类使结果可用于任意次数。它也不存储任何异常（尽管它们会被使用当前类的类转发）。   
* [0.x.13]*
      [2.x.22] 给定一个任意类型的RT，存储其中的一个元素，并通过函数get()和set()授予其访问权。这是对引用类型的特殊化：由于引用在构造时间之后不能被设置，我们存储一个指针，而指针持有被引用对象的地址。        这个函数与[2.x.23]类的组合没有什么不同。不同的是，一个[2.x.24]只能通过[2.x.25]读取一次（据推测，这种设计是由于[2.x.26]可以抛出一个先前存储在[2.x.27]中的异常 另一方面，这个类使结果可用于任意次数。它也不存储任何异常（尽管它们会被使用当前类的类转发）。   
* [0.x.14]*
      [2.x.28] 给定一个任意类型的RT，存储其中的一个元素，并通过函数get()和set()授予其访问权。这是对void类型的特殊化：显然没有任何东西可以存储，所以没有函数set()，而函数get()则返回void。        这个函数与[2.x.29]类的组合没有什么不同。不同的是，一个[2.x.30]只能通过[2.x.31]读取一次（据推测，这种设计是由于[2.x.32]可以抛出一个先前存储在[2.x.33]中的异常 另一方面，这个类使结果可用于任意次数。它也不存储任何异常（尽管它们会被使用当前类的类转发）。   
* [0.x.15]*
     一个代表线程的类。对于每个线程，我们正好创建一个这样的对象
* 
* - 正是一个，因为它携带着线程上调用的函数的返回值。        虽然我们每个线程只有一个这样的对象，但几个[2.x.34]对象可以引用这个描述符。如果所有的Thread对象都超出了范围，那么ThreadDescriptor将在被销毁之前从线程中分离出来。   
* [0.x.16]*
       一个代表线程启动的对象。     
* [0.x.17]*
       一个对象，它将保存线程上调用的函数所返回的值。            返回值被保存在一个shared_ptr中，因为我们可能会放弃ThreadDescriptor。 这可以确保该对象保持活力，直到线程退出。     
* [0.x.18]*
       一个原子型的bool变量，最初是假的，当一个新的线程开始时被设置为真，一旦join()被调用，就被设置为假。            我们使用这个变量来确保我们可以在同一个线程上调用两次join()。出于某种原因，如果试图调用[2.x.36]两次，C++标准库会抛出一个[2.x.35]异常（事实上，在第二次调用之前，[2.x.37]返回false），但这是一个有点可取的做法，因为我们不必跟踪 join() 是否在之前被调用。      使用这个变量，只要我们之前调用过join()，这个变量就会被设置为true，我们就可以跳过第二次调用[2.x.38]。对这个变量的访问是由下面的突变来保护的。           
* [2.x.39] 历史上，我们不需要这个变量的mutex：线程只能从最初创建它的线程中被加入。因此，在不创建线程的函数中发生的一切（比如下面的join()函数）在外界看来都是原子的。由于我们在调用[2.x.40]的同一个函数中清除和测试thread_is_active，这些动作是原子的，不需要mutex。当然，两个线程可以同时在同一个线程对象上调用join()，但这个动作无论如何都是未定义的，因为它们不能同时加入同一个线程。也就是说，最近的C++标准似乎不再有这样的要求，即唯一可以调用join()的线程是创建该线程的那个。`pthread_join`似乎也没有这个要求。 因此，我们实际上可以从不同的线程加入，我们在base/thread_validity_07中测试了这一点。           
* [2.x.41]我们需要使用[2.x.42]的原因在[2.x.43]的文档中有详细讨论。      
* [0.x.19]*
       守护对前一个变量的访问的Mutex。     
* [0.x.20]*
       默认构造函数。     
* [0.x.21]*
       启动线程并让它将其返回值放入ret_val对象中。     
* [0.x.22]*
       等待线程结束。     
* [0.x.23]*
       在该线程上运行的函数。     
* [0.x.24]*
   一个代表被催生的线程的对象。这个对象可以在用户空间中自由复制，所有的实例将代表同一个线程，并可以要求等待它的终止和访问它的返回值。    线程可以被放弃，也就是说，如果你只是调用[2.x.44]，但并不关心返回的对象，或者如果你把返回的[2.x.45]对象分配给一个随后超出范围的对象，那么之前创建的线程仍然会继续工作。你只是不能再访问它的返回值，而且还可能发生你的程序在该线程完成工作之前就终止了。    模板参数的默认值是 [2.x.46] ，所以如果你在一个新线程上调用的函数没有返回值，你可以省略模板参数。   
* [2.x.47] [2.x.48] 使用 [2.x.49] 或 [2.x.50] 来代替。   
* [2.x.51] 由于该类在ThreadGroup中使用，它的构造函数，而不是该类本身，已被弃用，以允许用以下方式进行编译
* 

* 
* 

* 
* 

 
* 
* - error=deprecated-declarations.  
* [0.x.25]*
     用一个函数对象构造一个线程对象。   
* [0.x.26]*
     默认的构造函数。除了给它分配一个持有new_thread()函数创建的数据的线程对象外，你不能对这样构造的线程对象做什么。   
* [0.x.27]*
     复制构造函数。   
* [0.x.28]*
     加入这个对象所代表的线程，也就是等待它完成。    如果你使用了这个类的默认构造函数，并且没有给它分配一个线程对象，那么这个函数就是一个无用功。   
* [0.x.29]*
     获取线程的函数的返回值。由于只有在线程结束后才能使用，这个函数在内部也调用join()。只要对象指的是同一个任务，你就可以多次调用这个函数，并期望每次都能得到相同的返回值。(返回的对象被移动的情况除外，见下文)。       
* [2.x.52] 函数返回一个[1.x.1]给返回对象，而不是返回对象。这允许编写诸如以下的代码    
* [1.x.2]
* 你很少会有写这种代码的需要。另一方面，该函数需要返回一个可写的（非[2.x.53]引用，以支持像这样的代码。   
* [1.x.3]
* 这里，需要对[2.x.54]返回的对象（即[2.x.55]对象），因为[2.x.56]对象不能被复制。换句话说，要想从线程返回的对象中得到指针，就需要移动它，而为了移动它，当前函数需要返回一个可写的（非[2.x.57]引用。   
* [0.x.30]*
     如果这个对象曾经有一个线程与之相关联，无论是通过使用非默认的构造函数还是通过赋值，则返回true。   
* [0.x.31]*
     检查线程对象的平等性。由于这个类的对象存储了一个隐含的指向对象的指针，而这个指针对每个线程来说只存在一次，所以检查只是比较这些指针。   
* [0.x.32]*
     代表线程的对象的共享指针，并抽象出操作系统的函数来对其工作。这也确保了只要有至少一个订阅者，该对象就会存在。   
* [0.x.33]*
     一个一般的模板，如果t是引用类型，返回[2.x.58]，否则返回t。        t是引用类型的情况在下面声明的部分特殊化中处理。   
* [0.x.34]*
     一个一般的模板，如果t是引用类型，返回[2.x.59]，否则返回t。        t是引用类型的情况在这个部分特殊化中处理。   
* [0.x.35]*
   new_thread函数的重载，适用于可以转换为[2.x.60] ()>的对象，即任何可以像函数对象一样被调用而没有参数并返回RT（或void）类型的对象。   
* [2.x.61]   
* [0.x.36]*
   new_thread()函数的重载，适用于可以像函数对象一样被调用而没有参数的对象。特别是，这个函数允许用使用[2.x.63]产生的对象或使用lambda函数来调用[2.x.62]。例如，在编写如下代码时，可以调用这个函数  
* [1.x.4]
* 这里，我们在一个单独的线程上运行函数序列[2.x.64]，通过使这里声明的lambda函数成为在该线程上执行的函数。然后lambda函数返回42（在这里有点无意义，但它当然可以是一些计算出来的数字），这将是你后来在线程（即lambda函数的主体）完成后可以通过[2.x.65]检索到的返回值。   
* [2.x.66] 每个lambda函数（或者你在这里传递给new_thread()函数的其他东西，例如一个[2.x.67]表达式的结果）都有一个返回类型，因此会返回一个该类型的对象。这个类型可以通过在这个函数的声明中使用的C++11 [2.x.68] 语句来推断，然后它被用作当前函数返回的[2.x.69] 对象的模板参数。    在上面的例子中，因为lambda函数返回42（在C++中它的数据类型是[2.x.70]），推断的类型是[2.x.71]，任务对象的类型将是[2.x.72] 。换句话说，在用户代码中不能[1.x.5]明确指定λ或[2.x.73]表达式的返回类型，尽管可以通过（完全等价）写出明确的规定    
* [1.x.6]
*     
* [2.x.74] 在实践中，你将传递给new_thread()的lambda函数当然会更加复杂。    特别是，它们可能会从周围的环境中[1.x.7]变量，并在lambda中使用它们。    更多关于lambda函数的工作原理，请参见https://en.wikipedia.org/wiki/Anonymous_function#C.2B.2B_.28since_C.2B.2B11.29。   
* [2.x.75] 如果你将一个lambda函数作为参数传递给当前函数，该函数捕获了一个变量[1.x.8]，或者如果你使用一个[2.x.76]将一个函数参数与一个引用变量绑定，使用[2.x.77]或[2.x.78]，那么显然你只能在你引用或捕获的变量具有至少延伸到线程结束时的生命周期时才能这样做。   
* [2.x.79]   
* [0.x.37]*
   对非成员或静态成员函数的new_thread函数进行重载。   
* [2.x.80]   
* [0.x.38]*
   对成员函数的非const new_thread函数的重载。   
* [2.x.81]   
* [0.x.39]*
   对常量成员函数new_thread函数的重载。   
* [2.x.82]   
* [0.x.40]*
   一个线程对象的容器。允许添加新的线程对象并一起等待它们。线程对象需要对被调用的函数有相同的返回值。   
* [2.x.83] [2.x.84] 用任务组代替。 
* [0.x.41]*
     在集合中添加另一个线程对象。   
* [0.x.42]*
     等待集合中的所有线程都完成。如果有些线程已经被等待过了，这也不是什么问题，也就是说，你可以多次调用这个函数，如果你愿意，你也可以在后续调用这个函数之间添加新的线程对象。   
* [0.x.43]*
     线程对象的列表。   
* [0.x.44]*
     通过评估动作来设置一个[2.x.85]对象的值。   
* [0.x.45]*
     通过评估动作来设置一个[2.x.86]对象的值。这个函数是前一个函数的特殊化，用于返回类型为`void`的情况。因此，我们不能设置一个值。但我们确实评估了函数对象，并在没有参数的情况下调用[2.x.87]。   
* [0.x.46]*
   这个类描述了一个任务对象，即通过调用[2.x.88]得到的东西。其想法是，[2.x.89]允许人们在C++运行时系统认为方便时运行一个函数。
* 
* - 通常，当有一个空闲的处理器可用时。这可以用来在没有立即需要结果的情况下在后台运行，或者在有其他事情可以并行进行的情况下。  每当需要该背景任务的结果时，可以调用join()来等待任务完成，或者调用return_value()来获得在该背景任务上运行的函数所返回的值。    这个类在概念上类似于由[2.x.91]返回的[2.x.90]类（其本身类似于[2.x.92]的作用）。主要的概念差异是，人们只能调用[2.x.93]一次，而可以根据需要多次调用[2.x.94]。因此，它可以与[2.x.95]类相媲美。然而，[2.x.96]不能用于不能被复制的类型
* 
* --例如对[2.x.97]的一个特殊限制。   
* [2.x.98]   
* [0.x.47]*
     构建一个任务对象，给定一个要在任务上执行的函数对象，然后安排这个函数的执行。然而，当[2.x.99]返回1时，即如果deal.II运行时系统已被配置为只使用一个线程，那么只要执行给定的函数对象即可。         [2.x.100]使用这个构造函数会自动使任务对象可加入（）。   
* [0.x.48]*
     默认构造函数。你不能对这样构造的任务对象做很多事情，除了给它分配一个持有由[2.x.101]函数创建的数据的任务对象。         [2.x.102] 使用这个构造函数会使对象处于不可连接的状态，即joinable()将返回false。   
* [0.x.49]*
     加入这个对象所代表的任务，即等待它完成。        一个任务可以被多次加入（虽然第一次join()操作可能会阻塞，直到任务完成运行，但所有连续的加入尝试将立即返回）。        如果在这个对象被初始化的任务上执行的操作抛出一个异常，而不是定期返回，那么调用当前的join()函数将首先等待该任务完成，然后反过来抛出该任务操作最初抛出的异常。这允许将异常从独立线程上执行的任务传播到调用线程。        (这种行为与[2.x.103]不同，[2.x.104]函数只等待操作的完成，而只有当人们调用[2.x.105]时才会传播异常。然而，当把 "void "函数放到独立的任务上时，这种做法就很尴尬了，因为这些任务实际上不会返回任何东西；因此，对这类任务调用[2.x.106]比调用[2.x.107]函数更自然，因为后者实际上不会返回任何可以得到的东西。)          [2.x.108] 如果你使用了这个类的默认构造函数，并且没有给它分配一个任务对象，你就不能调用这个函数。换句话说，函数joinable()必须返回true。   
* [0.x.50]*
     返回当前对象是否可以被加入。一旦一个任务（通常是用[2.x.109]创建的）实际上已经被分配给它，你就可以加入一个任务对象。另一方面，如果该对象已被默认构建，该函数返回false。        一个任务可以被多次加入（虽然第一次join()操作可能会阻塞，直到任务完成运行，但所有连续的加入尝试将立即返回）。因此，如果这个函数返回真，它将继续返回真，直到它所报告的任务对象被从另一个对象分配到。   
* [0.x.51]*
     获取任务的函数的返回值。由于它只有在线程结束后才能使用，这个函数在内部也调用join()。只要对象指的是同一个任务，你就可以多次调用这个函数，并期望每次都能得到相同的返回值。(返回的对象被移动的情况除外，见下文)。       
* [2.x.110] 函数返回一个[1.x.9]给返回对象，而不是返回对象。这允许编写诸如以下的代码    
* [1.x.10]
* 你很少会有写这种代码的需要。另一方面，该函数需要返回一个可写的（非[2.x.111]引用，以支持像这样的代码。   
* [1.x.11]
* 这里，需要对[2.x.112]返回的对象（即[2.x.113]对象），因为[2.x.114]对象不能被复制。换句话说，要想从任务返回的对象中得到指针，需要移动它，为了移动它，当前函数需要返回一个可写的（非[2.x.115]引用。        这个函数在内部调用了 join() 成员函数。因此，正如那里所解释的，如果被打包的任务抛出一个异常，那么这个异常会被join()函数重新抛出，如果你之前没有调用join()，那么也会被当前函数抛出。         [2.x.116] 如果你使用了这个类的默认构造函数，并且没有给它分配一个任务对象，你就不能调用这个函数。换句话说，函数joinable()必须返回true。   
* [0.x.52]*
      [2.x.117] 异常 [2.x.118]。    
* [0.x.53]*
     异常情况    
* [0.x.54]*
     一个持有[2.x.119]的数据结构，任务将其返回值存入其中。由于只能调用[2.x.120]一次，我们在get()成员函数中这样做，然后将返回的对象移到`returned_object`成员变量中，我们可以从那里多次读取它，如果它不能被复制，也可以从那里移开。   
* [0.x.55]*
       构造函数。初始化一个[2.x.121]对象，并假定这样设置的任务还没有完成。     
* [0.x.56]*
       等待[2.x.122]对象准备好，即等待[2.x.123]接收其值的时间。如果这已经发生了，这个函数可以遵循一个快速路径。     
* [0.x.57]*
       一个用于同步访问该类数据结构的mutex。     
* [0.x.58]*
       与当前类所代表的任务相关的承诺。     
* [0.x.59]*
       一个布尔值，表示有关任务是否已经完成。           
* [2.x.124]我们在这里使用一个[2.x.125]，因为我们必须确保线程之间的并发读取和存储是正确同步的，并且在一个特定线程上的顺序读取不会被重新排序或优化掉。一个[2.x.126][1]实现了这一点，因为（如果没有其他注释的话）对布尔的读取和存储都受制于[2.x.127]内存排序[2]。这确保了Schmidt的双重检查确实有效。更多信息（以及可能更有效的实现）请参见[3]。            [1] https://en.cppreference.com/w/cpp/atomic/atomic [2] https://en.cppreference.com/w/cpp/atomic/memory_order [3] https://preshing.com/20130930/double-checked-locking-is-fixed-in-cpp11/      
* [0.x.60]*
       一旦[2.x.128]交付后，返回值将被移到的地方。     
* [0.x.61]*
     一个指向描述任务及其返回值的对象描述符的指针。   
* [0.x.62]*
   new_task函数的重载，用于可以转换为[2.x.129] ()>的对象，即任何可以像函数对象一样被调用而不需要参数并返回RT（或void）类型的对象。   
* [2.x.130] 当[2.x.131]返回1时，即如果deal.II运行时系统被配置为只使用一个线程，那么这个函数只是立即执行给定的函数对象，并将返回值存储在由该函数返回的任务对象中。   
* [2.x.132] [2.x.133]本质上等同于调用[2.x.134] ...)`，因为它在后台运行给定的任务。更多信息见https://en.cppreference.com/w/cpp/thread/async。   
* [2.x.135]   
* [0.x.63]*
   new_task函数的重载，对象可以像函数对象一样被调用，没有参数。特别是，这个函数允许用使用[2.x.137]或使用lambda函数产生的对象来调用[2.x.136]。例如，在编写如下代码时，可以调用这个函数  
* [1.x.12]
* 在这里，我们把对函数序列[2.x.138]的调用安排在一个单独的任务上，把这里声明的lambda函数作为任务上执行的函数。然后lambda函数返回42（这在这里有点无意义，但它当然可以是一些计算出来的数字），这将是你以后在任务（即lambda函数的主体）完成后可以通过[2.x.139]检索到的返回值。   
* [2.x.140] 当[2.x.141]返回1时，即如果deal.II运行时系统被配置为只使用一个线程，那么这个函数只是立即执行给定的函数对象，并将返回值存储在由该函数返回的任务对象中。   
* [2.x.142] 每个lambda函数（或者你在这里传递给new_task()函数的其他东西，例如一个[2.x.143]表达式的结果）都有一个返回类型，并因此返回一个该类型的对象。这个类型可以通过在这个函数的声明中使用的C++11 [2.x.144] 语句来推断，然后它被用作当前函数返回的[2.x.145] 对象的模板参数。    在上面的例子中，因为lambda函数返回42（在C++中它的数据类型是[2.x.146]），推断的类型是[2.x.147]，任务对象的类型将是[2.x.148] 。换句话说，在用户代码中不能[1.x.13]明确指定lambda或[2.x.149]表达式的返回类型，尽管可以通过（完全等价）写出明确的方式来做到这一点    
* [1.x.14]
*     
* [2.x.150] 在实践中，你将传递给new_task()的lambda函数当然会更加复杂。    特别是，它们可能会从周围的环境中[1.x.15]变量并在lambda中使用它们。    关于lambda函数如何工作的更多信息，请参阅https://en.wikipedia.org/wiki/Anonymous_function#C.2B.2B_.28since_C.2B.2B11.29。   
* [2.x.151] 如果你把一个lambda函数作为参数传递给当前函数，该函数捕获了一个变量[1.x.16]，或者如果你使用一个[2.x.152]，用[2.x.153]或[2.x.154]将一个函数参数绑定到一个引用变量，那么显然你只能在你引用或捕获的变量有一个至少延伸到任务结束的时间的寿命时才能这样做。   
* [2.x.155] [2.x.156]本质上等同于调用[2.x.157] ...)`，因为它在后台运行指定的任务。更多信息见https://en.cppreference.com/w/cpp/thread/async。   
* [2.x.158]   
* [0.x.64]*
   new_task函数的重载，用于非成员或静态成员函数。更多信息见同名的其他函数。   
* [2.x.159]   
* [0.x.65]*
   非const new_task函数的重载。更多信息请参见同名的其他函数。   
* [2.x.160]   
* [0.x.66]*
   new_task函数的重载。更多信息请参见同名的其他函数。   
* [2.x.161]   
* [0.x.67]*
   一个任务对象的容器。允许添加新的任务对象并一起等待它们。任务对象需要对被调用的函数有相同的返回值。    注意，对join_all()的调用必须与添加子任务的调用在同一个线程上执行。否则，可能会出现死锁。换句话说，一个任务对象绝不应该传递给另一个任务来调用join()方法。   
* [2.x.162]   
* [0.x.68]*
     将另一个任务对象添加到集合中。   
* [0.x.69]*
     返回有多少个任务被放入这个组。这个函数不区分其中有多少任务已经运行并完成，仍在等待被安排到CPU资源，或目前正在运行。已经加入的任务也仍然被计算在内。   
* [0.x.70]*
     等待集合中的所有任务完成。如果其中有些任务已经被等待过了，也不是什么问题，也就是说，你可以多次调用这个函数，如果你愿意，你也可以在后续调用这个函数之间添加新任务对象。   
* [0.x.71]*
     任务对象的列表。   
* [0.x.72]*
  [2.x.163] 

* 
* [0.x.73]

