include/deal.II-translator/base/mpi_remote_point_evaluation_0.txt
[0.x.0]*
     用于访问非匹配网格上的值的帮助类。       
* [2.x.0]字段的名称是在考虑到evaluation_and_process()方法的情况下选择的。在这里，数量是在指定的任意定位点（甚至在MPI宇宙中的远程进程上）逐个单元计算的，这些值被发送给请求进程，请求进程接收结果并根据各点的情况对结果进行求助。   
* [0.x.1]*
       构造器。             [2.x.1] tolerance 在reinit()过程中，用于确定传递给类的点周围所有单元的单元坐标的公差。根据问题的不同，可能需要调整公差，以便能够确定一个单元。        浮点运算意味着，一般来说，一个点不会完全位于一个顶点、边缘或面。       [2.x.2] enforce_unique_mapping 强制执行唯一映射，即点和单元的（一对一）关系。       [2.x.3] rtree_level 构建边界框时使用的RTree级别。     
* [0.x.2]*
       销毁器。     
* [0.x.3]*
       根据点列表[2.x.4]和网格描述（[2.x.5]和[2.x.6]的映射）设置内部数据结构和通信模式。             [2.x.7] 这是一个集体调用，需要由通信器中的所有处理器来执行。     
* [0.x.4]*
       定位在一个单元中的点的数据。     
* [0.x.5]*
         单元的级别和索引。       
* [0.x.6]*
         指向与单元格相关的（参考）点的开始和结束的指针。       
* [0.x.7]*
         区间[0,1]^dim中的参考点。       
* [0.x.8]*
       在给定的点和三角结构中评估函数[2.x.8]。结果存储在[2.x.9]中。            
* [2.x.10] 如果点到单元格的映射不是一对一的关系（is_map_unique()==false），结果需要借助get_point_ptrs()来处理。如果一个点与一个被多个单元共享的几何实体（例如，顶点）重合，或者一个点在计算域之外，就会出现这种情况。             [2.x.11] 这是一个集体调用，需要由通信器中的所有处理器执行。     
* [0.x.9]*
       这个方法是evaluate_and_process()方法的逆过程。它使[2.x.12]提供的各点数据在[2.x.13][2.x.14]函数中可用。这是一个集体调用，需要由通信器中的所有处理器执行。     
* [0.x.10]*
       返回一个类似CRS的数据结构，以确定结果对应的一个点的位置和数量。     
* [0.x.11]*
       如果点和单元格有一对一的关系，则返回。如果一个点不为任何单元所拥有（该点在域外）或多个单元拥有该点（该点位于相邻单元共享的几何实体上），则不是这种情况。     
* [0.x.12]*
       返回在reinit()过程中使用的三角测量对象。     
* [0.x.13]*
       返回reinit()过程中使用的Mapping对象。     
* [0.x.14]*
       返回内部数据结构是否已经设置好，如果是，它们是否仍然有效（并且没有因为三角结构的变化而失效）。     
* [0.x.15]*
       在确定一个点的周围单元时要使用的公差。     
* [0.x.16]*
       强制执行唯一映射，即点和单元的（一对一）关系。     
* [0.x.17]*
       在构建边界框的过程中，要使用RTree级别。     
* [0.x.18]*
       存储三角测量信号的状态。     
* [0.x.19]*
       指示是否调用过reinit()函数的标志，如果是的话，三角剖分此后没有被修改（可能会使通信模式无效）。     
* [0.x.20]*
       对在reinit()过程中使用的Triangulation对象的引用。     
* [0.x.21]*
       对reinit()过程中使用的Mapping对象的引用。     
* [0.x.22]*
       点和单元格的（一对一）关系。     
* [0.x.23]*
       因为对于每个点来说，可以有多个或没有结果，所以这个向量中的指针以类似CRS的方式表示与一个点相关的第一个和最后一个条目。     
* [0.x.24]*
       在recv缓冲区内的互斥索引。     
* [0.x.25]*
       一个接收缓冲区内的范围指针，由recv_ranks指定的等级来填充。     
* [0.x.26]*
       接收数据的等级。     
* [0.x.27]*
       根据单元格排序的点数据，以便对每个单元格只需进行一次评估（包括自由度的读取）。     
* [0.x.28]*
       发送缓冲区内的互换索引。     
* [0.x.29]*
       要发送的等级。     
* [0.x.30]*
       发送缓冲区内的范围指针，将被发送至send_ranks指定的等级。     
* [0.x.31]

