include/deal.II-translator/base/event_0.txt
[0.x.0]*
   这类对象用于通知内部应用程序由外循环引发的变化。它们通过[2.x.0]被交给应用程序，如何处理它们由实际的应用程序决定。    事件被组织成一个可扩展的二进制枚举器。每个类都可以使用assign()添加自己的事件。一个典型的代码例子是    
* [1.x.0]
*   
* [0.x.1]*
     这个函数注册了一个新的事件类型，并给它分配了一个唯一的标识符。这个函数的结果应该被储存起来以便以后使用。   
* [0.x.2]*
     如果你忘了存储assign的结果，下面是如何在知道名字的情况下检索它。   
* [0.x.3]*
     构造函数，生成一个清晰的事件。   
* [0.x.4]*
     清除所有标志    
* [0.x.5]*
     设置所有标志    
* [0.x.6]*
     添加其他事件的标志    
* [0.x.7]*
     清除另一个事件的标志    
* [0.x.8]*
     测试在其他事件中设置的所有标志是否也在这个事件中设置。   
* [0.x.9]*
     如果有事件被设置，返回<tt>true</tt>。   
* [0.x.10]*
     列出到一个流的标志。   
* [0.x.11]*
     列出所有分配的事件。   
* [0.x.12]*
     有时，必须通过各种手段来采取行动。因此，如果这个值为真，test()总是返回真。   
* [0.x.13]*
     事件的实际列表    
* [0.x.14]*
     注册事件的名称    
* [0.x.15]*
   库操作者使用的事件  
* [0.x.16]*
     程序刚刚开始，一切都应该是新的。   
* [0.x.17]*
     网格已经改变。   
* [0.x.18]*
     当前的导数导致牛顿方法收敛缓慢。   
* [0.x.19]*
     时间步长方案开始了新的时间步长。   
* [0.x.20]*
     时间步长方案改变了时间步长的大小。   
* [0.x.21]*
   输出事件的移位运算符。调用 [2.x.1] [2.x.2] 事件  
* [0.x.22]

