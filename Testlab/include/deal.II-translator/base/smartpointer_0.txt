include/deal.II-translator/base/smartpointer_0.txt
[0.x.0]*
 智能指针避免使用悬空的指针。它们可以像指针一样被使用（即使用<tt>*</tt>和<tt>-></tt>操作符和通过铸造），但要确保在使用指针的过程中，被指向的对象不会被删除或移动，要给被指向者发出使用信号。
* 指向的对象，即类T，应该继承Subscriptor或者必须实现相同的功能。空指针是这个规则的一个例外，也是允许的。
* 第二个模板参数P只有一个作用：如果使用了一个没有调试字符串的构造函数，那么P的名字就被用作调试字符串。
* SmartPointer没有实现任何内存处理！尤其是删除一个SmartPointer。特别是，删除一个SmartPointer并不会删除该对象。写作

* 
* [1.x.0]
* 是一个肯定的方法来编写一个内存泄漏的程序! 安全的版本是

* 
* [1.x.1]
* 
* 注意智能指针可以处理对象的<tt>const</tt>性，即一个<tt>SmartPointer<const ABC></tt>真的表现得像一个指向常量对象的指针（取消引用时不允许写访问），而<tt>SmartPointer<ABC></tt>是一个可变的指针。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
   空指针的标准构造函数。这个指针的id被设置为类P的名称。 
* [0.x.2]*
   SmartPointer的复制构造函数。我们不复制从<tt>tt</tt>订阅的对象，而是再次订阅自己的对象。 
* [0.x.3]*
   SmartPointer的复制构造函数。我们不复制从<tt>tt</tt>订阅的对象，而是自己再次订阅它。 
* [0.x.4]*
   构造函数接受一个普通的指针。如果可能的话，也就是说，如果该指针不是空指针，构造函数会订阅给定的对象以锁定它，也就是说，防止它在使用结束前被破坏。    <tt>id</tt>在调用[2.x.1]时被使用，在调用[2.x.2]时被~SmartPointer()使用。  
* [0.x.5]*
   构造函数取一个正常的指针。如果可能的话，即如果该指针不是空指针，构造函数订阅给定的对象以锁定它，即防止它在使用结束前被破坏。这个指针的id被设置为类P的名称。 
* [0.x.6]*
   销毁器，删除订阅。 
* [0.x.7]*
   普通指针的赋值操作符。指针会自动订阅新的对象，如果旧的对象存在，则取消订阅。它不会尝试订阅一个空指针，但仍会删除旧的订阅。 
* [0.x.8]*
   SmartPointer的赋值操作符。指针会自动订阅新的对象，如果存在旧的对象，则会取消订阅。 
* [0.x.9]*
   用于SmartPointer的赋值操作符。指针会自动订阅新的对象，如果旧的对象存在，则会取消订阅。 
* [0.x.10]*
   删除所指向的对象并将指针设为零。 
* [0.x.11]*
   转换为普通指针。 
* [0.x.12]*
   解除引用操作符。如果指针是一个空指针，这个操作符会抛出一个ExcNotInitialized()。 
* [0.x.13]*
   解除引用操作符。如果指针是一个空指针，该操作符会抛出一个ExcNotInitializedi()。 
* [0.x.14]*
   交换这个对象和参数的指针。由于被指向的两个对象在之前和之后都被订阅了，我们不必改变它们的订阅计数器。    请注意，这个函数（有两个参数）以及其中一个参数是指针，另一个参数是C型指针的相应函数是在全局命名空间实现的。 
* [0.x.15]*
   在这个对象和给出的指针之间交换指针。由于这释放了目前所指向的对象，我们把它的订阅数减少了一个，并在我们将来要指向的对象处增加订阅数。    注意，我们确实需要一个指针的引用，因为我们想改变我们所给的指针变量。 
* [0.x.16]*
   返回这个类所使用的内存量的估计值（以字节为单位）。  特别注意，这只包括[1.x.2]对象所使用的内存量，而不是所指向的对象。 
* [0.x.17]*
   指向我们要订阅的对象的指针。由于在调试时经常需要跟踪这个指针，我们特意选择了一个简短的名字。 
* [0.x.18]*
   用于下标的标识。 
* [0.x.19]*
   当所指向的对象被销毁或被移出时，Smartpointer就会被废止。 
* [0.x.20]*
 全局性的函数来交换两个智能指针的内容。由于指针所指向的两个对象都保留了订阅，我们不必改变它们的订阅数。

* 
* [0.x.21]*
 全局函数来交换一个智能指针和一个C型指针的内容。
* 注意，我们确实需要一个指针的引用，因为我们要改变我们所给的指针变量。

* 
* [0.x.22]*
 全局函数，用于交换一个C-style指针和一个智能指针的内容。
* 注意，我们确实需要一个指针的引用，因为我们想改变我们所给的指针变量。

* 
* [0.x.23]

