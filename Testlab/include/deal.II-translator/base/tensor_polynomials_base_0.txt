include/deal.II-translator/base/tensor_polynomials_base_0.txt
[0.x.0]*
 该类为有限元多项式类提供了一个框架，用于从FE_PolyTensor派生的有限元类。这个类型的对象（或者说是从这个类派生出来的类型）被作为成员变量存储在每个FE_PolyTensor类型的对象中。
* [1.x.0]
* 任何派生类必须为在参考单元上评估的形状函数提供最基本的属性。这包括但不限于实现evaluation()、name()和clone()成员函数。这些函数对于存储派生类中的多项式如何在参考单元上的给定点进行评估的最基本信息是必要的。关于每个函数的更多信息可以在相应函数的文档中找到。
* 从这个类派生的一些类包括 [2.x.0] [2.x.1] <tt>PolynomialsABF</tt> [2.x.2] <tt>PolynomialsBDM</tt> [2.x.3 ] <tt>PolynomialsBernardiRaugel</tt> [2.x.4] <tt>PolynomialsNedelec</tt> [2.x.5] <tt>PolynomialsRaviartThomas</tt> [2.x.6] <tt>PolynomialsRT_Bubbles</tt> [2.x.7] 
 

 
* [2.x.8] 

 
* [0.x.1]*
   构造函数。这需要空间的度数，[2.x.9]来自有限元类，[2.x.10]是空间的多项式数目。 
* [0.x.2]*
   移动构造器。 
* [0.x.3]*
   复制构造函数。 
* [0.x.4]*
   虚拟解构器。确保这个类的指针被正确删除。 
* [0.x.5]*
   计算[2.x.11]的多项式的值和导数，向量的大小必须是零或等于<tt>n()</tt>。 在第一种情况下，函数将不计算这些值。    如果你需要所有多项式的值或导数，那么使用这个函数，而不是使用任何<tt>compute_value</tt>, <tt>compute_grad</tt> 或 <tt>compute_grad_grad</tt> 函数，见下文，在所有张量积多项式上循环。 
* [0.x.6]*
   返回多项式的数量。 
* [0.x.7]*
   返回这个类所代表的多项式的最高阶数。如果派生类的值与[2.x.12]不同，可以重写这个。  
* [0.x.8]*
   一个虚拟的拷贝构造函数，这个函数返回多项式空间对象的一个拷贝。派生类需要在这个基类中覆盖这里的函数，并返回一个与派生类相同类型的对象。    库中的一些地方，例如FE_PolyTensor的构造函数，需要在不知道其确切类型的情况下制作多项式空间的副本。  他们通过这个函数来实现。 
* [0.x.9]*
   返回空间的名称。 
* [0.x.10]*
   这个对象所代表的这个函数的最高多项式程度。 
* [0.x.11]*
   此对象所代表的多项式的数量。 
* [0.x.12]

