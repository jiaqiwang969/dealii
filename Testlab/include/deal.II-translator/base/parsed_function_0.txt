include/deal.II-translator/base/parsed_function_0.txt
[0.x.0]*
   FunctionParser类的友好接口。这个类是作为FunctionParser类的一个封装器。它被用于[2.x.0]的教程程序中。    它提供了两个方法来声明和解析一个ParameterHandler对象，并创建在参数文件中声明的Function对象。这个类派生于AutoDerivativeFunction类，所以你不需要指定导数。这个类的一个使用例子如下。     
* [1.x.0]
* 下面是一个输入参数的例子（关于函数定义的语法的详细描述，请看FunctionParser类的文档）。     
* [1.x.1]
*     
* [2.x.1]   
* [0.x.1]*
     构建一个向量函数。生成的向量函数有[2.x.2]个分量（默认为1）。参数[2.x.3]用于初始化AutoDerivativeFunction类，该类来源于此。   
* [0.x.2]*
     声明本类所需的参数。额外的参数[2.x.4] n_components用于根据将解析这个ParameterHandler的函数的组件数量来生成正确的代码。如果被解析的组件数量与此对象的组件数量不一致，就会抛出一个断言，并且程序被中止。 这个类的默认行为是声明以下条目。        
* [1.x.2]
*     
* [0.x.3]*
     该类所需的解析参数。 如果被解析的组件数量与此对象的组件数量不一致，就会抛出一个断言，并中止程序。 为了使该类能够正常运行，我们遵循FunctionParser类中声明的相同约定（关于函数声明的语法，请看那里的详细说明）。        可以从参数文件中解析的变量有以下三种。        
* [1.x.3]
* %函数常量是以name=value为形式的一对集合，用逗号分隔，例如。        
* [1.x.4]
*这些常量可以在函数表达式的声明中使用，它遵循FunctionParser类的惯例。    为了指定向量函数，必须用分号来分隔不同的组成部分，例如         
* [1.x.5]
* 变量名称条目可以用来自定义函数中使用的变量名称。它的默认值是         
* [1.x.6]
* 对于一维的问题。        
* [1.x.7]
* 用于二维问题和         
* [1.x.8]
* 适用于三维问题。        时间变量可以根据FunctionTime基类的规格来设置。   
* [0.x.4]*
     返回一个向量值函数在给定点的所有分量 [2.x.5] p。   
* [0.x.5]*
     返回该函数在给定点的值。除非只有一个分量（即函数是标量的），否则你应该说明你想评估的分量；它默认为零，即第一个分量。   
* [0.x.6]*
     对于时间相关的函数，将时间设置为一个特定的值。        我们需要覆盖这一点，以便在访问器FunctionParser<dim>中也设置时间。   
* [0.x.7]*
     我们用来做计算的对象。   
* [0.x.8]

