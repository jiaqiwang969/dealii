include/deal.II-translator/base/function_restriction_0.txt
[0.x.0]*
   这个类在`dim + 1`维度上接收一个函数，并通过将其中一个坐标限制在给定的值上，在低一个维度上创建一个新函数。在数学上，这相当于取一个函数[2.x.0]，一个固定值，[2.x.1]，并定义一个新的函数（限制）[2.x.2]。  使用这个类，这可以转化为  
* [1.x.0]
* 限制上的`dim`维坐标从限制的（`dim + 1`）坐标开始排序。特别是，这意味着如果[2.x.3]-坐标在三维中被锁定为[2.x.4]，那么在限制上的坐标被排序为[2.x.5] 。   [2.x.6] .   这与[2.x.7]中的惯例相同。  
* [0.x.1]*
     构造函数，接受(`dim + 1`)坐标方向和传入函数应被限制的值。        一个指向传入函数的指针在内部存储，所以该函数的寿命必须比创建的限制值长。   
* [0.x.2]*
   该类通过将坐标值的`dim`限制在一个给定的点上，从`dim+1`维函数中创建一个一维函数。  在数学上，这相当于从一个函数[2.x.8]和一个点[2.x.9]，定义了一个新的函数[2.x.10]。  使用这个类，这可以转化为  
* [1.x.1]
* 点的坐标将在高维函数坐标中展开，从开放方向开始（并环绕）。特别是，如果我们限制到一个点[2.x.11]，并选择保持y方向的开放性，那么创建的限制就是函数[2.x.12] 。  这与[2.x.13]中的惯例一致   
* [0.x.3]*
     构造函数，接受传入函数应该被限制的点，以及哪个（`dim + 1`）维坐标方向应该被保持 "开放"。        一个指向传入函数的指针在内部存储，所以该函数的寿命必须比创建的限制更长。   
* [0.x.4]*
   创建一个(`dim + 1`)维的点，方法是复制传入的`dim`维的点的坐标，并将 "缺失的"(`dim + 1`)维分量设置为传入坐标值。    例如，给定输入[2.x.14]，该函数创建点[2.x.15] 。    `dim`维的点的坐标按照函数coordinate_to_one_dim_higher给出的约定顺序写到(`dim + 1`)维的点的坐标。因此，低维点上的坐标顺序没有被保留。   [2.x.16] 创建点 [2.x.17] .  
* [0.x.5]

