include/deal.II-translator/base/utilities_0.txt
[0.x.0]*
 一个用于实用功能的命名空间，这些功能不是特别针对有限元计算或数值程序的，但在编写应用程序时，在各种情况下都需要。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
   返回一个形式为 "deal.II version x.y.z "的字符串，其中 "x.y.z "标识了你正在使用的deal.II的版本。这个信息也是由DEAL_II_PACKAGE_NAME和DEAL_II_PACKAGE_VERSION预处理器变量提供的。 
* [0.x.2]*
   使用希尔伯特空间填充曲线给[2.x.1]中的每个点分配一个索引。  为此，将确定[2.x.2]的一个边界框，在此基础上计算它们的整数坐标。  线性索引是以比特的昏暗集合的形式给出的，从高到低。  这样做是为了保持沿每个轴的位深度的最大分辨率。请注意，这个dim-integer索引仍然可以很容易地用于分类和排序，例如使用整数组的lexicographic排序。    希尔伯特曲线的深度（即每维的比特数）默认等于[2.x.3] .    
* [2.x.4] 这个函数也可以处理退化的情况，例如，当包围盒在其中一个维度的大小为零时。 
* [0.x.3]*
   与上述相同，但对于整数坐标的点。 
* [0.x.4]*
   将[2.x.6]的每个元素中最不重要的[2.x.5]位（从最后一位开始）打包成一个无符号整数。2.x.7]的最后一个元素将用于设置所得整数中的第一个[2.x.8]位，倒数第二个元素用于设置下一个[2.x.9]位，等等。为了将所有的数据装入输出，下面应该保持 [2.x.10] 。    该函数在调试和可视化由inverse_Hilbert_space_filling_curve()返回的指数时很有用。   
* [2.x.11] 为了比较inverse_Hilbert_space_filling_curve()返回的指数，没有必要使用这个函数，因为这可以通过 [2.x.12] 轻松完成。 
* [0.x.5]*
   如果库被配置为ZLIB，那么这个函数会压缩输入字符串，并返回一个包含压缩后的输入的非零终止的字符串。    如果库没有配置启用ZLIB，则返回的字符串与输入字符串相同。     [2.x.13] input 要压缩的字符串 [2.x.14] 输入字符串的压缩版本  
* [0.x.6]*
   如果库中配置了ZLIB，那么这个函数假定输入的字符串已经用compress()函数进行了压缩，并返回原始的解压缩字符串。    如果库没有配置启用ZLIB，则返回的字符串与输入字符串相同。     [2.x.15] compressed_input 一个压缩的字符串，由函数compress()返回 [2.x.16] 原始未压缩的字符串。 
* [0.x.7]*
   将二进制输入编码为base64字符串。    Base64是一组二进制到文本的编码方案，通过将二进制数据转化为radix-64表示法，以ASCII字符串格式表示。Base64被设计用来在只可靠地支持文本内容的通道上携带以二进制格式存储的数据。它也被用来以独立于机器的方式存储二进制格式。     [2.x.17] binary_input 一个字符向量，代表你的输入为二进制数据。   [2.x.18] 一个包含二进制输入的字符串，作为base64字符串。 
* [0.x.8]*
   将base64字符串解码为二进制输出。    这是上面的encode_base64()函数的逆运算。     [2.x.19] base64_input 一个包含base64格式输入的字符串。   [2.x.20] 一个字符向量，表示你的输入为二进制数据。 
* [0.x.9]*
   将一个数字[2.x.21]转换成一个字符串，有多少个数字就用多少个前导零填充。    如果第二个参数保留为默认值，则数字不会被填充前导零。其结果与调用标准C++ [2.x.22]（或旧的C函数`itoa()`）的结果相同。    这个函数需要一个`无符号int'作为参数。因此，如果你用`signed int`（当然与`int`的类型相同）调用它，参数会被隐含地转换为无符号整数，负数可能不会像你希望的那样被打印出来。同样地，如果你用`long int`调用函数，打印出来的结果可能会显示转换为`unsigned int`时的溢出效果。   
* [2.x.23] 不鼓励使用这个函数，用户应该使用[2.x.24]代替。在目前的实现中，该函数只是简单地调用<code>to_string [2.x.25] int [2.x.26] 。  
* [0.x.10]*
   将一个数字[2.x.27]转换成一个字符串，其中有[2.x.28]个字符。字符串被填充了前导零，在可能的减号之后。  因此，填充零的总数是[2.x.29]减去任何符号、小数点和[2.x.30]的数字。 如果第二个参数保持其默认值，数字就不会被填充前导零。结果与调用C++函数[2.x.31]（对于积分类型）或调用[2.x.32]（对于所有其他类型）的情况相同。 
* [0.x.11]*
   确定需要多少个数字来表示最多和给定数字一样大的数字。 
* [0.x.12]*
   这个函数允许在[2.x.34]的精度之后切断一个浮点数[2.x.33]，即在科学浮点符号的小数点后[2.x.35]位之后切断。当解释为四舍五入操作时，这个函数减少了浮点数的绝对值，并且总是向零舍入，因为小数点位被简单地切断了。 
* [0.x.13]*
   给定一个字符串，将其转换为一个整数。如果不可能，则抛出一个断言。 
* [0.x.14]*
   返回一个描述对象尺寸的字符串。通常，deal.II库以及用户代码中的函数需要定义一个字符串，包含一些使用两个模板参数定义的对象的模板尺寸：dim（对象的拓扑尺寸）和spacedim（嵌入欧几里得空间的尺寸）。 由于在所有deal.II类中，默认情况下spacedim等于dimension，上述字符串通常被缩减为"<dim>"，而不是"<dim,spacedim>"。  如果dim等于spacedim，该函数返回一个包含 "dim "的字符串，否则返回 "dim,spacedim"。 
* [0.x.15]*
   给出一个字符串列表，将其转换为一个整数列表。如果不可能，则抛出一个断言。 
* [0.x.16]*
   给定一个字符串，将其转换为一个双数。如果不可能，抛出一个断言。 
* [0.x.17]*
   给出一个字符串的列表，将其转换为一个双数的列表。如果不可能，抛出一个断言。 
* [0.x.18]*
   给出一个包含由[2.x.36]分隔的文本的字符串，将其分割成其组成部分；对于每个组成部分，去除前面和后面的空格。分隔符的默认值是逗号，因此该函数可以分割逗号分隔的字符串列表。    为了使来自表格的数据输入更简单，如果输入的字符串以定界符结束（后面可能有任意数量的空白），那么最后这个定界符将被忽略。比如说。 
* [1.x.0]
* 产生的3个元素的输出[2.x.37]与你在输入时得到的相同  
* [1.x.1]
*或  
* [1.x.2]
* 作为这一规则的结果，像这样的调用  
* [1.x.3]
* 产生了一个单元素的列表。由于修剪了空白，这个单元素是空字符串。    这个函数可以消化定界符是空格的情况。在这种情况下，它返回字符串中的所有单词。结合上面的规则，这意味着  
* [1.x.4]
尽管在字符串的末尾存在空格，*还是会产生上面的输出[2.x.38]的3元素列表。此外。 
* [1.x.5]
* 无论字符串中有多少空格，都会产生一个空列表。 
* [0.x.19]*
   split_string_list()的特殊化，用于分隔符为单个字符的情况。 
* [0.x.20]*
   取一个文本，通常是一个文档或其他东西，并尝试将其分割成最多[2.x.39]个字符宽的独立文本行，在文本中由[2.x.40]标记的位置进行分割。如果这是不可能的，则返回长于[2.x.41]的最短的几行，分隔符的默认值是一个空格字符。如果original_text包含换行符(/n)，字符串也会在这些位置被分割。 
* [0.x.21]*
   如果给定的模式字符串出现在字符串的第一个位置，则返回true。 
* [0.x.22]*
   读取一个（有符号的）整数，从第二个参数指示的[2.x.42]中的位置开始，并将这个整数与它在字符串中所占的字符数一起作为一对返回。    如果在指定的位置没有读到整数，则返回[2.x.43] 。  
* [0.x.23]*
   返回一个字符串，其中[2.x.45]中所有出现的[2.x.44]都被[2.x.46]替换。  
* [0.x.24]*
   返回一个字符串，删除[2.x.47]开头和结尾的所有标准空白字符（包括'<tt>\t</tt>', '<tt>\n</tt>', 和 '<tt>\r</tt>'）。 
* [0.x.25]*
   从以[2.x.48]为中心、标准差为[2.x.49]的归一化高斯概率分布中生成一个随机数，每次调用该函数时返回的数字都会不同。    这个函数是可重入的，也就是说，它可以安全地从多个线程同时调用。此外，每个线程每次都会得到相同的数字序列。另一方面，如果你通过线程积木运行[2.x.50]对象，那么任务将被分配到大部分随机的线程中，并且可能在程序的不同运行中获得不同的随机数序列，因为之前的任务可能已经消耗了为你所在的线程生成的前几个随机数。如果这是一个问题，你需要在每次想从一个定义的点开始时创建自己的随机数生成器对象。   
* [2.x.51] 与系统函数rand()一样，这个函数在每次程序启动时都会产生相同的随机数序列。这是调试代码的一个重要特性，但它使我们无法真正验证代码的统计特性。对于`rand()`，你可以调用`srand()`来 "播种 "随机数发生器，以便在每次调用程序时得到不同的随机数序列。然而，这个函数不允许给随机数发生器播种。如果你需要这个，如上所述，请使用C++或BOOST设施之一。 
* [0.x.26]*
   返回变量类型的字符串描述 [2.x.52] 一般来说，C++使用混杂的名称来识别类型。这个函数使用[2.x.53]来返回一个人类可读的字符串，描述作为参数传递的变量的类型。 
* [0.x.27]*
   计算一个固定的幂，作为模板参数提供，是一个数字的计算。    这个函数提供了一种有效的方法来计算诸如[2.x.54]是一个已知的数字在编译时。    使用这个函数，如[2.x.55] .  
* [0.x.28]*
   替换[2.x.56]，允许对常量表达式参数进行编译时计算。[2.x.57]必须是整数类型，指数[2.x.58]不能是负数。 
* [0.x.29]*
   对[2.x.59]的优化替换，用于在列索引的范围内搜索。对于目前的应用来说，执行时间大约减少了一半，部分原因是二进制搜索被小循环长度的线性搜索所取代。    这个功能的另一个原因相当不明显：当使用GCC的libstdc++函数[2.x.60]时，复杂性为O(log(N))，符合要求。  然而，当使用GCC libstdc++的调试版本时，正如我们在运行测试套件时所做的那样，那么[2.x.61]测试序列是否实际上是相对于枢轴 "值 "而言的分区（也就是说，本质上序列是按照二进制搜索的要求进行排序的）。  然而，验证这一点意味着[2.x.62]的复杂度跃升至O(N)；我们在下面调用这个函数O(N)次，使得整体复杂度为O(N*2)。其后果是，一些有大网格的测试完全跑出了测试的时间限制，并在libstdc++调试模式下失败。这个函数只是假设序列是排序的，而我们根本不做额外的检查。 
* [0.x.30]*
   与上面的函数相同，但接受一个参数，用来比较迭代器所指向的对象序列的各个元素。 
* [0.x.31]*
   给定一个排列向量（即一个向量[2.x.63]，其中每个[2.x.64]和[2.x.65]为[2.x.66]），产生反向排列[2.x.67] 。 
* [0.x.32]*
   给出一个互换向量（即一个向量[2.x.68]，其中每个[2.x.69]和[2.x.70]为[2.x.71]），产生反互换[2.x.72]，以便[2.x.73] .  
* [0.x.33]*
   给定一个T类型的任意对象，使用[2.x.74]工具将该对象打包成一个字符向量，并将其追加到给定的缓冲区中。被添加到缓冲区的元素的数量将被返回。该对象可以使用下面的[2.x.75]函数进行解包。    如果库在编译时启用了ZLIB，那么输出缓冲区可以被压缩。这可以通过参数[2.x.76]来触发，并且只有在启用ZLIB时才有效。    如果考虑用同一个缓冲区进行多次连续调用，出于性能考虑，建议确保缓冲区有足够的容量。 
* [0.x.34]*
   使用上面提到的pack函数，只为给定对象创建并返回一个缓冲区。    如果该库在编译时启用了ZLIB，那么输出缓冲区可以被压缩。这可以通过参数[2.x.77]来触发，并且只有在启用ZLIB时才有效。 
* [0.x.35]*
   给定一个字符向量，通过调用函数[2.x.78]获得，在一个T类型的对象中恢复其内容。    这个函数使用[2.x.79]实用程序从字符向量中解压缩对象，它是函数[2.x.80]的逆函数。[2.x.81]参数表示要读取的缓冲区是否以前用ZLIB压缩过，并且只有在启用ZLIB时才有效。   
* [2.x.82] 因为这个函数的参数不取决于模板类型 [2.x.83] 你必须在调用这个函数时手动指定模板参数。   
* [2.x.84] 如果你想打包()或解压()对象的数组，那么下面的方法可行。  
* [1.x.6]
* 然而，反过来就不行了。  
* [1.x.7]
* 这是因为C++不允许函数返回数组。   因此，有一个单独的解包()函数用于数组，见下文。 
* [0.x.36]*
   与上面的解包函数相同，但在给定的[2.x.85]类型的打包缓冲区上（一部分）采取恒定的迭代器来代替。    [2.x.86]参数表示要读取的缓冲区是否以前用ZLIB压缩过，并且只有在启用ZLIB时才有效。 
* [0.x.37]*
   给定一个字符向量，通过调用函数[2.x.87]获得，将其内容还原为T型数组。    这个函数使用[2.x.88]实用程序从字符向量中解压缩对象，它是函数[2.x.89]的逆函数。[2.x.90]参数表示要读取的缓冲区是否以前用ZLIB压缩过，只有当ZLIB被启用时才有效。   
* [2.x.91] 这个函数的存在是由于C++的一个怪癖。具体来说，如果你想打包()或解压()对象的数组，那么下面的方法就可以。  
* [1.x.8]
* 然而，反过来就不行了。  
* [1.x.9]
* 这是因为C++不允许函数返回数组。   因此，当前的函数允许写   
* [1.x.10]
* 注意，与其他unpack()函数不同，不需要明确指定模板参数，因为它们可以从第二个参数中推导出来。 
* [0.x.38]*
   和上面的解包函数一样，但是在给定的[2.x.92]类型的打包缓冲区上（一部分）采取常数迭代器来代替。    [2.x.93]参数表示要读取的缓冲区是否以前用ZLIB压缩过，并且只有在启用ZLIB时才有效。 
* [0.x.39]*
   检查[2.x.95]中[2.x.94]位置的位是否被设置。 
* [0.x.40]*
   将[2.x.97]中位置[2.x.96]的位设置为值[2.x.98]。  
* [0.x.41]*
   将一个类型为[2.x.99]的对象转换为类型为[2.x.100]的对象，这里假定我们可以使用`dynamic_cast`将指向`From`的指针转换为指向`To`的指针。
* 

* 
* 

* 
* 

 
* 
* - 换句话说，我们假设`From'和`To'是通过一个类的层次结构连接起来的，而且所指向的对象实际上是一个同时包含`From'和`To'的类型。一个例子是如果`To`是从`From`派生出来的，或者反过来。    如果`dynamic_cast`不成功，该函数会抛出一个类型为[2.x.101]的异常。这和你在对象类型（但不是指针类型）之间的常规`dynamic_cast`不成功时得到的异常一样。    这个函数如何工作的例子如下。 
* [1.x.11]
     
* [2.x.102] 这个函数不会尝试转换[2.x.103]对象所存储的`Deleter`对象。因此，该函数只在deleter对象处于默认状态时起作用，即，如果它们是[2.x.104]和[2.x.105]类型的对象。  
* [0.x.42]*
   返回基本值。默认：返回输入。 
* [0.x.43]*
   返回基本值。对[2.x.106]的特殊化。  
* [0.x.44]*
   返回底层值。对const [2.x.107]的特化。  
* [0.x.45]*
   返回基本值。对[2.x.108]的特化   
* [0.x.46]*
   返回基本值。对const [2.x.109]的特化。  
* [0.x.47]*
   一个用于探测系统属性的实用函数的命名空间。   
* [2.x.110]   
* [0.x.48]*
     返回由 "uptime "返回的CPU负载。注意，这个数字的解释取决于机器中实际的处理器数量。目前只在Linux上实现，使用/proc/loadavg伪文件，在其他系统上，我们只是返回0。   
* [0.x.49]*
     以字符串形式返回vectorization.h中DEAL_II_VECTORIZATION_WIDTH_IN_BITS描述的矢量化的指令集扩展。可能的返回值列表是。         [2.x.111]     
* [0.x.50]*
     保存内存使用信息的结构，单位是KB。由get_memory_stats()使用。详见man 5 proc entry /status。   
* [0.x.51]*
       虚拟内存的峰值大小，单位为 kB。     
* [0.x.52]*
       当前虚拟内存大小，单位为 kB。     
* [0.x.53]*
       峰值常驻内存大小，单位为千字节。也被称为 "高水位线"(HWM)。     
* [0.x.54]*
       当前常驻内存大小，单位为 kB。也被称为 "常驻组大小"(RSS)。     
* [0.x.55]*
     在[2.x.112]结构中填充有关该进程的内存消耗信息。这仅在Linux上实现。   
* [0.x.56]*
     返回这个进程所运行的主机的名称。   
* [0.x.57]*
     返回现在的时间为HH:MM:SS。   
* [0.x.58]*
     返回当前日期为YYY/MM/DD。MM和DD可以是一个或两个数字。   
* [0.x.59]*
     调用系统函数posix_memalign，如果没有，则调用一个替代函数，以分配具有某种最小对齐方式的内存。然后第一个参数将返回这个内存块的指针，以后可以通过标准的[2.x.113]调用来释放。         [2.x.114] memptr 一个指针变量的地址，在这个调用之后将指向所分配的内存。     [2.x.115] alignment 内存块的最小对齐方式，字节数。     [2.x.116] size 要分配的内存块的大小，以字节为单位。       
* [2.x.117] 这个函数在内部检查错误代码，而不是把这个任务留给调用站点。   
* [0.x.60]*
   这个命名空间提供了一些用于初始化Trilinos对象的基本结构（例如，矩阵、向量和预调节器）。 
* [0.x.61]*
     返回创建Epetra_Maps所需的Trilinos Epetra_Comm对象。        如果deal.II被配置为使用不支持MPI的编译器，那么生成的通信器将是一个串行的。否则，该通信器将对应于MPI_COMM_WORLD，即一个包含该MPI宇宙中所有进程的通信器。   
* [0.x.62]*
     返回一个创建Epetra_Maps所需的Trilinos Epetra_Comm对象。        如果deal.II被配置为使用不支持MPI的编译器，那么产生的通信器将是一个串行通信器。否则，该通信器将对应于MPI_COMM_SELF，即一个只包括这一个处理器的通信器。   
* [0.x.63]*
     返回创建[2.x.119]所需的[2.x.118]对象 如果deal.II被配置为使用不支持MPI的编译器，那么产生的通信器将是一个串行通信器。否则，该通信器将对应于MPI_COMM_SELF，即一个只包括这一个处理器的通信器。   
* [0.x.64]*
     给定一个通讯器，复制它。如果给定的通信器是串行的，这意味着只是返回它的一个副本。另一方面，如果它是%并行的，我们就复制底层的MPI_Comm对象：我们创建一个单独的MPI通信器，包含相同的处理器和相同的顺序，但有一个独立的标识符，与给定的通信器不同。该函数返回一个指向从Epetra_Comm派生的类的新对象的指针。这个函数的调用者需要承担这个函数的所有权。返回的对象应使用destroy_communicator()函数销毁。        这个设施是用来分离通信流的。例如，一个程序可以简单地使用MPI_Comm_World来处理一切。但是很容易出现这样的情况：有时不是所有的处理器都参与到一个旨在实现全局的通信中来
* 
* - 例如，如果我们在一个粗略的网格上组装一个矩阵，其单元数少于处理器的数量，一些处理器可能不会与其他处理器同步他们的矩阵，因为他们没有写进矩阵，因为他们没有拥有单元。这显然是一个错误。然而，如果这些处理器只是继续他们的工作，而下一个%并行操作恰好是对不同矩阵的同步，那么同步就可能成功
* 
* - 偶然的，因为不同的处理器在谈论不同的矩阵。        如果我们对不同的矩阵使用不同的通信器，就可以避免这种情况，这就减少了本应分开的通信因为发生在同一通信器上而不被识别的可能性。此外，可以想象的是，一些MPI操作可以使用多个线程进行并行化，因为它们的通信器识别了相关的通信，而不是像只使用单个通信器的顺序程序那样识别它们的相对时间。   
* [0.x.65]*
     给出一个由Diplicate_communicator()函数创建的Epetra通信器，销毁底层MPI通信器对象，并将Epetra_Comm对象重置为comm_self()的结果。        当不再需要diplicate_communicator()的结果时，有必要调用这个函数。原因是在该函数中，我们首先创建一个新的MPI_Comm对象，然后围绕它创建一个Epetra_Comm。虽然我们可以负责销毁后者，但它并没有销毁通讯器，因为它只能假设它可能还被程序中的其他对象使用。因此，我们必须自己明确地销毁它。        这个函数正是这样做的。因为这必须在Epetra_Comm对象仍然存在的情况下进行，所以它首先重置后者，然后销毁通信器对象。       
* [2.x.120] 如果你在一个不是由diplicate_communicator()创建的Epetra_Comm对象上调用这个函数，你很可能做错了什么。请不要这样做。   
* [0.x.66]*
     返回给定的[2.x.121]"communicator "对象中存在的MPI进程的数量。如果这是一个顺序作业（即程序根本没有使用MPI，或者使用MPI但只启动了一个MPI进程），那么通信器必然只涉及一个进程，该函数返回1。   
* [0.x.67]*
     返回给定通信器所描述的进程空间中的当前MPI进程的编号。对于每个进程来说，这将是一个唯一的值，介于零和（小于）所有进程的数量（由get_n_mpi_processes()给出）之间。   
* [0.x.68]*
     给定一个Trilinos Epetra地图，创建一个新的地图，其元素与处理器的细分相同，但使用给定的通信器对象而不是存储在第一个参数中的对象。实质上，这意味着我们创建一个地图，以同样的方式在相同的处理器之间进行通信，但使用一个单独的通道。        这个函数通常与一个通过Diplicate_communicator()函数获得的通信器一起使用。   
* [0.x.69]

