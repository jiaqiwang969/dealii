include/deal.II-translator/base/function_derivative_0.txt
[0.x.0]*
 一个函数对象的派生。 该类的值访问函数返回一个函数相对于构造时提供的方向的导数。如果<tt>b</tt>是向量，则计算出导数<tt>b . grad f</tt>。这个导数是直接计算的，而不是通过计算<tt>f</tt>的梯度和它与<tt>b</tt>的标量乘积。
* 该导数是通过数值计算的，使用所提供的差分公式之一（见<tt>set_formula</tt>，了解可用方案）。为了获得足够的结果，可能需要对<tt>h</tt>和差分方案进行试验。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
   构造函数。提供了计算导数的函数，微分的方向向量和差分公式的步长<tt>h</tt>。 
* [0.x.2]*
   构造函数。提供了计算导数的函数和每个正交点的微分方向向量以及差分步长。    这是一个可变速度场的构造函数。最有可能的是，必须为每一组正交点构造一个新的<tt>FunctionDerivative</tt>的对象。    当数值被访问时，正交点的数量必须仍然是相同的。 
* [0.x.3]*
   选择差分公式。这在构造函数中被设置为默认值。    现在实现的公式是一阶后向欧拉（<tt>UpwindEuler</tt>），二阶对称欧拉（<tt>Euler</tt>）和一个对称四阶公式（<tt>FourthOrder</tt>）。 
* [0.x.4]*
   改变差分公式的基阶大小  
* [0.x.5]*
   返回这个对象的内存消耗估计值，单位是字节。  这不是精确的（但通常会很接近），因为计算树的内存使用量（例如，[2.x.1]很困难。 
* [0.x.6]*
   用于微分的函数。 
* [0.x.7]*
   差分公式的步骤大小。 
* [0.x.8]*
   差分公式。 
* [0.x.9]*
   帮助对象。包含公式的增量向量。 
* [0.x.10]

