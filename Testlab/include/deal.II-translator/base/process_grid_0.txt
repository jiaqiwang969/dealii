include/deal.II-translator/base/process_grid_0.txt
[0.x.0]*
     一个负责设置二维处理器网格的类。    例如，一个有5个进程的MPI通信器可以被安排成一个2x2的网格，其中第5个处理器是不活动的。   
* [1.x.0]
* 这个类的共享指针被提供给ScaLAPACKMatrix矩阵，以执行块循环分布。        请注意，这个类允许设置一个进程网格，它的MPI核数比通信器中的总核数少。        目前，唯一可以使用ProcessGrid对象的地方是与ScaLAPACKMatrix对象相连接。   
* [0.x.1]*
       给定[2.x.2]的具有[2.x.0]和[2.x.1]的进程网格的构造函数，行和列的乘积应该小于或等于[2.x.3]中的总核数。      
* [0.x.2]*
       在这种情况下，根据[2.x.5] [2.x.6] [2.x.7]和[2.x.8]中提供的目标矩阵的尺寸和块循环分布，启发式地选择进程网格，可以利用的最大MPI核心数是[2.x.9] ，其中[2.x.10 ]是矩阵尺寸，[2.x.11]是块大小，[2.x.12]是[2.x.13]中的进程数。 这个函数然后创建一个二维处理器网格，假设进程行[2.x.14]和列[2.x.15]的数量比例等于矩阵尺寸[2.x.16]和[2.x.17]的比例。            例如，一个方形矩阵[2.x.18]的块大小为[2.x.19]，[2.x.20]有11个核心，将导致[2.x.21]的过程网格。     
* [0.x.3]*
       销毁器。     
* [0.x.4]*
       返回进程网格中的行数。     
* [0.x.5]*
       返回进程网格中的列数。     
* [0.x.6]*
       返回该进程在进程网格中的行数。            对于不活动的进程，它是负数。     
* [0.x.7]*
       返回该进程在进程网格中的列。            对于不活动的进程是负数。     
* [0.x.8]*
       将[2.x.22]的值从等级为0的进程的[2.x.23]处开始存储，然后发送给不在进程网格内的进程。     
* [0.x.9]*
       如果进程在网格内活动，则返回[2.x.24]。     
* [0.x.10]*
       一个私有的构造函数，它将网格尺寸作为一个[2.x.25]。     
* [0.x.11]*
       一个与所有进程（活动和非活动）的MPI通信器。     
* [0.x.12]*
       一个带有不活动进程和等级为零的进程的MPI通信器。     
* [0.x.13]*
       BLACS上下文。这等同于MPI通信器，被ScaLAPACK使用。     
* [0.x.14]*
       这个MPI进程的等级。     
* [0.x.15]*
       MPI进程的总数量。     
* [0.x.16]*
       进程网格中的行数。     
* [0.x.17]*
       进程网格中的列数。     
* [0.x.18]*
       这个进程在网格中的行。            对于不活动的进程，它是负数。     
* [0.x.19]*
       这个进程在网格中的列。            对于不活动的过程，它是负数。     
* [0.x.20]*
       一个标志，对于2D进程网格中的进程来说是真的。     
* [0.x.21]

