include/deal.II-translator/base/auto_derivative_function_0.txt
[0.x.0]*
 这个类通过采用数字差商自动计算一个函数的梯度。这只是在用户函数没有自己提供梯度函数的情况下。
* 下面是一个用户定义函数的例子，它只重载并实现了value()函数，但没有实现gradient()函数。如果梯度()函数被调用，那么由AutoDerivativeFunction实现的梯度函数将被调用，其中后者的函数采用了数字差商。
* 

* 
* [1.x.0]
* 
* 如果用户也重载并实现了梯度函数，那么，当然会调用用户的梯度函数。
* 注意，上面解释的value()和gradient()函数的用法也适用于value_list()和gradient_list()函数，以及这些函数的向量值版本，例如vector_value(), vector_gradient(), vector_value_list() 和 vector_gradient_list()。
* gradient()和gradient_list()函数使用了[2.x.0]函数。vector_gradient()和vector_gradient_list()使用的是[2.x.1]函数。请确保用户定义的函数分别实现value()函数和vector_value()函数。
* 此外要注意，这个类的对象确实[1.x.1]代表了一个函数的导数，像FunctionDerivative，通过调用value()函数给出一个方向性的导数。事实上，这个类（AutoDerivativeFunction类）可以替代Function类作为用户定义类的基类。这个类实现了自动计算数字差商的梯度()函数，并作为基函数类和用户定义函数类之间的中间类。
* 

* 
* [2.x.2] 

* 
* [0.x.1]*
   差额公式的名称。 
* [0.x.2]*
     二阶的对称欧拉公式。    [1.x.2]    
* [0.x.3]*
     一阶的上风欧拉公式。    [1.x.3]    
* [0.x.4]*
     四阶方案[1.x.4]。   
* [0.x.5]*
   构造函数。取差分步长<tt>h</tt>。在这里选择一个合适的值是用户的责任。<tt>h</tt>的选择应该考虑到绝对值以及函数的局部变化量。设置<tt>h=1e-6</tt>可能是绝对值为1左右的函数的一个好选择，而且变化不大。    <tt>h</tt>可以在以后使用set_h()函数来改变。    设置DifferenceFormula <tt>formula</tt>为set_formula()函数的默认<tt>Euler</tt>公式。通过调用set_formula()函数改变这个预设公式。 
* [0.x.6]*
   虚拟析构器；在这种情况下绝对必要。 
* [0.x.7]*
   选择差异公式。参见枚举#DifferenceFormula以了解可用的选择。 
* [0.x.8]*
   取差值的步长<tt>h</tt>。在这里选择一个合适的值是用户的责任。<tt>h</tt>的选择应该考虑到函数的绝对值以及局部变化的量。设置<tt>h=1e-6</tt>可能是绝对值为1左右的函数的一个好选择，而且变化不大。 
* [0.x.9]*
   返回函数的指定分量在给定点的梯度。    使用预设的#DifferenceFormula来计算数字差商。 
* [0.x.10]*
   返回函数的所有分量在给定点的梯度。    使用预设的#DifferenceFormula来计算数字差商。 
* [0.x.11]*
   将<tt>gradients</tt>设为函数的指定分量在<tt>点</tt>的梯度。 假设<tt>gradients</tt>已经有合适的大小，即与<tt>points</tt>数组的大小相同。    使用预设的#DifferenceFormula来计算数字差商。 
* [0.x.12]*
   将<tt>gradients</tt>设置为函数在<tt>points</tt>处的梯度，适用于所有组件。假设<tt>gradients</tt>已经有正确的大小，即与<tt>points</tt>数组的大小相同。    <tt>gradients</tt>的外循环是在列表中的点上，内循环是在函数的不同成分上。    使用预设的#DifferenceFormula来计算数字差商。 
* [0.x.13]*
   返回一个最小顺序为<tt>ord</tt>的#DifferenceFormula。 
* [0.x.14]*
   差分公式的步骤大小。由set_h()函数设定。 
* [0.x.15]*
   包括按<tt>h</tt>缩放的单位向量。 
* [0.x.16]*
   差分公式。由set_formula()函数设置。 
* [0.x.17]

