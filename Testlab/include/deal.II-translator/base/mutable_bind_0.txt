include/deal.II-translator/base/mutable_bind_0.txt
[0.x.0]*
   [2.x.0]的一个可变版本，它将一个函数指针的所有参数绑定到一个存储的元组上，并允许你在调用之间更新元组。    这个类的一个使用实例是通过辅助函数mutable_bind()，该函数根据其参数在运行中创建一个MutableBind对象。   
* [1.x.0]
* 参数被复制到元组中，并去除它们的引用和const属性。只有可复制的构造对象才被允许作为函数参数。如果你需要保留一些引用，你可以把你的函数包装成一个lambda函数。   
* [1.x.1]
*   
* [0.x.1]*
     对存储的[2.x.1]类型的别名。只有可复制构造的对象才允许作为元组成员。   
* [0.x.2]*
     构建一个MutableBind对象，指定函数，以及每个参数分别。   
* [0.x.3]*
     构造一个MutableBind对象，指定函数，以及作为一个元组的参数。   
* [0.x.4]*
     构造一个只指定函数的MutableBind对象。默认情况下，参数被保留为其默认的构造函数值。   
* [0.x.5]*
     调用原始函数，将绑定参数的元组作为参数传递。   
* [0.x.6]*
     设置参数，以便在下次调用operator()()时使用移动语义，在[2.x.2]中使用。   
* [0.x.7]*
     设置在[2.x.3]中使用的参数，以便在下次调用operator()()时，使用移动语义。   
* [0.x.8]*
     将[2.x.4]中的参数从字符串中解析出来，以便下次调用operator()()时使用。        该转换是使用用户提供的[2.x.5]对象进行的。默认情况下，[2.x.6]被用来确定如何从[2.x.7]转换为TupleType对象。         [2.x.8] value_string 要转换的字符串 [2.x.9] pattern 执行转换时使用的模式的唯一指针    
* [0.x.9]*
     一个存储原始函数的[2.x.10]。   
* [0.x.10]*
     目前存储的参数。当调用operator()()时，这些参数会被转发给上面的函数对象。   
* [0.x.11]*
   从一个函数指针和一个参数列表创建一个MutableBind对象。    一个用法的例子是这样给出的。 
* [1.x.2]
*   
* [0.x.12]*
   和上面一样，使用[2.x.11]对象。 
* [0.x.13]*
   从一个函数指针创建一个MutableBind对象，带有未初始化的参数。    注意，如果你不调用[2.x.12]方法中的一个，或者在返回的对象上调用[2.x.13]函数，那么传递给函数对象的参数将被初始化，其值来自每个参数的默认构造函数。 
* [0.x.14]*
   与上述相同，使用[2.x.14]对象。 
* [0.x.15]

