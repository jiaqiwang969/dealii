include/deal.II-translator/base/polynomials_adini_0.txt
[0.x.0]*
 阿迪尼元素的立方多项式空间
* 这个空间包括由函数[1.x.1]和[1.x.2]增强的立方空间[1.x.0]。
* 该空间的基础被选择为与阿迪尼元素的节点函数相匹配。
* [2.x.0] 这个多项式空间只在二维中实现，不计算3阶以上的导数。
* 

* 
* [2.x.1] 

* 
* [0.x.1]*
   描述空间的多项式的构造函数  
* [0.x.2]*
   计算每个多项式在<tt>unit_point</tt>的值和一、二次导数。    向量的大小必须等于0或等于n()。在第一种情况下，函数不会计算这些值，也就是说，你要通过调整那些你想要填充的向量的大小来表明你想要计算什么。    如果你需要所有多项式的值或导数，那么使用这个函数，而不是使用任何一个compute_value(), compute_grad()或compute_grad_grad()函数，见下文，在所有多项式上循环。 
* [0.x.3]*
   计算<tt>i</tt>第1个多项式在<tt>unit_point</tt>的值。    可以考虑用evaluate()代替。 
* [0.x.4]*
    [2.x.2] [2.x.3].   
* [0.x.5]*
    [2.x.4] [2.x.5]   
* [0.x.6]*
    [2.x.6] [2.x.7].   
* [0.x.7]*
    [2.x.8] [2.x.9] [2.x.9]。  
* [0.x.8]*
   计算<tt>i</tt>次多项式在<tt>unit_point</tt>的梯度。    可以考虑用evaluate()代替。 
* [0.x.9]*
   计算<tt>i</tt>次多项式在<tt>unit_point</tt>的二阶导数(grad_grad)。    可以考虑用evaluate()代替。 
* [0.x.10]*
   返回空间的名称，即<tt>PolynomialsAdini</tt>。 
* [0.x.11]*
    [2.x.10] [2.x.11].   
* [0.x.12]*
   按照[2.x.12]的顺序存储多项式的系数。  
* [0.x.13]*
   按[2.x.13]的顺序存储多项式的x导数的系数。  
* [0.x.14]*
   按[2.x.14]的顺序存储多项式的y阶导数的系数。  
* [0.x.15]*
   按[2.x.15]的顺序存储多项式的第二个x导数的系数。  
* [0.x.16]*
   按[2.x.16]的顺序存储多项式的第二个y导数的系数。  
* [0.x.17]*
   按[2.x.17]的顺序存储多项式的第二个混合导数的系数。  
* [0.x.18]

