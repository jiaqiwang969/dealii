include/deal.II-translator/base/linear_index_iterator_0.txt
[0.x.0]*
 deal.II中的许多类，如FullMatrix、TransposeTable和SparseMatrix，将它们的数据存储在连续的缓冲区中（当然，这些缓冲区的元素所代表的[2.x.0]解释[2.x.1]可能很复杂）。例如，FullMatrix和TransposeTable分别以行大和列大的顺序存储数据，而对于SparseMatrix，从缓冲区位置到矩阵条目的映射[2.x.2]更为复杂。然而，在任何情况下，元素的连续排列都可以实现随机访问迭代。
* LinearIndexIterator提供了为这些类编写迭代器所需的大部分功能。LinearIndexIterator本质上是[2.x.3]的一个简化版本，它假定[2.x.4]提供了某些成员（下文有记录），这些成员完全描述了迭代器的状态。这个类的预期用途是让容器定义自己的访问器类，然后使用奇怪的重复出现的模板模式（CRTP）技术来定义它们的迭代器。例如，这里是一个使用 LinearIndexIterator 来定义自己的迭代器类的容器。
* 

* 
* [1.x.0]
* 
* [2.x.5] DerivedIterator 如上例所示，具体的迭代器类应该使用该类的CRTP技术：这为迭代器提供了模板式的比较和算术运算符。这是必要的，例如，[2.x.6]要返回正确的类型。
* [2.x.7] AccessorType LinearIndexIterator假定[2.x.8] 模板参数有以下成员，这些成员完全描述了迭代器的当前状态。 [2.x.9] [2.x.10] 一个名为[2.x.11]的指针指向原始容器（例如，相关的稀疏矩阵）。对于[2.x.13]迭代器来说，这应该是一个[2.x.12]的指针。[2.x.14] [2.x.15] 一个名为[2.x.16]的数组索引，用于存储容器存储缓冲区中的当前位置。 [2.x.17] 不需要是一个整数：它可以是一个实现了 [2.x.18] , 和 [2.x.19] 的类类型（可转换为容器的正确索引类型）。例如，可以通过实现 [2.x.20] 和 [2.x.21] 的乘法因子来实现strided iterator。[2.x.22] [2.x.23] 此外，[2.x.24] 应该声明相关的LinearIndexIterator实例化是一个[2.x.25]，并定义一个[2.x.26] 类型。
* 

* 
* [2.x.27] TransposeTable使用这个模板来实现其迭代器。

* 
* [0.x.1]*
   迭代器类别。 
* [0.x.2]*
   当你解除对当前种类的迭代器的定义时，你得到的类型的别名。 
* [0.x.3]*
   差异类型。 
* [0.x.4]*
   引用类型。 
* [0.x.5]*
   指针类型。 
* [0.x.6]*
   底层容器使用的尺寸类型。 
* [0.x.7]*
   复制操作符。 
* [0.x.8]*
   前缀增量。 
* [0.x.9]*
   后缀增量。 
* [0.x.10]*
   前缀递减。 
* [0.x.11]*
   后缀递减。 
* [0.x.12]*
   返回一个比当前迭代器提前[2.x.28]个条目的迭代器。 
* [0.x.13]*
   返回一个比当前迭代器晚[2.x.29]个条目的迭代器。 
* [0.x.14]*
   将迭代器的位置增加[2.x.30] 。  
* [0.x.15]*
   递减迭代器的位置[2.x.31]。  
* [0.x.16]*
   返回当前迭代器与参数之间的距离。这个距离是通过对当前迭代器应用operator++()的次数来获得参数（对于正的返回值），或者operator--()（对于负的返回值）。 
* [0.x.17]*
   解除引用操作符。 
* [0.x.18]*
   解除引用操作符。 
* [0.x.19]*
   比较运算符。如果两个迭代器都指向同一个容器中的同一个条目，则返回[2.x.32]。 
* [0.x.20]*
   与operator==()相对应。 
* [0.x.21]*
   比较运算符：使用与operator<()相同的排序，但也检查是否相等。    这个函数只有在两个迭代器都指向同一个容器时才有效。 
* [0.x.22]*
   比较运算符：使用与operator>()相同的排序，但也检查是否相等。    这个函数只有在两个迭代器都指向同一个容器时才有效。 
* [0.x.23]*
   比较运算符。如果第一个行号较小，或者行号相等且第一个索引较小，结果为真。    这个函数只有在两个迭代器都指向同一个容器时才有效。 
* [0.x.24]*
   比较运算符。与operator<()的工作方式相同，只是反过来了。 
* [0.x.25] 继承类应该有一个默认的构造函数。 
* [0.x.26]*
   复制一个访问器的构造函数。 
* [0.x.27]*
   存储一个访问器类的对象。 
* [0.x.28]

