include/deal.II-translator/base/template_constraints_0.txt
[0.x.0]*
     一个辅助类，其`value`成员是真还是假，取决于给定的布尔模板参数是否全部为真。   
* [0.x.1]*
 这个结构是[2.x.0]Derived>对模板参数包的泛化，测试所有Derived...类是否以Base为基类，或者本身就是Base。结果存储在成员变量值中。

* 
* [0.x.2]*
 这个结构是 [2.x.1] 对模板参数包的泛化，测试 `Types...` 参数包中的所有类型是否等于作为第一个模板参数的 `Type`。结果存储在成员变量值中。

* 
* [0.x.3] [2.x.2]的概括，只有在给定的布尔模板参数中的[1.x.0]为真时才起作用。

* 
* [0.x.4]*
 一个类型特征，检查一个类是否表现为一个有开始和结束的可迭代容器。这意味着该类要么定义了`begin()`和`end()`函数，要么是一个C风格的数组。

* 
* [0.x.5]*
 一个模板类，简单地将其模板参数导出为一个本地别名。这个类，虽然一开始看起来毫无用处，但在以下情况下是有意义的：如果你有一个如下的函数模板。

* 
* [1.x.1]
* 那么它就不能在[2.x.3]这样的表达式中被调用，因为模板的类型[2.x.4]不能以唯一的方式从参数的类型中推导出来。然而，如果模板被写成

* 
* [1.x.2]
* 那么这个调用就变得有效了：[2.x.5]的类型不能从函数的第二个参数中推导出来，所以只有第一个参数参与了模板类型解析。
* 这个特征的背景如下：考虑

* 
* [1.x.3]
* 这段代码不能编译，因为编译器不能决定模板类型[2.x.6]（来自作为第一参数给定的函数的签名，因为表达式[2.x.8]有该类型。当然，我们希望编译器做的是简单地将 [2.x.9] 投入。我们可以通过编写以下代码来实现这一点。

* 
* [1.x.4]
* 

* 
* [0.x.6]*
 一个总是返回一个给定值的类。这需要作为一些编译器难以处理的用作默认参数的lambdas的变通方法。

* 
* [0.x.7]*
 一个用于对任意指针进行平等比较的类。在某些情况下，人们希望确保一个函数的两个参数不是同一个对象。在这种情况下，我们会确保它们的地址不一样。然而，有时这两个参数的类型可能是模板类型，它们可能是同一类型，也可能不是。在这种情况下，像<tt>&object1 != &object2</tt>这样的简单比较只有在两个对象的类型相同的情况下才起作用，但如果不相同，编译器会barf。然而，在后一种情况下，由于两个对象的类型不同，我们可以确定这两个对象不可能是相同的。
* 这个类实现了一个比较函数，如果它的两个参数的类型不同，总是返回[2.x.10]，否则返回<tt>p1 == p2</tt>。

* 
* [0.x.8]*
   相同类型的指针的比较函数。如果两个指针相等，则返回[2.x.11]。 
* [0.x.9]*
   用于不同类型的指针的比较函数。C++语言不允许使用<tt>operator==</tt>来比较这些指针。  然而，由于这两个指针的类型不同，我们知道它们不可能相同，所以我们总是返回 [2.x.12] 。  
* [0.x.10]*
   一个结构，实现了两种类型相乘产生的默认乘积类型。   
* [2.x.13]当[2.x.14]或[2.x.15]有限定词（[2.x.16]或[2.x.17]或者是[2.x.18]或[2.x.19]的引用时，应该注意! 建议只对未限定的（完全剥离的）类型进行该类的专业化处理，并使用ProductType类来确定对（潜在的）限定类型进行操作的结果。 
* [0.x.11]*
 一个具有本地别名的类，它代表了由类型为[2.x.20]和[2.x.21]的两个变量的乘积所产生的类型。换句话说，我们想在这样的代码中推断[2.x.22]变量的类型。

* 
* [1.x.5]
* 这个结构的本地别名代表了变量[2.x.23]会有的类型。
* 

* [1.x.6]
* 这个类的目的主要是表示人们需要用来表示正交点的有限元场的值或梯度的类型。例如，假设你在Vector<float>中存储未知数的值[2.x.24]，那么在正交点评估[2.x.25]的结果是需要存储为[2.x.26]的变量，因为[2.x.28]是[2.x.29]值，[2.x.30]被计算为[2.x.31]值，然后积为[2.x.32]值。另一方面，如果你将未知数[2.x.33]存储为[2.x.34]值，并试图在正交点评估[2.x.35]，那么梯度[2.x.36]需要存储为[2.x.37]类型的对象，因为当你用复数乘以[2.x.38]（用于表示标量有限元的形状函数的梯度的类型）时，你会得到这样的对象。
* 同样，如果你使用的是矢量值元素（有dim成分），并且[2.x.39]被存储为[2.x.40]变量，那么[2.x.41]需要有[2.x.42]类型（因为形状函数有[2.x.43]类型）。最后，如果你将[2.x.44]存储为类型为[2.x.45]的对象，并且你有一个矢量值的元素，那么梯度[2.x.46]将导致类型为[2.x.47][2.x.48]的对象。
* 在所有这些情况下，这个类型是用来识别哪种类型需要用于计算未知数与值、梯度或形状函数的其他属性的乘积的结果。

* 
* [0.x.12]*
 该类提供了一个本地别名[2.x.49]，该别名等于模板参数，但只有在模板参数对应于标量类型（即浮点类型、有符号或无符号整数或复数中的一种）的情况下才是如此。如果模板类型[2.x.50]不是标量，那么就没有声明类[2.x.51]，因此也就没有本地别名可用。
* 该类的目的是如果其中一个参数不是标量数字，则禁用某些模板函数。通过（无意义的）例子，考虑以下函数。

 
* [1.x.7]
* 这个函数可以用任何两个相同类型的参数来调用 [2.x.52] 这包括一些参数，这显然没有意义。因此，人们可能想把这个函数限制在只有标量，这可以写成

* 
* [1.x.8]
* 在你调用函数的地方，编译器会从参数中推断出类型[2.x.53]。例如，在

* 
* [1.x.9]
*它将推断出[2.x.54]是[2.x.55]，由于[2.x.56]等于[2.x.57]，编译器将从上面的模板实例化一个函数<code>double multiply(const double, const double)</code>。另一方面，在这样的背景下

* 
* [1.x.10]
* 编译器会推断出[2.x.58]是[2.x.59]，但由于[2.x.60]不存在，编译器不会考虑模板的实例化。这种技术被称为 "替换失败不是错误（SFINAE）"。它确保了模板函数甚至不能被调用，而不是导致后来的错误，即操作[2.x.61]没有被定义（或可能导致一些无意义的结果）。它还允许声明一个函数的重载，如[2.x.62]乘以不同类型的参数，而不会导致编译器产生模糊的调用错误。

* 
* [0.x.13]

