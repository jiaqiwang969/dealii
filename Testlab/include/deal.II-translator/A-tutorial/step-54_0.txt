include/deal.II-translator/A-tutorial/step-54_0.txt
[0.x.0]*
 [2.x.0]
* 本教程依赖于 [2.x.1] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16]
* [2.x.2]
* [1.x.17]
* [2.x.3] 这个程序阐述了工业几何的概念，使用与OpenCASCADE库（http://www.opencascade.org）接口的工具，允许指定任意的IGES文件来描述你的几何图形的边界。
* [2.x.4]
* [1.x.18][1.x.19][1.x.20] 。
*

*
* 在以前的一些教程（[2.x.5]、[2.x.6]、[2.x.7]、[2.x.8]和[2.x.9]等）中，我们已经学会了如何使用 deal.II中提供的网格细化方法。这些教程展示了如何使用这些工具为一次模拟制作精细的网格，如[2.x.10]；或者从粗大的网格开始，在自适应细化的网格上进行一系列的模拟，如[2.x.11]的情况。无论采取哪种方法，网格细化都需要对计算域边界进行适当的几何描述，以便在每次细化时，将新的网格节点置于边界表面。例如，[2.x.12]展示了如何创建一个圆形网格，将一个圆形流形对象自动附加到计算域上，从而使位于边界上的面被细化到圆上。  [2.x.13]展示了如何用实验获得的数据定义的流形来做这件事。但是，至少就基本边界形状而言，deal.II实际上只提供了圆形、球形、盒子和其他基本组合。在本教程中，我们将展示如何使用一套开发出来的类来导入任意的CAD几何图形，把它们分配到计算域的所需边界，并在这样的复杂形状上细化计算网格。
*

*[1.x.21][1.x.22]


*在最常见的工业实践中，任意形状的物体的几何模型是通过计算机辅助设计（CAD）工具实现的。在过去的几十年里，CAD建模工具的使用范围不断扩大，因为它们可以为每个设计对象生成一个完整的虚拟模型，在实物制作之前，可以通过计算机对其进行可视化、检查和分析，以获得最精细的细节。  从数学的角度来看，CAD建模者的引擎是由分析几何学来表示的，特别是由参数化的曲线和曲面，如B-splines和NURBS，它们足够丰富，可以表示大多数实际感兴趣的表面。  一旦一个虚拟模型准备好了，所需物体的所有几何特征都被存储在文件中，这些文件实质上包含了构成该物体的参数化曲面和曲线的系数。根据用于定义几何模型的特定CAD工具，有几种不同的文件格式，可以组织CAD模型的信息。为了提供一个跨CAD工具交换数据的共同基础，美国国家标准局在1980年发布了初始图形交换表示法（IGES）中性文件格式，在本例中使用。
* [1.x.23][1.x.24] 。
*

* 为了导入和查询CAD模型，deal.II库实现了一系列用于CAD建模的OpenCASCADE开源库的封装函数。这些函数允许将IGES文件导入OpenCASCADE本地对象，并将它们封装在一系列Manifold类中。
* 一旦从IGES文件导入，模型就被存储在[2.x.14]中，这是OpenCASCADE框架中定义的通用拓扑实体。从[2.x.15]中，就可以访问组成它的所有子形状（如顶点、边和面），以及它们的几何描述。在deal.II框架中，组成一个形状的拓扑实体被用来创建一个相应的Manifold表示。在[2.x.16]中，我们看到了如何使用[2.x.17]来创建一个超球体，它自动将一个球形的Manifold附加到所有边界面。这保证了边界面在网格细化过程中保持在球体或圆上。CAD建模界面的功能被设计为保留相同的结构，允许用户使用导入的CAD形状建立一个投影仪对象，保持我们在其他教程程序中使用的相同程序，即把这种投影仪对象分配给粗略网格的单元、面或边。在每个细化周期，新的网格节点将通过将现有对象的中点投影到指定的几何体上而自动生成。
* 与球形或圆形边界不同，具有复杂几何形状的边界带来的问题是，在细化过程中创建的新节点最好放在规定形状上。例如，PolarManifold将周围的点转化为极坐标，计算该坐标系中的平均值（每个坐标单独计算），最后将点转化回直角坐标。
* 在一个任意的、复杂的形状的情况下，一个适当的选择来放置一个新的节点并不是那么容易确定的。deal.II中的OpenCASCADEwrappers提供了几个采用不同投影策略的投影器类。第一个投影仪，在[2.x.18]类中实现，只用于边缘细化。它的建立是给它分配一个一维的拓扑形状，或者是一个[2.x.19]（这是一个复合形状，由几个相连的[2.x.20]组成），并细化一个网格边缘，找到新的顶点作为两个偶数部分的CAD曲线部分的曲线长度，该曲线位于原始边缘的顶点之间。
* [2.x.21]
*

* 在[2.x.22]类中实现了一个不同的投影策略。在构造时分配的[2.x.23]可以是任意的（形状、面、边的集合或单个面或边都可以）。新的单元格节点首先通过对周围的点进行平均计算，方法与FlatManifolddo相同。在第二步中，所有的新节点将沿着形状的法线方向被投射到[2.x.24]。如果有非法线投影，则选择最接近形状的点--通常位于形状的边界上--。  如果形状是由几个子形状组成的，则投影到每个子形状上，并选择最接近的投影点。
* [2.x.25] [2.x.26]。
* 正如我们即将体验到的，对于某些形状，将投影方向设置为CAD表面的法线将不会导致合适质量的表面网格。这是因为CAD表面的法线方向原则上与网格需要新节点的方向没有关系。在这种情况下，[2.x.27]类可以提供帮助。这个类的构造是指定一个[2.x.28]（至少包含一个面）和一个方向，所有的投影将沿着这个方向进行。新的点将被计算出来，首先对周围的点进行平均化（就像在FlatManifold的情况下），然后沿着构建时使用的方向，取拓扑形状和通过所得到的点的线之间的最接近的交点。  通过这种方式，用户可以对投影方向有更高的控制，以确保良好的网格质量。
* [2.x.29]


* 当然，后一种方法只有在表面的方向相当统一时才有效，这样就可以确定一个单一的投影方向。在表面方向接近投影方向的情况下，甚至有可能找不到方向性的投影。为了克服这些问题，[2.x.30]类实现了第三个投影算法。[2.x.31]类是在构造函数中分配了一个[2.x.32]（至少包含一个面），其工作原理与[2.x.33]完全一样。但是，正如该类的名称所暗示的，[2.x.34]试图想出一个对要精化的网格元素的法线方向的适当估计，并使用它来将新节点投射到CAD表面。如果我们考虑二维空间中的网格边缘，其轴线方向是一个方向，沿着这个方向分割，以产生两个相同长度的新单元。我们将这一概念延伸到三维空间，并将所有新的节点投射到接近单元法线的方向。
* 在下图中，受本教程中所考虑的几何形状的启发，我们试图比较所考虑的三种投影仪的行为。从左边可以看出，给定原始单元（蓝色）后，用法线投影找到的新点所处的位置不允许生成均匀的新元素（红色）。这种情况在进一步的细化步骤中会变得更糟。  由于我们考虑的几何体在某种程度上垂直于水平方向，以水平方向为投影方向的定向投影（中心图像）在获得新的网格点方面做得相当好。然而，在图片的底部，表面几乎是水平的，当进一步细化的步骤进行时，我们可以预期在这些区域会有问题。最后，右边的图片显示，位于cellaxis上的节点将导致两个具有相同长度的新单元。当然，三维的情况比这个简单的二维案例所描述的情况要复杂一些。然而，这个测试的结果证实，当考虑到任意形状的表面时，除非你有一个几何形状，已知有一个更具体的方法是合适的，否则法线到网格方向是三个测试中最好的方法。
*

* [2.x.35]


*[1.x.25][1.x.26]


* 在这个程序中，我们将考虑为一个描述船头的真实几何体创建一个表面网格（这个几何体经常被用于CAD和网格生成的比较中，并且可以免费获得）。我们得到的表面网格可以用来解决边界元素方程，以模拟水在船上的流动（类似于[2.x.36]），但我们不会在这里尝试这样做。为了让你对我们所考虑的几何形状有一个概念，这里有一张图片。
* [2.x.37]
* 在这个程序中，我们从文件中读取几何体和粗略的网格，然后使用上面讨论的几个选项来放置新的顶点，进行一系列的网格细化步骤。
*

* [1.x.27] [1.x.28]。
* [1.x.29] [1.x.30]。



* 我们首先包括一堆文件，我们将在程序的各个部分使用这些文件。其中大部分已经在以前的教程中讨论过了。
*


* [1.x.31]
*
* 这些是opencascade支持类和函数的头文件。注意，只有当你在编译deal.II库时支持OpenCASCADE，即在deal.II配置过程中调用[2.x.40]时指定[2.x.38]和[2.x.39]，这些才会包含合理的数据。
*


* [1.x.32]
*
* 最后，一些C++标准头文件
*


* [1.x.33]

* 我们将程序的其余部分隔离在它自己的命名空间中
*


* [1.x.34]
*
* [1.x.35] [1.x.36]。


*
* 这是主类。它真正做的是存储输入和输出文件的名称，以及一个三角图。然后，它提供了一个函数，可以从一个粗略的网格中生成这样一个三角形，使用介绍中讨论的策略之一，并在类的顶部的枚举类型中列出。   
* 这个类的成员函数类似于你可以在大多数其他教程程序中找到的模拟用网格的设置阶段。
*


*


* [1.x.37]
*
* [1.x.38] [1.x.39]。


*
* TriangulationOnCAD类的构造函数非常简单。输入参数是输入和输出文件名的字符串，以及决定在网格细化循环中使用哪种曲面投影仪的枚举类型（详见下文）。
*


*


* [1.x.40]
*
* [1.x.41] [1.x.42]。



*
* 下面的函数代表了这个程序的核心。  在这个函数中，我们导入CAD形状，在此基础上生成并完善我们的三角测量。我们假设CAD曲面包含在[2.x.41]文件中（我们在输入目录中提供了一个名为 "input/DTMB-5415_bulbous_bow.iges "的IGES文件的例子，它代表了一艘船的球形船头）。几个凸和凹的高曲率区域的存在使我们提供的几何体成为一个特别有意义的例子。   
* 在导入船首表面后，我们提取了组成它的一些曲线和曲面，并利用它们生成了一组投影仪。这些投影仪定义了三角法在单元细化过程中定位每个新节点所必须遵循的规则。   
* 为了初始化Triangulation，就像以前的教程程序一样，我们导入一个以VTK格式保存的已有网格。在这里我们假设用户已经在外部生成了一个粗略的网格，与IGES的几何图形相匹配。在编写本教程的时候，deal.II库并不自动支持生成这样的网格，但是有一些工具可以从CAD文件开始为你提供合理的初始网格。在我们的例子中，导入的网格是由一个四边形单元组成的，其顶点被放置在CAD的形状上。   
* 在导入IGES几何体和初始网格后，我们将之前讨论过的投影仪分配给每个需要在CAD表面进行细化的边和单元。   
* 在本教程中，我们将测试介绍中所描述的三种不同的CAD表面投影仪，并将分析每一种投影仪所获得的结果。  如前所述，这些投影策略中的每一个都在不同的类中实现了，这些类型的对象可以用[2.x.42]的方法分配给一个三角形。   
* 然后，下面的函数首先导入给定的CAD文件。函数的参数是一个包含所需文件名的字符串，以及一个比例因子。在这个例子中，比例因子被设置为1e-3，因为原始几何体是以毫米为单位的（这是大多数IGES文件的典型计量单位），而我们更喜欢以米为单位工作。  该函数的输出是一个OpenCASCADE通用拓扑形状类的对象，即一个[2.x.43]。
*


* [1.x.43]
*
* 每个CAD几何对象都定义了一个公差，表示其位置可能的不精确性。例如，顶点的公差[2.x.44]表示它可以位于以标称位置为中心、半径为[2.x.45]的球体中的任何一点。当把一个点投射到一个表面（这也有其公差）时，我们必须记住，投射的精度将受到建立表面的公差限制。
*

*
* 下面的方法提取了给定形状的公差，并使其稍大一些，以避免麻烦。
*


* [1.x.44]
*
* 我们现在要从通用形状中提取一组复合子形状。特别是，CAD文件的每个面都是由类型为[2.x.46]的修剪曲线组成的，它是构成曲面边界的[2.x.47]的集合，以及曲面本身的NURBS描述。我们将使用一个线条投影仪来将我们的三角形的边界与划定曲面的线联系起来。  为了提取所有的复合子形状，如线、壳或实体，我们求助于OpenCASCADE命名空间的一种方法。  [2.x.48]的输入是一个形状和一组空的[2.x.49]子形状，它将被填充为在给定拓扑形状中发现的所有复合形状。
*


* [1.x.45]
*
* 接下来的几个步骤比较熟悉，允许我们从外部VTK文件中导入一个现有的网格，并将其转换为一个交易三角。
*


* [1.x.46]
*
* 我们输出这个初始网格，将其保存为细化步骤0。
*


* [1.x.47]
*
* 导入的网格有一个单一的、位于三维空间的二维单元。我们现在要确保它是根据上面导入的CAD几何图形进行细化。为此，我们得到一个单元的迭代器，并给它分配manifold_id 1（见[2.x.50] "这个词汇条"）。我们还得到了一个指向其四个面的迭代器，并为每个面分配了manifold_id 2。
*


* [1.x.48]
*
* 一旦CAD几何体和初始网格都被导入和消化，我们就用CAD的曲面和曲线来定义投影仪，并将它们分配给刚才指定的流形ID。
*

*
* 第一个投影仪是用我们的CAD文件中的单线来定义的。  ArclengthProjectionLineManifold将确保位于导线上的每条网格边缘都被细化为一个位于导线上的点，并将其分割为两个位于边缘顶点之间的等距弧。我们首先检查导线矢量是否至少包含一个元素，然后为其创建一个Manifold对象。     
*一旦创建了投影仪，我们就把它分配给三角形的所有部分，manifold_id = 2。
*


* [1.x.49]
*
* 根据构造函数的[2.x.51]选项所指定的内容来创建曲面投影仪。特别是，如果surface_projection_kind的值等于[2.x.52]，我们选择[2.x.53] 新的网格点将在考虑的单元格/边的arycenter处最初生成，然后沿其法线方向投影到CAD表面。  NormalProjectionManifold构造器只需要一个形状和一个公差，然后我们把它分配给三角结构，用于所有具有id 1的流形的零件。
*


* [1.x.50]
*
* [2.x.54] surface_projection_kind值为[2.x.55]，我们选择[2.x.56]类。新的网格点将在所考虑的单元格/边的arycenter处初始生成，然后沿着[2.x.57]构造函数指定的方向投影到CAD表面上。在这种情况下，投影是沿着Y轴进行的。
*


* [1.x.51]
*
* 作为第三个选项，如果[2.x.58]的值是[2.x.59]，我们选择[2.x.60] 新的网格点将再次在所考虑的单元格/边的arycenter处初始生成，然后沿着一个估计为网格法线方向的方向投影到CAD表面。[2.x.61] 构造函数只需要一个形状（至少包含一个面）和一个公差。
*


* [1.x.52]
*
* 最后，我们使用良好的软件清洁性，确保这真的涵盖了[2.x.62]语句的所有可能的选项。如果我们得到任何其他的值，我们就直接中止程序。
*


* [1.x.53]
*
* [1.x.54] [1.x.55]。


*
* 这个函数对网格进行全局细化。在其他教程中，它通常也会分配自由度，并调整矩阵和向量的大小。这些任务在这里没有进行，因为我们没有在生成的三角网格上运行任何模拟。   
* 虽然这个函数看起来很简单，但这是我们对这个教程程序感兴趣的大部分工作实际发生的地方。特别是在细化定义船体表面的四边形和直线时，Triangulation类会询问我们分配给处理单个流形ID的各种对象，以确定新顶点应该位于何处。
*


* [1.x.56]
*
* [1.x.57] [1.x.58]。



* 输出我们的计算结果是一个相当机械的任务。这个函数的所有组成部分在前面已经讨论过了。
*


* [1.x.59]
*
* [1.x.60] [1.x.61]。


*
* 这是最主要的功能。它应该是不言自明的简短。
*


* [1.x.62]
*
* [1.x.63] [1.x.64]。



* 这是本程序的主要功能。它的基本结构和以前所有的教程程序一样，但通过新顶点放置的三种可能性来运行主类。
*


* [1.x.65]
* [1.x.66][1.x.67] 。


* 程序的执行会产生一系列的网格文件[2.x.63]，我们可以用任何可以读取VTK文件格式的常用可视化程序进行可视化。
* 下表说明了采用正常投影策略得到的结果。该表的前两行显示的是逐步细化的网格的侧视图，覆盖在精确几何形状的非常精细的渲染上。深红色和浅红色的区域只是表示当前网格或精细几何体更接近观察者；这种区别并没有任何特别深刻的意义。最后两张图片描述了第二行中显示的相同网格的正面视图（镜像到几何体的两侧）。
*

* [2.x.64]
* 从图片中可以看出，正如我们所预料的那样，当应用于具有明显曲率变化的表面时，普通的细化策略无法产生良好的形状的元素。这一点在船体的球体上尤其明显，所有的新点都被放置在球体的上部，而下部则完全没有被解决。
* 下表和上表一样，说明了采用方向性投影方法得到的结果，其中选择的投影方向是Y轴（在每张图片的左下方用一个小的黄色箭头表示）。
*

* [2.x.65]
* 图像证实，用定向投影得到的网格质量比沿表面法线投影得到的网格质量要高。然而，在球体底部观察到一些在Y方向上拉长的元素，那里的表面几乎与选择的投影方向平行。
* 最后的测试显示了使用面的法线投影的结果。
* [2.x.66]
* 这些图片证实了法线对网格投影的方法导致网格在整个细化步骤中保持均匀的间距。同时，这些网格很好地表现了原始的几何形状，甚至在灯泡的底部区域也是如此，这一点用定向投影仪或法线投影仪都不能很好地恢复。
*

* [1.x.68][1.x.69] [2.x.67] 。
* [0.x.1]

