include/deal.II-translator/A-tutorial/step-71_0.txt
[0.x.0]*
 [2.x.0] 
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17 ][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28][1.x.29][1.x.30][1.x.31][1.x.32][1.x.33]
* [2.x.1] 
* [1.x.34]
* 

*[1.x.35][1.x.36]
 

* 本教程的目的很简单，就是介绍[自动](https://en.wikipedia.org/wiki/Automatic_differentiation)和[符号微分](https://en.wikipedia.org/wiki/Computer_algebra)（分别缩写为AD和SD）的基本原理。人们可以在源代码中描述一个函数[2.x.2]，并自动获得导数[2.x.3]（"Jacobian"）、[2.x.4]（"Hessian"）等的表示方法，而无需编写额外的代码行。这样做对解决非线性或优化问题很有帮助，因为人们只想在代码中描述非线性方程或目标函数，而不必同时提供它们的导数（对于解决非线性问题的牛顿方法或寻找最小化器来说，这是必要的）。
* 由于AD和SD工具在某种程度上独立于有限元和边界值问题，本教程将与你之前可能读过的其他教程不同。它将特别关注这些框架是如何工作的，以及它们背后的原理和思想，并将放弃在有限元模拟的直接背景下看待它们。
* 事实上，我们将研究两组不同的问题，它们的复杂程度大相径庭，但如果框架适当，就有足够的相似性，同样的AD和SD框架可以被利用。通过这些例子，我们的目的是建立起对使用AD和SD工具所需步骤的理解，以及它们之间的区别，并希望能找出它们可以立即用于改进或简化现有代码的地方。
* 你可能想知道AD和SD是什么，首先。好吧，这个问题很容易回答，但如果没有上下文，就没有很好的洞察力。我们不打算在这个介绍中涉及这个问题，而是将这个问题推迟到第一个介绍性的例子中，在这个例子的展开过程中，我们将列出关键点。作为补充，我们应该提到，这两个框架的核心理论在[2.x.5]模块中已被广泛讨论，所以在此无需重复。
* 由于我们必须选择一些*足够有趣的主题来研究和确定AD和SD可以有效使用的地方，在本教程的后半部分所涉及的主要问题是对一个耦合构成法的建模，特别是磁活性材料（具有滞后效应）。作为介绍的一种手段，在介绍的后面将介绍该类材料的一些基础理论。自然，这不是一个广大读者感兴趣的领域（甚至不是一类材料）。因此，作者希望预先说明，这个理论和任何后续的推导都不能被认为是本教程的重点。相反，请记住从相对无害的构成法则描述中产生的问题的复杂性，以及我们可能(在边界值问题的背景下)需要从中推导出什么。我们将用这些构成法则在代表连续体点的水平上进行一些计算(所以，仍然在连续体力学领域)，并将产生一些基准结果，我们可以围绕这些结果对计算性能的主题进行最后讨论。
* 一旦我们有了可以建立进一步概念的基础，我们将看到如何在有限元(而不是连续体)水平上特别利用AD：这是一个在[2.x.6]以及[2.x.7]中涉及的主题。但在此之前，让我们花点时间想想为什么我们可能要考虑使用这些工具，以及它们可能给你带来什么好处。
* 

* [1.x.37][1.x.38] 。
 

* 使用AD或SD的主要驱动力通常是，有一些情况需要进行区分，而且这样做有足够的挑战性，使使用外部工具来执行该特定任务的前景具有吸引力。对AD或SD最有用的情况进行了广泛的分类，包括（但可能不限于）以下几种情况。
* 
* - [1.x.39] 对于一类新的问题，你正试图快速实现一个解决方案，并希望去除一些复杂的细节（在数学和代码本身的组织结构方面）。你可能愿意证明任何额外的计算成本是合理的，这将被重组你的代码或修改问题中引入一些复杂的非线性的部分的敏捷性所抵消，只需最小的努力。
* 
* - [1.x.40]很可能有些问题恰好有一个非线性，对线性化或手工制定有极大的挑战。 如果有一个工具为你解决这个挑战，那么在大多数情况下，它是稳健的、可靠的和准确的，可以减轻实现某些问题的痛苦。这方面的例子包括[2.x.8]，我们解决的非线性PDE的导数并不难推导，但足够繁琐，人们必须注意用手来做，而且实现牛顿步骤的相应有限元公式需要的不仅仅是实现双线性形式一般需要的几行；[2.x.9]（我们实际上使用AD）是一个更极端的例子。
* 
* - [1.x.41]对于表现出非线性响应的材料和模拟，准确的而不是只有近似的材料切线（机械工程师对材料定律的导数使用的术语）可能是收敛和发散行为之间的区别，特别是在高外部（或耦合）载荷下。 随着问题复杂性的增加，引入细微的（或者，也许不是那么细微的）错误的机会也在增加，这些错误会产生可预见的负面结果。 此外，通过验证实现是完全正确的，也有很多好处。例如，某些类别的问题已知会表现出不稳定性，因此，当你在非线性求解器（例如牛顿方法）中开始失去二次收敛时，那么这对研究者来说可能不是一个巨大的惊喜。然而，很难（如果不是不可能）区分以下两种收敛行为：一种是你接近不稳定的解时产生的收敛行为，另一种是你在材料或有限元线性化中出现了错误，并因此开始偏离最佳收敛路径。例如，拥有一种验证构成法线性化实现的正确性的方法，也许是你用来捕捉这种错误的唯一有意义的方法，假设你没有其他人来检查你的代码。 值得庆幸的是，通过一些战术性的编程，可以很直接地将代码结构化，以便重复使用，这样你就可以在生产代码中使用相同的类，并直接在例如单元测试框架中验证它们。
* 这个教程程序将有两个部分。一部分，我们只是用一组简单的例子来介绍deal.II中自动和符号微分支持的基本思想；另一部分，我们将其应用于一个现实的但更复杂的案例。对于后半部分，下一节将提供一些关于磁性机械材料的背景资料。
* 
* 如果你只想了解什么是AD和SD，你可以跳过这一节，但如果你对如何将AD和SD应用于具体的情况感兴趣，你可能想读完这一节。
* 

* [1.x.42][1.x.43] 。
* 

* [1.x.44][1.x.45] * [1.x.44][1.x.45]。
* 

* 作为介绍我们将用来建立磁活性聚合物模型的磁机械耦合材料法的前奏，我们将首先对这些构成法则必须遵守的突出的热力学进行非常简明的总结。这里总结的理论基础由Truesdell和Toupin [2.x.10] 以及Coleman和Noll [2.x.11] 详细描述，并遵循Holzapfel [2.x.12] 提出的逻辑。
* 从热力学第一定律开始，并遵循一些技术假设，可以证明动能加内能率与外部资源提供给系统的功率之间的平衡由以下关系给出，该关系等同于左侧（任意）体积[2.x.13]中的能量变化率，以及右侧作用在该体积上的力之和：[1.x.46 这里[2.x.14]代表总时间导数，[2.x.15]是在拉格朗日参考框架下测量的材料密度，[2.x.16]是材料速度，[2.x.17]是其加速度，[2.x.18]是每单位参考体积的内能，[2.x.19]是总皮拉应力张量，[2.x.20]是变形梯度张量的时间率，[2.x.21]和[2.x.22 ]分别是磁场矢量和磁感应强度（或磁通密度）矢量，[2.x.23]和[2.x.24]是电场矢量和电位移矢量，以及[2.x.25]和[2.x.26 材料微分算子[2.x.27]，其中[2.x.28]是材料位置矢量。随着一些条款的重新排列，引用积分体积的任意性[2.x.29 ]，总的内能密度率[2.x.30]可以确定为[1.x.47]。总的内能不仅包括由于机械变形（第一项）、热通量和热源（第四项和第五项）而产生的贡献，还包括由于储存在磁场和电场本身的内在能量（分别为第二项和第三项）。
* 热力学第二定律，也被称为熵不平等原则，告诉我们某些热力学过程是不可逆的。在考虑了总熵和熵的输入率后，可以得出克劳修斯-杜姆不等式。在局部形式下（以及在物质配置中），这读作[1.x.48]量[2.x.31]是绝对温度，[2.x.32]代表每单位参考体积的熵值。
* 用它来代替热力学第一定律结果中的[2.x.33]，我们现在有了这样的关系[1.x.49]，根据傅里叶定律，它告诉我们热量从高温区域流向低温，最后一项总是正的，可以忽略。 在等温条件的假设下，电场不会以被认为是不可忽略的方式激发材料，那么这个耗散不等式就会减少为[1.x.53] 。
*[1.x.54][1.x.55] 。
* 

* 当考虑到表现出机械耗散行为的材料时，可以证明这可以通过用代表内部变量的额外参数来增加材料自由能密度函数，从而在耗散不等式中得到体现 [2.x.36] 。因此，我们把它写成[1.x.56]，其中[2.x.37]代表与第i个机械耗散（粘性）机制相关的内部变量（其作用类似于变形梯度的测量）。这是自然的参数化，是所考虑的平衡定律的结果。如果这样一类材料被纳入到有限元模型中，就会发现需要采用某种磁问题的表述，即磁矢量势表述。这有它自己的一套挑战，所以在可能的情况下，更简单的磁标量势公式可能被优先考虑。在这种情况下，磁性问题需要以磁场为参数 [2.x.40] 。为了进行这种重新参数化，我们执行最后的Legendre变换[1.x.57]。同时，我们可以利用材料框架差异的原则，以便用对称变形量来表达能量密度函数：[1.x.58]这两种变换的结果（撇开相当多的明确和隐藏的细节）使还原耗散质量的最终表达式为[1.x.59 应力量[2.x.41]被称为Piola-Kirchhoff总应力张量，其能量共轭物[2.x.42]是右Cauchy-Green变形张量，[2.x.43]是与第i种机械耗散（粘性）机制相关的重新参数化的内部变量。
* 对能量密度函数的材料速率进行扩展，并对各种条款进行重排，结果是表达式[1.x.60]在这一点上，值得注意的是[偏导数](https://en.wikipedia.org/wiki/Partial_derivative) [2.x.44]的使用。这是一个重要的细节，对教程中的某个设计选择至关重要。简单提醒一下这意味着什么，多变量函数的偏导返回该函数相对于其中一个变量的导数，同时保持其他变量不变：[1.x.61 ]更具体到耗散不等式中的编码（用非常通用的自由能量密度函数[2.x.45]，其参数化还有待正式确定），如果一个输入变量是另一个变量的函数，它也被保持不变，连锁规则不会进一步传播，而计算总衍生物将意味着明智地使用连锁规则。通过比较以下两个语句可以更好地理解这一点。
* [1.x.62]
* 
* 回到问题的热力学，我们接下来利用数量[2.x.46]和[2.x.47]的任意性，通过应用科尔曼-诺尔程序[2.x.48], [2.x.49].这导致了动力学共轭数量的识别[1.x.63 从耗散功率中剩下的条款（即与机械耗散机制有关的条款）来看，如果假定它们是相互独立的，那么对于每个机制`i`，[1.x.64]这一约束必须通过自由能函数的适当选择，以及仔细考虑的内部变量的演化规律来满足。
* 如果在结构模型中没有耗散机制（例如，如果要建模的材料是磁超弹性的），那么自由能密度函数[2.x.50]就会减少为储存能量密度函数，总应力和磁感应可以简化。
* [1.x.65]
*其中算子[2.x.51]表示总导数操作。
* 为了完整起见，应力张量和磁感应的线性化在四阶总参考弹性张量[2.x.52]、二阶磁静力张量[2.x.53]和三阶总参考磁弹性耦合张量[2.x.54]中得到体现。无论[2.x.55]和[2.x.56]的参数化如何，这些量可以通过以下方式计算
* [1.x.66]
* 对于速率依赖型材料的情况，这扩展为
* [1.x.67]
*而对于与速率无关的材料，线性化为
* [1.x.68]
* 它们之间的细微差别是在计算第一个导数时应用了一个偏导。我们将在后面看到这如何影响这个具体应用中AD与SD的选择。现在，我们将简单地介绍一下本教程中实施的两种具体材料。
*[1.x.69][1.x.70]
* 

* 我们要考虑的第一种材料是受磁铁-超弹性构成法则支配的材料。这种材料对变形和浸入磁场都有反应，但表现出与时间或历史有关的行为（如通过粘性阻尼或磁滞的耗散，等等）。这种材料的存储能量密度函数*只在（当前）场变量方面进行参数化，而不是它们的时间导数或过去的值。
* 我们将选择能量密度函数，它既能捕捉到由于变形和磁化而储存在材料中的能量，也能捕捉到储存在磁场本身中的能量，它是[1.x.71]与[1.x.72]，对其而言，变量[2.x.57]（[2.x.58]是等级2的身份张量）代表空间维度，[2.x.59]是形变梯度张量。为了给[2.x.60]的各个组成部分提供一些简要的背景，前两个条款与（超弹性）Neohookean材料的存储能量密度函数非常相似。这里使用的东西和Neohookean材料之间的唯一区别是弹性剪切模量被磁场敏感的饱和函数[2.x.61]缩放（见[2.x.62]，方程式29）。这个函数实际上会使材料在强磁场的存在下变硬。由于它是由一个sigmoid类型的函数控制的，剪切模量将渐进地收敛于指定的饱和剪切模量。还可以证明，[2.x.63]中的最后一项是磁场的储能密度函数（从第一原理推导出来的），由相对渗透率常数缩放。这个定义共同意味着材料是线性磁化的，也就是说，磁化矢量和磁场矢量是一致的。(这在以电流形式表示的磁能中当然不明显，但当磁感应和磁化从[2.x.64]中导出，并且所有磁场都以[2.x.65]的电流配置[2.x.66]表示时，这种关联性就变得很清楚了。)至于磁感应、应力张量和各种材料切线的具体细节，我们将把这些推迟到教程正文中来介绍，那里定义了构成法的完整、无辅助的实施。
*[1.x.73][1.x.74]
* 

* 我们将制定的第二个材料是一个具有单一耗散机制`i`的磁-粘弹性材料。
* [1.x.75]
我们将考虑的自由能量密度函数*定义为*[1.x.75]，其中[1.x.76][1.x.77]和内部粘性变量的演变规律[1.x.78]。至于粘性部分[2.x.68]，自由能的这一部分（与粘性变形张量的演化规律一起）取自[2.x.69]（通过[2.x.70]中描述的粘性饱和函数进行额外的缩放）。它是在一个热力学上一致的框架中得出的，其核心是对聚合物链在微观尺度上的运动进行建模。
* 选择隐式一阶逆向差分方案，那么[1.x.79]中的上标[2.x.71]表示该量是在当前的时间步长上取的，[2.x.72]表示在前一时间步长上取的量（即历史变量）。将条款重新排列，使当前时间的所有内部变量量都在方程的左侧，我们得到[1.x.80]，与[2.x.74]方程54相匹配。
*[1.x.81][1.x.82] 。
* 

* 我们希望对我们制定的材料定律做一些有意义的事情*，因此将它们置于一些机械和磁载荷条件下是有意义的，这些条件在某种程度上代表了在应用或实验室环境中可能发现的一些条件。实现这一目标的方法之一是将这些构成法则嵌入到模拟设备的有限元模型中。但在这个例子中，我们将保持简单（毕竟我们的重点是自动和符号微分概念），并将找到一个简明的方法来忠实地复制一个行业标准的流变学实验，使用负载条件的分析表达。
* 我们要重现的流变学实验是一个理想化的实验室实验，它被用来描述磁活性聚合物的特性，详细内容见[2.x.75]（以及[2.x.76]，其中记录了它和真实世界的实验情况）。下面的图片提供了对问题设置的视觉描述。
* [2.x.77] 
* 假设正在测试的是不可压缩的介质，并且通过样品厚度的变形曲线是线性的，那么在样品内的某个测量点[2.x.78]的位移，用径向坐标表示，就是
* [1.x.83]
*其中[2.x.79]和[2.x.80]是在[2.x.78]的半径。
* 
* -和角度为
* 
* 采样点，[2.x.81]是（恒定的）轴向变形，[2.x.82]是每单位长度上与时间有关的扭转角，将使用固定振幅[2.x.83]的无声重复振荡来规定。磁场是轴向排列的，即在[2.x.84]方向。
*这总结了我们需要全面描述流变样品内任何一点的理想化载荷的一切。我们将设置这样一个问题，即我们在这个样品中 "挑选 "一个有代表性的点，让它在一个恒定的轴向变形（默认为压缩载荷）和一个恒定的轴向施加的磁场中承受谐波剪切变形。我们将记录这时的应力和磁感应强度，并将数据输出到文件中进行后处理。尽管在这个特定的问题上没有必要，但我们也将计算切线。尽管在这个特定的工作中没有直接使用它们，但为了将构成法嵌入无限元模型（这项工作的一个可能的扩展），需要这些二次导数。因此，我们将利用这个机会，用辅助微分框架来检查我们的手工计算的正确性。
*[1.x.84][1.x.85]
* 

* 除了已经提到的[2.x.85]模块外，以下是一些更详细讨论的参考文献
* 
* - 磁力学，以及自动分化框架的某些方面。 [2.x.86] , [2.x.87] , 和
* 
* - 使用AD和/或SD的有限元框架的自动化： [2.x.88] , [2.x.89] 。
* [2.x.90] 
* 

* [1.x.86] [1.x.87] 。
* 我们首先包括所有必要的deal.II头文件和一些C++相关的文件。这第一个头文件将使我们能够访问一个数据结构，使我们能够在其中存储任意的数据。
* 

* 
* [1.x.88]
* 
* 接下来是一些核心类，包括一个提供时间步进的实现。
* 

* 
* [1.x.89]
* 
* 然后是一些标题，定义了一些有用的坐标转换和运动学关系，这在非线性弹性中经常出现。
* 

* 
* [1.x.90]
* 
* 以下两个头文件提供了我们进行自动微分所需的所有功能，并使用deal.II可以利用的符号计算机代数系统。所有自动微分和符号微分包装类的头文件，以及任何需要的辅助数据结构，都被收集在这些统一的头文件中。
* 

* 
* [1.x.91]
* 
* 包括这个头文件使我们有能力将输出写入文件流中。
* 

* 
* [1.x.92]
* 
* 按照惯例，整个教程程序被定义在它自己独特的命名空间中。
* 

* 
* [1.x.93]
* 
* [1.x.94] [1.x.95]。
 

* 
* 自动和象征性的区分有一些神奇和神秘的特质。尽管在一个项目中使用它们会因多种原因而受益，但了解如何使用这些框架或如何利用它们的障碍可能会超过试图将它们（可靠地）整合到工作中的开发者的耐心。  
* 尽管作者希望能成功地说明这些工具如何能被集成到有限元建模的工作流程中，但最好还是先退一步，从基础开始。因此，一开始，我们先看看如何使用这两个框架来区分一个 "简单 "的数学函数，这样就可以牢固地建立和理解基本的操作（包括它们的顺序和功能），并使其复杂程度降到最低。在本教程的第二部分，我们将把这些基本原理付诸实践，并在此基础上进一步发展。  
* 伴随着对使用框架的算法步骤的描述，将有一个简化的观点，即这些框架可能*在后台做什么。这种描述在很大程度上是为了帮助理解，我们鼓励读者查看[2.x.91]模块文档，以获得对这些工具实际工作的更正式描述。  
*  
* [1.x.96] [1.x.97]。
* 

* 
* [1.x.98]
* 
* 为了使读者相信这些工具在实践中确实有用，让我们选择一个函数，用手计算分析导数并不难。只是它的复杂程度足以让你考虑是否真的要去做这个练习，也可能让你怀疑你是否完全确定你对其导数的计算和实现是正确的。当然，问题的关键在于，函数的微分在某种意义上是相对公式化的，应该是计算机所擅长的。
* 
* - 如果我们能建立在现有的理解规则的软件上，我们就不必费心自己去做。    
* 我们为此选择了双变量三角函数[2.x.92]。请注意，这个函数是以数字类型为模板的。这样做是因为我们经常（但并不总是）可以使用特殊的自动微分和符号类型作为实值或复值类型的落地替代，然后这些类型将执行一些基本的计算，例如评估一个函数值及其导数。我们将利用这一特性，确保我们只需要定义一次我们的函数，然后就可以在我们希望对其进行微分操作的任何情况下重新使用。
* 

* 
* [1.x.99]
* 
* 我们不会立即揭示这个函数的导数，而是向前声明返回导数的函数，并将其定义推迟到以后。正如函数名称所暗示的，它们分别返回导数 [2.x.93] 。
* 

* 
* [1.x.100]
* 
* [2.x.94] :
 

 
* [1.x.101]
 
* [2.x.95] :
 

 
* [1.x.102]
 
* [2.x.96] :
 

 
* [1.x.103]
 
* [2.x.97] :
 

 
* [1.x.104]
* 
* 最后是[2.x.98] 。
 

 
* [1.x.105]
* 
* [1.x.106] [1.x.107]。
 

* 
* 首先，我们将使用AD作为工具，为我们自动计算导数。我们将用参数`x`和`y`来评估函数，并期望得到的值和所有的导数都能在给定的公差范围内匹配。
* 

* 
* [1.x.108]
* 
* 我们的函数[2.x.99]是一个标量值函数，其参数代表代数计算或张量计算中遇到的典型输入变量。由于这个原因，[2.x.100]类是合适的包装类，可以用来做我们所需要的计算。(作为比较，如果函数参数代表有限元单元的自由度，我们会希望以不同的方式处理它们)。问题的空间维度是不相关的，因为我们没有矢量或张量值的参数需要容纳，所以`dim`模板参数被任意分配为1的值。 第二个模板参数规定了将使用哪个AD框架（deal.II支持几个外部AD框架），以及这个框架提供的基础数字类型将被使用。这个数字类型影响了微分运算的最大顺序，以及用于计算它们的基础算法。鉴于其模板性质，这个选择是一个编译时的决定，因为许多（但不是全部）AD库利用编译时的元编程，以有效的方式实现这些特殊的数字类型。第三个模板参数说明结果类型是什么；在我们的例子中，我们正在处理 "双"。
* 

* 
* [1.x.109]
 
* 我们有必要在我们的[2.x.101]类中预先登记函数[2.x.102]有多少个参数（我们称之为 "独立变量"）。这些参数是`x`和`y`，所以显然有两个参数。
* 

* 
* [1.x.110]
* 
* 我们现在有足够的信息来创建和初始化一个辅助类的实例。我们还可以得到具体的数字类型，它将在所有后续的计算中使用。这很有用，因为我们可以从这里开始通过引用这个类型来编写一切，如果我们想改变使用的框架，或者数字类型（例如，如果我们需要更多的差分运算），那么我们只需要调整`ADTypeCode`模板参数。
* 

* 
* [1.x.111]
 
* 下一步是将自变量的数值注册到辅助类中。这样做是因为函数和它的导数将正好针对这些参数进行评估。由于我们以`{x,y}`的顺序注册它们，变量`x`将被分配到分量号`0`，而`y`将是分量号`1`。
 

* 
* 
* - 这个细节将在接下来的几行中使用。
* 

* 
* [1.x.112]
* 
* 我们现在要求助手类给我们的自变量以其可自动区分的表示。这些被称为 "敏感变量"，因为从现在开始，我们对组件`独立变量_ad`所做的任何操作都会被AD框架跟踪和记录，并且在我们要求计算它们的导数时，会被考虑。帮助器返回的是一个可自动微分的 "向量"，但是我们可以确定，第2个元素代表 "x"，第1个元素代表 "y"。为了完全确保这些变量的数字类型没有任何歧义，我们给所有的自动微分变量加上`ad'的后缀。
* 

* 
* [1.x.113]
* 
* 我们可以立即将自变量的敏感表示法传递给我们的模板函数，计算 [2.x.103] 。这也会返回一个可自动微分的数字。
* 

* 
* [1.x.114]
* 
* 所以现在要问的自然是，我们把这些特殊的`x_ad`和`y_ad`变量传递给函数`f`，而不是原来的`double`变量`x`和`y`，实际上计算了什么？换句话说，这一切与我们想要确定的导数的计算有什么关系？或者，更简洁地说。这个返回的`ADNumberType`对象有什么特别之处，使它有能力神奇地返回导数？      
* 从本质上讲，这可以*做的是以下几点。这个特殊的数字可以被看作是一个数据结构，它存储了函数值，以及规定的导数数量。对于一个期望有两个参数的一次可导数，它可能看起来像这样。      
* [2.x.104]        
* 对于我们的自变量`x_ad`，`x_ad.value`的起始值将只是它的赋值（即这个变量所代表的实值）。导数`x_ad.derivatives[0]`将被初始化为`1'，因为`x'是第2个自变量和[2.x.105] 。导数`x.derivatives[1]`将被初始化为零，因为第一个自变量是`y`和[2.x.106] 。      
* 为了使函数导数有意义，我们必须假设这个函数不仅在分析意义上是可微的，而且在评估点`x,y`也是可微的。我们可以利用这两个假设：当我们在数学运算中使用这种数字类型时，AD框架可以*.
 重载操作（例如，`%operator+()`, `%operator*()`以及`%sin()`, `%exp()`, 等等），使返回的结果具有预期值。同时，它将通过对被重载的确切函数的了解和对连锁规则的严格应用来计算导数。因此，`%sin()`函数（其参数`a`本身是自变量`x`和`y`的函数）可能*被定义如下。      
* [2.x.107]        
* 当然，所有这些也可以用于二阶甚至高阶导数。      
* 所以现在很清楚，通过上述表示方法，"ADNumberType "携带了一些额外的数据，表示可微调函数相对于原始（敏感）自变量的各种导数。因此应该注意到，使用它们会产生计算开销（因为我们在做导数计算时要计算额外的函数），以及存储这些结果的内存开销。因此，规定的微分运算的级数最好保持在最低水平，以限制计算成本。例如，我们可以先自己计算一阶导数，然后用[2.x.108]辅助类来确定依赖函数集合的梯度，这将是原标量函数的二阶导数。      
* 还值得注意的是，由于链式规则是无差别应用的，我们只看到计算的起点和终点`{x,y}`[2.x.109] `f(x,y)`，我们永远只能查询到`f`的总导数；部分导数（上例中的`a.导数[0]`和`a.导数[1]`）是中间值，对我们是隐藏的。
* 

* 
* 好的，既然我们现在至少对`f_ad`代表什么以及其中的编码有了一定的了解，那么让我们把所有的东西用于实际的用途。为了获得那些隐藏的派生结果，我们将最终的结果注册到辅助类中。在这之后，我们不能再改变`f_ad`的值，也不能让这些变化反映在帮助者类返回的结果中。
* 

* 
* [1.x.117]
* 
* 下一步是提取导数（特别是函数梯度和Hessian）。为此，我们首先创建一些临时的数据结构（结果类型为`double'）来存储导数（注意所有的导数都是一次性返回，而不是单独返回）...
* 

* 
* [1.x.118]
* 
* ... 然后我们要求辅助类计算这些导数，以及函数值本身。就这样了。我们得到了我们想得到的一切。
* 

* 
* [1.x.119]
 
* 我们可以通过与分析方案的比较来说服自己，AD框架是正确的。(或者，如果你像作者一样，你会反其道而行之，宁愿验证你对分析解的实现是正确的！)
* 

* 
* [1.x.120]
* 
* 因为我们知道自变量的排序，我们知道梯度的哪个分量与哪个导数有关......
* 

* 
* [1.x.121]
* 
* ......对于Hessian也是如此。
* 

* 
* [1.x.122]
* 
* 这真是太好了。在计算这个三角函数的二阶导数时并没有太多的工作。
* 

* 
* [1.x.123] [1.x.124].
* 

* 
* 因为我们现在知道了让AD框架为我们计算这些导数需要多少 "执行努力"，让我们把它与手工计算的、在几个独立函数中实现的导数进行比较。
* 

* 
* 这里是[2.x.110]的两个一阶导数。    
* [2.x.111] 
* 

* 
* [1.x.125]
* 
* [2.x.112] 
 

 
* [1.x.126]
* 
* 而这里是[2.x.113]的四个二阶导数。    
* [2.x.114] 
 

 
* [1.x.127]
* 
* [2.x.115] 
 

 
* [1.x.128]
* 
* [2.x.116]（如预期，基于[施瓦茨定理]（https://en.wikipedia.org/wiki/Symmetry_of_second_derivatives））
* 

 
* [1.x.129]
* 
* [2.x.117] 
 

 
* [1.x.130]
* 
* 嗯......上面有很多地方我们可能引入了错误，特别是在应用连锁规则的时候。虽然它们不是银弹，但至少这些AD框架可以作为一个验证工具，确保我们没有犯任何错误（无论是计算还是实施），从而对我们的结果产生负面影响。
* 

* 
* 这个例子的重点当然是，我们可能选择了一个相对简单的函数[2.x.118]，我们可以手工验证AD框架计算的导数是否正确。但是AD框架并不关心这个函数是否简单。它可能是一个复杂得多的表达式，或者取决于两个以上的变量，它仍然能够计算出导数。
* 
* 唯一的区别是，我们*不会再想出导数来验证AD框架的正确性。
* 

* 
*  
  
 

* 
* [1.x.131] [1.x.132]。
 

* 
* 我们现在用符号微分法重复同样的练习。术语 "符号微分 "有点误导，因为微分只是计算机代数系统（CAS）（即符号框架）提供的一个工具。然而，在有限元建模和应用的背景下，它是CAS最常见的用途，因此将是我们关注的重点。再次，我们将提供参数值`x`和`y`，用来评估我们的函数[2.x.119]及其导数，以及测试返回结果正确性的公差。
* 

* 
* [1.x.133]
 
* 我们需要做的第一步是形成符号变量，代表我们希望对其进行微分的函数参数。同样，这些将是我们问题的独立变量，因此在某种意义上是原始变量，对任何其他变量没有依赖性。我们通过初始化一个符号类型[2.x.120]来创建这些类型的（独立）变量，这个符号类型是对符号框架所使用的一组类的包装，有一个唯一的标识。在这种情况下，这个标识符，一个[2.x.121]对于[2.x.122]的参数来说就是`"x"`，同样，对于[2.x.123]的依赖函数的参数来说就是`"y"。像以前一样，我们将用`sd`作为符号变量名称的后缀，这样我们就可以清楚地看到哪些变量是符号性的（而不是数字性的）。
* 

* 
* [1.x.134]
* 
* 使用计算[2.x.124]的模板函数，我们可以将这些独立变量作为参数传递给函数。返回的结果将是另一个符号类型，代表用于计算 [2.x.125] 的操作序列。
* 

* 
* [1.x.135]
* 
* 在这一点上，打印出表达式`f_sd`是合法的，如果我们这样做的话 [2.x.126] 我们会看到`f(x,y) = cos(y/x)`打印到控制台。      
* 你可能会注意到，我们在构建符号函数`f_sd`时没有说明我们可能要如何使用它。与上面的AD方法相比，我们调用`f(x_sd, y_sd)`返回的不是函数`f`在某个特定点上的求值，而实际上是一个通用的、尚未确定的点上的求值的符号表示。这是使符号框架（CAS）不同于自动区分框架的关键点之一。每个变量`x_sd`和`y_sd`，甚至复合依赖函数`f_sd`，在某种意义上分别是数值的 "占位符 "和运算的组成。事实上，用于组成函数的各个组件也是占位符。操作的序列被编码到一个树状的数据结构中（概念上类似于[抽象语法树](https://en.wikipedia.org/wiki/Abstract_syntax_tree)）。      
* 一旦我们形成这些数据结构，我们就可以把我们可能想对它们进行的任何操作推迟到以后的某个时间。这些占位符中的每一个都代表了一些东西，但我们有机会在任何方便的时间点上定义或重新定义它们所代表的东西。因此，对于这个特定的问题，我们想把 "x "和 "y "与一些*数值（类型尚未确定）联系起来是有道理的，但我们可以在概念上（如果有道理的话）给 "y/x "这个比率赋值，而不是单独给 "x "和 "y "这些变量赋值。我们还可以将 "x "或 "y "与其他一些符号函数`g(a,b)`联系起来。这些操作中的任何一个都涉及到对所记录的操作树的操作，以及用其他东西替换树上的突出节点（以及该节点的子树）。这里的关键词是 "替换"，事实上，在[2.x.127]命名空间中有许多函数的名称中都有这个词。      
* 这种能力使该框架完全通用。在有限元模拟的背景下，我们通常会对我们的符号类型进行的操作类型是函数组合、微分、替换（部分或完全）和评估（即符号类型转换为其数字对应物）。但如果你需要，一个CAS的能力往往不止这些。它可以形成函数的反导数（积分），对形成函数的表达式进行简化（例如，用[2.x.129]替换[2.x.128]；或者，更简单：如果函数做了像`1+2`这样的运算，CAS可以用`3`替换它），等等。变量所代表的表达式*是从函数[2.x.130]的实现方式中得到的，但CAS可以对它做任何功能。      
* 具体来说，为了计算因果函数相对于各个自变量的一阶导数的符号表示，我们使用[2.x.131]函数，自变量作为其参数。每次调用都会导致CAS通过组成`f_sd'的运算树，并对表达式树的每个节点进行相对于给定符号参数的微分。
* 

* 
* [1.x.137]
* 
* 为了计算二阶导数的符号表示，我们只需对自变量的一阶导数进行微分。所以要计算高阶导数，我们首先需要计算低阶导数。由于调用 "differentiate() "的返回类型是一个表达式，我们原则上可以通过将两个调用连在一起，直接从标量上执行双倍微分。但是在这种特殊情况下，这是不需要的，因为我们手头有中间结果）。)
* 

* 
* [1.x.138]
* 
* 使用语句[2.x.132]打印由CAS计算的第一和第二导数的表达式，得到以下输出。 [2.x.133] 这与前面介绍的这些导数的分析表达式相比，效果更好。
* 

* 
* 现在我们已经形成了函数及其导数的符号表达式，我们想对函数的主要参数`x`和`y`的数值进行评估。为了达到这个目的，我们构造了一个替代图*，它将符号值映射到它们的数字对应物上。
* 

* 
* [1.x.141]
 
* 这个过程的最后一步是将所有的符号变量和操作转换成数值，并产生这个操作的数值结果。为了做到这一点，我们在上面已经提到的步骤中，将替换图与符号变量结合起来。"替换"。      
* 一旦我们把这个替换图传递给CAS，它就会把符号变量的每个实例（或者更一般的，子表达式）替换成它的数字对应物，然后把这些结果在操作树上传播，如果可能的话，简化树上的每个节点。如果运算树被简化为一个单一的值（也就是说，我们已经将所有的独立变量替换为它们的数字对应物），那么评估就完成了。      
* 由于C++的强类型特性，我们需要指示CAS将其对结果的表示转换为内在的数据类型（在这里是 "double"）。这就是 "评估 "步骤，通过模板类型我们定义了这个过程的返回类型。方便的是，如果我们确定我们已经进行了完整的替换，这两个步骤可以一次完成。
* 

* 
* [1.x.142]
 
* 我们可以对一阶导数做同样的处理......
* 

* 
* [1.x.143]
* 
* ...和二阶导数。请注意，我们可以在这些操作中重复使用相同的替换图，因为我们希望对`x`和`y`的相同值评估所有这些函数。修改置换图中的值，就可以得到相同的符号表达式的评估结果，同时给自变量分配不同的值。我们也可以很高兴地让每个变量在一次中代表一个实值，在下一次中代表一个复值。
* 

* 
* [1.x.144]
* 
* [1.x.145] [1.x.146].
 

* 
* 用来驱动这些初始例子的函数是直接的。我们将任意选择一些值来评估该函数（尽管知道`x = 0`是不允许的），然后将这些值传递给使用AD和SD框架的函数。
* 

* 
* [1.x.147]
* 
* [1.x.148] [1.x.149].
 

* 
* 现在我们已经介绍了自动和符号微分背后的原理，我们将通过制定两个耦合的磁力学构成法将其付诸实施：一个是与速率无关的，另一个是表现出与速率有关的行为。  
* 正如你在介绍中记得的那样，我们将考虑的材料构成法比上面的简单例子要复杂得多。这不仅仅是因为我们将考虑的函数[2.x.134]的形式，而且特别是因为[2.x.135]不仅仅取决于两个标量变量，而是取决于一大堆标量*，每个标量都有几个组成部分。在某些情况下，这些是对称*张量，对于这些张量来说，只有一个分量子集实际上是独立的，我们必须考虑计算[2.x.136]这样的导数的实际意义，其中[2.x.137]是一个对称张量。希望这一切将在下面变得清晰。我们也将清楚地看到，用手做这些事情，最好的情况是极其*繁琐*，最差的情况是
乏味*，最糟糕的是，充满了难以发现的错误。
* 

* 
* [1.x.150]
 
* [1.x.151] [1.x.152].
 

* 
* 我们首先描述了出现在能量函数描述中的各种材料参数 [2.x.138] 。    
* ConstitutiveParameters类被用来保存这些数值。所有参数的值（包括构成参数和流变参数）都取自[2.x.139]，并给出了产生构成响应的值，该响应大致代表了真实的、实验室制造的磁活性聚合物，当然，这里使用的具体数值对本程序的目的没有影响。    
* 前四个构成参数分别代表
* 

* 
* 
* - 弹性剪切模量[2.x.140] 。
* 

* 
 
* - 磁饱和时的弹性剪切模量 [2.x.141] 。
 

* 
* 
* - 弹性剪切模量的饱和磁场强度 [2.x.142] ，以及
* 

* 
* 
* - 泊松比 [2.x.143] 。
* 

* 
* [1.x.153]
* 
* 接下来的四个，只与速率相关的材料有关，是以下参数
* 

* 
* 
* - 粘弹性剪切模量 [2.x.144] 。
* 

* 
* 
* - 磁饱和时的粘弹性剪切模量 [2.x.145] 。
 

* 
* 
* - 粘弹性剪切模量的饱和磁场强度 [2.x.146] ，以及
* 

* 
* 
* - 特征松弛时间 [2.x.147] 。
* 

* 
* [1.x.154]
* 
* 最后一个参数是相对磁导率 [2.x.148] 。
* 

* 
* [1.x.155]
* 
* 参数是通过ParameterAcceptor框架初始化的，这在 [2.x.149] 中有详细讨论。
* 

* 
* [1.x.156]
 
* [1.x.157] [1.x.158] .
 

* 
* 因为我们将为同一类材料制定两种构成法，所以定义一个基类以确保它们有统一的接口是有意义的。    
* 该类的声明从构造函数开始，它将接受一组构成参数，这些参数与材料定律本身一起决定了材料的响应。
* 

* 
* [1.x.159]
 
* 我们将在一个方法中计算和存储这些值，而不是随意计算和返回动力学变量或其线性化。然后这些缓存的结果将在请求时返回。我们将把为什么要这样做的精确解释推迟到以后的阶段。现在重要的是看到这个函数接受所有的场变量，即磁场矢量[2.x.150]和右Cauchy-Green形变张量[2.x.151]，以及时间离散器。除了[2.x.152]之外，这些都是计算材料响应所需的所有基本量。
* 

* 
* [1.x.160]
* 
* 接下来的几个函数提供了探测材料响应的接口，由于受到施加的变形和磁载荷的影响。      
* 由于材料的类别可以用自由能来表示 [2.x.153] ，我们可以计算出...
* 

* 
* [1.x.161]
* 
* ... 以及两个动力学量。
 

* 
* 
* - 磁感应矢量 [2.x.154] ，和
* 

* 
 
* - 总的皮奥拉-基尔霍夫应力张量 [2.x.155] 。
* 

* 
* [1.x.162]
 
* ......以及动力学量的线性化，它们是：***。
* 

* 
* 
* - 磁静力切张量[2.x.156] 。
 

 
* 
* - 总的参考性磁弹性耦合张量 [2.x.157] , 和
 

 
* 
* - 总的参考弹性正切张量 [2.x.158] 。
 

* 
* [1.x.163]
* 
* 我们还将定义一个方法，为这个类实例提供一个机制，在进入下一个时间步长之前做任何额外的任务。同样，这样做的原因将在稍后变得清晰。
* 

* 
* [1.x.164]
* 
* 在该类的 "保护 "部分，我们存储了一个对支配材料响应的构成参数实例的引用。为了方便起见，我们还定义了一些函数来返回各种构成参数（包括明确定义的，以及计算的）。      
* 与材料的弹性响应有关的参数依次是
* 

* 
* 
* - 弹性剪切模量。
* 

* 
* 
* - 饱和磁场下的弹性剪切模量。
* 

* 
* 
* - 弹性剪切模量的饱和磁场强度。
* 

* 
* 
* - 泊松比。
* 

* 
* 
* - 拉姆&eacute;参数，以及
* 

 
* 
* - 体积模量。
* 

* 
* [1.x.165]
 
* 与材料的弹性反应有关的参数依次是
* 

* 
* 
* - 粘弹性剪切模量。
* 

* 
* 
* - 磁饱和时的粘弹性剪切模量。
* 

* 
* 
* - 粘弹性剪切模量的饱和磁场强度，以及
* 

* 
* 
* - 特征松弛时间。
 

* 
* [1.x.166]
 
* 与材料的磁响应有关的参数依次是
* 

 
* 
* - 相对磁导率，和
* 

* 
* 
* - 磁导率常数[2.x.159]（并不是一个真正的材料常数，而是一个普遍的常数，为了简单起见，我们在这里分组）。      
* 我们还将实现一个函数，从时间离散度中返回时间步长。
* 

* 
* [1.x.167]
 
* 在下文中，让我们从实现刚才定义的类的几个相对琐碎的成员函数开始。
 

 
* [1.x.168]
* 
* [1.x.169] [1.x.170].
 

* 
* 我们将首先考虑一种非耗散性材料，即受磁超弹性构成法则支配的材料，当浸入磁场时表现出刚性。正如介绍中所述，这种材料的储能密度函数可能由[1.x.171]与[1.x.172]给出。    
* 现在来谈谈实现这种行为的类。由于我们期望这个类能完全描述一种材料，我们将把它标记为 "最终"，这样继承树就在这里终止了。在类的顶部，我们定义了辅助类型，我们将在标量能量密度函数的AD计算中使用它。请注意，我们希望它能返回 "double "类型的值。我们还必须指定空间维度的数量，`dim'，以便建立矢量、张量和对称张量场与它们所含分量数量之间的联系。用于ADHelper类的具体的`ADTypeCode`将在实际使用该类的时候作为模板参数提供。
* 

* 
* [1.x.173]
* 
* 由于基类的公共接口是纯`虚拟`的，在这里我们将声明这个类将覆盖所有这些基类方法。
* 

* 
* [1.x.174]
* 
* 在这个类的`private`部分，我们需要定义一些提取器，这些提取器将帮助我们设置自变量，并在之后得到与因变量相关的计算值。如果这个类是在有限元问题的背景下使用，那么这些提取器中的每一个都（很可能）与解场的一个分量的梯度有关（在这种情况下，位移和磁标势）。正如你现在可能推断的那样，这里 "C "表示右Cauchy-Green张量，"H "表示磁场向量。
* 

* 
* [1.x.175]
 
* 这是一个自动微分助手的实例，我们将设置它来进行与构成法有关的所有微分计算......
* 

* 
* [1.x.176]
* 
* ... 以下三个成员变量将存储来自[2.x.160]的输出。 [2.x.161]一次性返回关于所有场变量的导数，因此我们将保留完整的梯度向量和Hessian矩阵。我们将从中提取我们真正感兴趣的个别条目。
* 

* 
* [1.x.177]
* 
* 在设置字段组件提取器时，对于它们的排序方式是完全任意的。但重要的是，这些提取器没有重叠的索引。这些提取器的组件总数定义了[2.x.162]需要跟踪的独立变量的数量，并且我们将对其进行导数。由此产生的数据结构[2.x.163]和[2.x.164]也必须有相应大小。一旦[2.x.165]被配置好（它的输入参数是[2.x.166]和[2.x.167]的组件总数），我们就可以直接询问它使用多少个独立变量。
* 

* 
* [1.x.178]
* 
* 如前所述，由于自动微分库的工作方式，[2.x.168]将总是同时返回能量密度函数相对于所有场变量的导数。由于这个原因，在函数`get_B()`、`get_S()`等中计算导数是没有意义的，因为我们会做很多额外的计算，然后直接丢弃。因此，处理这个问题的最好方法是用一个单一的函数调用来完成所有的前期计算，然后我们在需要时提取存储的数据。这就是我们在 "update_internal_data() "方法中要做的。由于材料是与速度无关的，我们可以忽略DiscreteTime参数。
* 

* 
* [1.x.179]
* 
* 由于我们在每个时间步骤中都会重复使用[2.x.169]数据结构，所以我们需要在使用前清除它的所有陈旧信息。
* 

* 
* [1.x.180]
* 
* 下一步是设置所有字段组件的值。这些定义了 "点"，我们将围绕这个点计算函数梯度和它们的线性化。我们之前创建的提取器在[2.x.170]中提供了字段和注册表之间的关联。
* 
* - 它们将被反复使用，以确保我们对哪个变量对应于`H'或`C'的哪个分量有正确的解释。
* 

* 
* [1.x.181]
* 
* 现在我们已经完成了初始设置，我们可以检索我们字段的AD对应关系。这些是真正的能量函数的独立变量，并且对用它们进行的计算是 "敏感的"。请注意，AD数被视为一种特殊的数字类型，可以在许多模板化的类中使用（在这个例子中，作为Tensor和SymmetricTensor类的标量类型）。
* 

* 
* [1.x.182]
 
* 我们也可以在许多以标量类型为模板的函数中使用它们。因此，对于我们需要的这些中间值，我们可以进行张量运算和一些数学函数。由此产生的类型也将是一个自动可分的数字，它编码了这些函数中执行的操作。
* 

* 
* [1.x.183]
* 
* 接下来我们将计算在磁场影响下导致剪切模量变化（增加）的比例函数......
* 

* 
* [1.x.184]
* 
* ... 然后我们就可以定义材料的储能密度函数。我们将在后面看到，这个例子足够复杂，足以保证使用AD来，至少验证一个无协助的实现。
* 

* 
* [1.x.185]
* 
* 事实上，储存的能量密度函数是这个问题的因变量，所以作为 "配置 "阶段的最后一步，我们用[2.x.171]注册其定义。
* 

* 
* [1.x.186]
* 
* 最后，我们可以检索存储的能量密度函数的结果值，以及它相对于输入场的梯度和Hessian，并将它们缓存起来。
* 

* 
* [1.x.187]
 
* 下面的几个函数允许查询[2.x.172]的存储值，并提取梯度向量和Hessian矩阵的所需成分。我们再次利用提取器来表达我们希望检索的总梯度向量和Hessian矩阵的哪些部分。它们只返回能量函数的导数，所以对于我们的动能变量的定义和它们的线性化，还需要进行一些操作来形成所需的结果。
* 

* 
* [1.x.188]
* 
* 请注意，对于耦合项来说，提取器参数的顺序尤其重要，因为它决定了定向导数的取值顺序。因此，如果我们在调用`extract_hessian_component()`时颠倒了提取器的顺序，那么我们实际上是在检索[2.x.173]的一部分。
* 

* 
* [1.x.189]
* 
* [1.x.190] [1.x.191].
 

* 
* 我们要考虑的第二个材料法则将是一个代表具有单一耗散机制的磁涡弹材料。我们将考虑这样一种材料的自由能密度函数，定义为

* 
* [1.x.192]
* 与[1.x.193][1.x.194]结合，内部粘性变量[1.x.195]的演化规律是用一阶后向差分近似法离散的。    
*再一次，让我们看看这在一个具体的类中是如何实现的。我们现在将利用SD方法，而不是前一个类中使用的AD框架。为了支持这一点，类的构造函数不仅接受[2.x.174]，而且还接受两个额外的变量，这些变量将用于初始化一个[2.x.175]我们将在后面给出更多的背景。
* 

* 
* [1.x.196]
* 
* 和自动微分助手一样，[2.x.176]将一次性返回一个结果的集合。因此，为了只做一次，我们将利用与之前类似的方法，在`update_internal_data()`函数中做所有昂贵的计算，并将结果缓存起来供层提取。
* 

* 
* [1.x.197]
* 
* 因为我们要处理的是与速率有关的材料，所以我们必须在适当的时候更新历史变量。这将是这个函数的目的。
* 

* 
* [1.x.198]
* 
* 在该类的 "私有 "部分，我们将希望跟踪内部的粘性变形，因此以下两个（实值的、非符号的）成员变量分别持有
* 

* 
* 
* - 内部变量时间步长（如果嵌入非线性求解器框架，则为牛顿步长）的值，以及
* 

* 
* 
* - 内部变量在前一个时间步长的值。      
* (我们将这些变量标记为 "Q"，以便于识别；在计算的海洋中，不一定容易区分`Cv`或`C_v`与`C`。)
* 

* 
* [1.x.199]
* 
* 因为我们将使用符号类型，所以我们需要定义一些符号变量来与框架一起使用。(它们都以 "SD "为后缀，以方便区分符号类型或表达式与实值类型或标量。) 这可以在前面做一次（甚至有可能作为 "静态 "变量），以尽量减少与创建这些变量相关的开销。为了实现通用编程的终极目标，我们甚至可以用符号来描述构成参数，有可能*允许一个类的实例在不同的输入下重复使用这些值。      
* 这些是代表弹性、粘性和磁性材料参数的符号标量（主要按照它们在[2.x.177]类中出现的相同顺序定义）。我们还存储了一个符号表达式，[2.x.178]，表示时间步长的大小）。)
* 

* 
* [1.x.200]
* 
* 接下来我们定义一些代表独立场变量的张量符号变量，在此基础上对能量密度函数进行参数化。
* 

* 
* [1.x.201]
* 
* 同样，我们也有内部粘性变量的符号表示（包括它的当前值和它在前一个时间段的值）。
* 

* 
* [1.x.202]
 
* 我们还应该存储从属表达式的定义。虽然我们只计算一次，但我们需要它们从下面声明的[2.x.179]中检索数据。此外，当序列化一个像这样的材料类时（不是作为本教程的一部分），我们要么需要把这些表达式也序列化，要么需要在重新加载时重建它们。
* 

* 
* [1.x.203]
* 
* 接下来的变量是用于评估从属函数的优化器。更具体地说，它提供了加速评估符号从属表达式的可能性。这是一个重要的工具，因为对冗长表达式的本地评估（不使用加速方法，而是直接对符号表达式进行评估）会非常慢。[2.x.180]类提供了一种机制，可以将符号表达式树转化为另一种代码路径，例如，在各种从属表达式之间共享中间结果（意味着这些中间值每次评估只计算一次）和/或使用即时编译器编译代码（从而检索评估步骤的接近原生性能）。      
* 执行这种代码转换在计算上是非常昂贵的，所以我们存储了优化器，使其在每个类实例中只做一次。这也进一步促使我们决定将构成参数本身变成符号化。然后，我们可以在几种材料（当然是相同的能量函数）和潜在的多个连续体点（如果嵌入有限元模拟）中重复使用这个[2.x.181]的单个实例。      
* 正如模板参数所指定的，数值结果将是<tt>double</tt>类型。
* 

* 
* [1.x.204]
* 
* 在评估阶段，我们必须将符号变量映射到它们的实值对应物。下一个方法将提供这个功能。      
* 本类的最后一个方法将配置[2.x.182]。
* 

* 
* [1.x.205]
 
* 由于静止变形状态是材料被认为是完全松弛的状态，内部粘性变量被初始化为同一张量，即 [2.x.183] 。代表构成参数、时间步长、场和内部变量的各种符号变量都有一个唯一的标识符。优化器被传递给两个参数，这两个参数声明了应该应用哪种优化（加速）技术，以及CAS应该采取哪些额外步骤来帮助提高评估期间的性能。
* 

* 
* [1.x.206]
* 
* 替换图只是将以下所有的数据配对在一起。
* 

* 
* 
* - 构成参数（从基类中获取的值）。
* 

* 
* 
* - 时间步长（从时间离散器中获取其值）。
* 

* 
* 
* - 字段值（其值由调用此[2.x.184]实例的外部函数规定），和
* 

* 
* 
* - 当前和之前的内部粘性变形（其值存储在这个类实例中）。
* 

* 
* [1.x.207]
* 
* 由于符号表达式的 "自然 "使用，配置[2.x.185]的大部分程序看起来与用于构建自动微分助手的程序非常相似。尽管如此，我们还是要再次详细说明这些步骤，以强调这两个框架的差异。    
* 该函数从符号编码变形梯度行列式的表达式开始（用右Cauchy-Green变形张量表示，即我们的主要场变量），以及[2.x.186]本身的逆。
* 

* 
* [1.x.208]
* 
* 接下来是自由能密度函数的弹性部分的饱和函数的符号表示，然后是自由能密度函数的磁弹性贡献。这一切与我们之前看到的结构相同。
* 

* 
* [1.x.209]
 
* 此外，我们定义了磁-粘弹性对自由能密度函数的贡献。实现这一点所需的第一个成分是一个比例函数，它将使粘性剪切模量在磁场的影响下发生变化（增加）（见[2.x.187] ，公式29）。此后，我们可以计算能量密度函数的耗散分量；其表达式见[2.x.188]（方程28），这是对[2.x.189]中制定的能量密度函数（方程46）的直接扩展。
* 

* 
* [1.x.210]
 
* 从这些构件中，我们可以定义材料的总自由能密度函数。
* 

* 
* [1.x.211]
 
* 目前，对中科院来说，变量[2.x.190]似乎是独立于[2.x.191]的。我们的张量符号表达式[2.x.192]只是有一个与之相关的标识符，没有任何东西将其与另一个张量符号表达式[2.x.193]联系起来。因此，相对于[2.x.194]采取的任何导数将忽略这种固有的依赖关系，正如我们从进化规律可以看出，实际上是[2.x.195] 。这意味着，相对于[2.x.197]推导任何函数[2.x.196]将返回部分导数[2.x.198]，而不是总导数[2.x.199] 。      
* 相比之下，在当前的AD库中，总导数总是被返回。这意味着对于这类材料模型来说，计算出的动力学变量是不正确的，这使得AD成为不正确的工具，从能量密度函数中推导出（连续点水平）这种耗散性材料的构成法。      
* 正是这种特定的控制水平描述了SD和AD框架之间的一个决定性的区别。在几行中，我们将操纵内部变量[2.x.200]的表达式，使其产生正确的线性化。
* 

* 
* 但是，首先，我们将计算动能变量的符号表达式，即磁感应向量和Piola-Kirchhoff应力张量。执行微分的代码相当紧密地模仿了理论中的定义。
* 

* 
* [1.x.212]
 
* 因为下一步是对上述内容进行线性化，所以现在是告知CAS[2.x.201]对[2.x.202]的明确依赖性的适当时机，即说明[2.x.203] 。这意味着未来所有关于[2.x.204]的微分运算将考虑到这种依赖关系（即计算总导数）。换句话说，我们将转换一些表达式，使它们的内在参数化从[2.x.205]变为[2.x.206] 。      
* 为了做到这一点，我们考虑时间离散的演化规律。由此，我们有了内部变量在其历史方面的明确表达，以及主要的场变量。这就是它在这个表达式中描述的内容。
* 

* 
* [1.x.213]
* 
* 接下来我们产生一个中间替换图，它将把在表达式中发现的[2.x.207]（我们的标识符）的每一个实例，用[2.x.208]中持有的完整表达式来替换它 
* 

* 
* [1.x.214]
* 
* 我们可以对两个动力学变量进行这种替换，并立即将替换后的结果与场变量进行区分。如果你愿意，这可以分成两步进行，中间的结果储存在一个临时变量中）。同样，如果你忽略了替换所产生的 "复杂性"，这些使动能变量线性化并产生三个切向张量的调用与理论中所述的非常相似。
* 

* 
* [1.x.215]
 
* 现在我们需要告诉[2.x.209]我们需要为哪些条目提供数值，以便它能成功地进行计算。这些基本上是作为[2.x.210]必须评估的所有从属函数的输入参数。它们统称为问题的自变量、历史变量、时间步长和构成参数（因为我们没有将它们硬编码在能量密度函数中）。      
* 所以我们真正想要的是为它提供一个符号集合，可以用这种方式完成。 [2.x.211] 但这些实际上都已经被编码为替换图的键。这样做还意味着我们需要在两个地方（这里和构建替换图时）管理这些符号，这很烦人，而且如果这个材料类被修改或扩展，可能会出现错误。由于我们此时对数值不感兴趣，所以如果替换图中与每个键项相关的数值被填入无效的数据也没有关系。所以我们将简单地创建一个假的替换图，并从中提取符号。请注意，任何传递给[2.x.212]的替换图都必须至少包含这些符号的条目。
* 

* 
* [1.x.217]
* 
* 然后我们通知优化器我们想要计算什么值，在我们的情况下，这包括所有的因变量（即能量密度函数及其各种导数）。
* 

* 
* [1.x.218]
 
* 最后一步是最终确定优化器。通过这个调用，它将确定一个等价的代码路径，该路径将一次评估所有的依赖函数，但计算成本比直接评估符号表达式时要低。注意：这是一个昂贵的调用，所以我们希望尽可能少地执行它。我们在我们的类的构造函数中完成了这个任务，实现了每个类实例只被调用一次的目标。
* 

* 
* [1.x.219]
* 
* 由于[2.x.213]的配置是在前面完成的，所以每次我们想计算动能变量或它们的线性化（导数）时，要做的事情非常少。
* 

* 
* [1.x.220]
 
* 要更新内部历史变量，我们首先需要计算一些基本量，这些我们之前已经看到了。我们还可以向时间离散器询问用于从上一个时间步长迭代到当前时间步长的时间步长。
* 

* 
* [1.x.221]
* 
* 现在我们可以按照演化规律给出的定义，结合所选择的时间离散化方案，更新（实值）内部粘性变形张量。
* 

* 
* [1.x.222]
 
* 接下来，我们向优化器传递我们希望自变量、时间步长和（本调用隐含的）构成参数所代表的数字值。
* 

* 
* [1.x.223]
* 
* 在进行下一次调用时，用于（数值）评估从属函数的调用路径要比字典替换更快。
* 

* 
* [1.x.224]
* 
* 在调用了`update_internal_data()`之后，从优化器中提取数据就有效了。在进行评估时，我们需要从优化器中提取的数据的确切符号表达式。这意味着我们需要在优化器的生命周期内存储所有因变量的符号表达式（自然，输入变量也是如此）。
* 

* 
* [1.x.225]
* 
* 在时间上向前移动时，内部变量的 "当前 "状态瞬间定义了 "前一个 "时间段的状态。因此，我们记录历史变量的值，作为下一个时间步骤的 "过去值 "使用。
* 

* 
* [1.x.226]
* 
* [1.x.227] [1.x.228]
 

* 
* 现在我们已经看到了AD和SD框架是如何在定义这些构成法则方面做得很轻松的，我们将用手来实现相应的类，以便进行验证，并对框架与本地实现做一些初步的基准测试。    
* 以作者的理智为代价，下面记录的（希望是准确的）是动能变量及其切线的完整定义，以及一些中间计算。由于构成法则类的结构和设计已经在前面概述过了，我们将略过它，并简单地在`update_internal_data()`方法定义中划分出各个阶段的计算。将导数计算（及其适度表达的变量名）与出现在类描述中的文档定义联系起来应该是很容易的。然而，我们将借此机会介绍两种实现构成法类的不同范式。第二种将比第一种提供更多的灵活性（从而使其更容易扩展，在作者看来），但要牺牲一些性能。
* 

* 
* [1.x.229] [1.x.230].
* 

* 
* 如前所述，从储存的能量来看，对于这种磁弹性材料，定义为[1.x.231]与[1.x.232]，对应于磁感应矢量和总Piola-Kirchhoff应力张量的第一导数是[1.x.233]

 
* [1.x.234]
*与[1.x.235] [1.x.236] [1.x.237] [1.x.238] [1.x.239] 在上面的一个推导中使用对称算子[2.x.214]有助于确保所产生的等级4张量，由于[2.x.215]的对称性而持有小的对称性，仍然将等级2对称张量映射到等级2对称张量。参见SymmetricTensor类文档和[2.x.216]的介绍，并进一步解释对称性在四阶张量背景下的含义。    
*每个运动学变量相对于其参数的线性化是[1.x.240]。

 
* [1.x.241]
* 

 
* [1.x.242]
* 与 [1.x.243] [1.x.244] [1.x.245]。

 
* [1.x.246]
      
* 好吧，这很快就升级了
* 
* - 尽管[2.x.217]和[2.x.218]的定义可能已经给出了一些提示，表明计算动能场和它们的线性化将需要一些努力，但最终的定义可能比最初想象的要复杂一些。了解了我们现在所做的，也许可以说，我们真的不想计算这些函数相对于其参数的一、二次导数
* 
* - 不管我们在微积分课上做得多好，也不管我们是一个多么好的程序员。    
* 在最终实现这些的类方法定义中，我们以稍微不同的方式组成这些计算。一些中间步骤也被保留下来，以便从另一个角度说明如何系统地计算导数。此外，一些计算被分解得更少或更进一步，以重用一些中间值，并希望能帮助读者跟随导数的操作。
* 

* 
* [1.x.247]
* 
* 对于这个类的更新方法，我们将简单地预先计算一个中间值的集合（用于函数求值、导数计算等），并 "手动 "安排它们的顺序，以最大限度地重用它们。这意味着我们必须自己管理，并决定哪些值必须在其他值之前计算，同时保持代码本身的某种秩序或结构的模样。这很有效，但也许有点乏味。它对类的未来扩展也没有太大的帮助，因为所有这些值都是这个单一方法的局部。    
* 有趣的是，这种预先计算在多个地方使用的中间表达式的基本技术有一个名字：[共同子表达式消除（CSE）]（https://en.wikipedia.org/wiki/Common_subexpression_elimination）。它是计算机代数系统使用的一种策略，当它们被赋予评估类似表达式的任务时，可以减少计算费用。
* 

* 
* [1.x.248]
* 
* 磁弹性能的饱和函数。
* 

* 
* [1.x.249]
* 
* 饱和函数的一阶导数，注意[2.x.219] 。
* 

* 
* [1.x.250]
* 
* 饱和函数的二阶导数，注意到[2.x.220] 。
* 

* 
* [1.x.251]
* 
* 一些直接从场/运动学变量中获得的中间量。
* 

* 
* [1.x.252]
* 
* 中间量的一阶导数。
* 

* 
* [1.x.253]
* 
* 中间量的二阶导数。
* 

* 
* [1.x.254]
* 
* 储存的能量密度函数。
* 

* 
* [1.x.255]
* 
* 动能量。
* 

* 
* [1.x.256]
* 
* 动能量的线性化。
* 

* 
* [1.x.257]
* 
* [1.x.258] [1.x.259]。
 

* 
* 如前所述，我们将考虑的具有一个耗散机制的磁涡流材料的自由能密度函数被定义为 [1.x.260] [1.x.261] [1.x.262]，其中有 [1.x.263] [1.x.264] 和演变规律 [1.x.265] ，其本身是以 [2.x.221] 为参数的。根据设计，能量[2.x.222]的磁弹性部分与前面介绍的磁弹性材料的磁弹性部分是相同的。因此，对于源于这部分能量的各种贡献的导数，请参考前面的章节。我们将继续强调来自这些条款的具体贡献，用[2.x.223]对突出的条款进行上标，而来自磁弹性部分的贡献则用[2.x.224]进行上标。此外，阻尼项的磁饱和函数[2.x.225]与弹性项的形式相同（即[2.x.226]），因此其导数的结构与之前看到的相同；唯一的变化是三个构成参数，现在与粘性剪切模量[2.x.227]而非弹性剪切模量[2.x.228]相关。    
* 对于这种磁-粘弹性材料，对应于磁感应矢量和总Piola-Kirchhoff应力张量的第一导数是[1.x.266] [1.x.267]，粘性贡献是[1.x.268] [1.x.269]，并且有[1.x.270] 时间分解的进化规律，[1.x.271]也将决定内部变量相对于场变量的线性化是如何组成。    
* 请注意，为了获得这种耗散材料的磁感应矢量和总Piola-Kirchhoff应力张量的正确*表达式，我们必须严格遵守应用Coleman-Noll程序的结果：我们必须对自由能密度函数取部分导数*。
 的自由能密度函数与场变量的关系。对于我们的非耗散性磁弹性材料，取部分导数或总导数都会有同样的结果，所以之前没有必要提请你注意这一点）。该操作的关键部分是冻结内部变量[2.x.229]，同时计算[2.x.230]相对于[2.x.231]的导数。
* 
* - 不考虑[2.x.232]对[2.x.233]的依赖性。当决定使用AD或SD来执行这项任务时，选择是明确的
* 
* - 只有符号框架提供了一个机制来做到这一点；如前所述，AD只能返回总导数，所以它不适合这个任务。    
* 总结一下，我们将介绍这种速度依赖的耦合材料的材料切线。两个动力学变量相对于其参数的线性化是[1.x.272] [1.x.273] [1.x.274]，其中粘性贡献的切线是[1.x.275] [1.x.276] 。

* 
* [1.x.277]
*与[1.x.278]，以及从演化定律来看，[1.x.279]注意，只是[2.x.234]的最后一项包含内部变量的切线。这个特殊演化规律的线性化是线性的。关于非线性演化定律的例子，这种线性化必须以迭代的方式求解，见[2.x.235] -Theiss2011a。
* 

* 
* [1.x.280]
 
* 一个用于存储所有中间计算的数据结构。我们很快就会准确地看到如何利用这一点来使我们实际进行计算的那部分代码变得干净和容易（嗯，至少更容易）遵循和维护。但是现在，我们可以说，它将允许我们把计算中间量的导数的代码部分从使用它们的地方移开。
* 

* 
* [1.x.281]
* 
* 接下来的两个函数是用来更新场和内部变量的状态的，在我们进行任何详细的计算之前会被调用。
* 

* 
* [1.x.282]
 
* 该类接口的其余部分专门用于计算自由能密度函数及其所有导数所需的组件的方法。
* 

* 
* 运动学的，或场的变量。
* 

* 
* [1.x.283]
* 
* 饱和度函数的一般化表述，所需的构成参数作为参数传递给每个函数。
* 

* 
* [1.x.284]
* 
* 饱和度函数的一阶导数的广义公式，所需的构成参数作为参数传递给每个函数。
* 

* 
* [1.x.285]
* 
* 饱和度函数的二阶导数的广义公式，所需的构成参数作为参数传递给每个函数。
* 

* 
* [1.x.286]
* 
* 直接从场/运动学变量中获得的中间量。
 

 
* [1.x.287]
* 
* 中间量的一阶导数。
* 

* 
* [1.x.288]
 
* 内部变量相对于场变量的导数。注意，我们只需要这个内部变量的导数，因为这个变量只是作为动力学变量线性化的一部分而被微分。
* 

* 
* [1.x.289]
 
* 中间量的二阶导数。
* 

* 
* [1.x.290]
 
* 记录应用的变形状态以及磁载荷。此后，根据新的变形状态更新内部（粘性）变量。
* 

* 
* [1.x.291]
* 
* 根据当前磁场获得弹性和粘性饱和函数的值...
* 

* 
* [1.x.292]
* 
* ...以及它们的一阶导数...
 

* 
* [1.x.293]
* 
* ... 以及它们的二阶导数。
* 

* 
* [1.x.294]
 
* 中间量。请注意，由于我们是从一个缓存中获取这些值，而这个缓存的寿命超过了这个函数的调用，所以我们可以对结果进行别名，而不是从缓存中复制值。
* 

* 
* [1.x.295]
* 
* 中间值的一阶导数，以及内部变量相对于右Cauchy-Green变形张量的那个。
* 

* 
* [1.x.296]
* 
* 中间值的二阶导数。
* 

* 
* [1.x.297]
* 
* 由于线性化的定义变得特别冗长，我们将把自由能密度函数分解成三个相加的部分。
* 

* 
* 
* - 类似于 "新胡克 "的项。
* 

* 
* 
* - 与速率有关的项，以及
* 

 
* 
* - 类似于储存在磁场中的能量的项。      
* 为了保持一致，这些贡献中的每一个都将被单独添加到我们想要计算的变量中，顺序相同。      
* 所以，首先这是能量密度函数本身。
* 

* 
* [1.x.298]
* 
* ... 其次是磁感应矢量和Piola-Kirchhoff应力。
 

* 
* [1.x.299]
 
* ......最后是由于动力学变量的线性化而产生的切线。
* 

* 
* [1.x.300]
* 
* 现在我们已经用完了储存在缓存中的所有这些临时变量，我们可以把它清除掉以释放一些内存。
* 

* 
* [1.x.301]
* 
* 接下来的几个函数实现了饱和度函数的广义表述，以及它的各种导数。
* 

* 
* [1.x.302]
* 
* 一个比例函数，将使剪切模量在磁场的影响下发生变化（增加）。
* 

* 
* [1.x.303]
* 
* 缩放函数的一阶导数
* 

* 
* [1.x.304]
* 
* 对于我们为这个材料类采用的缓存计算方法，所有计算的根基是场变量，以及不可改变的辅助数据，如构成参数和时间步长等。因此，我们需要以与其他变量不同的方式将它们输入缓存，因为它们是由类本身之外规定的输入。这个函数只是将它们从输入参数中直接添加到缓存中，并检查那里是否有相等的数据（我们希望每个时间步长或牛顿迭代只调用一次`update_internal_data()`方法）。
* 

* 
* [1.x.305]
* 
* 为[2.x.236]设置值。
* 

* 
* [1.x.306]
* 
* 设置[2.x.237]的值。
* 

* 
* [1.x.307]
* 
* 之后，我们可以在任何时间点从缓存中获取它们。
* 

* 
* [1.x.308]
* 
* 当我们需要主要变量时，保证它们在缓存中，我们不能从它们中计算出所有的中间值（无论是直接，还是间接）。    
* 如果缓存中还没有存储我们要找的值，那么我们就快速计算，把它存储在缓存中，然后返回刚刚存储在缓存中的值。这样我们就可以把它作为一个引用返回，避免复制对象。同样的道理也适用于复合函数可能依赖的任何值。换句话说，如果在我们目前感兴趣的计算之前有一个依赖链，那么在我们继续使用这些值之前，我们可以保证解决这些依赖关系。尽管从缓存中获取数据是有成本的，但 "已解决的依赖关系 "的概念可能足够方便，使其值得看一下这个额外的成本。如果这些材料定律被嵌入到有限元框架中，那么额外的成本甚至可能不会被注意到。
* 

* 
* [1.x.309]
* 
* [1.x.310] [1.x.311].
 

* 
* [2.x.238]类是用来驱动数值实验的，这些实验将在我们已经实现了构成法则的耦合材料上进行。
* 

* 
* [1.x.312]
 
* 这些是要模拟的流变学试样的尺寸。它们有效地定义了我们虚拟实验的测量点。
 

* 
* [1.x.313]
* 
* 三个稳态负载参数分别是
* 

* 
* 
* - 轴向拉伸。
* 

* 
 
* - 剪切应变振幅，以及
* 

* 
* 
* - 轴向磁场强度。
 

* 
* [1.x.314]
 
* 此外，随时间变化的流变学负载条件的参数是
* 

* 
* 
* -加载周期的频率。
* 

* 
* 
* - 负载周期的数量，以及
* 

* 
* 
* - 每个周期的离散时间步数。
 

* 
* [1.x.315]
* 
* 我们还声明了一些不言自明的参数，这些参数与用速率依赖型和速率非依赖型材料进行的实验所产生的输出数据有关。
* 

* 
* [1.x.316]
* 
* 接下来的几个函数为实验计算与时间有关的参数...
* 

* 
* [1.x.317]
* 
* ... 下面两个函数规定了在任何给定时间的机械和磁载荷...
 

* 
* [1.x.318]
 
* ......而这最后一个则将实验的状态输出到控制台。
* 

* 
* [1.x.319]
 
* 应用的磁场总是与流变仪转子的旋转轴对齐。
* 

* 
* [1.x.320]
* 
* 应用的变形（梯度）是根据流变仪和样品的几何形状、采样点和实验参数计算出来的。根据介绍中记录的位移曲线，变形梯度可以用直角坐标表示为 [1.x.321] 。
* 

* 
* [1.x.322]
* 
* [1.x.323] [1.x.324] 。
 

* 
* 这是将驱动数值实验的函数。
* 

* 
* [1.x.325]
* 
* 我们可以把手工实现的构成法和用它达到的结果与用AD或SD得到的结果进行比较。通过这种方式，我们可以验证它们产生了相同的结果（这表明要么两种实现方式都有很大的可能性是正确的，要么就是它们都有相同的缺陷而不正确）。不管怎么说，这对完全自我实现的变体来说是个不错的理智检查，当检测到结果之间的差异时，当然可以作为一种调试策略）。)
* 

* 
* [1.x.326]
* 
* 我们将把材料的构型响应输出到文件中进行后处理，所以在这里我们声明一个`stream'，它将作为这个输出的一个缓冲区。我们将使用一个简单的CSV格式来输出结果。
* 

* 
* [1.x.327]
* 
* 使用DiscreteTime类，我们使用一个固定的时间步长来迭代每个时间段。
* 

* 
* [1.x.328]
* 
* 我们获取并计算在这个时间步长中应用于材料的负载...
 

* 
* [1.x.329]
* 
* ...然后我们更新材料的状态...
 

* 
* [1.x.330]
* 
* ... 并测试两者之间的差异。
* 

* 
* [1.x.331]
* 
* 接下来我们要做的是收集一些结果进行后处理。所有的数量都是在 "当前配置"（而不是 "参考配置"，所有由构成法则计算的数量都是在这个框架内）。
* 

* 
* [1.x.332]
 
* 最后，我们将应变-应力和磁载荷历史输出到文件中。
* 

* 
* [1.x.333]
* 
* [1.x.334] [1.x.335]。
 

* 
* 这个驱动函数的目的是从文件中读入所有的参数，并在此基础上创建每个构成法则的代表性实例，并调用函数对其进行流变学实验。
* 

* 
* [1.x.336]
* 
* 我们开始实际工作，使用我们的速率无关的构成法配置和运行实验。这里的自动可微调数类型是硬编码的，但是通过一些巧妙的模板设计，可以在运行时选择使用哪种框架（例如，通过参数文件选择）。我们将同时用完全由手工实现的反面材料法进行实验，并检查它与我们的辅助实现的计算结果。
* 

* 
* [1.x.337]
* 
* 接下来我们对与速率有关的构成法做同样的实验。如果SymEngine被设置为使用LLVM即时编译器，则默认选择最高性能的选项，该编译器（结合一些积极的编译标志）产生所有可用选项中最快的代码评估路径。作为后备措施，所谓的 "lambda "优化器（它只需要一个兼容C++11的编译器）将被选中。同时，我们将要求CAS进行普通子表达式的消除，以尽量减少评估过程中使用的中间计算的数量。我们将记录在SD实现的构造器内执行 "初始化 "步骤所需的时间，因为这是发生上述转换的地方。
* 

* 
* [1.x.338]
 
* [1.x.339] [1.x.340]
 

* 
* 主函数只调用两组要执行的例子的驱动函数。
* 

* 
* [1.x.341]
* [1.x.342][1.x.343] 。
* 

* [1.x.344][1.x.345]。
* 

* 第一个探索性的例子产生了以下输出。经核实，所有三种实现产生的结果是相同的。
* [1.x.346]
* 
* [1.x.347][1.x.348] 。
* 

* 为了帮助总结虚拟实验本身的结果，下面是一些图表，显示了在材料样品的选定位置上的剪切应力，与剪切应变的关系。这些图表显示了在三种不同磁载荷下的应力-应变曲线，以及（机械）载荷曲线的最后一个周期，当速率依赖型材料达到可重复的（"稳态"）反应时。这些类型的图表通常被称为[Lissajous图]（https://en.wikipedia.org/wiki/Lissajous_curve）。粘弹性材料的曲线所呈现的椭圆面积可以衡量材料耗散的能量，其椭圆度表示粘性反应相对于弹性反应的相移。
* [2.x.239] 
* 我们不难看出，磁弹性材料的反应有一条与加载曲线相匹配的卸载曲线。
* 
* 但在这里可以清楚地注意到，随着施加磁场的增加，曲线的梯度也在增加。沿着这条曲线任何一点的切线都与瞬时剪切模量有关，由于能量密度函数的定义方式，我们预计剪切模量会随着磁场强度的增加而增加。我们观察到磁-粘弹性材料的行为大致相同。由加载-卸载曲线追踪的椭圆的主轴有一个斜率，随着施加更大的磁负荷而增加。同时，材料耗散的能量也越多。
* 至于代码输出，这是打印到控制台的关于用磁弹性材料进行流变学实验的部分。
* [1.x.349]
* 
* 这部分的输出涉及到用磁弹性材料进行的实验。
* [1.x.350]
* 
* 计时器的输出也被发送到控制台，因此我们可以比较进行手工计算和辅助计算所需的时间，并对使用AD和SD框架的开销有一些了解。以下是使用AD框架的磁弹性实验的时间，基于Trilinos库的Sacado组件。
* [1.x.351]
* 关于使用自动微分进行的计算（作为提醒，这是使用Sacadolibrary结合动态前向自动微分类型进行的两级微分），我们注意到，辅助计算需要大约[2.x.240]的时间来计算所需的数量。这看起来确实是一个相当大的开销，但是，正如介绍中提到的，这是否可以接受，完全是主观的，而且取决于具体情况：你是否更看重计算机的时间，而不是人的时间来做必要的手工计算导数，验证其正确性，实现它们，并验证实现的正确性？如果你开发的研究代码只会在相对较少的实验中运行，你可能更看重自己的时间。如果你开发的生产代码将在10,000核的集群上反复运行几个小时，你的考虑可能就不一样了。无论如何，AD方法的一个很好的特点是，当函数和类在标量类型上建模时，有 "滴入 "能力。这意味着开始使用它只需要最小的努力。
* 与此相反，使用实时（JIT）编译的符号代数实现的磁涡弹材料的时间表明，在初始化过程中付出一些不可忽视的代价，计算本身的执行效率要高得多。
* [1.x.352]
* 由于初始化阶段很可能只需要在每个线程中执行一次，这个初始的昂贵阶段可以通过重复使用单个[2.x.241]实例来抵消。尽管磁弹性构成法与磁弹性构成法相比，有更多的条款需要计算，但它在执行动能变量和切线的计算方面仍然快了一个数量级。而且，与使用缓存方案的手工计算变量相比，计算时间几乎相等。因此，尽管使用符号框架需要在如何实现和操作符号表达方面进行范式转换，但它可以提供AD框架所缺乏的良好性能和灵活性。
* 关于数据缓存的问题，事实上，与使用中间值进行的数值实验相比，磁弹性材料实现的价值缓存所增加的成本是在 "update_internal_data() "中花费的时间[2.x.242] 。下面是删除缓存数据结构后，为 "手工计算 "变体提取的时间比较的样本输出。
* [1.x.353]
 
* 通过一些小的调整，我们可以很容易地测试批量优化器的不同优化方案。因此，让我们比较一下与 "LLVM "批处理优化器设置相关的计算费用和其他选择。以下是 "lambda "优化方法的时间报告（保留使用CSE）。
* [1.x.354]
* 这里的主要观察是，与 "LLVM "方法相比，在 "辅助计算 "部分花费的时间要多出一个数量级。
* 最后，我们将测试 "字典 "替换与CSE的结合情况。字典替换只是在CAS框架内做了所有的评估，而没有对底层数据结构进行转换。在这种情况下，只有使用缓存中间结果的CSE才能提供任何 "加速"。考虑到这一点，下面是这个选择的结果。
* [1.x.355]
* 不用说，与其他两种方法相比，这些结果花了不少时间来产生。字典 "替换方法也许只适用于简单的表达式，或者当调用的数量足够少的时候。
*[1.x.356][1.x.357]
* 

* 也许你已经相信这些工具有一定的价值，并且可以对你有直接的帮助或使用。现在明显的问题是使用哪一个。特别是在连续点层面，你将使用这些框架来计算特别是构成法的导数，我们可以说以下几点。
* 
* - 自动微分可能是进入辅助微分世界的最简单的切入点。
* 
* - 鉴于构成框架有足够的通用实现，自动微分通常可以用来替代内在的标量类型，然后可以利用辅助类来计算一阶（以及可能的高阶）导数，只需付出最小的努力。
* 
* 作为对上述观点的限定，作为一个 "落入式替代 "并不意味着你必须对这些数字所通过的算法没有争议。有可能不经意间进行的操作，在进行区分时，会返回一个不正确的结果。 所以这绝对是一个人应该注意的事情。 一个具体的例子。当计算一个张量的特征值时，如果该张量是对角线的，那么得到结果的捷径就是直接返回对角线条目（从输入张量中提取的）。就计算特征值本身而言，这是完全正确的，但是不通过算法来计算非对角线张量的特征值会产生意想不到的副作用，即特征值看起来（对AD框架而言）是完全相互脱钩的，它们的交叉敏感度没有被编码在返回的结果中。在进行微分时，导数张量的许多条目将被丢失。为了解决这个问题，我们必须确保使用标准的特征值求解算法，这样返回的特征值对彼此的敏感度就会在结果中得到编码。
* 
* - 涉及AD数字类型的计算可能很昂贵。随着微分运算顺序的增加，费用也会增加（有时是相当大的）。这可能会被周围操作的计算复杂性所缓解（例如线性求解），但最终还是要看具体问题。
* 
* - AD被限制在只需要总导数的情况下。如果一个微分操作需要相对于自变量的偏导，那么使用它是不合适的。
* 
* - 每个AD库都有自己的怪癖（说起来很悲哀，但根据作者的经验，这是事实），所以可能需要一些试验和错误来找到合适的库和选择AD号来满足你的目的。这些 "怪癖 "的原因往往归结于库背后的整体理念（数据结构、模板元编程的使用等）以及导数计算的数学实现（例如，使用对数函数改变基础的结果操作可能限制了输入值的域
* 
* - 当然，所有的细节都是对用户隐藏的）。)  此外，一个库可能比另一个库能更快地计算出所需的结果，所以在这方面进行一些初步探索可能是有益的。
* 
* - 符号微分（嗯，一般来说，使用CAS）提供了最灵活的框架，可以进行辅助计算。
* 
* - SD框架可以做AD框架所能做的一切，还有一个好处是可以对某些操作和运算的时间进行低级控制。
* 
* - 表达式评估的加速是可能的，与一些手工实现相比，有可能导致SD框架接近原生的性能（当然，这种比较取决于整个程序设计），但代价是初始优化调用。
* 
* - 巧妙地使用[2.x.243]可以最大限度地减少优化依赖表达式的昂贵调用的费用。 可以对[2.x.244]进行序列化，往往（但不一定）这个昂贵的调用可以做一次，然后在以后的模拟中重复使用。
* 
* - 例如，如果两个或更多的材料法只因其材料参数而不同，那么只要这些材料参数被认为是象征性的，就可以在它们之间共享一个批量优化器。这意味着你可以 "区分一次，在许多情况下评估"。
* 
* - SD框架可以部分地被用作标量类型的 "直接替换"，但是人们（至少）必须在它周围增加一些框架来执行值替换步骤，将符号类型转换为它们的数字对应物。
* 
* - 在一些专门的算法中可能无法使用SD数字。 例如，如果一个算法的退出点或代码分支是基于一些具体的、数值的（符号）输入参数，那么显然这是不可行的。我们要么重新实现专门针对SD数字类型的算法（有点不方便，但经常是可能的，因为[2.x.245]类支持条件反射），要么必须使用创造性的手段来解决这个具体问题（例如，引入一个符号表达式来表示这个算法返回的结果，如果在要使用它的上下文中是有意义的，也许可以声明它是一个[符号函数]（https://dealii.org/developer/doxygen/deal.II/namespaceDifferentiation_1_1SD.html#a876041f6048705c7a8ad0855cdb1bd7a）。这以后可以用它的数值来替代，如果声明为符号函数，那么它的递延导数也可以作为替代的结果纳入计算中。)
* 
* - 使用SD的最大缺点是，使用它需要一个范式的转变，人们必须以不同的方式来构建大多数问题，以便利用它的最大优势。仔细考虑如何使用和重用数据结构也是让它有效工作的关键）。这可能意味着，人们需要对它进行一番玩耍，并建立起对典型操作顺序的理解，以及每一步在操作基础数据方面的具体作用。如果人们有时间和意愿这样做，那么使用这个工具的好处可能是巨大的。
*[1.x.358][1.x.359]
* 

* 这个程序有几个合乎逻辑的方法可以扩展。
* 
* - 也许最明显的扩展是实现和测试其他构成模型。 这仍然可以在磁-机械耦合问题的范围内进行，也许可以考虑替代能量函数的 "Neo-Hookean "型弹性部分，改变耗散能量的构成规律（及其相关的演化规律），或者包括磁滞效应或这些材料试图模拟的复合聚合物的破坏模型。
* 
* - 当然，所实现的模型可以被修改或完全替换为专注于物理学其他方面的模型，如电活性聚合物、生物力学材料、弹塑性介质等。
* 
* - 为粘弹性演化规律实施不同的时间分层方案。
* 
* - 与其直接从能量密度函数推导出一切，不如使用[2.x.246]来直接线性化动力学量。 这将意味着只需要一个一次微分的自动微分的数字类型，而且肯定会大大改善性能。 这种方法也为耗散材料提供了机会，比如这里考虑的磁涡弹材料，可以与AD结合起来实现。这是因为线性化调用了因变量相对于场变量的总导数，这正是AD框架所能提供的。
* 
* - 调查使用其他可自动微分的数字类型和框架（如ADOL-C）。由于每个AD库都有自己的实现，选择使用哪个库可能会导致性能的提高，而且在最不幸的情况下，计算会更加稳定。至少可以说，对于deal.II支持的AD库，结果的准确性应该基本不受这个决定的影响。
* 
* - 在有限元模拟中嵌入这些构成法之一。
* 用较少的精力，可以考虑重新编写非线性问题求解器，比如在[2.x.247]中实现的使用AD或SDapproaches来计算牛顿矩阵的问题。事实上，这在[2.x.248]中已经完成。
* 

* [1.x.360][1.x.361] [2.x.249] 。
* [0.x.1]

