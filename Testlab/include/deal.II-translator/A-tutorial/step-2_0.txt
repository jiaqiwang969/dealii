include/deal.II-translator/A-tutorial/step-2_0.txt
[0.x.0]*
 [2.x.0] 
* 本教程依赖于 [2.x.1] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12]
*[1.x.13][1.x.14][1.x.15] 。
* 

* [2.x.2] 
* 在前面的例子中，我们已经创建了一个网格，现在我们展示如何在这个网格上定义自由度。在这个例子中，我们将使用最低阶的([2.x.3])有限元，其自由度与网格的顶点相关。后面的例子将展示高阶元素，自由度不一定与顶点相关，但可以与边、面或单元相关。
* 术语 "自由度 "在有限元界通常被用来表示两个略有不同但相关的东西。首先，我们希望将有限元解表示为形状函数的线性组合，形式为[2.x.4] 。这里，[2.x.5]是一个膨胀系数的向量。因为我们还不知道它们的值（我们将计算它们作为线性或非线性系统的解），它们被称为 "未知数 "或 "自由度"。这个术语的第二层含义可以解释如下。对有限元问题的数学描述通常是说，我们正在寻找一个满足某些方程组的有限维函数[2.x.6]（例如，[2.x.7]为所有测试函数[2.x.8]）。换句话说，我们在这里说的是，解决方案需要位于某个空间 [2.x.9] 中。然而，为了在计算机上实际解决这个问题，我们需要选择这个空间的一个基；这就是我们在上面用系数[2.x.12]展开[2.x.11]时使用的形状函数[2.x.10]的集合。当然，空间[2.x.13]有很多基数，但我们将特别选择由有限元函数描述的基数，这些函数传统上是在网格单元上局部定义的。在这种情况下描述 "自由度 "需要我们简单地[1.x.16]空间的基函数[2.x.14]。对于[2.x.15]元素来说，这意味着简单地以某种方式列举网格的顶点，但对于更高阶的元素，我们还必须列举与网格的边、面或单元内部相关的形状函数。换句话说，自由度的列举是与我们用于顶点的指数完全不同的事情。提供这种列举[2.x.16]基础函数的类被称为DoFHandler。
* 在网格上定义自由度（简称 "DoF"）是一个非常简单的任务，因为这个库为你做了所有的工作。从本质上讲，你所要做的就是创建一个有限元对象（从deal.II已有的许多有限元类中选取，例如参见[2.x.17]文档），并通过[2.x.18]函数将其交给DoFHandler对象（"分配DoF "是我们用来描述[1.x.17]基础函数过程的术语，如上所述）。DoFHandler是一个知道哪个自由度在哪里的类，也就是说，它可以回答 "全球有多少个自由度 "和 "在这个单元上，给我住在这里的形状函数的全球索引 "这样的问题。这就是你在确定系统矩阵应该有多大，以及将单个单元的贡献复制到全局矩阵时需要的信息。
*[1.x.18][1.x.19]
* 

* 下一步将是使用这个有限元和网格计算对应于一个特定微分方程的矩阵和右手边。我们将在[2.x.19]程序中保留这一步骤，而是讨论有限元程序的一个实际问题，即有限元矩阵总是非常稀疏的：矩阵中几乎所有的条目都是零。
* 更准确地说，如果一个矩阵中的非零项[1.x.20]的数量与总体自由度数无关，我们就说该矩阵是稀疏的。例如，拉普拉斯方程的有限差分逼近的简单5点模版导致了一个稀疏矩阵，因为每行的非零条目数是5，因此与矩阵的总大小无关。对于更复杂的问题
* 
* 例如，[2.x.20]的斯托克斯问题 
* 
* 特别是在三维中，每行的条目数可能是几百个。但重要的一点是，这个数字与问题的整体大小无关：如果你细化网格，每行的未知数的最大数量保持不变。
* 稀疏性是有限元方法的显著特征之一，与之相比，使用泰勒展开和匹配系数来逼近局部微分方程的解，或使用傅里叶基。
* 在实践中，正是矩阵的稀疏性使我们能够解决具有数百万或数十亿未知数的问题。为了理解这一点，请注意，具有[2.x.21]行的矩阵，每个非零项的数量都有一个固定的上限，需要[2.x.22]个内存位置来存储，而矩阵-向量乘法也只需要[2.x.23]次操作。因此，如果我们有一个线性求解器，只需要固定数量的矩阵-向量乘法就可以得到这个矩阵的线性系统的解，那么我们就会有一个求解器，可以以最佳的复杂度找到所有[2.x.24]个未知数的值，也就是说，总共只需要[2.x.25]次操作。显然，如果矩阵不是稀疏的，这是不可能的（因为那时矩阵中的条目数必须是[2.x.26]和一些[2.x.27]，而且做固定数量的矩阵-向量乘积需要[2.x.28]次操作），但这也需要非常专业的求解器，如多重网格方法，以满足求解只需要固定数量的矩阵-向量乘法的要求。在本教程的其余程序中，我们将经常研究使用何种求解器的问题。
* 稀疏性是由以下事实产生的：有限元形状函数是在单个单元上定义的[1.x.21]，而不是在全球范围内定义的，而且双线型中的局部微分算子只对支持度重叠的形状函数进行耦合。(一个函数的 "支持 "是指它非零的区域。对于有限元方法，形状函数的支持通常是与它所定义的顶点、边或面相邻的单元。) 换句话说，不在同一单元上定义的自由度[2.x.29]和[2.x.30]不会重叠，因此，矩阵条目[2.x.31]将为零。 在某些情况下，如非连续Galerkin方法，形状函数也可以通过面积分连接到邻近的单元。但是有限元方法一般不会将形状函数连接到定义了该函数的单元的近邻之外）。)
* 

* [1.x.22][1.x.23] 。
* 

* 默认情况下，DoFHandler类以相当随机的方式列举网格上的自由度；因此，稀疏度模式也不是为任何特定目的而优化的。为了说明这一点，下面的代码将演示一种简单的方法来输出对应于DoFHandler的 "稀疏模式"，也就是说，一个对象代表了在网格和DoFHandler上离散化偏微分方程时可能建立的所有潜在的非零元素矩阵。在sparsitypattern中这种结构的缺乏将从我们下面展示的图片中显而易见。
* 对于大多数应用和算法来说，自由度的确切编号方式并不重要。例如，我们用来解决线性系统的共轭梯度方法并不关心。另一方面，有些算法确实关心：特别是一些预处理程序，如SSOR，如果它们能以特定的顺序走过自由度，就能更好地工作，如果我们能将它们分类，使SSOR能以这种顺序从0到[2.x.32]进行迭代，那就太好了。其他的例子包括计算不完整的LU或Cholesky因式分解，或者如果我们关心矩阵的块结构（见[2.x.33]的例子）。因此，deal.II在命名空间DoFRenumbering中有能以特定方式重新列举自由度的算法。重新编号可以被认为是选择了一个不同的、经过排列的有限元空间的基础。因此，这种重新编号所产生的稀疏模式和矩阵也是简单的行和列的排列组合，与我们没有明确的重新编号所得到的相比。
* 在下面的程序中，我们将使用Cuthill和McKee的算法来做这件事。我们将在[1.x.24]中显示原始自由度枚举和重新编号的版本的稀疏模式。
* 

* [1.x.25] [1.x.26]。
* 前面几个包括的内容与前面的程序一样，所以不需要额外的注释。
* 

* 
* [1.x.27]
* 
* 然而，下一个文件是新的。我们需要这个包含文件来将自由度（"DoF "s）与顶点、线和单元联系起来。
* 

* 
* [1.x.28]
* 
* 以下内容包含了对双线性有限元的描述，包括它在三角形的每个顶点上有一个自由度，但在面和单元内部没有自由度。
* 

* 
* (事实上，该文件包含了一般的拉格朗日元素的描述，即还有二次、三次等版本，而且不仅是2d，还有1d和3d。)
* 

* 
* [1.x.29]
* 
* 在下面的文件中，可以找到几个用于操作自由度的工具。
* 

* 
* [1.x.30]
* 
* 我们将使用一个稀疏矩阵来可视化自由度在网格上的分布所产生的非零条目模式。那个类可以在这里找到。
* 

* 
* [1.x.31]
* 
* 我们还需要使用一个中间的稀疏模式结构，在这个文件中可以找到。
* 

* 
* [1.x.32]
* 
* 我们要使用一种特殊的算法对自由度进行重新编号。它在这里被声明。
* 

* 
* [1.x.33]
* 
* 而这又是C++输出所需要的。
* 

* 
* [1.x.34]
 
* 最后，和[2.x.34]一样，我们把deal.II命名空间导入到全局范围。
* 

* 
* [1.x.35]
* 
* [1.x.36] [1.x.37].
 

* 
* 这是在前面的[2.x.35]示例程序中产生圆形网格的函数，其细化步骤较少。唯一的区别是它通过其参数返回它所产生的网格。
* 

* 
* [1.x.38]
* 
* [1.x.39] [1.x.40].
 

* 
* 到目前为止，我们只有一个网格，即一些几何信息（顶点的位置）和一些拓扑信息（顶点如何连接到线，线如何连接到单元，以及哪些单元与哪些其他单元相邻）。要使用数值算法，还需要一些逻辑信息：我们希望将自由度数字与每个顶点（或线，或单元，如果我们使用高阶元素的话）联系起来，以便以后生成描述三角形上有限元场的矩阵和矢量。
* 

* 
* 这个函数显示了如何做到这一点。要考虑的对象是[2.x.36]类模板。 然而，在我们这样做之前，我们首先需要一些东西来描述这些对象中的每一个要关联多少个自由度。由于这是有限元空间定义的一个方面，有限元基类存储了这个信息。因此，在目前情况下，我们创建了一个描述拉格朗日元素的派生类[2.x.37]的对象。它的构造函数需要一个参数，说明元素的多项式程度，这里是1（表示一个双线性元素）；这就对应于每个顶点的一个自由度，而线和四边形内部没有自由度。如果给构造函数的值是3，我们就会得到一个双立方体元素，每个顶点有一个自由度，每条线有两个自由度，单元内有四个自由度。一般来说，[2.x.38]表示具有完整多项式（即张量积多项式）的连续元素家族，直到指定的顺序。
* 

* 
* 我们首先需要创建一个这个类的对象，然后把它传递给[2.x.39]对象，为自由度分配存储空间（用deal.II的行话说：我们[1.x.41]）。
* 

* 
* [1.x.42]
* 
* 现在我们已经将自由度与每个顶点的全局数字联系起来，我们想知道如何将其可视化？ 没有简单的方法可以直接将与每个顶点相关的自由度数字可视化。然而，这样的信息几乎不会真正重要，因为编号本身或多或少是任意的。有一些更重要的因素，我们将在下文中展示其中的一个。  
* 与三角形的每个顶点相关的是一个形状函数。假设我们想解决类似拉普拉斯方程的问题，那么不同的矩阵条目将是每对这样的形状函数的梯度的积分。显然，由于形状函数只在与它们相关的顶点相邻的单元格上是非零的，所以只有当与该列和行%号相关的形状函数的支持相交时，矩阵条目才是非零的。这只是相邻形状函数的情况，因此也只是相邻顶点的情况。现在，由于顶点被上述函数[2.x.40]或多或少地随机编号，矩阵中非零项的模式将有些参差不齐，我们现在就来看看它。  
* 首先，我们必须创建一个结构，用来存储非零元素的位置。然后，这可以被一个或多个稀疏矩阵对象使用，这些对象在这个稀疏模式所存储的位置上存储条目的值。存储这些位置的类是SparsityPattern类。然而，事实证明，当我们试图立即填充这个类时，这个类有一些缺点：它的数据结构的设置方式是，我们需要对我们可能希望的每一行的最大条目数有一个估计。在两个空间维度上，通过[2.x.41]函数可以得到合理的估计值，但是在三个维度上，该函数几乎总是严重高估真实的数字，导致大量的内存浪费，有时对于使用的机器来说太多，即使未使用的内存可以在计算稀疏模式后立即释放。为了避免这种情况，我们使用了一个中间对象DynamicSparsityPattern，该对象使用了一个不同的%内部数据结构，我们可以随后将其复制到SparsityPattern对象中，而不需要太多的开销。关于这些数据结构的一些更多信息可以在[2.x.42]模块中找到）。为了初始化这个中间数据结构，我们必须给它提供矩阵的大小，在我们的例子中，矩阵是正方形的，行和列的数量与网格上的自由度相同。
* 

* 
* [1.x.43]
* 
* 然后我们用非零元素的位置来填充这个对象，这些非零元素将位于目前自由度的编号中。
 

* 
* [1.x.44]
* 
* 现在我们已经准备好创建实际的稀疏模式，以后可以用于我们的矩阵。它将包含已经组装在DynamicSparsityPattern中的数据。
* 

* 
* [1.x.45]
* 
* 有了这个，我们现在可以把结果写到一个文件里。
* 

* 
* [1.x.46]
* 
* 结果存储在[2.x.43]文件中，矩阵中的每个非零条目都对应于图像中的一个红色方块。输出结果将显示如下。  
* 如果你看一下，你会注意到稀疏性模式是对称的。这不应该是一个惊喜，因为我们没有给[2.x.44]任何信息，表明我们的双线性形式可能以非对称的方式耦合形状函数。你还会注意到，它有几个明显的区域，这源于编号从最粗的单元开始，然后到较细的单元；由于它们都是围绕原点对称分布的，这在稀疏模式中又显示出来。
* 

* 
* [1.x.47]
* 
* [1.x.48] [1.x.49].
 

* 
* 在上面产生的稀疏模式中，非零项从对角线上延伸得相当远。对于一些算法来说，例如不完整的LU分解或Gauss-Seidel预处理，这是不利的，我们将展示一个简单的方法来改善这种情况。
* 

* 
* 请记住，为了使矩阵中的一个条目[2.x.45]不为零，形状函数i和j的支持需要相交（否则在积分中，积分将到处为零，因为在某个点上，一个或另一个形状函数为零）。然而，形状函数的支撑点只有在彼此相邻的情况下才会相交，因此，为了使非零条目聚集在对角线周围（其中[2.x.46]等于[2.x.47]），我们希望相邻的形状函数的索引（DoF号码）不会相差太多。
* 

* 
* 这可以通过一个简单的前行算法来实现，即从一个给定的顶点开始，给它的索引为0。然后，它的邻居被连续编号，使它们的指数接近于原始指数。然后，他们的邻居，如果还没有被编号，也被编号，以此类推。
* 

* 
* 有一种算法沿着这些思路增加了一点复杂性，那就是Cuthill和McKee的算法。我们将在下面的函数中使用它来对自由度进行重新编号，从而使产生的稀疏模式在对角线周围更加本地化。该函数唯一有趣的部分是对[2.x.48]的第一次调用，其余部分基本上与以前一样。
* 

* 
* [1.x.50]
* 
* 同样，输出显示如下。请注意，非零项在对角线周围的聚类情况要比以前好得多。这种效果对于较大的矩阵来说更加明显（目前的矩阵有1260行和列，但大的矩阵往往有几十万行）。
* 

* 
* 值得注意的是，[2.x.49]类也提供了一些其他的算法来重新编号自由度。例如，如果所有的耦合都在矩阵的下三角或上三角部分，那当然是最理想的，因为那样的话，解决线性系统就只需要向前或向后替换。当然，这对于对称稀疏模式来说是无法实现的，但在一些涉及传输方程的特殊情况下，通过列举从流入边界沿流线到流出边界的自由度，这是可能的。毫不奇怪，[2.x.50]也有这方面的算法。
* 

* 
*  
*  
* [1.x.51] [1.x.52]。
 

* 
* 最后，这是主程序。它所做的唯一事情就是分配和创建三角形，然后创建一个[2.x.51]对象并将其与三角形相关联，最后对其调用上述两个函数。
* 

* 
* [1.x.53]
* [1.x.54][1.x.55] 。
* 

* 该程序运行后，产生了两个疏散模式。我们可以通过在网络浏览器中打开[2.x.52]文件来可视化它们。
* 结果是这样的（每一个点表示一个可能为非零的条目；当然，该条目是否为零取决于所考虑的方程，但矩阵中的指示位置告诉我们，在离散化局部方程，即微分方程时，哪些形状函数可以，哪些不可以耦合）。[2.x.53] 
* 左图中的不同区域，由线条中的结点和左侧及顶部的单点表示，代表了三角法不同细化层次上的自由度。 从右图中可以看出，经过编号后，矩阵的主对角线周围的稀疏度模式更加集中。虽然这一点可能不明显，但两张图片中的非零项的数量是相同的，当然。
* 

* 
* [1.x.56][1.x.57] 。
* 

* 就像[2.x.54]一样，你可能想用程序玩一下，让自己熟悉一下交易.II。例如，在[2.x.55]函数中，我们使用线性有限元（这就是FE_Q对象的参数 "1"）。如果你使用高阶元素，例如立方体或五元体（使用3和5作为各自的参数），探索稀疏模式如何变化。
* 你也可以通过细化网格来探索稀疏性模式的变化。你会发现不仅矩阵的大小会发生变化，而且其带宽也会发生变化（矩阵中离对角线最远的非零元素与对角线的距离），不过带宽与大小的比例通常会缩小，也就是说，矩阵会更多地聚集在对角线上。
* 另一个实验想法是尝试DoFRenumbering命名空间中除Cuthill-McKee之外的其他重编号策略，看看它们如何影响稀疏度模式。
* 你也可以使用[1.x.58]（较简单的可视化程序之一；也许不是最容易使用的，因为它是命令行驱动的，但在所有Linux和其他类似Unix的系统上也普遍可用）通过改变[2.x.56]来实现输出的可视化。
* [1.x.59]
* 
* 基于[1.x.60]的另一种做法是尝试打印出带有支撑点位置和编号的网格。为此，你需要包含GridOut和MappingQ1.的头文件，其代码为。
* [1.x.61]
* 在我们运行该代码后，我们得到一个名为gnuplot.gpl的文件。要查看这个文件，我们可以在命令行中运行以下代码。
* [1.x.62].有了这个，你会得到一个类似于[2.x.57]的图片，这取决于你正在看的网格。更多信息，请参见[2.x.58]。
 

* [1.x.63][1.x.64] [2.x.59] 。
* [0.x.1]

