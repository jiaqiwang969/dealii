include/deal.II-translator/A-tutorial/step-58_0.txt
[0.x.0]*
 [2.x.0]
* 本教程依赖于 [2.x.1] , [2.x.2] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27]
* [2.x.3]
* [1.x.28][1.x.29]。
* [1.x.30][1.x.31][1.x.32] 。


* 一个函数[2.x.4]和一个势[2.x.5]的[1.x.33]是量子力学和非线性光学中经常使用的一个模型。如果用适当的量子进行测量（以便[2.x.6]），则读作如下。
* [1.x.34]
* 如果没有电位，即[2.x.7]，那么它可以用来描述光在光纤中的传播。如果[2.x.8]，该方程有时也被称为[1.x.35]，可用于模拟[1.x.36]的时间依赖行为。
* 对于这个特定的教程程序，方程的物理解释对我们来说不是很重要。相反，我们想用它作为一个模型，让我们解释两个方面。
*
* - 它是一个[1.x.37]的[2.x.9]。我们以前在[2.x.10]中看到过复值方程，但那里选择了将方程分成实部和虚部，结果是解决了两个实值方程的系统。相比之下，这里的目标是展示如何解决我们将所有东西都保留为复数的问题。
*
* 这个方程是一个很好的模型问题，可以解释[1.x.38]如何工作。这是因为它有一些具有根本不同性质的项：一方面，[2.x.11]是一个常规的空间算子，其方式我们以前已经见过多次；另一方面，[2.x.12]没有空间或时间导数，即它是一个纯粹的局部算子。事实证明，我们对这些项中的每一项都有有效的方法（特别是，我们对后者有分析解），而且我们可能最好对这些项进行不同的、单独的处理。我们将在下文中详细解释这一点。
*


*[1.x.39][1.x.40]


* 乍一看，这些方程似乎是抛物线，与热力方程相似（见[2.x.13]），因为只有一个时间导数和两个空间导数。事实上，如果我们暂时假设势[2.x.14]和[2.x.15]不是正确的解释，就更容易看出这一点。那么我们就会有这样的方程
* [1.x.41]
* 如果我们把解分成实部和虚部，[2.x.16]和[2.x.17]，那么我们可以像在[2.x.18]中一样，把一个方程分成实部和虚部。
* [1.x.42]
* 毫不奇怪，时间导数前面的因子[2.x.19]将方程的实部和虚部结合起来。如果我们想进一步理解这个方程，可以用其中一个方程的时间导数，例如
* [1.x.43]
*（这里我们假设，至少在某种形式上，我们把空间和时间导数相抵消），然后把另一个方程插入其中。
* [1.x.44]
* 这个方程是双曲线的，在性质上与波浪方程相似。如果你看一下这个程序的 "结果 "部分的视频，这一点也会很明显）。此外，我们也可以得出与[2.x.20]相同的方程。因此，对于NLSE来说，更好的假设是将其视为一个双曲的波传播方程，而不是像热方程那样的扩散方程。你可能会问，算子[2.x.21]以正号出现，而在波浪方程中，[2.x.22]是负号，这是否正确？这确实是正确的。在与测试函数相乘并通过部分积分后，我们希望得到一个正的（半）定义形式。因此，从[2.x.23]我们得到[2.x.24]。同样，经过两次积分，我们从[2.x.25]得到[2.x.26]的形式。在这两种情况下，我们都能得到所需的正号。)
* 当然，实数NLSE也有[2.x.27]和[2.x.28]项。然而，这些都是低阶的空间衍生物，虽然它们显然很重要，但它们并不改变方程的特征。
* 在任何情况下，本讨论的目的是要弄清楚什么样的时间步进方案可能适合该方程。结论是，作为一个双曲型方程，我们需要选择一个满足CFL型条件的时间步长。如果我们使用显式方法（我们不会这样做），我们将不得不研究与空间运算器相对应的矩阵的特征值。如果你跟随视频讲座的讨论( [2.x.29]，那么你会记得，模式是需要确保[2.x.30]，其中[2.x.31]是时间步长，[2.x.32]是网格宽度，而[2.x.33无论你采用原始方程([2.x.34])还是只对实部或虚部进行重构，结果都是如果我们要使用显式时间步长方法，我们需要选择[2.x.35]。这是不可行的，原因与[2.x.36]中的热方程相同。这将产生不切实际的小的时间步长，甚至只有适度精细的网格。相反，我们必须使用隐式时间步长方法，然后可以选择一个更平衡的[2.x.37]。事实上，我们将使用隐式的Crank-Nicolson方法，正如我们之前在[2.x.38]中对正波方程所做的那样。
*

*[1.x.45][1.x.46]


* [2.x.39]
* 如果我们把NLSE看作是一个普通微分方程，其中的右手边恰好有空间导数，即把它写为
* [1.x.47]
* 人们可能会想通过对时间间隔[2.x.40]的两边积分来 "正式解决 "它，并得到
* [1.x.48]
* 当然，这不是那么简单的：积分中的[2.x.41]仍在根据微分方程随时间变化，所以我们不能只是评估积分（或通过正交轻松近似），因为我们不知道[2.x.42]。但我们可以用下面的单独贡献来写，这将使我们能够分别处理不同的条款。
* [1.x.49]
* 现在可以把这个方程解读为以下方式。对于每个时间间隔[2.x.43]，溶液中的变化[2.x.44]由三个贡献组成。
*
* - 拉普拉斯算子的贡献。
*
* - 势的贡献[2.x.45] 。
*
* - "相位 "项的贡献 [2.x.46] .
* [1.x.50]是现在的一种近似技术，允许我们分别处理这些贡献中的每一个。(如果我们想的话。在实践中，我们将把前两项放在一起处理，而把最后一项分开。但这是一个细节，从概念上讲，我们可以以不同的方式处理所有这些贡献）。)为此，让我们介绍三个独立的 "解决方案"。
* [1.x.51]
*
* 这三个 "解决方案 "可以被认为是满足了以下的微分方程。
* [1.x.52]
* 换句话说，它们都是以[2.x.47]为起点的轨迹，并恰好整合了三条准则中的一条的影响。在我们的时间间隔内，这些条款的增量分别是[2.x.49]、[2.x.50]和[2.x.51] 。
* 现在我们可以合理地假设（这是一个近似值！），由于所有这三种效应引起的变化是由三个单独的增量的总和来近似的。
* [1.x.53]
* 这个直觉确实是正确的，尽管这个近似并不精确：准确的左手边和术语[2.x.52]之间的差异（即从[2.x.54]移动到[2.x.55]时准确解[1.x.54]的增量与右手边三部分组成的增量之间的差异），与[2.x.56]成正比。换句话说，这种方法引入了一个大小为[2.x.57]的误差。到目前为止，我们所做的一切都没有在时间或空间上离散化，所以[1.x.55]的误差将是[2.x.58]加上我们在近似积分时犯的任何错误（时间离散化误差）加上我们在近似[2.x.59]的空间依赖关系时犯的任何错误（空间误差）。
* 在我们继续讨论运算符拆分之前，让我们谈谈为什么要这样做？答案很简单。对于[2.x.60]的一些独立方程，我们可能有办法比把所有东西放在一起一次解决更有效地解决它们。例如，在目前的情况下，尤其是与之相关的。[2.x.61]的方程式，即。
* [1.x.56]
* 或等价的。
* [1.x.57]
* 可以准确地解决：方程的解法是
* [1.x.58]
* 如果(i)你把这个解插入微分方程，(ii)意识到[2.x.62]的幅度是常数，即指数中的[2.x.63]项实际上等于[2.x.64]，这就很容易看出。换句话说，[2.x.65]的ODE的解只改变了它的[1.x.59]，但复值函数[2.x.66]的[1.x.60]保持不变。这使得计算[2.x.67]特别方便：我们实际上不需要解决任何ODE，我们可以用手写下解决方案。使用算子拆分方法，没有任何一种计算[2.x.68]的方法需要处理非线性项和所有相关的不愉快：只要我们允许自己使用算子拆分方法，我们就可以摆脱只解决[1.x.61]的问题了。
* 其次，如果不同的项所描述的不同的物理效应具有不同的时间尺度，我们经常使用算子拆分。例如，想象一下，我们确实有某种扩散方程的情况。扩散作用缓慢，但如果[2.x.69]很大，那么[2.x.70]项的 "相位旋转 "作用很快。如果我们把一切都放在一起处理，这就意味着必须采取相当小的时间步长。但是有了算子分割，我们可以对扩散采取大的时间步长[2.x.71]，并且（假设我们没有分析解）使用具有许多小时间步长的ODE求解器来整合从[2.x.73]到[2.x.74]的 "相位旋转 "方程。换句话说，算子分割使我们能够将慢速和快速的时间尺度结合起来，并以不同的方式处理它们，并根据每种情况调整方法。
*

*[1.x.62][1.x.63]


* 虽然上述方法允许并行计算三个贡献[2.x.75]，但如果我们愿意，如果我们不让[2.x.76]的轨迹全部从[2.x.77]开始，而是让[2.x.78]的轨迹从[2.x.79]的[1.x.64]开始，即[2.x.80]，该方法可以变得稍微准确和容易实施。]，而是让[2.x.78]的轨迹从[2.x.79]的轨迹的[1.x.64]开始，即[2.x.80]；同样，我们将从[2.x.81]的轨迹的终点开始，即[2.x.83]。这种方法被称为 "Lie splitting"，其误差顺序与上述方法相同，即分割误差为[2.x.84] 。
* 运算符拆分的这一变化可以写成以下内容（仔细比较初始条件和上面的条件）。
* [1.x.65]
* 显然，虽然上面的公式意味着我们应该以这种特定的顺序来解决这些问题，但首先解决轨迹3，然后是2，然后是1，或任何其他的排列组合也同样有效。
* 然后，这些方程的综合形式是
* [1.x.66]
* 从实用的角度来看，这样做的好处是我们需要保持较少的解向量。一旦[2.x.85]被计算出来，我们就不再需要[2.x.86]了；一旦[2.x.87]被计算出来，我们就不再需要[2.x.88]了。一旦[2.x.89]被计算出来，我们就可以直接称之为[2.x.90]，因为如果你把第一个方程插入第二个方程，然后再插入第三个方程，你会看到[2.x.91]的右手边现在包含所有三个物理效应的贡献。
* [1.x.67]
* 换句话说，Lie拆分法比上述的原始方法简单得多，因为数据处理要简单得多。
*

*[1.x.68][1.x.69] 。


* 如上所述，Lie拆分只具有[2.x.94]的准确性。如果我们使用一阶时间微分，例如使用显式或隐式Eulermethods来解决[2.x.95]的微分方程，这是可接受的。这是因为这些时间积分方法引入了与[2.x.96]本身成正比的误差，因此分割误差与我们无论如何都会引入的误差成正比，并不会减少整体收敛的顺序。
* 但我们通常希望使用更高的阶数
*
* - 例如，[1.x.70]或[1.x.71]方法
*
* 因为这些方法通常不会比简单的欧拉方法更昂贵。如果我们使用[2.x.97]的时隙方法，但由于算子分裂而再次失去准确性，那将是一种耻辱。
*这就是[1.x.72]方法的作用。如果我们只有两部分，就更容易解释，因此让我们把拉普拉斯算子和势的影响合二为一，把相位旋转合二为一。事实上，这就是我们在代码中要做的，因为用拉普拉斯方程求解，无论有无电势，其代价都是一样的。
*
* 所以我们把这两个步骤合并起来）。)上面的Lie拆分方法将做以下工作。它计算出以下两个ODE的解。
* [1.x.73]
*然后使用近似值[2.x.98]。换句话说，我们首先为物理效应一做一个完整的时间步骤，然后为物理效应二做一个完整的时间步骤。在时间步数结束时的解决方案只是分别由这些物理效应引起的增量的总和。
* 相比之下，[1.x.74]（20世纪中期开始的数值分析领域的泰斗之一）发现，先对一个物理效应做一个半步，然后对另一个物理效应做一个全时步，再对第一个物理效应做一个半步，这样更准确。哪个是哪个并不重要，但由于做相位旋转是如此简单，我们将使用这个效应做半步，然后只需要用拉普拉斯算子加电势做一个空间解。这种算子拆分方法现在[2.x.99]是准确的。写在公式中，这产生了以下的步骤序列。
* [1.x.75]
* 如前所述，第一和第三步可以准确地计算出这个特定的方程，得出的结果是
* [1.x.76]
*
* 这就是我们要在这个程序中实现的东西：在每个时间步骤中，我们执行三个步骤，即
*
* - 通过分析整合相位旋转方程的半个时间步长，更新每个节点的解值。
*
* - 解决对应于[2.x.100]的全步骤的时空方程，即[2.x.101]，其初始条件等于上述第一个半步骤的解。
*
* - 通过对相位旋转方程再进行半个时间步长的分析积分，更新每个节点的解值。
* 这一结构将以明显的方式反映在程序的主时间环中。
*


*[1.x.77][1.x.78]


*从上面的讨论中，我们应该清楚，我们在每个时间步长中要解决的唯一部分微分方程是
* [1.x.79]
* 这个方程是线性的。此外，我们只需要解决从[2.x.102]到[2.x.103]的问题，也就是说，正好是一个时间步骤。
* 为了做到这一点，我们将应用二阶精确的Crank-Nicolson方案，我们已经在其他一些时间相关的代码中使用过了（特别是：[2.x.104] 和 [2.x.105] ）。它的内容如下。
* [1.x.80]
* 这里，"先前 "的解决方案[2.x.106]（或这部分时间步骤的 "初始条件"）是第一个阶段旋转半步的输出；当前步骤的输出将用[2.x.107]表示。  [2.x.108]是时间步骤的长度。人们可以争论[2.x.109]和[2.x.110]是生活在时间步长[2.x.111]还是[2.x.112]以及它们的上限值应该是什么。这是一个没有实际影响的哲学讨论，人们可以把[2.x.113]看作是类似于[2.x.114]的东西，而把[2.x.115]看作是[2.x.116]，如果这有助于澄清事情的话。
*
* 不过，[2.x.117]也不能理解为"[2.x.118]之后的第三个时间步骤"，而更像是 "我们已经完成了时间步骤[2.x.119]所需的三分之一的工作"）。)
* 如果我们将整个方程与[2.x.120]相乘，并将未知数[2.x.121]的条款排序到左边，将已知数[2.x.122]的条款排序到右边，那么我们得到以下（空间）偏微分方程，需要在每个时间步长进行求解。
* [1.x.81]
*
*


*[1.x.82][1.x.83]。


* 如上所述，以前处理复值解的教程程序（即[2.x.123]）将解的实部和虚部分开。因此，它把一切都简化为实数运算。与此相反，我们在这里希望保持复数值的东西。
* 这方面的第一部分是，我们需要将离散化的解决方案定义为[2.x.124]，其中[2.x.125]是通常的形状函数（是实值的），但时间步长[2.x.127]的扩展系数[2.x.126]现在是复值的。这在deal.II中很容易做到：我们只需要用[2.x.128]而不是Vector<double>来存储这些系数。
* 更有趣的是如何建立和解决线性系统。显然，这只对上面讨论的Strang拆分的第二步有必要，即上一小节中的时间离散化。我们通过将[2.x.129]直接替换为[2.x.130]并乘以一个测试函数，得到完全离散的版本。
* [1.x.84]
* 或者以更紧凑的方式写。
* [1.x.85]
* 这里，矩阵是以其明显的方式定义的。
* [1.x.86]
* 请注意，所有的矩阵都是对称的、实值的，而且至少是正半无限的，不过对于系统矩阵[2.x.131]和右侧的相应矩阵[2.x.132]来说，显然不是这样的。
*

*[1.x.87][1.x.88] 。


* [2.x.133]
*关于解决程序的唯一剩下的重要问题是如何解决复值线性系统的问题
* [1.x.89]
* 矩阵[2.x.134]的右手边很容易被计算为已知矩阵与上一步骤的解的乘积，像往常一样，这归结为矩阵[2.x.135]具有什么属性的问题。如果它是对称的和正定的，那么我们可以使用共轭梯度法。
* 不幸的是，该矩阵唯一有用的属性是它是复数对称的，即[2.x.136]，回顾一下[2.x.137]都是对称的，就不难发现。然而，它不是[1.x.90]，这就要求[2.x.138]，其中横杠表示完全共轭。
* 复杂的对称性可以被用于迭代求解器，正如快速的文献搜索所显示的那样。我们在这里不会试图变得复杂（实际上是把这个问题留给下面的[1.x.91]部分），而是简单地用老式的好办法来解决没有属性的问题。直接求解器。这不是最好的，特别是对于大问题，但对于一个教程程序来说，这已经足够了。
*

*[1.x.92][1.x.93] 。


* 无法律约束力文书的初始条件通常被选择来代表特定的物理情况。这超出了本程序的范围，但只要说这些初始条件是(i)位于不同点的粒子的波函数的叠加，以及(ii)因为[2.x.139]对应于粒子密度函数，积分[1.x.94]对应于系统中的粒子数。显然，如果要在物理上正确，如果系统是封闭的，[2.x.140]最好是一个常数，如果有吸收边界条件，[2.x.141]则是常数）。重要的一点是，我们应该选择初始条件，使[1.x.95]有意义。
* 我们在这里使用的，主要是因为它的图形很好，如下：[1.x.96]其中[2.x.142]是与（固定）位置[2.x.143]的距离，而[2.x.144]的选择是为了使我们所添加的每个高斯都能为[2.x.145]增加整数的粒子。我们通过确保[1.x.97]是一个正整数来实现这一点。换句话说，我们需要选择[2.x.146]作为[1.x.98]的整数倍，暂时假设[2.x.147]
*
* --当然不是这样的，但我们会忽略积分的微小差异。
* 因此，我们选择[2.x.148]为所有，而[2.x.149]。这个[2.x.150]足够小，以至于精确（无限）积分和[2.x.151]上的积分之间的差异不应该太在意。我们选择[2.x.152]这四个点作为[2.x.153]
*
*--也离[2.x.154]的边界足够远，以保证我们自己的安全。
* 为简单起见，我们在正方形[2.x.155]上提出问题。对于边界条件，我们将使用[1.x.99]形式的时间无关的诺伊曼条件，这不是一个现实的边界条件选择，但对于我们想在这里展示的东西来说是足够的。我们将在下面的[1.x.100]部分对此作进一步评论。
* 最后，我们选择[2.x.156]，势为[1.x.101]，使用一个大的势可以确保波函数[2.x.157]在半径为0.7的圆外保持很小。构成初始条件的所有高斯都在这个圆内，解决方案将主要在这个圆内振荡，有少量的能量辐射到圆外。大势的使用也确保了非物理边界条件不会产生太大影响。
*

* [1.x.102] [1.x.103]。
* [1.x.104] [1.x.105] 程序以通常的包含文件开始，所有这些文件你现在应该都见过了。
*


* [1.x.106]
*
* 然后按照惯例将这个程序的所有内容放入一个命名空间，并将deal.II命名空间导入到我们将要工作的命名空间中。
*


* [1.x.107]
*
* [1.x.108] [1.x.109]。
* 然后是主类。它看起来非常像[2.x.158]或[2.x.159]中的相应类，唯一的例外是，矩阵和向量以及其他所有与线性系统相关的元素现在都存储为[2.x.160]类型，而不仅仅是`double`。
*


* [1.x.110]
*
* [1.x.111] [1.x.112]。


*
* 在我们继续填写主类的细节之前，让我们定义与问题相对应的方程数据，即初始值，以及一个右手类。(我们将重复使用初始条件也用于边界值，我们只是保持边界值不变)。我们使用派生自Function类模板的类来做这件事，这个模板之前已经用过很多次了，所以下面的内容看起来并不令人惊讶。唯一值得注意的是，我们这里有一个复值问题，所以我们必须提供Function类的第二个模板参数（否则会默认为`double`）。此外，`value()`函数的返回类型当然也是复数。   
* 这些函数准确地返回什么，在介绍部分的最后已经讨论过了。
*


* [1.x.113]
*
* [1.x.114] [1.x.115]。


*
* 我们首先指定该类的构造函数的实现。除了我们选择二次（[2.x.161]）拉格朗日元素外，这里没有什么值得惊奇的。
*
* - 解决方案预计是平滑的，所以我们选择了比最低限度更高的多项式度数。
*


* [1.x.116]
*
* [1.x.117] [1.x.118]。


*
* 下一个函数是在程序开始时，也就是在第一个时间步骤之前，设置网格、DoFHandler以及矩阵和向量。如果你已经阅读了至少到[2.x.162]为止的教程程序，那么前几行是相当标准的。
*


* [1.x.119]
*
* 接下来，我们把相关的矩阵组合起来。按照我们对斯特朗分裂的空间步骤（即每个时间步骤中三个部分步骤中的第二个步骤）的Crank-Nicolson离散化的写法，我们被引导到线性系统 [2.x.163] 。换句话说，这里有两个矩阵在起作用
*
*--一个是左手边的，一个是右手边的。我们分别建立这些矩阵。(我们可以避免建立右手边的矩阵，而只是在每个时间步骤中对[2.x.164]形成矩阵的作用*。这可能更有效，也可能不更有效，但是对于这个程序来说，效率并不是最重要的）。)
*


* [1.x.120]
*
* [1.x.121] [1.x.122]。


*
* 在建立了上述所有数据结构后，我们现在可以实现构成斯特朗分裂方案的部分步骤。我们从半步推进阶段开始，这被用作每个时间步骤的第一和最后部分。   
* 为此，回顾一下，对于第一个半步，我们需要计算 [2.x.165] 。这里，[2.x.166]和[2.x.167]是空间的函数，分别对应于前一个完整时间步骤的输出和三个部分步骤中第一个步骤的结果。必须为第三个部分步骤计算相应的解决方案，即[2.x.168] ，其中[2.x.169]是整个时间步骤的结果，其输入[2.x.170]是斯特朗分割的空间步骤的结果。   
* 一个重要的认识是，虽然[2.x.171]可能是一个有限元函数（即，是片状多项式），但对于我们使用指数因子更新相位的 "旋转 "函数来说，情况不一定如此（回顾一下，该函数的振幅在该步骤中保持不变）。换句话说，我们可以在每一个点[2.x.173]计算*[2.x.172]，但我们不能在网格上表示它，因为它不是一个片状多项式函数。在一个离散的环境中，我们能做的最好的事情就是计算一个投影或内插。换句话说，我们可以计算[2.x.174]，其中[2.x.175]是一个投影或内插算子。如果我们选择插值，情况就特别简单。那么，我们需要计算的就是在节点点上的右手边的值*，并将这些作为自由度向量[2.x.176]的节点值。这很容易做到，因为在这里使用的拉格朗日有限元的节点点上评估右手边，需要我们只看节点向量的一个（复值）条目。换句话说，我们需要做的是计算[2.x.177]，其中[2.x.178]在我们解向量的所有条目上循环。这就是下面这个函数的作用
*
* - 事实上，它甚至没有为[2.x.179]和[2.x.180]使用单独的向量，而只是适当地更新同一个向量。
*


* [1.x.123]
*
* 下一步是求解每个时间步骤中的线性系统，即我们使用的斯特朗分割的后半步。记得它的形式是[2.x.181]，其中[2.x.182]和[2.x.183]是我们之前组装的矩阵。   
* 我们在这里解决这个问题的方法是使用直接求解器。我们首先使用[2.x.185]函数求出右边的[2.x.184]，并将结果放入`system_rhs`变量。然后我们调用[2.x.186]，该函数以矩阵[2.x.187]和右手边的向量为参数，并将解决方案返回到同一向量`system_rhs`中。最后一步是将计算出的解放回`solution`变量中。
*


* [1.x.124]
*
* [1.x.125] [1.x.126]。


*
* 我们应该讨论的最后一个辅助函数和类是那些创建图形输出的函数。对Strang分裂的局部和空间部分运行半步和全步的结果是，我们在每个时间步长结束时将`solution`向量[2.x.188]更新为正确值。它的条目包含有限元网格节点上的解的复数。   
* 复数不容易被可视化。我们可以输出它们的实部和虚部，即字段[2.x.189]和[2.x.190]，这正是DataOut类在通过[2.x.191]附加复数向量，然后调用[2.x.192]时所做的。
*

*
*但很多时候，我们对解矢量的实部和虚部并不特别感兴趣，而是对解的幅度[2.x.193]和相位角[2.x.194]等衍生量感兴趣。在这里这样的量子系统的背景下，幅值本身并不那么有趣，相反，"振幅"[2.x.195]才是一个物理属性：它对应于在一个特定的状态场所找到一个粒子的概率密度。将计算出的量放入输出文件的方式，以便于可视化
*
* - 如同在以前众多的教程程序中使用的那样
*
* 是使用DataPostprocessor和派生类的设施。具体来说，一个复数的振幅和它的相位角都是标量，所以DataPostprocessorScalar类是我们要做的正确工具。   
* 因此，我们在这里做的是实现两个类`ComplexAmplitude`和`ComplexPhase`，为DataOut决定生成输出的每一点计算解决方案的振幅[2.x.196]和相位[2.x.197]，以实现可视化。下面有相当多的模板代码，这两个类中的第一个唯一有趣的部分是其`evaluate_vector_field()`函数如何计算`computed_quantities`对象。   
*（还有一个相当尴尬的事实是，[1.x.127]函数并没有计算人们天真的想象，即[2.x.198]，而是返回[2.x.199]。一个标准函数以这样的方式被错误地命名，这当然是相当令人困惑的......)
*


* [1.x.128]
*
* 其中第二个后处理器类计算每一点的复值解决方案的相位角。换句话说，如果我们表示[2.x.200]，那么这个类就会计算[2.x.201]。函数[1.x.129]为我们做这个，并将角度作为[2.x.202]和[2.x.203]之间的一个实数返回。     
* 由于我们将在结果部分详细解释的原因，我们实际上没有在产生输出的每个位置输出这个值。相反，我们取该阶段所有评估点的最大值，然后用这个最大值填充每个评估点的输出域。
*
* 本质上，我们将相位角作为一个片状常数域来输出，其中每个单元都有自己的常数值。一旦你读完下面的讨论就会明白其中的原因。
*


* [1.x.130]
*
* 在如此实现了这些后处理程序后，我们像往常一样创建输出。如同在其他许多时间相关的教程程序中一样，我们给DataOut附加标志，表示时间步数和当前的模拟时间。
*


* [1.x.131]
*
* [1.x.132] [1.x.133]。



* 剩下的步骤是我们如何设置这个程序的整体逻辑。这其实是比较简单的。设置数据结构；将初始条件插值到有限元空间；然后迭代所有时间步长，在每个时间步长上执行斯特朗分割法的三个部分。每隔10个时间步长，我们就生成图形输出。这就是了。
*


* [1.x.134]

* [1.x.135] [1.x.136]。


*
* 其余的部分又是锅炉板，与以前几乎所有的教程程序完全一样。
*


* [1.x.137]
* [1.x.138][1.x.139] 。


*运行代码的结果是屏幕输出如下：``活动单元的数量：4096自由度的数量：16641
*时间步数1在t=0时间步数2在t=0.00390625时间步数3在t=0.0078125时间步数4在t=0.0117188[...]``运行该程序也会产生大量的输出文件，我们将在下面进行展示。
*

*[1.x.140][1.x.141] 。


* 本程序的 "output_results() "函数生成由若干变量组成的输出文件。解（分为实部和虚部）、振幅和相位。如果我们将这四个场可视化，在几个时间步骤后，我们会得到如下图像（在时间[2.x.204]，精确地说。
* [2.x.205]
* 虽然上述解决方案的实部和虚部并不特别有趣（因为从物理角度来看，相位的全局偏移以及实部和虚部之间的平衡是没有意义的），但将解决方案的振幅[2.x.206]和相位[2.x.207]可视化，特别是它们的演变，则更有趣。这就导致了以下的图片。
* 这里显示的相位图显然有一些缺陷。
*
* - 首先，相位是一个 "循环量"，但是色标对接近[2.x.208]的值和接近[2.x.209]的值使用了根本不同的颜色。这是个麻烦的问题
*
* - 我们需要的是一个 "循环色图"，对相位范围的两个极端使用相同的颜色。这样的颜色图是存在的，例如见 [1.x.142] 或 [1.x.143] 。问题是，作者最喜欢的两个大的可视化软件包之一VisIt并没有内置这些颜色图。无奈之下，我只好使用Paraview，因为它已经实现了上面帖子中提到的几种颜色地图。下面的图片使用了`nic_Edge`地图，其中两个极端值都显示为黑色。
*
* - 在相位缠绕的单元格上有一个问题。如果在单元格的某个评估点，相位值接近[2.x.210]，而在另一个评估点则接近[2.x.211]，那么我们真正希望发生的是整个单元格的颜色接近于极端值。但是，相反，可视化程序产生了一个线性插值，其中单元格内的值，即评估点之间的值，是在这两个值之间线性插值的，基本上涵盖了整个可能的相位值范围，因此，在一个单元格的过程中，从深红色到深绿色的整个彩虹色循环往复。解决这个问题的方法是将每个单元的相位值作为一个片断常数输出。因为对接近[2.x.212]和[2.x.213]的值进行平均会导致一个与实际相位角无关的平均值，`ComplexPhase'类只是使用每个单元上遇到的最大*相位角。
* 经过这些修改，现在的相位图看起来如下。
* [2.x.214]
* 最后，我们可以用它来生成一部电影。(准确地说，这段视频又有两个全局细化周期，时间步长是上面程序中使用的一半。)这几行字的作者用VisIt制作了这部电影，因为这是他比较熟悉的，并使用了一个黑客的颜色地图，它也是循环的。
*
* - 尽管这个颜色图缺乏上面链接中提到的写帖子的人所采用的所有技巧。然而，如果你看一下半径为0.7的圆以外的域的阴影部分，它显示了作为波浪方程的解决方案的特点，在这个圆中，电势为零。
*
* 你可以看到每次有一个凸点（显示振幅[2.x.215]）撞到电势大的区域时：一个波从那里向外传播。看看这个视频吧。
* [1.x.144]
*
* 那么，为什么我最终会在电势[2.x.216]较大的区域设置阴影？在那个外部区域，解决方案是相对较小的。它也是相对平滑的。因此，在某种近似程度上，该区域的方程简化为[1.x.145]，或者也许更容易阅读：[1.x.146]在这个近似有效的程度上（除其他外，消除了你在视频中看到的行波），这个方程有一个解[1.x.147因为[2.x.217]很大，这意味着相位的变化相当快*。如果你把注意力放在域的半透明外部，你可以看到这一点。如果你把这个区域的颜色和域的内部一样，这个快速闪烁的外部区域可能是迷幻的，但也会分散内部发生的事情；也很难真正看到辐射波，在视频的开头很容易看到。
*

* [1.x.148][1.x.149][1.x.150] 。


*[1.x.151][1.x.152]


* 这里选择的求解器实在是太简单了。我们在这里所做的是在每一个步骤中把矩阵交给一个稀疏的直接求解器，让它找到线性系统的解。但我们知道，我们可以做得更好。
*
* - 首先，我们应该利用这样一个事实，即矩阵实际上并没有从时间步长到时间步长的变化。这是一个伪命题，因为我们这里有恒定的边界值，而且我们不改变时间步长。
*
* - 这两个假设在实际应用中可能不成立。但至少在这种情况下，只对矩阵进行一次因式分解（即计算一次[2.x.218]和[2.x.219]因子），然后在接下来的所有时间步长中使用这些因子，直到矩阵[2.x.220]发生变化，需要进行新的因式分解。SparseDirectUMFPACK类的接口允许这样做。
*
* - 然而，最终，稀疏直接求解器只对相对较小的问题有效，比如说最多几十万个未知数。除此之外，我们需要迭代求解器，如共轭梯度法（用于对称和正定问题）或GMRES。我们已经在其他教程程序中使用了许多这样的方法。在所有情况下，它们都需要伴随着良好的预处理程序。对于目前的情况，原则上可以使用GMRES
*
* - 一种不需要矩阵的任何特定属性的方法
*
* 但最好是实施一个迭代方案，利用我们知道的这个问题的一个结构特征：矩阵是复数对称的（尽管不是赫米特的）。
*

*[1.x.153][1.x.154]


* 为了能够用于实际的、现实的问题，非线性Schr&ouml;dinger方程的求解器需要利用对手头问题有意义的边界条件。在此，我们将自己限制在简单的诺伊曼边界条件上。
*
* 但这些条件对问题来说实际上是没有意义的。事实上，这些方程通常是在一个无限的域上提出的。但是，由于我们不能在无限域上进行计算，我们需要在某处截断它，而提出对这个人为的小域有意义的边界条件。广泛使用的方法是使用[1.x.155]方法，该方法对应于衰减的一种特殊形式。在不同的情况下，它也被用于[2.x.221]。
*

*[1.x.156][1.x.157] 。


* 最后，我们从经验和其他许多教程程序中知道，使用自适应细化的网格是值得的，而不是这里使用的单网格。事实上，在这里添加网格并不十分困难。它只是需要周期性的重塑和将解决方案从一个网格转移到下一个网格。  [2.x.222]将是一个很好的指南，说明如何实现这一点。
*

* [1.x.158][1.x.159] [2.x.223] 。
* [0.x.1]

