include/deal.II-translator/A-tutorial/step-53_0.txt
[0.x.0]*
 [2.x.0]
* 本教程依赖于 [2.x.1] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13]
* [2.x.2]
* [1.x.14]
* [2.x.3] 这个程序阐述了几何学的概念和实现它的类。这些类被归入[2.x.4]"三角形的流形描述 "的文档模块。更多信息请见那里。
* [2.x.5] 本教程也可作为Jupyter Python笔记本，使用deal.II python接口。该笔记本与原始的C++程序在同一目录下可用。渲染的笔记本也可以在[1.x.15]上查看。
*

*[1.x.16][1.x.17][1.x.18]


* 现实问题的偏微分方程往往是在具有复杂几何形状的领域内提出的。为了提供几个例子，请考虑这些情况。
*
* 在有限元方法的两个最重要的工业应用中，空气动力学和更广泛的流体动力学是其中之一。今天，计算机模拟被用于每架飞机、汽车、火车和船舶的设计。在这些情况下，提出偏微分方程的领域是飞机周围的空气，包括机翼、襟翼和发动机；汽车周围的空气，包括车轮、轮井、后视镜，以及赛车中的各种空气动力设备；火车周围的空气，包括车轮和车厢之间的空隙。在船舶的情况下，领域是船舶周围的水和它的船舵和螺旋桨。
*
* - 有限元方法的另一大应用是结构工程，其领域是桥梁、飞机机舱和机翼以及其他通常形状复杂的实体。
*
* - 有限元建模也经常被用来描述地震波的产生和传播。在这些情况下，人们需要准确表示地壳中断层的几何形状。由于断层相交、倾斜，而且往往不是完全笔直的，所以域经常是非常复杂的。我们可以举出更多的复杂几何形状的例子，在这些例子中，我们要提出并解决一个偏微分方程。这表明，"真实 "的世界比我们在这之前的几乎所有教程程序中所展示的要复杂得多。
* 因此，本程序致力于展示如何通过具体的应用来处理复杂的几何图形。特别是，它所展示的是我们如何使网格符合我们想要解决的领域。另一方面，该程序没有展示的是如何为一个域创建一个粗的。形成粗大网格的过程被称为 "网格生成"，有许多高质量的程序在这方面做得比我们做得更好。然而，deal.II确实有能力读取由网格生成器生成的多种格式的网格，然后通过对网格进行变形或多次细化，使其适合给定形状。deal.II的常见问题页面参考了http://www.dealii.org/provides 网格生成器的资源。
*

*[1.x.19][1.x.20]


* 让我们假设你有一个复杂的领域，并且你已经有一个粗略的网格，以某种方式代表了该领域的一般特征。在两种情况下，有必要向deal.II程序描述你的几何形状的细节。
*
* - 网格细化。每当一个单元被细化时，有必要在三角网中引入新的顶点。在最简单的情况下，我们假设构成三角网的对象是直线段、双线性表面或三线性体。然后，下一个顶点被简单地放在旧顶点的中间。然而，对于弯曲的边界，或者如果我们想解决一个嵌入高维空间的弯曲的低维流形上的PDE，这是不充分的，因为它将不尊重实际的几何。因此，我们必须告诉Triangulation将新的点放在哪里。
*
* - 整合。当使用高阶有限元方法时，经常需要使用边界的曲线近似来计算积分，即把单元的每个边缘或面描述为曲线，而不是直线段或双线性补丁。当然，在积分边界条款时也是如此（例如，不均匀的诺伊曼边界条件）。为了整合的目的，各种Mapping类就提供了从参考单元到实际单元的转换。
* 在这两种情况下，我们都需要一种方法来提供关于单个单元、其面和边的域的几何信息。这就是Manifold类开始发挥作用的地方。Manifold是一个抽象的基类，它只定义了一个接口，Triangulation和Mapping类可以通过这个接口查询域的几何信息。从概念上讲，Manifold看待世界的方式与数学分支学科几何学看待世界的方式并无二致：域本质上只是一个点的集合，它被赋予了点之间距离的概念，这样我们就可以在其他一些点的 "中间 "获得一个点。
* deal.II提供了一些实现Manifold所提供的接口的类，用于各种常见的几何形状。另一方面，在这个程序中，我们将只考虑一个非常常见和简单得多的情况，即我们要解决的域的（一部分）可以通过转换一个更简单的域（我们将称之为 "参考域"）来描述的情况。图表是由一个平滑函数描述的，该函数从较简单的域映射到图表（"前推 "函数）及其逆向（"后拉 "函数）。如果域作为一个整体不是一个图表（例如，一个球体的表面），那么它通常可以被描述为一个图表的集合（例如，北半球和南半球各自是一个图表），然后域可以由一个[1.x.22]描述。
* 如果一个领域可以被分解成一个图集，我们需要做的就是为每个图集提供拉回和推回函数。在deal.II中，这意味着提供一个从ChartManifold派生的类，而这正是我们在这个程序中要做的。
*

*[1.x.23][1.x.24]


* 为了说明如何在deal.II中使用图表描述几何形状，我们将考虑一个源于[1.x.25]的应用的案例，使用D. Sarah Stamps提供的数据集。在这个具体的应用中，我们对描述[1.x.26]下的地幔流动感兴趣，这是一个两个大陆板块漂移的区域。不拐弯抹角，我们想要描述的几何形状是这样的。
* [2.x.6]
* 特别是，虽然你在这里看不到，但顶面不仅仅是被海拔所染，事实上，它是按照正确的地形而变形的。我们感兴趣的领域是地球的一部分，范围从表面到500公里深，从格林威治子午线以东26度到35度，从赤道以北5度到南10度。
* 对几何学的这一描述建议从一个盒子[2.x.7]开始（以度、度和米为单位），并提供一个地图[2.x.8]，以便[2.x.9]，其中[2.x.10]是我们寻找的领域。  然后[2.x.11]是一个图表，[2.x.12]是回拉运算符，[2.x.13]是前推运算符。如果我们需要一个点[2.x.14]是其他点[2.x.15]的 "平均值"，ChartManifold类首先应用回拉运算得到[2.x.16]，将其平均到一个点[2.x.17]，然后计算出[2.x.18]。
* 因此我们的目标是实现一个描述[2.x.19]和[2.x.20]的类。如果地球是一个球体，那么这并不困难：如果我们用[2.x.21]指出[2.x.22]的点（即向东计算的经度，向北计算的纬度，以及相对于零深度的高度），那么[1.x.27]提供直角坐标系的坐标，其中[2.x.23]是球体的半径。然而，地球不是一个球体。
* [2.x.24] [2.x.25]它在两极是扁平的，在赤道上较大：半主轴比半次轴长约22公里。我们将使用[1.x.28]的地球形状参考标准来说明这一点。WGS 84中使用的公式是[1.x.29]，其中[2.x.26]，半径和椭圆度由[2.x.27]给出，以获得直角坐标的位置。在这个公式中，我们假设正弦和余弦的参数是以度数而不是弧度来计算的（尽管我们将不得不在代码中改变这个假设）。
* [2.x.28] 它有山脉和山谷形式的地形。我们将使用真实的地形数据来说明这一点（见下文对这些数据来源的描述）。使用这个数据集，我们可以在地球表面的经纬度网格上查找高程。从方框[2.x.29]开始，我们将首先在垂直方向上拉伸它，然后再交给WGS 84函数：如果[2.x.30]是经度[2.x.31]和纬度[2.x.32]的高度，那么我们定义[1.x.30] 使用这个函数，方框[2.x.33]的顶部表面被移到正确的地形，底部表面保持原状，中间的点被线性内插。[2.x.34]
* 使用这两个函数，我们就可以将整个前推函数[2.x.35]定义为[1.x.31]此外，我们还必须定义这个函数的逆函数，即拉回操作，我们可以写成[1.x.32]我们可以通过反转上面的公式得到这个函数的一个组成部分：[1.x.33]计算[2.x.36]也是可能的，尽管要麻烦很多。我们不会在这里展示这个公式，而只是提供程序中的实现。
*

*[1.x.34][1.x.35]


* 在这个程序中，我们需要解决一些问题。在最大范围内，我们需要编写一个实现ChartManifold接口的类。这涉及到一个函数[2.x.37]，该函数在参考域[2.x.38]中取一个点，并使用上面概述的函数[2.x.39]将其转换为实空间，以及实现[2.x.41]的反函数[2.x.40]。我们将在下面的[2.x.42]类中这样做，该类本质上看起来像这样。
* [1.x.36]
*
* 上面的变换有两个部分：WGS 84变换和地形变换。因此，[2.x.43]类将有额外的（非虚拟的）成员函数[2.x.44]和[2.x.45]来实现这两部分，以及相应的回拉函数。
* WGS 84的转换函数不是特别有趣（尽管它们实现的公式令人印象深刻）。更有趣的部分是地形变换。回顾一下，为此我们需要评估高程函数[2.x.46]。当然，这没有公式。地球就是这样，人们能做的最好的事情就是从一些表格中查找海拔高度。事实上，这就是我们要做的。
* 我们使用的数据最初是由[1.x.37]创建的，从美国地质调查局（USGS）下载，由D. Sarah Stamps处理，他还编写了WGS 84转换函数的初始版本。这样处理过的地形数据被储存在一个文件[2.x.47]中，解压后看起来像这样。
* [1.x.38]
* 数据的格式为[2.x.48]，其中前两栏以赤道以北的度数和格林威治子午线以东的度数提供。最后一列是以WGS 84零点以上的米数为单位。
* 在转换函数中，我们需要对给定的经度[2.x.50]和纬度[2.x.51]评估[2.x.49]。一般来说，这个数据点是不可用的，我们将不得不在相邻的数据点之间进行插值。编写这样一个插值程序并不特别困难，但它有点乏味和容易出错。幸运的是，我们可以以某种方式将这个数据集塞进一个现有的类中。[2.x.52] .不幸的是，这个类并不完全适合，所以我们需要绕过它。问题来自于我们初始化这个类的方式：在其最简单的形式下，它需要一个数值流，它假定这些数值在[2.x.53]平面（或者，这里是[2.x.54]平面）上形成一个等距的网格。这就是它们在这里的作用，有点像：它们的顺序是纬度第一，经度第二；更尴尬的是，第一列从最大的数值开始往下数，而不是通常的其他方式。
* 现在，虽然教程程序是为了说明如何用deal.II编码，但它们不一定要满足与生产代码相同的质量标准。在生产代码中，我们会写一个函数来读取数据，并(i)自动确定第一列和第二列的范围，(ii)自动确定每个方向的数据点的数量，(iii)无论数据排列的顺序如何，都要进行插值，如果有必要的话，在读取和提交给[2.x.55]类之间切换顺序。
* 另一方面，辅导课程最好是简短的，并展示关键点，而不是停留在不重要的方面，从而掩盖了我们真正想要展示的东西。因此，我们将允许自己有一点回旋余地。
*
* - 由于这个程序只针对东非裂谷地区的特定几何形状，而且这正是数据文件所描述的区域，我们将在程序中硬编码，即有[2.x.56]个数据。
*
* - 我们将硬编码数据的边界 [2.x.57] 。
*
* - 我们将对[2.x.58]类说谎：该类将只看到该数据文件最后一列的数据，我们将假装数据的排列方式是：在第一坐标方向有1139个数据点，这些数据点按[1.x.39]的顺序排列，但在一个区间[2.x.59]（不是否定的边界）。然后，当我们需要查询一个纬度[2.x.60]的东西时，我们可以向内插表类索取一个位于[2.x.61]的值。有了这个小技巧，我们就可以避免在从文件中读取数据的时候切换顺序。
* 所有这些然后调用一个类，基本上看起来像这样。
* [1.x.40]
*
* 注意[2.x.62]函数如何否定了纬度。它也从我们在其他地方使用的格式[2.x.63]切换到表格中使用的纬度-经度格式。最后，它的参数以弧度为单位，因为我们在程序中的其他地方也是这样做的，但随后将它们转换为用于表格查询的基于度的系统。正如你在下面的实现中所看到的，这个函数还有几个（静态）成员函数，我们将在初始化[2.x.64]成员变量时调用：这个变量的类类型有一个构造函数，允许我们在构造时设置好一切，而不是在以后填充数据，但这个构造函数需要一些不能就地构造的对象（至少在C++98中不能）。因此，我们想在初始化中传递的每个对象的构造都发生在一些静态成员函数中。
* 在讨论了我们想要实现的东西的大体轮廓之后，让我们进入程序并展示它在实践中是如何完成的。
*

* [1.x.41] [1.x.42]。
* 让我们从这里需要的包含文件开始。很明显，我们需要描述三角形的文件（ [2.x.65] ），以及允许我们创建和输出三角形的文件（ [2.x.66] 和 [2.x.67] ）。此外，我们还需要声明Manifold和ChartManifold类的头文件，我们将需要这些类来描述几何图形（[2.x.68]）。然后我们还需要以下头文件中的[2.x.69]函数；这个函数的用途将在我们使用它的时候讨论。
*


* [1.x.43]
*
* 其余的包含文件与读取地形数据有关。正如介绍中所解释的，我们将从一个文件中读取它，然后使用下面头文件中第一个声明的[2.x.70]类。因为数据很大，所以我们读取的文件是以gzip压缩数据的形式存储的，我们利用BOOST提供的一些功能，直接从gzip压缩数据中读取。
*


* [1.x.44]
*
* 上事的最后部分是打开一个命名空间，把所有东西都放进去，然后把dealii命名空间导入其中。
*


* [1.x.45]
*
* [1.x.46] [1.x.47]。
* 这个程序的第一个重要部分是描述地形的类[2.x.71]，它是经度和纬度的函数。正如在介绍中所讨论的，我们在这里将使我们的生活更容易一些，不以最普遍的方式来写这个类，而只为我们在这里感兴趣的特殊目的来写：插值从一个非常具体的数据文件中获得的数据，该文件包含了我们知道其范围的世界上的一个特定地区的信息。   
* 上面已经讨论了这个类的总体布局。下面是它的声明，包括我们在初始化[2.x.72]成员变量时需要的三个静态成员函数。
*


* [1.x.48]
*
* 让我们来看看这个类的实现。这个类的有趣部分是构造函数和[2.x.73]函数。前者初始化了[2.x.74]成员变量，我们将使用这个构造函数，它要求我们传入我们要插值的二维数据集的端点（这里是由间隔[2.x.75]，使用介绍中讨论的切换端点的技巧，以及[2.x.76]，都是以度数给出的），数据被分割成的区间数（纬度方向379，经度方向219，总共[2.x.77]个数据点），以及一个包含数据的表对象。然后，数据的大小当然是[2.x.78]，我们通过提供一个迭代器给下面[2.x.80]函数返回的[2.x.79]对象的83,600个元素中的第一个来初始化它。请注意，我们在这里调用的所有成员函数都是静态的，因为(i)它们不访问类的任何成员变量，(ii)因为它们是在对象没有完全初始化的时候调用的。
*


* [1.x.49]

* 其他唯一比较有兴趣的函数是[2.x.81]函数。它返回一个临时向量，包含所有描述海拔的83,600个数据点，并从文件中读取 [2.x.82] 。因为该文件被gzip压缩了，我们不能直接通过[2.x.83]类型的对象来读取它，但是在BOOST库中有一些方便的方法（见http://www.boost.org），允许我们从压缩文件中读取，而不必先在磁盘上解压。其结果是，基本上，只是另一个输入流，就所有的实际目的而言，看起来就像我们一直使用的那些输入流。   
* 读取数据时，我们读取三栏，但忽略前两栏。最后一列中的数据被附加到我们返回的数组中，该数组将被复制到初始化[2.x.84]的表格中。由于BOOST.iostreams库在输入文件不存在、不可读或不包含正确的数据行数时没有提供一个非常有用的异常，我们捕捉它可能产生的所有异常，并创建我们自己的异常。为此，在[2.x.85]子句中，我们让程序运行到一个[2.x.86]语句。由于条件总是假的，这总是会触发一个异常。换句话说，这相当于写了[2.x.87]，但它也填补了异常对象中的某些字段，这些字段以后将被打印在屏幕上，识别出发生异常的函数、文件和行。
*


* [1.x.50]
*
* 创建一个流，我们从压缩的数据中读取
*


* [1.x.51]
*
* [1.x.52] [1.x.53].
* 下面这个类是这个程序的主要类。它的结构已经在介绍中详细描述过了，不需要再多做介绍。
*


* [1.x.54]
*
* 如果你读过介绍，其实现也是非常直接的。特别是，回拉和前推函数都只是WGS 84和地形图映射各自函数的串联。
*


* [1.x.55]
*
* 下一个函数是Manifold基类的接口所要求的，它允许克隆AfricaGeometry类。注意，虽然该函数返回一个[2.x.88]，但我们在内部创建了一个`unique_ptr<AfricaGeometry>`。换句话说，这个库需要一个指向基类的指针，我们通过创建一个指向派生类的指针来提供这个指针。
*


* [1.x.56]
*
* 下面两个函数就定义了对应于地球WGS84参考形状的正向和反向变换。正向转换遵循介绍中的公式。反变换要复杂得多，至少不是直观的。它还存在一个问题，即它返回的角度在函数结束时我们需要将其夹回区间[2.x.89]，如果它应该从那里逃出来。
*


* [1.x.57]
*
* 与此相反，地形变换完全遵循介绍中的描述。因此，没有什么可补充的。
*


* [1.x.58]
*
* [1.x.59] [1.x.60].
* 在描述了几何体的属性之后，现在是处理用于离散它的网格的时候了。为此，我们为几何体和三角形创建对象，然后继续创建一个与参考域[2.x.91]相对应的[2.x.90]矩形网格。我们选择这个数目的细分，因为它导致了细胞大致上像立方体，而不是在某个方向上被拉伸。   
* 当然，我们实际上对参考域的网格划分不感兴趣。我们感兴趣的是对真实域的网格划分。因此，我们将使用[2.x.92]函数，它只是根据一个给定的变换来移动三角形的每个点。它想要的变换函数是一个将参考域中的一个点作为其单一参数并返回我们想要映射到的域中的相应位置的函数。当然，这正是我们使用的几何学的前推函数。我们用一个lambda函数来包装它，以获得转换所需的那种函数对象。
*


* [1.x.61]
*
* 下一步是向三角计算说明，在细化网格时，只要需要一个新的点，就使用我们的几何对象。我们通过告诉三角计算对所有流形指示器为0的物体使用我们的几何体，然后继续用流形指示器0标记所有单元及其边界面和边。这确保了三角计算在每次需要新的顶点时都会参考我们的几何对象。由于流形指标是由母体继承给子体的，这也会在几个递归细化步骤之后发生。
*


* [1.x.62]
*
* 最后一步是在最初的[2.x.93]粗略网格之外细化网格。我们可以在全局范围内细化若干次，但由于本教程程序的目的，我们实际上只对靠近表面的情况感兴趣，我们只是对所有在边界上有一个指标为5的面的单元细化6次。在我们上面使用的[2.x.94]函数的文档中查找，发现边界指标5对应于域的顶面（这就是上面调用[2.x.96]的最后一个[2.x.95]参数的含义：通过给每个边界分配一个独特的边界指标来给边界 "着色"）。
*


* [1.x.63]
*
* 做完这一切后，我们现在可以将网格输出到一个自己的文件中。
*


* [1.x.64]
*
* [1.x.65] [1.x.66]。


*
* 最后是主函数，它遵循从[2.x.97]开始的所有教程程序中使用的相同方案。这里没有什么可做的，只是调用单一的[2.x.98]函数。
*


* [1.x.67]
* [1.x.68][1.x.69] 。


* 运行程序会产生一个网格文件[2.x.99]，我们可以用任何可以读取VTU文件格式的常用可视化程序来进行可视化。如果只看网格本身，实际上很难看到任何不只是看起来像一块完全圆形的球体的东西（尽管如果修改程序，使其确实产生一个球体并同时观察它们，整体球体和WGS 84形状之间的差异是相当明显的）。显然，地球实际上是一个相当平坦的地方。当然，我们已经从卫星图片中知道了这一点。然而，我们可以通过对细胞的体积进行着色来找出更多东西。这既产生了顶层表面的轻微色调变化，也为可视化程序提供了应用其着色算法的东西（因为单元的顶层表面现在不再只是与球体相切，而是倾斜的）。
* [2.x.100]
* 然而，至少就可视化而言，这仍然不是太令人印象深刻。相反，让我们用一种可视化的方式来显示沿顶面的实际海拔。换句话说，我们想要一张像这样的图片，有大量的细节。
* [2.x.101]
* 这张图片的放大显示了垂直方向的位移（这里，从西-西北方向看裂谷，[1.x.70]、[1.x.71]和[1.x.72]的三座山峰在[1.x.73]、[1.x.74]和向[1.x.75]的巨大平坦处）。
* [2.x.102]


* 这些图片是经过三个小的修改后产生的。[2.x.103] [2.x.104] 这两张图片中的第一张在顶面增加了第七个网格细化，第二张总共增加了九个。在第二张图片中，水平方向的网格大小约为1.5km，垂直方向的网格大小略低于1km。(这张图也是用一个更有分辨率的数据集制作的；但是，它太大了，不能作为教程的一部分分发)。
* [2.x.105] 增加了以下函数，即给定一个点[2.x.106]，通过将该点转换为参考WGS 84坐标并只保留深度变量来计算海拔高度（因此，该函数是[2.x.107]函数的简化版本）。
* [1.x.76]
*
* [2.x.108] 在[2.x.109]函数的底部增加以下一块。
* [1.x.77]
* [2.x.110] 这最后一段代码首先在网格上创建一个[2.x.111]有限元空间，然后（ab）使用[2.x.112]来评估顶部边界（边界指示器为5的节点）的levation函数。我们在这里用ScalarFunctionFromFunctionObject类来包装对[2.x.113]的调用，使一个普通的C++函数看起来像一个派生自Function类的对象，我们想在[2.x.114]中使用该类。然后，这个向量像往常一样用DataOut输出，并可以像上面所示那样可视化。
*

*[1.x.78][1.x.79] 。


* 如果你放大上图所示的网格并仔细观察，你会发现在悬空节点处，连接悬空节点的两条小边与相邻单元的大边的位置不完全相同。这可以通过使用不同的表面描述来更清楚地显示出来，在这种描述中，我们放大了垂直地形以增强效果（由Alexander Grayver提供）。
* [2.x.116]
* 那么这里发生了什么？部分地，这只是可视化的结果，但也有一个潜在的真实原因。
* [2.x.117] [2.x.118] 当你使用任何一个常见的可视化程序对网格进行可视化时，它们真正显示的只是一组在三维空间中被绘制成直线的边缘。这是因为几乎所有用于可视化的数据文件格式都只将六面体单元描述为三维空间中八个顶点的集合，而不允许进行任何更复杂的描述。这就是为什么[2.x.119]需要一个可以设置为大于1的参数的主要原因）。这些线性边缘可能是你进行实际计算的单元格的边缘，也可能不是，这取决于你在使用FEValues进行积分时使用何种映射。当然，在默认情况下，FEValues使用的是线性映射（即MappingQ1类的对象），在这种情况下，一个3D单元确实完全由其8个顶点描述，它所填充的体积是这些点之间的三线插值，从而产生了线性边缘。但是，你也可以使用三次方、三次立方、甚至更高阶的映射，在这些情况下，每个单元的体积将由二次方、三次方或高阶多项式曲线来限定。然而，你只能在可视化程序中看到这些带有线性边缘的曲线，因为如前所述，文件格式不允许描述单元的真实几何形状。
* [2.x.120] 也就是说，为了简单起见，让我们假设你确实在使用三线性映射，那么上面显示的图像就是你形成积分的单元的忠实代表。在这种情况下，一般来说，悬空节点上的小单元并不与大单元紧密贴合，而是留有空隙或可能与大单元相交。这是为什么呢？  因为当三角测量需要在它想要细化的边缘上增加一个新的顶点时，它会询问流形描述这个新的顶点应该在哪里，流形描述通过（在从ChartManifold派生的几何体的情况下）将线的相邻点拉回到参考域，平均它们的位置，并将这个新的位置推到真实域，从而适当地返回这样一个点。但是这个新的位置通常不是沿着相邻顶点之间的直线（在实空间），因此，形成精炼边的两条小直线并不完全位于形成悬挂节点的未精炼边的一条大直线上。[2.x.121]
* 如果你使用一个使用MappingQ类的高阶映射，情况会稍微复杂一些，但没有根本性的不同。让我们暂且以aquadratic映射为例（即使是高阶映射也没有什么根本的变化）。那么你需要把你所整合的单元格的每条边想象成一条二次曲线，尽管你实际上不会看到可视化程序以这种方式来绘制。但是，请先想象一下。那么，MappingQ采用哪条二次曲线呢？它是经过边缘末端的两个顶点以及中间的一个点的二次曲线，它从流形中查询。在未精炼一侧的长边的情况下，这当然正是悬挂节点的位置，所以描述长边的二次曲线确实经过了悬挂节点，这与线性映射的情况不同。但是两条小边也是二次曲线；例如，左边的小边将穿过长边的左顶点和悬挂节点，再加上它从流形中查询到的一个点。因为，如前所述，流形沿左小边中途返回的点很少完全在描述长边的二次曲线上，二次短边通常不会与二次长边的左半边重合，而右短边也是如此。换句话说，大单元的几何形状和它的小邻居在悬挂的节点上并不紧密地接触。
* 这一切引出了两个问题：第一，这是否重要；第二，这是否可以被修复。让我们在下文中讨论这些问题。
* [2.x.122] [2.x.123] 这重要吗？几乎可以肯定的是，这取决于你所求解的方程。例如，众所周知，在复杂几何体上求解气体动力学的欧拉方程需要高度精确的边界描述，以确保衡量靠近边界的流动的量的收敛性。另一方面，具有椭圆成分的方程（如拉普拉斯方程或斯托克斯方程）通常对这些问题比较宽容：无论如何都要做正交来近似积分，鉴于每个悬空节点的重叠或间隙的体积只有[2.x.124]，进一步近似几何可能不会像人们担心的那样造成伤害。]，即使是线性映射，对于度数[2.x.126]的映射，也只有[2.x.125]。 你可以通过考虑以下情况来了解：在2D中，间隙/重叠是一个三角形，底[2.x.127]，高[2.x.128]；在3D中，它是一个金字塔状结构，底面积[2.x.129]，高[2.x.130] 。类似的考虑也适用于高阶映射，其中间隙/重叠的高度为 [2.x.131] .)换句话说，如果你使用线性元素的线性映射，你所积分的体积的误差已经与使用通常的高斯正交的积分误差处于同一水平。当然，对于高阶元素，人们必须选择匹配的映射对象。
* 关于为什么可能不值得过分担心这个问题的另一个观点是，在数值分析界肯定没有人说这些问题是使用复杂几何体时需要注意的主要问题。如果在从业人员中似乎并不经常讨论这个问题，如果有的话，那么它至少不是人们认定的一个普遍问题。
* 这个问题与在弯曲的边界上有悬挂的节点没有什么不同，边界的几何描述通常将悬挂的节点拉到边界上，而大的边缘仍然是直的，使得相邻的小单元和大单元不能相互匹配。虽然这种行为从一开始就存在于deal.II中，在流形描述出现之前的15年，但在邮件列表的讨论或与同事的交谈中，它从未出现过。
* [2.x.132]它可以被修复吗？原则上是的，但这是一个复杂的问题。让我们暂时假设我们只使用MappingQ1类，即线性映射。在这种情况下，每当三角化类需要沿一条将成为悬空节点的边建立一个新的顶点时，它就会直接取相邻顶点的平均值[1.x.80]，也就是说，不问流形的描述。这样一来，该点就位于长直边上，两条短直边将与一条长直边匹配。只有当所有相邻的单元都被细化，并且该点不再是一个悬挂的节点时，我们才会用通过流形得到的坐标来替换它的坐标。这在实现上可能比较困难，但肯定是可以的。
* 更复杂的问题出现了，因为人们可能想使用更高阶的MappingQ对象。在这种情况下，Triangulation类可以自由选择悬挂节点的位置（因为长边的二次曲线可以选择通过悬挂节点的方式），但是MappingQ类在确定中边点的位置时，必须确保如果该边是相邻的较粗单元的长边的一半，那么中点不能从流形中得到，而必须沿着长的二次边选择。对于立方体（和所有其他奇数）映射，这个问题又有点复杂了，因为人们通常安排立方体边沿着边的1/3和2/3点走，因此必然要通过悬挂的节点，但这可能是可以解决的。在任何情况下，即使如此，这也有两个问题。
*


*


*
* - 在细化三角函数时，三角函数类不能知道将使用什么映射。事实上，在同一个程序中，一个三角函数在不同的环境中被使用的情况并不少见。如果使用的映射决定了我们是否可以自由选择一个点，那么，三角剖分应该如何定位新的顶点？
*


*


*
* - 映射是纯粹的局部构造：它们只对孤立的单元起作用，而这正是有限元方法的重要特征之一。要问一条边上的一个顶点是否是悬空节点，需要查询一个单元的邻域；此外，这样的查询不只是涉及3D中一个单元的6个面的邻域，而是可能需要遍历与一条边相连的其他大量的单元。即使可以做到这一点，人们仍然需要根据邻域的样子做不同的事情，产生的代码可能非常复杂，难以维护，而且可能很慢。
* 因此，至少在目前，这些想法都没有被实施。这导致了不连续的几何形状的不良后果，但是，正如上面所讨论的，这种影响在实际应用中似乎并不构成问题。
* [2.x.133]
*

* [1.x.81][1.x.82] [2.x.134] 。
* [0.x.1]

