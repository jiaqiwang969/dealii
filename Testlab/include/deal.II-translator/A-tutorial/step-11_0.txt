include/deal.II-translator/A-tutorial/step-11_0.txt
[0.x.0]*
 [2.x.0] 
* 本教程依赖于 [2.x.1] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5]
* [1.x.6][1.x.7][1.x.8] 。
 

* 我们要考虑的问题是拉普拉斯问题的解，只需满足纽曼边界条件：[1.x.9] 。
* 众所周知，如果这个问题要有一个解决方案，那么力需要满足兼容性条件[1.x.10]我们将考虑这样的特殊情况：[2.x.2]是围绕原点的半径为1的圆，而[2.x.3] ，[2.x.4]。这种选择满足了兼容性条件。
* 兼容性条件允许上述方程的解，但它仍然保留了一个模糊性：因为只有解的导数出现在方程中，解只确定到一个常数。出于这个原因，我们必须为数字解提出另一个条件，以固定这个常数。
* 对于这一点，有多种可能性。[2.x.5] [2.x.6] 将离散化的一个节点固定为零或任何其他固定值。 这相当于一个附加条件 [2.x.7] 。虽然这是常见的做法，但不一定是个好主意，因为我们知道拉普拉斯方程的解只在 [2.x.8] 中，它不允许定义点值，因为它不是连续函数的一个子集。因此，即使对离散函数允许固定一个节点，但对连续函数却不允许，在数值解的这一点上，人们常常可以看到由此产生的错误尖峰。
* [2.x.9] 将域上的均值固定为零或任何其他值。这在连续水平上是允许的，因为[2.x.10]是由Sobolev不等式决定的，因此在离散水平上也是如此，因为我们只考虑[2.x.11]的子集。
* [2.x.12] 将域的边界上的均值固定为零或任何其他值。这在连续水平上也是允许的，因为 [2.x.13] ，同样由Sobolev的不等式。[2.x.14] 我们将选择最后一种可能性，因为我们想用它来证明另一种技术。
* 虽然这描述了要解决的问题，但我们仍然要弄清楚如何实现它。基本上，除了额外的均值约束，我们已经解决了这个问题好几次，使用的是迪里希特边界值，我们只需要放弃对迪里希特边界节点的处理。高阶映射的使用也是相当微不足道的，我们将在使用它的各个地方进行解释；在几乎所有可以想象的情况下，你只会把描述映射的对象视为一个黑盒子，你不需要担心，因为它们的唯一用途似乎是被传递到库中深处的地方，那里的函数知道如何处理它们（即在[2.x.15]类及其后代中）。
* 这个程序中最棘手的一点是对均值约束的使用。幸运的是，库中有一个知道如何处理这种约束的类，我们已经经常使用它了，没有提到它的通用性。请注意，如果我们假设边界节点沿边界等距分布，那么均值约束[1.x.11]可以写成[1.x.12]，其中总和应在位于计算域边界的所有自由度指数上运行。让我们用[2.x.16]表示边界上数字最小的指数（或者任何其他方便选择的指数），那么这个约束也可以用[1.x.13]来表示，幸运的是，这正是AffineConstraints类所设计的约束形式。请注意，我们在之前的几个例子中使用了这个类来表示悬空节点的约束，它也有这种形式：在这里，中间的顶点应该有相邻顶点的平均值。一般来说，AffineConstraints类被设计用来处理形式为[1.x.14]的affine约束，其中[2.x.17]表示一个矩阵，[2.x.18]表示一个向量，而[2.x.19]是节点值的向量。在这种情况下，由于[2.x.20]代表一个同质约束，[2.x.21]是零向量。
* 在这个例子中，沿边界的均值允许这样的表述，[2.x.22]是一个只有一行的矩阵（即只有一个约束）。在实现中，我们将创建一个AffineConstraints对象，添加一个指向第一个边界节点[2.x.23]的约束（即在矩阵中添加另一行），并插入所有其他节点贡献的权重，在这个例子中刚好是[2.x.24] 。
* 稍后，我们将使用这个对象来消除线性方程组中的第一个边界节点，将其还原为一个没有常数偏移值的解。实施过程中的一个问题是，明确消除这个节点会导致矩阵中出现一些额外的元素，而我们事先并不知道这些元素的位置，也不知道矩阵的每一行中会有多少额外条目。我们将展示我们如何使用一个中间对象来解决这个问题。
* 现在我们来看看解决这个问题的程序的实现......
* 

* [1.x.15] [1.x.16]
* 像往常一样，这个程序以一个相当长的包含文件列表开始，你现在可能已经习惯了。
 

 
* [1.x.17]
* 
* 只有这个文件是新的：它声明了一个DynamicSparsityPattern类，我们将在下面进一步使用和解释它。
* 

* 
* [1.x.18]
* 
* 我们将利用C++标准库的[2.x.25]算法，所以我们必须包括以下文件来声明它。
* 

* 
* [1.x.19]
* 
* 最后一步和以前所有的程序一样。
* 

* 
* [1.x.20]
* 
* 然后我们声明一个表示拉普拉斯问题解决方案的类。由于这个例子程序是基于[2.x.26]的，这个类看起来相当相同，唯一的结构性区别是函数[2.x.27]本身，因此被称为[2.x.28]，而且输出函数被删除了，因为解函数太无聊了，不值得被查看。  
* 其他唯一值得注意的变化是，构造函数取一个值，代表以后要使用的映射的多项式程度，而且它还有一个成员变量，正好代表这个映射。一般来说，这个变量在实际应用中会出现在声明或使用有限元的相同地方。
* 

* 
* [1.x.21]
* 
* 构建这样一个对象，通过初始化变量。在这里，我们使用线性有限元（[2.x.29]变量的参数表示多项式程度），以及给定阶数的映射。将我们要做的事情打印到屏幕上。
* 

* 
* [1.x.22]
* 
* 第一个任务是为这个问题设置变量。这包括生成一个有效的[2.x.30]对象，以及矩阵的稀疏模式，还有代表边界上自由度平均值为零的约束条件的对象。
* 

* 
* [1.x.23]
* 
* 第一个任务是微不足道的：生成一个自由度的枚举，并将解和右手向量初始化为正确的大小。
* 

* 
* [1.x.24]
* 
* 下一个任务是构建代表约束的对象，即边界上自由度的平均值应为零。为此，我们首先需要一个实际在边界上的节点的列表。[2.x.31]命名空间有一个函数可以返回一个IndexSet对象，该对象包含所有在边界上的自由度的指数。    
* 一旦我们有了这个索引集，我们想知道哪个是边界上自由度对应的第一个索引。我们需要这个，因为我们想通过边界上所有其他自由度的值来约束边界上的一个节点。使用IndexSet类很容易得到这个 "第一个 "自由度的索引。
* 

* 
* [1.x.25]
* 
* 然后生成一个只有这一个约束的约束对象。首先清除所有以前的内容（这些内容可能来自以前在更粗的网格上的计算），然后添加这一行，将[2.x.32]约束到其他边界DoF的总和，每个DoF都有权重
* 
* - . 最后，关闭约束对象，也就是说，对它做一些内部记录，以便更快地处理后面的内容。
* 

* 
* [1.x.26]
* 
* 下一个任务是生成一个稀疏模式。在这里，这的确是一个棘手的任务。通常情况下，我们只需调用[2.x.33]并使用悬挂节点约束来浓缩结果。我们在这里没有悬挂节点约束（因为我们在这个例子中只进行全局细化），但是我们在边界上有这个全局约束。在这种情况下，这带来了一个严重的问题：[2.x.34]类希望我们事先说明每行的最大条目数，可以是所有行的，也可以是每行单独的。在库中有一些函数可以告诉你这个数字，如果你只有悬空的节点约束（即[2.x.35]，但这对现在的情况来说是怎样的？困难的出现是因为消除约束的自由度需要在矩阵中增加一些条目，而这些条目并不那么容易确定。因此，如果我们在这里给出每行的最大条目数，我们就会有一个问题。    
* 由于这可能非常困难，以至于无法给出合理的答案，只允许分配合理的内存量，因此有一个动态稀疏模式（DynamicSparsityPattern）类，可以帮助我们解决这个问题。它不要求我们事先知道行可以有多少个条目，而是允许任何长度。因此，在你对行的长度没有很好的估计的情况下，它明显更灵活，但是代价是建立这样一个模式也比建立一个你事先有信息的模式要昂贵得多。尽管如此，由于我们在这里没有其他选择，我们将建立这样一个对象，用矩阵的尺寸初始化它，并调用另一个函数[2.x.36]来获得由于微分算子而产生的稀疏模式，然后用约束对象浓缩它，在稀疏模式中增加那些消除约束所需的位置。
* 

* 
* [1.x.27]
* 
* 最后，一旦我们有了完整的模式，我们就可以从中初始化一个[2.x.37]类型的对象，并反过来用它初始化矩阵。请注意，这实际上是必要的，因为与[2.x.38]类相比，DynamicSparsityPattern的效率非常低，因为它必须使用更灵活的数据结构，所以我们不可能将稀疏矩阵类建立在它的基础上，而是需要一个[2.x.39]类型的对象，我们通过复制中间对象生成这个对象。    
* 作为进一步的附带说明，你会注意到我们在这里没有明确地要[2.x.40]稀疏模式。当然，这是由于[2.x.41]函数从一开始就生成了一个压缩的对象，你不能再向其添加新的条目。因此，[2.x.42]的调用是隐含在[2.x.43]的调用中的。
* 

* 
* [1.x.28]
* 
* 下一个函数接着集合了线性方程组，对其进行求解，并对解进行评估。这样就有了三个动作，我们将把它们放到八个真实的语句中（不包括变量的声明，以及临时向量的处理）。因此，这个函数是为非常懒惰的人准备的。尽管如此，所调用的函数是相当强大的，通过它们，这个函数使用了整个库的大量内容。但让我们来看看每一个步骤。
* 

* 
* [1.x.29]
* 
* 首先，我们要把矩阵和右手边组合起来。在之前的所有例子中，我们已经研究了如何手动完成这一工作的各种方法。然而，由于拉普拉斯矩阵和简单的右手边在应用中出现的频率很高，库中提供了实际为你做这件事的函数，即它们在所有单元格上进行循环，设置局部的矩阵和向量，并将它们放在一起以获得最终结果。    
* 以下是两个最常用的函数：创建拉普拉斯矩阵和创建来自体或边界力的右手向量。它们需要映射对象、代表自由度和使用中的有限元的[2.x.44]对象、要使用的正交公式以及输出对象。创建右手向量的函数也必须接受一个描述（连续）右手向量函数的函数对象。    
* 让我们看一下矩阵和体力的集成方式。
* 

* 
* [1.x.30]
* 
* 这很简单，对吗？    
* 不过，有两点需要说明。首先，这些函数在很多情况下都会用到。也许你想为一个矢量值有限元创建一个拉普拉斯或质量矩阵；或者你想使用默认的Q1映射；或者你想用拉普拉斯算子中的一个系数来装配矩阵。由于这个原因，在[2.x.45]和[2.x.46]命名空间中有相当多的这些函数的变体。当你需要这些函数的一个略微不同的版本时，当然值得看一下文档，并检查一些东西是否适合你的需要。    
* 第二点是关于我们使用的正交公式：我们想对双线性形状函数进行积分，所以我们知道我们至少要使用二阶高斯正交公式。另一方面，我们希望正交规则至少有边界近似的阶数。因为有[2.x.47]点的高斯规则的阶数是[2.x.48] ，而使用[2.x.49]度的多项式的边界逼近的阶数是[2.x.50] ，我们知道[2.x.51] 。由于r必须是一个整数，并且（如上所述）必须至少是[2.x.52]，这就弥补了上面的公式计算 [2.x.53] 。    
* 由于对右侧向量的体力贡献的生成是如此简单，我们对边界力也要重新做一遍：分配一个合适大小的向量并调用合适的函数。边界函数有恒定的值，所以我们可以从库中快速生成一个对象，我们使用与上面相同的正交公式，但这次的维度较低，因为我们现在是在面上而不是在单元上积分。
* 

* 
* [1.x.31]
* 
* 然后将边界的贡献与域内部的贡献相加。
* 

* 
* [1.x.32]
* 
* 对于组装右手边，我们不得不使用两个不同的矢量对象，然后把它们加在一起。我们不得不这样做的原因是，[2.x.54]和[2.x.55]函数首先清除了输出向量，而不是将它们的结果与之前的内容相加。这可以合理地称为库在起步阶段的设计缺陷，但不幸的是，事情现在已经是这样了，很难改变这种无声地破坏现有代码的事情，所以我们不得不忍受。
* 

* 
* 现在，线性系统已经建立起来了，所以我们可以从矩阵和右手边的向量中消除我们约束到边界上其他DoF的一个自由度的均值约束，并解决这个系统。之后，再次分配约束，在这种情况下，这意味着将受约束的自由度设置为适当的值
* 

* 
* [1.x.33]
* 
* 最后，评估我们得到的解决方案。正如在介绍中所说的，我们对解决方案的H1半正态感兴趣。在这里，我们在库中也有一个函数可以做到这一点，尽管是以一种稍微不明显的方式：[2.x.56]函数整合了一个有限元函数和一个连续函数之间的差值的规范。因此，如果我们想要一个有限元场的规范，我们只需将连续函数设为零。请注意，这个函数，就像库中的许多其他函数一样，至少有两个版本，一个是以映射为参数的（我们在这里使用），另一个是我们在以前的例子中使用的隐含的[2.x.57] 。 还要注意的是，我们采用的是高一级的正交公式，以避免超融合效应，即在某些点上，解刚好特别接近精确解（我们不知道这里是否会出现这种情况，但有已知的案例，我们只是想确认一下）。
* 

* 
* [1.x.34]
* 
* 然后，刚刚调用的函数将其结果作为一个值的向量返回，每个值表示一个单元格上的法线。为了得到全局法线，我们要做以下工作。
* 

* 
* [1.x.35]
* 
* 最后一项任务
* 
* - 产生输出。
* 

* 
* [1.x.36]
 
* 下面这个解线性方程组的函数是从[2.x.58]中复制过来的，在那里有比较详细的解释。
 

* 
* [1.x.37]
* 
* 接下来，我们将解决方案以及材料ID写到一个VTU文件。这与其他许多教程程序中的做法相似。这个教程程序中提出的新内容是，我们要确保写到文件中用于可视化的数据实际上是deal.II内部使用的数据的忠实代表。这是因为大多数的可视化数据格式只通过顶点坐标来表示单元，但没有办法表示弧形边界，而在deal.II中使用高阶映射时，弧形边界是用来表示的。
* 
* 换句话说，你在可视化工具中看到的东西实际上不是你正在计算的东西。顺带一提，在使用高阶形状函数时也是如此。大多数可视化工具只呈现双线性/三线性的表示。这在[2.x.59]中有详细的讨论。   
* 所以我们需要确保高阶表示被写入文件。我们需要考虑两个特别的话题。首先，我们通过[2.x.60]告诉DataOut对象，我们打算将元素的细分解释为高阶拉格朗日多项式，而不是双线性斑块的集合。最近的可视化程序，如ParaView 5.5版或更新版，然后可以呈现高阶解决方案（更多细节见[1.x.38] ）。其次，我们需要确保映射被传递给[2.x.61]方法。最后，DataOut类默认只打印[1.x.39]单元的曲面，所以我们需要确保通过映射将内部单元也打印成曲面。
* 

* 
* [1.x.40]
 
* 最后是控制要执行的不同步骤的主要函数。它的内容相当简单，生成一个圆的三角形，给它关联一个边界，然后在随后的更细的网格上做几个循环。请注意，我们将网格细化放到了循环头中；这对测试程序来说可能是件好事，但对实际应用来说，你应该考虑到这意味着网格是在循环最后一次执行后被细化的，因为增量子句（三部分循环头的最后一部分）是在比较部分（第二部分）之前执行的，如果网格已经相当细化了，这可能是相当昂贵的。在这种情况下，你应该安排代码，使网格在最后一次循环运行后不再被进一步细化（或者你应该在每次运行的开始阶段进行细化，第一次除外）。
* 

* 
* [1.x.41]
* 
* 在所有的数据生成之后，将结果的表格写到屏幕上。
* 

* 
* [1.x.42]
* 
* 最后是主函数。它的结构与前面几个例子中使用的结构相同，所以可能不需要更多解释。
* 

* 
* [1.x.43]
* 
* 这是主循环，用线性到立方的映射进行计算。请注意，由于我们只需要[2.x.62]类型的对象一次，我们甚至不给它命名，而是创建一个未命名的这样的对象，并调用它的[2.x.63]函数，随后它又立即被销毁。
* 

* 
* [1.x.44]
* [1.x.45][1.x.46] 。
* 

* 这是该程序的输出结果。
* [1.x.47]
* 正如我们所期望的，每个不同的mappings的收敛顺序显然是与网格大小成二次方的。[2.x.64] [2.x.65] 有趣的是，双线性映射(即1度)的误差比高阶映射的误差大三倍以上；因此，在这种情况下，使用高阶映射显然是有利的，不是因为它提高了收敛顺序，只是为了减少收敛顺序之前的常数。另一方面，除了在非常粗的网格上，使用立方映射只能进一步提高结果，而且幅度不大。
* 我们还可以通过使用例如ParaView来可视化底层网格。下面的图片显示了不同映射度的初始网格。
* [2.x.66] 
* 显然，当我们从线性映射到二次映射时，效果是最明显的。这也反映在上表中给出的误差值中。从二次方到三次方的效果没有那么明显，但由于对圆形边界的描述更加准确，所以还是很明显的。
* 接下来，让我们看一下三次全局细化后的网格
* [2.x.67] 
* 在这里，差异就不那么明显了，特别是对于高阶映射。事实上，在这个细化水平上，表格中报告的误差值在二度和三度的映射之间基本上是相同的。
* 

* [1.x.48][1.x.49] [2.x.68]。
* [0.x.1]

