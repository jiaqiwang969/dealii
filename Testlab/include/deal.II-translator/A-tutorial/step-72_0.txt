include/deal.II-translator/A-tutorial/step-72_0.txt
[0.x.0]*
 [2.x.0] 
* 本教程依赖于 [2.x.1] , [2.x.2] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14 ][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28]
* [2.x.3] 
* [1.x.29]
* 

*[1.x.30][1.x.31]
* 

*[1.x.32][1.x.33]
 

* 这个程序解决的问题与[2.x.4]相同，即解决[最小表面方程](https://en.wikipedia.org/wiki/Minimal_surface) 
* [1.x.34]
* 
* 我们在那里发现的问题（见[1.x.35]部分）是，当想要使用牛顿迭代时，我们需要计算方程残差对解的导数[2.x.5]（这里，因为右手边是零，残差只是左手边的）。对于我们这里的方程，这是很麻烦的，但不是不可能的
* 
* 但是我们可以很容易地想象出更复杂的方程，仅仅正确地实现残差本身就是一个挑战，更不用说为计算雅各布矩阵所需的导数而这样做了。我们将在这个程序中解决这个问题。使用在[2.x.6]中详细讨论过的自动微分技术，我们将想出一个办法，我们只需要实现残差就可以免费得到雅各布矩阵。
*事实上，我们甚至可以更进一步。在[2.x.7]中，我们只是把方程当作一个给定的东西，而最小表面方程实际上是最小化一个能量的产物。具体来说，最小表面方程是对应于能量最小化的欧拉-拉格朗日方程[1.x.36]，其中能量密度*由[1.x.37]给出，这就等于说我们要找到能量函数[1.x.38]的变化的静止点，因为这就是边界值问题的平衡解所在。
* 那么关键的一点是，也许，我们甚至不需要实现常数，但实现更简单的能量密度[2.x.8]实际上就足够了。
* 那么我们的目标是这样的。当使用牛顿迭代时，我们需要反复解决线性偏微分方程 
* [1.x.39]
* 这样我们就可以计算出更新 
* [1.x.40]
*与牛顿步骤的解决方案[2.x.9]。正如在[2.x.10]中所讨论的，我们可以用手计算导数[2.x.11]，并获得[1.x.41]。
* 因此，这就是这个程序的意义所在。它是关于可以帮助我们计算[2.x.12]的技术，而不必明确地实现它，或者提供[2.x.13]的实现或[2.x.14]的实现。更确切地说，我们将实现三种不同的方法，并在运行时间方面对它们进行比较，但也要注意
* 
* - 也许更重要的是
* 
* - 实现它们需要多少人力。
* 
* - 在[2.x.15]中使用的方法来形成雅各布矩阵。
* 
* - 从残差的实现中计算雅各布矩阵 [2.x.16] ，使用自动微分。
* 
* - 从能量函数[2.x.17]的实现中计算残差和雅各布矩阵，同样使用自动微分。
* 对于这些方法中的第一个，与[2.x.18]相比，没有概念上的变化。
* 

* [1.x.42][1.x.43] 。
* 

* 对于第二种方法，让我们概述一下我们将如何利用自动微分来计算残差向量的线性化来处理这个问题。为此，让我们暂时改变一下符号，用[2.x.19]表示的不是微分方程的残差，而是事实上的残差向量*。
* 
*--即离散的残差*。我们这样做是因为这就是我们
*当我们在一个给定的网格上对问题进行离散化时，我们实际上是这样做的。我们解决[2.x.20]问题，其中[2.x.21]是未知数的向量。
* 更确切地说，残差的[2.x.22]分量由[1.x.44]给出，其中[2.x.23] 。鉴于此，单元格[2.x.24]的贡献为[1.x.45]，其一阶泰勒展开为[1.x.46]，因此我们可以计算单元格[2.x.25]对雅各布矩阵[2.x.26]的贡献为[2.x.27] 。这里重要的一点是，在单元格[2.x.28]上，我们可以表示[1.x.47]为了清楚起见，我们用[2.x.29]和[2.x.30]作为计数索引，以明确它们彼此之间以及与[2.x.31]不同。 因为在这个公式中，[2.x.32]只取决于系数[2.x.33]，我们可以通过[2.x.35]的自动微分，将导数[2.x.34]计算为一个矩阵。通过我们一直使用的相同论证，很明显[2.x.36]实际上并不取决于
*所有*未知数[2.x.37]，而只取决于[2.x.38]是住在单元格[2.x.39]上的形状函数的那些未知数，因此在实践中，我们将[2.x.40]和[2.x.41]限制在矢量和矩阵的那一部分，对应于本地*DoF指数，然后从本地单元格[2.x.42]分配到全球对象。
* 使用所有这些实现，然后的方法是在程序中实现[2.x.43]，并让自动微分机械从中计算导数[2.x.44]。
* 

*[1.x.48][1.x.49]。
* 

* 对于装配过程的最终实现，我们将比残差高一个层次：我们的整个线性系统将直接由支配这个边界值问题的物理学的能量函数决定。我们可以利用这样一个事实，即我们可以直接从局部贡献中计算域中的总能量，即[1.x.50]在离散设置中，这意味着在每个有限元上我们有[1.x.51]如果我们实现单元能量，这取决于场解，我们可以计算其第一个（离散）变化[1.x.52 因此，从单元对总能量函数的贡献来看，只要我们能够提供局部能量的实现，我们就可以期待为我们生成近似的残差和切线贡献[2.x.45]。同样，由于本教程中使用的自动微分变量的设计，在实践中，这些对残差向量和正切矩阵的贡献的近似值实际上是精确到机器精度的。
* 

* [1.x.54] [1.x.55]。
* 本教程的大部分内容是对[2.x.46]的精确复制。因此，为了简洁起见，并保持对这里实现的变化的关注，我们将只记录新的内容，并简单地指出哪些部分的代码是对以前内容的重复。
* 

* 
*  
*  
* [1.x.56] [1.x.57].
 

* 
* 本教程中包含了几个新的头文件。第一个是提供ParameterAcceptor类的声明。
* 

* 
* [1.x.58]
* 
* 这是第二个，它是一个包罗万象的头，可以让我们在这段代码中加入自动区分（AD）功能。
* 

* 
* [1.x.59]
* 
* 而接下来的三个则使用通用的[2.x.47]框架提供一些多线程能力。
* 

 
* [1.x.60]
* 
* 然后我们为这个程序打开一个命名空间，并将dealii命名空间中的所有东西导入其中，就像以前的程序一样。
* 

* 
* [1.x.61]
* 
* [1.x.62] [1.x.63]。
 

* 
* 在本教程中，我们将实现三种不同的方法来组装线性系统。其中一个反映了最初在[2.x.48]中提供的手工实现，而另外两个则使用Sacado自动微分库，该库作为Trilinos框架的一部分提供。  
* 为了方便在这三种实现之间进行切换，我们有这个非常基本的参数类，它只有两个可配置的选项。
* 

* 
* [1.x.64]
* 
* 选择要使用的配方和相应的AD框架。
* 

* 
* 
* - 配方 = 0 : 无援助的实施（全手工线性化）。
* 

* 
* 
* - 配方 = 1 : 有限元残差的自动线性化。
* 

* 
* 
* - 配方 = 2 : 使用变量配方自动计算有限元残差和线性化。
* 

* 
* [1.x.65]
* 
* 线性系统残差的最大可接受公差。我们将看到，一旦我们使用AD框架，装配时间就会变得很明显，所以我们将[2.x.49]中选择的公差提高了一个数量级。这样，计算就不会花费太长时间来完成。
* 

* 
* [1.x.66]
* 
* [1.x.67] [1.x.68].
 

* 
* 该类模板与 [2.x.50] 中的内容基本相同。该类唯一的功能变化是：。
* 

* 
* 
* - run()函数现在需要两个参数：一个是选择采用哪种装配方法，一个是允许的最终残差的公差，以及
* 

* 
* 
* - 现在有三个不同的装配函数来实现三种装配线性系统的方法。我们将在后面提供关于这些的细节。
* 

* 
*  

* 
* [1.x.69]
 
* [1.x.70] [1.x.71]。
 

* 
*应用于该问题的边界条件没有变化。
* 

* 
* [1.x.72]
* 
* [1.x.73] [1.x.74].
 

* 
* [1.x.75] [1.x.76].
 

* 
* 对类的构造函数没有做任何修改。
* 

* 
* [1.x.77]
 
* [1.x.78] [1.x.79].
 

* 
* 设置类数据结构的函数没有任何变化，即DoFHandler、应用于问题的悬挂节点约束以及线性系统。
* 

* 
* [1.x.80]
* 
* [1.x.81] [1.x.82]
 

 
* [1.x.83] [1.x.84].
 

* 
* 汇编函数是本教程的有趣贡献。assemble_system_unassisted()方法实现了与[2.x.51]中详述的完全相同的装配函数，但在这个例子中我们使用[2.x.52]函数来多线程装配过程。这样做的原因很简单。当使用自动分化时，我们知道会有一些额外的计算开销产生。为了减轻这种性能损失，我们希望尽可能多地利用（容易获得的）计算资源。[2.x.53]的概念使这成为一个相对简单的任务。同时，为了公平比较，我们需要对在计算残差或其线性化时不使用任何援助的实现做同样的事情。([2.x.54]函数首先在[2.x.55]和[2.x.56]中讨论，如果你想阅读它的话)。  
* 实现多线程所需的步骤在这三个函数之间是相同的，所以我们将利用assemble_system_unassisted()函数作为一个机会来关注多线程本身。
* 

* 
* [1.x.85]
 
* [2.x.57]希望我们提供两个示范性的数据结构。第一个，`ScratchData`，是用来存储所有要在线程之间重复使用的大数据。`CopyData`将保存来自每个单元的对线性系统的贡献。这些独立的矩阵-向量对必须按顺序累积到全局线性系统中。由于我们不需要[2.x.58]和[2.x.59]类已经提供的任何东西，我们使用这些确切的类定义来解决我们的问题。请注意，我们只需要一个局部矩阵、局部右手向量和单元自由度索引向量的单一实例。
* 
* - 因此[2.x.60]的三个模板参数都是`1`。
* 

* 
* [1.x.86]
 
* 我们还需要知道在装配过程中我们将使用什么类型的迭代器。为了简单起见，我们只要求编译器使用decltype()指定器为我们解决这个问题，知道我们将在由[2.x.61]拥有的活动单元上进行迭代。
* 

* 
* [1.x.87]
* 
* 这里我们初始化示例数据结构。因为我们知道我们需要计算形状函数梯度、加权雅各布和实空间中的四分位点的位置，所以我们将这些标志传给类的构造函数。
* 

* 
* [1.x.88]
* 
* 现在我们定义一个lambda函数，它将在单个单元上执行装配。三个参数是由于我们将传递给那个最终调用的参数，将被[2.x.62]所期望的参数。我们还捕获了[2.x.63]指针，这意味着我们将访问 "this"（即当前的`MinimalSurfaceProblem<dim>`）类实例，以及它的私有成员数据（因为lambda函数被定义在MinimalSurfaceProblem<dim>方法内）。    
* 在函数的顶部，我们初始化依赖于正在进行工作的单元的数据结构。请注意，重新初始化的调用实际上返回了一个FEValues对象的实例，该对象被初始化并存储在 "scratch_data "对象中（因此，被重用）。    
* 同样，我们从[2.x.64]提供的`copy_data`实例中获得本地矩阵、本地RHS向量和本地单元格DoF指数的别名。然后我们初始化单元格的DoF指数，因为我们知道本地矩阵和向量的大小已经正确。
* 

* 
* [1.x.89]
* 
* 对于牛顿方法，我们需要在问题被线性化的那一点上获得解的梯度。      
* 一旦我们有了这个梯度，我们就可以用通常的方法对这个单元进行装配。 与[2.x.65]的一个小区别是，我们使用了（相当方便的）基于范围的循环来迭代所有正交点和自由度。
* 

* 
* [1.x.90]
* 
* [2.x.66]要求的第二个lambda函数是一个执行累积全局线性系统中的局部贡献的任务。这正是这个函数所做的，其实现的细节在之前已经看到过。需要认识的主要一点是，局部贡献被存储在传入该函数的`copy_data`实例中。这个`copy_data`在[2.x.67]对`cell_worker`的一些调用中已经被填充了数据。
* 

* 
* [1.x.91]
* 
* 我们已经有了所有需要的函数定义，所以现在我们调用[2.x.68]来执行实际的装配。 我们传递一个标志作为最后的参数，说明我们只想对单元格进行装配。在内部，[2.x.69]将可用的工作分配给不同的线程，有效地利用当今几乎所有的处理器所提供的多核。
* 

* 
* [1.x.92]
* 
* 最后，正如在 [2.x.70] 中所做的那样，我们从系统中移除悬空的节点，并对定义牛顿更新的线性系统应用零边界值 [2.x.71] 。
* 

* 
* [1.x.93]
 
* [1.x.94] [1.x.95] 。
 

* 
* 正如在介绍中所概述的，对于这第二种方法，我们需要做的是实现从单元[2.x.73]到残差向量的局部贡献[2.x.72]，然后让AD机器处理如何计算来自它的导数[2.x.74]。  
* 对于以下情况，请记住，[1.x.96]即[2.x.75]。  
* 让我们看看这在实践中是如何实现的。
* 

* 
* [1.x.97]
* 
* 我们将利用 [2.x.76] 中所示的技术，预先定义我们要使用的AD数据结构。在这种情况下，我们选择辅助类，它将使用Sacado向前自动微分类型自动计算有限元残差的线性化。这些数字类型可以只用来计算一阶导数。这正是我们想要的，因为我们知道我们将只对残差进行线性化，这意味着我们只需要计算一阶导数。计算的返回值将是`double`类型。    
* 我们还需要一个提取器来检索一些与问题的现场解决方案有关的数据。
* 

* 
* [1.x.98]
* 
* 有了这个，让我们定义lambda函数，它将被用来计算单元格对雅各布矩阵和右手边的贡献。
 

* 
* [1.x.99]
* 
* 我们现在要创建并初始化一个AD辅助类的实例。要做到这一点，我们需要指定有多少个自变量和因变量。自变量将是我们的解向量所具有的局部自由度的数量，即离散化解向量[2.x.78]的每元素表示中的数字[2.x.77]，它表示每个有限元素有多少个解系数。在deal.II中，这等于[2.x.79]，自变量的数量将是我们将要形成的局部残差向量中的条目数。在这个特定的问题中（就像许多其他采用[标准Galerkin方法](https://en.wikipedia.org/wiki/Galerkin_method)的问题一样），局部求解系数的数量与局部残差方程的数量相符。
* 

* 
* [1.x.100]
 
* 接下来，我们将解的数值告知帮助器，即我们希望线性化的[2.x.80]的实际数值。由于这是在每个元素上单独进行的，我们必须从全局解决方案向量中提取解决方案的系数。换句话说，我们将所有这些系数[2.x.81]（其中[2.x.82]是一个局部自由度）定义为进入向量[2.x.83]（因果函数）计算的自变量。      
*然后我们得到了由自动可分的数字表示的自由度值的完整集合。对这些变量进行的操作从这一点开始被AD库跟踪，直到对象超出范围。所以正是这些变量[2.x.84][2.x.85]，我们将对其计算残差分录的导数。
* 

* 
* [1.x.101]
* 
* 然后我们做一些特定问题的任务，首先是计算所有的值，（空间）梯度，以及基于 "敏感的 "AD自由度值的类似东西。在这个例子中，我们要检索每个正交点的解梯度。请注意，现在解梯度对自由度值很敏感，因为它们使用[2.x.86]作为标量类型，[2.x.87]矢量提供局部自由度值。
* 

* 
* [1.x.102]
* 
* 我们声明的下一个变量将存储单元格残余向量贡献。这是相当不言自明的，除了一个[1.x.103]细节。请注意，向量中的每个条目都是手工初始化的，数值为0。这是一个[2.x.88]强烈推荐的[2.x.89]做法，因为一些AD库似乎没有安全地初始化这些数字类型的内部数据结构。不这样做可能会导致一些非常难以理解或检测的bug（感谢这个程序的作者出于一般的坏经验而提到这一点）。因此，出于谨慎考虑，值得明确地将初始值归零。在这之后，除了符号的改变，残差集看起来和我们之前看到的单元格RHS向量差不多。我们在所有正交点上循环，确保系数现在通过使用正确的`ADNumberType'来编码它对（敏感的）有限元DoF值的依赖性，最后我们组装残差向量的组件。为了完全清楚，有限元形状函数（及其梯度等）以及 "JxW "值仍然是标量值，但每个正交点的[2.x.90]和[2.x.91]是以独立变量计算的。
* 

* 
* [1.x.104]
* 
* 一旦我们计算出了全单元的残差向量，我们就可以把它注册到帮助类中。      
* 此后，我们在评估点计算残差值（基本上是从我们已经计算出来的东西中提取出真实的值）和它们的雅各布（每个残差分量相对于所有单元DoF的线性化）。为了组装成全局线性系统，我们必须尊重残差和RHS贡献之间的符号差异。对于牛顿方法，右手边的矢量需要等于负的*残差矢量。
* 

* 
* [1.x.105]
* 
* 该函数的余数等于我们之前的结果。
* 

* 
* [1.x.106]
* 
* [1.x.107] [1.x.108]。
 

* 
* 在这第三种方法中，我们将残差和雅各布作为局部能量函数[1.x.109]的第一和第二导数来计算，能量密度由[1.x.110]给出。  
* 让我们再次看看这是如何做到的。
* 

* 
* [1.x.111]
 
* 在这个装配过程的实现中，我们选择了帮助类，它将使用嵌套的Sacado前向自动微分类型自动计算残差及其从单元贡献到能量函数的线性化。所选的数字类型可以用来计算第一和第二导数。我们需要这样做，因为残差定义为势能对DoF值的敏感性（即其梯度）。然后我们需要将残差线性化，这意味着必须计算势能的二阶导数。你可能想把这与之前函数中使用的 "ADHelper "的定义进行比较，在那里我们使用了[2.x.92] 。
* 

* 
* [1.x.112]
* 
* 然后让我们再次定义lambda函数，对单元格进行整合。    
* 为了初始化辅助类的实例，我们现在只需要预先知道自变量的数量（也就是与元素解向量相关的自由度数量）。这是因为由能量函数产生的二阶导数矩阵必然是平方的（而且，顺便说一下，也是对称的）。
* 

* 
* [1.x.113]
 
* 再一次，我们用帮助器注册所有的单元格DoFs值，然后提取这些值的 "敏感 "变体，这些变体将被用于必须进行区分的后续操作中。
* 
* - 其中之一是计算解决方案的梯度。
* 

* 
* [1.x.114]
 
* 我们接下来创建一个变量来存储单元格的总能量。我们再次强调，我们明确地对这个值进行了零初始化，从而确保了这个起始值的数据的完整性。      
* 我们方法的目的是计算细胞总能量，这是内部（由于右手函数，通常是[2.x.93]中的线性）和外部能量的总和。在这种特殊情况下，我们没有外部能量（例如，来自源项或诺伊曼边界条件），所以我们将关注内部能量部分。      
*事实上，计算[2.x.94]几乎是微不足道的，只需要以下几行。
* 

* 
* [1.x.115]
* 
* 在我们计算出这个单元上的总能量后，我们将在帮助器上注册它。 在此基础上，我们现在可以计算出所需的数量，即残差值和它们在评估点的雅各布系数。和以前一样，牛顿的右手边需要是残差的负数。
* 

* 
* [1.x.116]
* 
* 和前面两个函数一样，函数的剩余部分也是如此。
* 

* 
* [1.x.117]
* 
* [1.x.118] [1.x.119]。
 

* 
* 求解函数与 [2.x.95] 中使用的相同。
* 

* 
* [1.x.120]
* 
* [1.x.121] [1.x.122].
 

* 
* 自[2.x.96]以来，在网格细化程序和适应性网格之间的解决方案的转移方面没有任何变化。
* 

* 
* [1.x.123]
* 
* [1.x.124] [1.x.125].
 

* 
* 边界条件的选择仍然与[2.x.97]相同 ...
* 

* 
* [1.x.126]
* 
* [1.x.127] [1.x.128]。
 

* 
*......就像在求解迭代过程中用来计算残差的函数一样。如果真的需要，我们可以用能量函数的微分来代替它，但为了简单起见，我们在这里简单地复制我们在[2.x.98]中已经有的东西。
* 

* 
* [1.x.129]
* 
* [1.x.130] [1.x.131].
 

* 
* 非线性迭代程序的步长（或欠松系数）的选择仍然固定在[2.x.99]中选择和讨论的值。
* 

* 
* [1.x.132]
* 
* [1.x.133] [1.x.134]
 

* 
* 从`run()`调用的最后一个函数以图形形式输出当前的解决方案（和牛顿更新），作为VTU文件。它与以前的教程中所使用的完全相同。
* 

* 
* [1.x.135]
* 
* [1.x.136] [1.x.137]。
 

* 
* 在运行函数中，大部分仍然与首次实现的 [2.x.100] 相同。唯一可以观察到的变化是，我们现在可以（通过参数文件）选择系统残差的最终可接受的公差是什么，并且我们可以选择我们希望利用的装配方法。为了使第二个选择明确，我们向控制台输出一些信息，表明选择。由于我们对比较三种方法中每一种的装配时间感兴趣，我们还添加了一个计时器，跟踪装配过程中所花费的时间。我们还跟踪了解决线性系统所需的时间，这样我们就可以将这些数字与代码中通常需要最长时间执行的部分进行对比。
* 

* 
* [1.x.138]
* 
* [1.x.139] [1.x.140] [1.x.140].
 

* 
* 最后是主函数。它遵循大多数其他主函数的方案，但有两个明显的例外。
 

* 
* 
* - 我们调用[2.x.101]，以便（通过一个隐藏的默认参数）设置使用多线程任务执行的线程数。
* 

* 
* 
* - 我们还有几行专门用于读入或初始化用户定义的参数，这些参数将在程序执行过程中被考虑。
* 

* 
* [1.x.141]
* [1.x.142][1.x.143].
 

* 由于在[2.x.102]中首次分析的问题的物理学没有变化，所以没有什么可报告的。它们之间唯一明显的区别是，在默认情况下，这个程序只运行9个网格细化步骤（而[2.x.103]则执行11个细化步骤）。下面报告的所有时间都是在发布模式下获得的）。
* [1.x.144]
* 
* 以下是手部线性化的输出（在2012年左右的四核八线程笔记本上计算）。
* 
以下是手部线性化的输出结果（在2012年左右的四核八线程笔记本电脑上计算的 * - 但我们真正感兴趣的是不同实现方式之间的相对时间）。)
* [1.x.145]
* 而对于使用Sacado动态正向AD数字类型，以自动方式线性化残差的实现。
* [1.x.146]
* 最后，对于直接从能量函数（使用嵌套的萨卡多动态正向AD数）计算残差和其线性化的实现。
* [1.x.147]
* 
* 很明显，交给自动区分框架执行的工作越多，在装配过程中花费的时间就越多。累计所有的细化步骤，使用一级自动微分导致在装配阶段花费了[2.x.104]的计算时间，与无辅助装配相比，而直接从能量函数推导出离散线性系统时，装配时间要长[2.x.105].毫不奇怪，解决线性系统的总体时间保持不变。对许多人来说，这可能意味着在生产代码中利用高阶微分（在有限元水平）会导致不可接受的开销，但在原型设计阶段可能仍然有用。因此，两者之间的一个很好的折衷办法可能是有限元残差的自动线性化，它以可衡量但也许不是不可接受的成本提供了很多便利。另外，我们可以考虑不在每一步中重新建立牛顿矩阵。
* 
* --这个话题在[2.x.106]中进行了大量的深入探讨。
* 当然，在实践中，实际的开销在很大程度上取决于被评估的问题（例如，解中有多少成分，被微分的函数的性质是什么，等等）。因此，这里提出的确切结果应该仅在这个标量问题的背景下进行解释，当涉及到其他问题时，用户肯定需要进行一些初步调查。
* 

*[1.x.148][1.x.149]
* 

* 与[2.x.107]一样，有几个与自动区分有关的项目可以进一步评估。
* 
* - 应调查其他AD框架的使用情况，展望其他实现方式可能提供性能优势。
* 
* - 除了本教程中硬编码的数字类型外，还值得评估AD数字类型。关于在有限元水平上采用的两次可微分类型，混合微分模式（"RAD-FAD"）原则上应该比这里采用的单模式（"FAD-FAD"）类型更有计算效率。RAD-FAD类型没有被默认选择的原因是，在撰写本文时，在Sacado库中，它的实现仍然存在一些错误，导致内存泄漏。 这在[2.x.108]模块中有所记载。
* 
* - 可能的情况是，使用降低精度的类型（即`float`）作为AD数字的标量类型，可以在装配时减少计算费用。使用 "float "作为矩阵和残差的数据类型并不是不合理的，因为牛顿更新只是为了让我们更接近解决方案，而不是真正的*解决方案；因此，考虑使用降低精度的数据类型来计算这些更新，然后将这些更新累积到使用完全 "双 "精度的解决方案向量中，是有意义的。
* 
* - 在装配过程中可能减少资源的另一种方法是将AD的实现作为一个构成性模型。这类似于[2.x.109]中采用的方法，并将自动分化的起点推到计算链的上一级。这反过来又意味着AD库跟踪的操作更少，从而降低了微分的成本（尽管我们会在每个单元正交点进行微分）。
* 
* - [2.x.110]是[2.x.111]的另一个变体，解决了问题的一个非常不同的部分：直线搜索以及是否有必要在每次非线性迭代中重新建立牛顿矩阵。鉴于上述结果表明，使用自动微分是有代价的，[2.x.112]中的技术有可能在一定程度上抵消这些代价。因此，将目前的程序与[2.x.113]中的技术结合起来是相当有趣的。对于生产代码来说，这肯定是个好办法。
* 

* [1.x.150][1.x.151] [2.x.114] 。
* [0.x.1]

