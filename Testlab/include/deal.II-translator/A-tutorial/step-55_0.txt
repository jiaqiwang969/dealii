include/deal.II-translator/A-tutorial/step-55_0.txt
[0.x.0]*
 [2.x.0]
* 本教程依赖于 [2.x.1] , [2.x.2] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19]
* [2.x.3]
* [1.x.20]


*
* [2.x.4] 作为这个程序的先决条件，你需要安装PETSc或Trilinos和p4est库。在[1.x.21]文件中描述了deal.II和这些附加库的安装情况。
* [1.x.22][1.x.23][1.x.24] 。
*

* 在[2.x.5]的基础上，本教程展示了如何使用MPI与PETSc或Trilinos的线性代数并行地解决具有多个组成部分的线性PDEs。为此，我们回到了 [2.x.6] 中讨论的斯托克斯方程。编写本教程的动机是在[2.x.7]（并行拉普拉斯）和[2.x.8]（针对时间相关问题的并行耦合斯托克斯与布西尼斯克）之间提供一个中间步骤（双关）。
* 本教程的学习成果是。
*
* - 你能够以并行方式解决有多个变量的PDEs，并能将其应用于不同的问题。
*
* - 你理解了最佳预处理的概念，并能够为一个特定的问题检查这个概念。
*
* - 你能够使用免费的计算机algreba系统SymPy(https://sympy.org)构建人造解决方案。
*
* - 你能够实现并行程序的各种其他任务：错误计算、编写图形输出等。
*
* - 你可以将矢量场、流线和矢量的轮廓线可视化。
* 我们正在求解满足斯托克斯方程的速度[2.x.9]和压力[2.x.10]，其读数为[1.x.25] 。
*
*

*[1.x.26][1.x.27]


* 确保你阅读（甚至更好：尝试）[2.x.11]中 "可能的扩展 "一节中描述的 "块状舒尔补强预处理"。就像那里描述的那样，我们将使用Krylovmethod和块状预处理来解决块状系统。
* 我们的目标是为线性系统构造一个非常简单的（也许是最简单的）最优预处理程序。如果预处理系统的迭代次数与网格大小无关，则该预处理程序被称为 "最优 "或 "最优复杂性"[2.x.12]。你可以把这个定义扩展到也要求与所使用的处理器数量无关（我们将在结果部分讨论这个问题），计算域和网格质量，测试案例本身，有限元空间的多项式程度，等等。
* 为什么恒定的迭代次数被认为是 "最佳 "的？假设被分解的PDE给出一个有N个未知数的线性系统。由于有限元离散化产生的矩阵是稀疏的，矩阵-向量乘积可以在O(N)时间内完成。先决条件的应用充其量也只能是O(N)(例如可以用多棱镜方法)。如果解决线性系统所需的迭代次数与[2.x.13]无关（因此也与N无关），那么解决该系统的总成本将是O(N)。不可能超越这个复杂度，因为即使是查看右手边的所有条目也已经需要O(N)的时间。更多信息见[2.x.14]，第2.5章（多网格）。
* 这里描述的预处理程序比[2.x.15]中描述的更简单，通常需要更多的迭代，从而需要更多的时间来解决。在考虑预处理程序时，最优性不是唯一重要的指标。但是一个最佳的、昂贵的预处理程序通常比一个便宜的、非最佳的预处理程序更受欢迎。这是因为，最终，随着网格尺寸越来越小，线性问题越来越大，前者将最终战胜后者。
*[1.x.28][1.x.29]
*

* 我们对线性系统进行预处理[1.x.30]。
*
*用块对角线预处理[1.x.31]来预处理。
* 其中[2.x.16]是舒尔补码。
* 通过对[2.x.17]的选择，假设我们准确地处理了[2.x.18]和[2.x.19]（这是一种 "理想化 "的情况），预处理的线性系统有三个独立于[2.x.20]的特征值，因此是 "最优 "的。  见[2.x.21]第6.2.1节（特别是第292页）。作为比较，使用[2.x.22]中理想版本的上块三角预处理(也用于[2.x.23])会使所有特征值都等于1。
* 我们将使用[2.x.24]中的逆运算的近似值，它（几乎）与[2.x.25]无关。在这种情况下，我们可以再次证明，特征值与[2.x.26]无关。对于Krylov方法，我们选择MINRES，它对分析很有吸引力(迭代次数被证明与[2.x.27]无关，见上述书中第6.2.1章的其余部分)，从计算的角度看很好(比GMRES等更简单、更便宜)，而且适用(矩阵和预处理器是对称的)。
* 对于近似，我们将使用质量矩阵在压力空间的CG解来近似[2.x.28]的作用。请注意，质量矩阵在光谱上等同于[2.x.29]。我们可以预期CGiterations的数量与[2.x.30]无关，即使使用像ILU这样简单的预处理程序。
* 对于速度块[2.x.31]的近似，我们将执行一个AMGV循环。在实践中，这种选择并不完全独立于[2.x.32]，这可以解释迭代次数的轻微增加。一个可能的解释是，最粗的层次将被精确解决，而最粗矩阵的层次数和大小是不可预测的。
*

*[1.x.32][1.x.33]


* 我们将根据经典的Kovasznay问题构建一个人造解，见[2.x.33]。这里是一个由X速度着色的解决方案的图像，包括速度的流线。
* [2.x.34]
* 但我们必须在这里作弊，因为我们不是在求解非线性的Navier-Stokes方程，而是求解没有对流项的线性Stokes系统。因此，为了重现完全相同的解决方案，我们使用Kovasznay问题的解决方案的制造方法。这将有效地把对流项移到右手边[2.x.35]。
* 右手边是用脚本 "reference.py "计算的，我们用精确的解来计算边界条件和误差。
*

* [1.x.34] [1.x.35]。



* [1.x.36]
*
* 下面这块出的代码与[2.x.36]相同，可以在PETSc和Trilinos之间切换。
*


*


* [1.x.37]
*
* [1.x.38] [1.x.39]。


*
* 我们需要一些辅助类来表示我们在介绍中描述的求解器策略。
*


*


* [1.x.40]
*
* 这个类暴露了通过函数[2.x.37]应用一个给定矩阵的逆的动作，在内部，逆不是明确形成的。相反，一个带有CG的线性求解器被执行。该类扩展了[2.x.38]中的InverseMatrix类，增加了一个指定预处理程序的选项，并允许在vmult函数中使用不同的矢量类型。
*


* [1.x.41]
*
* 该类是2x2矩阵的简单块状对角线预处理的模板类。
*


* [1.x.42]
*
* [1.x.43] [1.x.44]。


*
* 下面的类代表了测试问题的右手边和精确解。
*


*


* [1.x.45]
*
* [1.x.46] [1.x.47]。
* 主类与[2.x.39]非常相似，只是矩阵和向量现在是块状版本，我们为拥有的和相关的DoF存储一个[2.x.40]，而不是一个IndexSet。我们正好有两个IndexSets，一个用于所有速度未知数，一个用于所有压力未知数。
*


* [1.x.48]
*
* Kovasnay流被定义在域[-0.5, 1.5]^2上，我们通过将最小和最大值传递给[2.x.41]来创建这个域。
*


* [1.x.49]
*
* [1.x.50] [1.x.51]。
* 与[2.x.42]相比，块状矩阵和向量的构造是新的，与[2.x.43]这样的串行代码相比是不同的，因为我们需要提供属于我们处理器的行的集合。
*


* [1.x.52]
*
* 把所有昏暗的速度放入0区块，压力放入1区块，然后按区块重新排列未知数。最后计算一下我们每块有多少个未知数。
*


* [1.x.53]
*
* 我们根据我们想要创建块状矩阵和向量的方式，将本地拥有的和本地相关的DoF的IndexSet分割成两个IndexSets。
*


* [1.x.54]
*
* 设置边界条件和悬空节点的约束与 [2.x.44] 相同。尽管我们没有任何悬空节点，因为我们只进行全局细化，但把这个函数调用放进去仍然是个好主意，以防以后引入自适应细化。
*


* [1.x.55]
*
* 现在我们根据BlockDynamicSparsityPattern来创建系统矩阵。我们知道我们不会有不同速度分量之间的耦合（因为我们使用的是拉普拉斯而不是变形张量），也不会有压力与其测试函数之间的耦合，所以我们用一个表来把这个耦合信息传达给 [2.x.45]



* [1.x.56]
*
* 先决条件矩阵有不同的耦合（我们只在1,1块中填入质量矩阵），否则这段代码与上述system_matrix的构造相同。
*


* [1.x.57]
*
* owned_partitioning,
*


* [1.x.58]
*
* 最后，我们以正确的尺寸构建块状向量。带有两个[2.x.46]的函数调用将创建一个重影向量。
*


* [1.x.59]
*
* [1.x.60] [1.x.61].
* 这个函数集合了系统矩阵、预处理矩阵和右手边。代码是非常标准的。
*


* [1.x.62]
*
* [1.x.63] [1.x.64]
* 这个函数用MINRES求解线性系统，如介绍中所述，对两个对角线块采用块对角线预处理和AMG。该预处理程序对0,0块应用v循环，对1,1块应用质量矩阵的CG（Schur补码）。
*


* [1.x.65]
*
* InverseMatrix用于解决质量矩阵的问题。
*


* [1.x.66]
*
* 这是在上面定义的单个块的预处理基础上构造块预处理。
*


* [1.x.67]

* 有了这些，我们终于可以设置线性求解器并求解系统。
*


* [1.x.68]
*
* 与[2.x.47]一样，我们减去平均压力，以便对我们的参考方案进行误差计算，该方案的平均值为零。
*


* [1.x.69]
*
* [1.x.70] [1.x.71]
* 其余处理网格细化、输出和主循环的代码相当标准。
*


* [1.x.72]
*[1.x.73][1.x.74]


* 正如上面的讨论所预期的那样，迭代次数与处理器的数量无关，只与[2.x.48]有非常小的关系。
* [2.x.49]
* [2.x.50]
* 虽然PETSc的结果显示迭代次数不变，但使用Trilinos时，迭代次数增加。这可能是由于对AMG预处理程序的不同设置。出于性能的考虑，我们不允许在几千个未知数以下进行粗解。由于粗解器是精确求解（我们默认使用LU），层数的变化会影响到V型循环的质量。因此，对于较小的问题规模，V型循环更接近于精确求解器。
* [1.x.75][1.x.76][1.x.77] 。
*

*[1.x.78][1.x.79] 。


*玩弄平滑器、平滑步骤和Trilinos AMG的其他属性，以实现最佳的预处理程序。
*[1.x.80][1.x.81]


* 这一变化需要将外解器改为GMRES或BiCGStab，因为系统不再是对称的了。
* 你可以在对流项[2.x.52]中规定精确的流解为[2.x.51]。如果你把右手边设置为零，这应该会得到与原问题相同的解。
*[1.x.82][1.x.83] 。
*

* 到目前为止，这个教程程序在每一步中都会对网格进行全局细化。将[2.x.53]中的代码替换为类似的内容
* [1.x.84]
* 使得探索自适应网格细化变得简单。
*

* [1.x.85][1.x.86] [2.x.54] 。
* [0.x.1]

