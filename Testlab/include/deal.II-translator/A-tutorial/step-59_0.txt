include/deal.II-translator/A-tutorial/step-59_0.txt
[0.x.0]*
 [2.x.0]
* 本教程依赖于 [2.x.1] 。
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15]
* [2.x.2]
* [1.x.16]
* [1.x.17][1.x.18][1.x.19] 。


* 无矩阵算子评估使高阶多项式基的离散化得到了非常有效的实现，这是由于一种叫做sumfactorization的方法。这个概念已经在[2.x.3]和[2.x.4]的教程程序中介绍过。在本教程中，我们将这些概念扩展到包括面积分的非连续Galerkin（DG）方案，这是一类高阶特别普遍的方法。
* 无矩阵评估的基本思想与连续元素的评估相同。迭代求解器或多网格平滑器中出现的矩阵-向量乘积不是由经典的稀疏矩阵内核实现的，而是通过对基础积分的评估隐式应用。对于用张量积正交规则积分的张量积形状函数，这种评估通过使用总和因子化技术特别有效，该技术将最初涉及[2.x.6]度[2.x.7]的张量积形状函数在[2.x.8]维的插值操作分解为[2.x.9]正交点的[2.x.10]单维操作，每个成本[2.x.11]。在三维中，这将复杂度降低了 [2.x.12] 的两次幂。如果以每个自由度的复杂度来衡量，复杂度是[2.x.13]的多项式程度。由于DG中存在面积分，而且对正交点的操作涉及到更多的内存传输，这两个因素都是以[2.x.14]为尺度的，所以观察到的复杂度往往是中等的常数[2.x.15]。这意味着以每秒自由度计算，高阶方法可以与低阶方法的吞吐量相同。
* 关于算法的更多信息见Martin Kronbichler和Katharina Kormann的预印本[2.x.16] [1.x.20]，arXiv：1711.03590。
* [1.x.21][1.x.22] 。


* 在本教程中，我们以无矩阵的DG框架为例，对拉普拉斯进行内部惩罚离散化，即与[2.x.17]教程中使用的方案相同。拉普拉斯的离散化是由以下弱形式给出的
* [1.x.23]
* 其中[2.x.18]表示数量[2.x.19]从两个相关单元[2.x.20]和[2.x.21]的定向跳跃，[2.x.22]是两边的平均值。
* 方程中的项代表分项积分后的单元积分，由于分项积分和插入平均通量而在元素界面产生的原始一致性项，为恢复底层矩阵的对称性而添加的邻接一致性项，以及系数为[2.x.23]的惩罚项，其大小等于单元在面的法线方向的长度乘以[2.x.24]，见[2.x.25]。惩罚项的选择是为了使逆估计成立，并且最终的弱形式是强制性的，即离散化的正定。邻接一致性项和惩罚项涉及元素界面上的跳跃[2.x.26]，这在分析解[2.x.27]中消失了。因此，这些条款与原始PDE是一致的，确保该方法可以保持最佳收敛顺序。
* 在下面的实现中，我们通过将法向量[2.x.28]从跳跃项移到导数中，形成[1.x.24]形式的导数[2.x.29]来实现上述的弱形式。这使得在正交点上的实现稍微有效一些，因为我们只需要处理标量项而不是张量，而且在数学上是等价的。
* 对于边界条件，我们使用所谓的镜像原理，通过从内部解[2.x.31]的外推，结合给定的边界数据来定义[1.x.25]外部值[2.x.30]，在Dirichlet边界设置[2.x.32]和[2.x.33]，在Neumann边界设置[2.x.34]和[2.x.35]，对于给定Dirichlet值[2.x.36]和Neumann值[2.x.37] 。然后将这些表达式插入上述弱形式中。涉及已知量[2.x.38]和[2.x.39]的贡献最终被移到右手边，而未知值[2.x.40]被保留在左手边，对矩阵项的贡献与内部面类似。通过这些操作，可以得到与[2.x.41]中相同的弱形式。
*[1.x.26][1.x.27]。
*

* deal.II的无矩阵框架提供了必要的基础设施来实现上述离散方程的动作。与我们在[2.x.43]和[2.x.44]中使用的[2.x.42]相反，我们现在用[2.x.45]建立了一个代码，它需要三个函数指针，一个用于单元积分，一个用于内面积分，一个用于边界面积分（类似于[2.x.46]教程程序中使用的MeshWorker的设计）。在这三个函数中，我们在正交点上实现各自的条款。对于向量条目与正交点上的数值和梯度之间的插值，我们使用FEEvaluation类来处理单元贡献，FEFaceEvaluation类来处理面的贡献。这些函数的基本用法已经在[2.x.47]教程程序中进行了广泛的讨论。
* 在[2.x.48]中，所有的内部面都正好被访问一次，所以必须确保计算测试函数[2.x.49]和[2.x.50]的贡献。鉴于两边的测试函数确实是独立的，上面的弱形式实际上意味着我们将相同的贡献提交给一个名为 "phi_inner "和 "phi_outer "的FEFaceEvaluation对象，用于测试测试函数的法向导数，而用测试函数的值进行测试时，则提交相反的符号，因为后者由于跳跃项而涉及相反的符号。对于不同细化水平的单元之间的面，整合是从细化面开始的，FEFaceEvaluation自动执行内插到粗化面的子面。因此，悬空节点从未明确地出现在用户实现的弱形式中。
* 每个面被精确访问一次的事实也适用于那些用MPI并行化时不同处理器之间的子域边界的面，其中一个单元属于一个处理器，一个属于另一个。[2.x.51]中的设置将面分成两部分，最终只报告[2.x.52]和[2.x.53]中分别实际处理的面。请注意，与[2.x.54]中讨论的单元积分相类似，deal.II在几个面上应用矢量化以使用SIMD，在我们称之为[1.x.28]的东西上用一条指令工作。面的批次与单元的批次是独立的，尽管处理面的积分的时间与处理各自单元的积分的时间保持一致，以增加数据的可定位性。
* 这个程序的另一个新特点是，我们不再从求值和积分步骤中拆分像[2.x.55]或[2.x.56]那样的向量访问，而是分别调用组合函数[2.x.57]和[2.x.58]。这对面积分很有用，因为根据面的评估内容，并非所有单元格的向量项都必须首先被触及。例如，想想节点元素FE_DGQ的情况，节点点在元素表面。如果我们对面的形状函数值感兴趣，只有[2.x.59]个自由度以非微不足道的方式对它们有贡献（用更专业的方式来说，只有[2.x.60]个形状函数在面的支持度为零，并且对[2.x.61]个自由度返回真。
* 现在，我们当然不只对函数值感兴趣，而且对单元格上的导数也感兴趣。幸运的是，在deal.II中有一个元素，它将这种减少访问的特性也扩展到面的导数上，即FE_DGQHermite元素。
*[1.x.29][1.x.30]
*

* FE_DGQHermite元素属于FE_DGQ元素家族，即它的形状函数是一维多项式的张量乘积，元素是完全不连续的。与通常的FE_DGQ元素中的节点特征相反，FE_DGQHermite元素是一个基于Hermite-like概念的节点贡献和衍生贡献的混合物。底层多项式类是[2.x.63]，可以概括为以下几点。对于三次多项式，我们用两个多项式来表示单位区间左端的函数值和第一次导数，[2.x.64] ，用两个多项式来表示单位区间右端的函数值和第一次导数，[2.x.65] 。在相反的两端，形状函数的值和一阶导数都是零，确保四个基础函数中只有两个对各自末端的值和导数有贡献。然而，我们偏离了经典的赫米特内插法，没有严格地为值和一导数分配一个自由度，而是允许一导数是第一和第二形状函数的线性组合。这样做是为了改善插值的条件。此外，当度数超过三时，我们在元素内部以类似拉格朗日的方式增加节点点，并在[2.x.66]和[2.x.67]这两个点上结合双零。这些额外节点的位置是由一些贾科比多项式的零点决定的，在类[2.x.68]的描述中解释过。
* 使用这个元素，我们只需要访问[2.x.69]自由度来计算一个面的值和导数。检查赫米特属性是否被满足是在[2.x.70]和[2.x.71]中透明地完成的，它们检查基础的类型并尽可能减少对数据的访问。显然，如果我们将[2.x.72]与[2.x.73]分开，这将是不可能的，因为我们需要读取的条目数量取决于导数的类型（只有值，一导数，等等），因此必须给`read_dof_values()`。
* 这种优化不仅对计算面积分有用，而且对MPI鬼层交换也有用。在一个天真的交换中，如果另一个处理器负责计算面的贡献，我们就需要将一个单元的所有自由度发送给另一个处理器。由于我们知道在用FEFaceEvaluation进行的评估中只有部分自由度被触及，所以自然只交换相关自由度。[2.x.74]函数在与[2.x.75]结合时支持选定的数据交换。为了实现这一点，我们需要使用[2.x.76]类型的参数告诉循环我们要对脸部进行哪种评估，正如在下面[2.x.77]的实现中可以看到的。在这种情况下，数据交换的方式是如下的。矢量中的幽灵层数据仍然假装代表所有的自由度，这样，FEFaceEvaluation可以继续读取数值，就像单元格是本地拥有的一样。数据交换程序负责将数据打包和解包成这种格式。虽然这听起来很复杂，但我们将在下面的结果部分显示，通过与没有指定面的数据访问的基线代码进行性能比较，这确实是值得的。
* [1.x.31][1.x.32] 。
*

* 按照[2.x.78]程序的传统，我们再次用共轭梯度解算器内的几何多网格预处理来解决泊松问题。在这个教程中，我们没有计算对角线和使用基本的Precondition Chebyshev作为平滑器，而是选择了一个不同的策略。我们实现了一个块状Jacobi预处理程序，其中块状指的是一个单元上的所有自由度。我们没有在预处理程序中建立完整的单元矩阵并应用它的LU因子化（或逆）；这种操作将受到严重的内存带宽限制，因此速度相当慢；我们通过一种特殊的技术，即快速对角线化方法，对块的逆进行近似处理。
* 该方法的理念是利用单元矩阵的结构。对于在直角坐标系上离散的常数系数的拉普拉斯，单元矩阵[2.x.79]可以写为
* [1.x.33]
*在二维和
* [1.x.34]
*在三维中。矩阵[2.x.80]和[2.x.81]表示一维拉普拉斯矩阵（包括与当前单元值[2.x.82]和[2.x.83]相关的单元和面项），[2.x.84]和[2.x.85]是质量矩阵。请注意，一旦单元上有非恒定系数或几何形状不再恒定，这种简单的张量积结构就会消失。我们提到，一个类似的设置也可以用来用这个矩阵的最终张量积形式来代替计算的积分，这将把运算器的评估操作减少到一半以下。然而，考虑到这只适用于笛卡尔单元和恒定系数，这是一个相当狭窄的情况，我们没有继续研究这个想法。
* 有趣的是，由于1964年[1.x.35]引入的方法，矩阵[2.x.86]的准确逆值可以通过张量积找到。
* [1.x.36]
*其中[2.x.87]是给定张量方向的广义特征值问题的特征向量矩阵[2.x.88] 。
* [1.x.37]
* [2.x.89] 是代表广义特征值的对角线矩阵 [2.x.90] 。请注意，向量[2.x.91]是这样的，即[2.x.92]和[2.x.93]同时对角线化，即[2.x.94]和[2.x.95] 。
* deal.II库使用这个概念实现了一个类，叫做TensorProductMatrixSymmetricSum。
* 在本程序中，我们坚持使用常数系数和笛卡尔网格，尽管基于张量积的近似版本仍然可以用于更普遍的网格，而且算子评估本身当然也是通用的。此外，我们也不关心自适应网格，因为多网格算法需要获取不同细化边上的通量矩阵，如[2.x.96]中所解释的。然而，我们所做的一件事是仍然将我们的块状Jacobi预处理器包裹在Precondition Chebyshev中。该类使我们不必寻找适当的松弛参数（对于block-Jacobi平滑器来说，二维的松弛参数约为0.7，三维的松弛参数约为0.5），并且通常比普通的Jacobi平滑器提高了一些平滑效率，因为当Chebyshev多项式的程度设置为1或2时，它可以降低求解时间。
* 请注意，块状雅可比平滑法有一个额外的好处：快速对角线化方法也可以解释为从FE_DGQHermite的Hermite-like多项式转变为一个单元格拉普拉斯的对角线的基础。因此，它抵消了基础的影响，无论我们使用FE_DGQHermite还是FE_DGQ，我们都能得到相同的迭代次数。这与使用只有对角线的Precondition Chebyshev类（点Jacobi方案）相比，FE_DGQ和FE_DGQHermite的表现确实不同，FE_DGQ比FE_DGQHermite需要少2-5次迭代，尽管对类似Hermite的形状函数做了修改以确保良好的调节。
*

* [1.x.38] [1.x.39]。
* 包含的文件与[2.x.97]中的基本相同，只是用有限元类FE_DGQHermite代替了FE_Q。所有对面积分进行无矩阵计算的功能已经包含在`fe_evaluation.h`中。
*


* [1.x.40]
*
* 和[2.x.98]一样，为了简单起见，我们在程序的顶部将维数和多项式的度数收集为常数。与[2.x.99]不同的是，这次我们选择了一个真正的高阶方法，度数为8，任何不使用和分解的实现都会变得非常慢，而使用MatrixFree的实现则提供了与度数为2或3时基本相同的效率。此外，本教程程序中的所有类都是模板化的，所以在运行时从输入文件或命令行参数中选择度数是很容易的，只要在`main()`函数中添加相应度数的实例即可。
*


*


* [1.x.41]
*
* [1.x.42] [1.x.43]。


*
* 与[2.x.100]相类似，我们定义了一个分析解，并试图用我们的离散化来重现。由于本教程的目的是展示无矩阵方法，我们选择一个最简单的可能性，即一个余弦函数，其导数对我们来说足够简单，可以用分析法计算。再往下看，我们在这里选择的波数2.4将与[2.x.101]方向的域范围即2.5相匹配，这样我们在[2.x.102]包括[2.x.103]或余弦的三个整波旋转处得到一个周期性的解。第一个函数定义了解和它的梯度，分别用于表达Dirichlet和Neumann边界条件的解析解。此外，一个代表解的负拉普拉斯的类被用来表示右手边（强制）函数，我们用它来匹配离散化版本中的给定分析解（制造解）。
*


*


* [1.x.44]
*
* [1.x.45] [1.x.46]。


*
* `LaplaceOperator`类类似于 [2.x.104] 中的相应类。一个重要的区别是，我们没有从[2.x.105]中派生出这个类，因为我们想呈现[2.x.106]中的一些额外功能，这些功能在通用类[2.x.107]中是没有的。 我们从Subscriptor类中派生出这个类，以便能够在Chebyshev预处理程序中使用该操作符，因为该预处理程序通过SmartPointer存储底层矩阵。   
* 鉴于我们手工实现了一个完整的矩阵接口，我们需要添加一个`initialize()`函数，一个`m()`函数，一个`vmult()`函数，以及一个`Tvmult()`函数，这些都是之前由 [2.x.108] 我们的LaplaceOperator还包含一个成员函数`get_penalty_factor()`，根据 [2.x.109] 集中选择对称内部惩罚方法中的惩罚参数.
*


*


* [1.x.47]
*
* `%PreconditionBlockJacobi`类定义了我们对这个问题的自定义预处理程序。与基于矩阵对角线的[2.x.110]不同，我们在这里通过使用介绍中讨论的所谓快速对角线化方法来计算不连续Galerkin方法中对角线块的近似反演。
*


*


* [1.x.48]
*
* 这个独立的函数在 "LaplaceOperator "和"%PreconditionBlockJacobi "类中都被用来调整鬼魂范围。这个函数是必要的，因为`vmult()`函数所提供的一些向量没有用包括正确的鬼魂条目布局的[2.x.111]来正确初始化，而是来自MGTransferMatrixFree类，该类对无矩阵类的鬼魂选择没有概念。为了避免索引混乱，我们必须在对这些向量进行实际操作之前调整鬼域。由于向量在多网格平滑器和传输类中被保留下来，一个曾经被调整过重影范围的向量在对象的整个生命周期中都会保持这种状态，所以我们可以在函数的开始使用一个快捷方式来查看分布式向量的分区器对象（以共享指针的形式存储）是否与MatrixFree所期望的布局相同，它存储在一个通过[2.x.112]访问的数据结构中]，其中的0表示从中提取的DoFHandler编号；我们在MatrixFree中只使用一个DoFHandler，所以这里唯一有效的编号是0。
*


*


* [1.x.49]
*
* 接下来的五个函数用于清除和初始化`LaplaceOperator`类，返回持有MatrixFree数据容器的共享指针，以及正确初始化向量和运算符的大小，与[2.x.113]或者说[2.x.114]的内容相同。
*


* [1.x.50]
*
* 这个函数实现了LaplaceOperator对向量`src`的操作，并将结果存储在向量`dst`中。与[2.x.115]相比，这个调用有四个新特性。   
* 第一个新特性是上面提到的`adjust_ghost_range_if_necessary`函数，它需要将向量适合于单元格和面函数中FEEvaluation和FEFaceEvaluation所期望的布局。   
* 第二个新特征是我们没有像[2.x.116]中那样实现`vmult_add()`函数（通过虚拟函数[2.x.117]，而是直接实现`vmult()`功能。由于单元和面的积分都将和到目的向量中，我们当然必须在某处将向量归零。对于DG元素，我们有两个选择&ndash；一个是使用[2.x.118]而不是下面`apply_cell`函数中的[2.x.119]。这是因为MatrixFree中的循环布局是这样的：单元积分总是在面积分之前触及给定的向量条目。然而，这实际上只适用于完全不连续的基数，其中每个单元都有自己的自由度，不与邻近的结果共享。另一种设置，即这里选择的设置，是让[2.x.120]来处理向量的归零问题。这可以被认为是简单地在代码中调用`dst = 0;`。对于像[2.x.121]这样的支持性向量来说，实现起来就比较麻烦了，因为我们的目标是不要一次性将整个向量清零。在足够小的几千个向量项上进行归零操作的好处是，在[2.x.122]和[2.x.123]中再次访问之前，被归零的向量项会保留在缓存中，因为无矩阵运算符的评估真的很快，仅仅归零一个大的向量就会相当于运算符评估时间的25%，我们显然希望避免这种代价。这种将向量归零的选项也适用于[2.x.124]和连续基数，尽管在[2.x.125]或[2.x.126]的教程程序中没有使用它。   
* 第三个新特性是我们提供在单元格、内面和边界面计算的函数的方式。MatrixFree类有一个叫做`loop`的函数，它接收三个函数指针，用于三种情况，允许分开实现不同的东西。正如在[2.x.127]中所解释的，这些函数指针可以是[2.x.128]对象或类的成员函数。在这种情况下，我们使用成员函数的指针。   
* 最后的新特征是可以给[2.x.129]类型的最后两个参数，这个类将面积分的数据访问类型传递给并行向量的MPI数据交换例程[2.x.131]和[2.x.132]。其目的是不发送相邻元素的所有自由度，而是将数据量减少到手头计算真正需要的程度。数据交换是一个真正的瓶颈，特别是对于高自由度的DG方法来说，因此一个更严格的交换方式往往是有益的。枚举字段[2.x.133]可以取值`none`，这意味着根本不做面的积分，这与[2.x.134]的值`values`类似，意味着只使用面的形状函数值（但不使用导数），而值`gradients`则意味着除了值之外还可以访问面的第一导数。值`unspecified`意味着所有的自由度将被交换给位于处理器边界的面，并指定在本地处理器上进行处理。   
* 为了了解数据如何被减少，想想节点元素FE_DGQ的情况，节点点在元素表面，在一个单元的[2.x.138]自由度中，只有[2.x.135]自由度对一个面的多项式程度[2.x.136]的值有贡献。类似的减少也可以用于内部惩罚方法，该方法对面的数值和一阶导数进行评估。当在一维中使用类似Hermite的基时，最多只有两个基函数对值和导数有贡献。FE_DGQHermite类实现了这一概念的张量乘积，在介绍中已经讨论过。因此，每个面只必须交换[2.x.139]个自由度，一旦[2.x.140]个自由度大于4个或5个，这显然是一种胜利。请注意，FE_DGQHermite的这种减少的交换在具有弯曲边界的网格上也是有效的，因为导数是在参考元素上取的，而几何体只在内部混合它们。因此，这与试图用连续的Hermite型形状函数获得[2.x.141]的连续性是不同的，在这种情况下，非笛卡尔的情况大大改变了情况。显然，在非笛卡尔网格上，导数还包括超出法向导数的形状函数的切向导数，但这些也只需要元素表面的函数值。如果元素不提供任何压缩，循环会自动交换受影响单元的所有条目。
*


*


* [1.x.51]
*
* 因为拉普拉斯是对称的，所以`Tvmult()`（多网格平滑界面需要）操作被简单地转发到`vmult()`的情况。
*


*


* [1.x.52]
*
* 单元操作与 [2.x.142] 非常相似。不过我们在这里没有使用系数。第二个区别是，我们用一个单一的函数调用[2.x.145]代替了[2.x.143]后面的两个步骤，该函数在内部调用了两个单独方法的序列。同样，[2.x.146]实现了[2.x.147]之后的[2.x.148]的序列。 在这种情况下，这些新函数只是节省了两行代码。然而，我们将它们用于与FEFaceEvaluation的类比，在那里它们更重要，如下所述。
*


*

* [1.x.53]
*
* 面的操作实现了与[2.x.149]相类似的内部惩罚方法的条款，正如介绍中所解释的。我们需要两个评价器对象来完成这个任务，一个用来处理来自内部面的两边之一的单元格的解，另一个用来处理来自另一边的解。面积分的评价器被称为FEFaceEvaluation，并在构造函数的第二个槽中接受一个布尔参数，以指示评价器应属于两边中的哪一边。在FEFaceEvaluation和MatrixFree中，我们称两边中的一边为 "内部"，另一边为 "外部"。`外部'这个名字是指两边的评价器将返回相同的法向量。对于 "内部 "一侧，法向量指向外部，而另一侧则指向内部，并且与该单元的外部法向量相对应。除了新的类名之外，我们再次得到了一系列的项目，与[2.x.150]中讨论的类似，但在这种情况下是针对内部面的。请注意，MatrixFree的数据结构形成了面的批次，类似于单元积分的单元批次。一批中的所有面涉及不同的单元格编号，但在参考单元格中具有相同的面编号，具有相同的细化配置（无细化或相同的子面）和相同的方向，以保持SIMD操作的简单和高效。   
* 请注意，除了法线方向的逻辑决定外，内部与外部没有任何隐含的意义，这在内部是相当随机的。我们绝对不能依赖分配内部与外部标志的某种模式，因为这个决定是为了MatrixFree设置例程中的访问规则性和统一性而做出的。由于大多数正常的DG方法都是保守的，也就是说，通量在接口的两边看起来都是一样的，所以如果内部/外部标志被调换，法线向量得到相反的符号，那么数学是不会改变的。
*


*


* [1.x.54]
*
* 在给定的一批面孔上，我们首先更新指向当前面孔的指针，然后访问矢量。如上所述，我们将向量的访问与评估结合起来。在面积分的情况下，对于FE_DGQHermite基础的特殊情况，可以减少对向量的数据访问，正如上面解释的数据交换。因为在[2.x.152]个单元自由度中只有[2.x.151]个被乘以非零值或形状函数的导数，这种结构可以被用于评估，大大减少了数据访问。减少数据访问不仅是有益的，因为它减少了飞行中的数据，从而有助于缓存，而且当从单元格索引列表中相距较远的单元格中收集数值时，对面的数据访问往往比对单元格积分更不规则。
*


* [1.x.55]
*
* 接下来的两个语句是计算内部惩罚方法的惩罚参数。正如在介绍中所解释的，我们希望有一个像[2.x.153]那样的长度[2.x.154]法线到面的缩放比例。对于一般的非笛卡尔网格，这个长度必须由反雅各布系数乘以实坐标的法向量的乘积来计算。从这个 "dim "分量的向量中，我们必须最终挑选出与参考单元的法线方向一致的分量。在MatrixFree中存储的几何数据中，雅各布式中的分量被应用，使得后一个方向总是最后一个分量`dim-1`（这很有利，因为参考单元的导数排序可以与面的方向无关）。这意味着我们可以简单地访问最后一个分量`dim-1`，而不必在`data.get_face_info(face).internal_face_no`和`data.get_face_info(face).exterior_face_no`中查找局部面的编号。最后，我们还必须取这些因素的绝对值，因为法线可能指向正或负的方向。
*


* [1.x.56]
*
* 在正交点的循环中，我们最终计算了对内部惩罚方案的所有贡献。根据介绍中的公式，测试函数的值被乘以解决方案中的跳跃乘以惩罚参数和实空间中的法向导数的平均值的差值。由于内侧和外侧的两个评估器由于跳跃而得到不同的符号，我们在这里用不同的符号传递结果。测试函数的正态导数会被内侧和外侧的解决方案中的负跳跃所乘。这个术语，被称为邻接一致性术语，根据其与原始一致性术语的关系，在代码中还必须包括[2.x.155]的系数，由于测试函数槽中的平均数，它得到了二分之一的系数。
*


* [1.x.57]
*
* 一旦我们完成了对正交点的循环，我们就可以对面的积分循环进行和因子化操作，并将结果加到结果向量中，使用`integrate_scatter`函数。`scatter'这个名字反映了使用与`gather_evaluate'相同的模式将矢量数据分布到矢量中的分散位置。像以前一样，整合+写操作的组合允许我们减少数据访问。
*


* [1.x.58]
*
* 边界面函数大体上沿用了内部面函数。唯一的区别是，我们没有一个单独的FEFaceEvaluation对象为我们提供外部值 [2.x.156] ，但我们必须从边界条件和内部值 [2.x.157] 来定义它们。正如介绍中所解释的，我们在Dirichlet边界上使用[2.x.158]和[2.x.159]，在Neumann边界上使用[2.x.160]和[2.x.161] 。由于这个操作实现了同质部分，即矩阵-向量乘积，我们必须在这里忽略边界函数[2.x.162]和[2.x.163]，并在[2.x.164]中把它们加到右手边 注意，由于通过[2.x.166]把解[2.x.165]扩展到外部，我们可以保持所有因子[2.x.167]与内表面函数相同，也请看[2.x.168]中的讨论。   
* 在这一点上有一个陷阱。下面的实现使用一个布尔变量`is_dirichlet`来切换Dirichlet和Neumann情况。然而，我们解决的问题是，我们还想在一些边界上施加周期性的边界条件，即沿[2.x.169]方向的边界。人们可能会问，这里应该如何处理这些条件。答案是MatrixFree会自动将周期性边界视为技术上的边界，即两个相邻单元的解值相遇的内面，必须用适当的数值通量来处理。因此，周期性边界上的所有面将出现在`apply_face()`函数中，而不是这个函数中。
*


*


* [1.x.59]
*
* 接下来我们转向预处理程序的初始化。正如介绍中所解释的，我们想从一维质量和拉普拉斯矩阵的乘积中构造一个（近似的）单元矩阵的逆。我们的首要任务是计算一维矩阵，我们通过首先创建一个一维有限元来实现。在这里，我们没有预见到FE_DGQHermite<1>，而是从DoFHandler获得有限元的名称，用1替换[2.x.170]参数（2或3）来创建一个一维名称，并通过使用FETools来构造一维元素。
*


*


* [1.x.60]
*
* 至于在单位元素上计算一维矩阵，我们简单地写下在矩阵的行和列以及正交点上的典型装配程序会做什么。我们一劳永逸地选择相同的拉普拉斯矩阵，对内部面使用系数0.5（但可能由于网格的原因，在不同方向上的缩放比例不同）。因此，我们在Dirichlet边界（正确的系数应该是导数项为1，惩罚项为2，见[2.x.171]）或在Neumann边界（系数应该为0）犯了一个小错误。由于我们只在多网格方案中使用这个类作为平滑器，这个错误不会有任何重大影响，只是影响了平滑的质量。
*


* [1.x.61]
*
* 接下来的两个语句所集合的左右边界项似乎有一些任意的符号，但这些都是正确的，可以通过查看[2.x.172]并插入值来验证
*
* - 以及1D情况下的法向量的1。
*


* [1.x.62]
*
* 接下来，我们通过单元格，将缩放后的矩阵传递给TensorProductMatrixSymmetricSum，以实际计算代表逆的广义特征值问题。由于矩阵近似的构造为[2.x.173]，并且每个元素的权重是恒定的，我们可以在拉普拉斯矩阵上应用所有的权重，并且简单地保持质量矩阵不被缩放。在单元格的循环中，我们要利用MatrixFree类提供的几何体压缩，并检查当前的几何体是否与上一批单元格上的几何体相同，在这种情况下就没有什么可做的。一旦调用了`reinit()`，就可以通过[2.x.174]访问这种压缩。     
* 一旦我们通过FEEvaluation访问函数访问了反雅各布系数（我们取第4个正交点的，因为它们在笛卡尔单元的所有正交点上都应该是一样的），我们检查它是对角线的，然后提取原始雅各布系数的行列式，即反雅各布系数的行列式，并根据一维拉普拉斯乘以质量矩阵的[2.x.176]拷贝，设置权重为[2.x.175] 。
*


* [1.x.63]
*
* 一旦我们知道应该用什么系数来缩放拉普拉斯矩阵，我们就将这个权重应用于未缩放的DG拉普拉斯矩阵，并将数组发送到TensorProductMatrixSymmetricSum类中，用于计算介绍中提到的广义特征值问题。
*


*


* [1.x.64]
*
* 在DG背景下，用于近似块状Jacobi预处理的vmult函数非常简单。我们只需要读取当前单元格批的值，对张量积矩阵阵列中的给定条目进行逆运算，并将结果写回来。在这个循环中，我们覆盖了`dst`中的内容，而不是首先将条目设置为零。这对于DG方法来说是合法的，因为每个单元都有独立的自由度。此外，我们手动写出所有单元批的循环，而不是通过[2.x.177]我们这样做是因为我们知道我们在这里不需要通过MPI网络进行数据交换，因为所有的计算都是在每个处理器上的本地单元上完成的。
*


*


* [1.x.65]

* LaplaceProblem类的定义与 [2.x.178] 非常相似。一个区别是我们将元素度作为模板参数添加到类中，这将允许我们通过在`main()`函数中创建不同的实例，更容易在同一个程序中包含多个度。第二个区别是选择了FE_DGQHermite这个元素，它是专门用于这种方程的。
*


*


* [1.x.66]
*
* 设置函数在两个方面与 [2.x.179] 不同。首先是我们不需要为不连续的Ansatz空间插值任何约束，只需将一个假的AffineConstraints对象传入[2.x.180] 第二个变化是因为我们需要告诉MatrixFree也要初始化面的数据结构。我们通过为内部面和边界面分别设置更新标志来做到这一点。在边界面，我们需要函数值、它们的梯度、JxW值（用于积分）、法向量和正交点（用于边界条件的评估），而对于内部面，我们只需要形状函数值、梯度、JxW值和法向量。只要`mapping_update_flags_inner_faces`或`mapping_update_flags_boundary_faces`中的一个与UpdateFlags的默认值`update_default`不同，MatrixFree中的面数据结构总是被建立的。
*


*


* [1.x.67]

* 右手边的计算比[2.x.181]中要复杂一些。现在的单元项包括分析解的负拉普拉斯，`RightHandSide'，为此我们需要首先将VectorizedArray字段的Point，即一批点，通过分别评估VectorizedArray中的所有通道，拆成一个点。请记住，通道的数量取决于硬件；对于不提供矢量化的系统（或deal.II没有本征），它可能是1，但在最近的Intel架构的AVX-512上也可能是8或16。
*


* [1.x.68]
*
* 其次，我们还需要应用迪里切特和诺伊曼边界条件。这个函数是到函数[2.x.182]函数的缺失部分，一旦在迪里希特边界上的外部解决值[2.x.183]和[2.x.184]以及在诺伊曼边界上的[2.x.185]和[2.x.186]被插入并以边界函数[2.x.187]和[2.x.188]展开。需要记住的一点是，我们把边界条件移到右手边，所以符号与我们在解的部分施加的相反。     
* 我们本可以通过[2.x.189]部分发出单元格和边界部分，但我们选择手动写出所有面的完整循环，以了解面指数的索引布局在MatrixFree中是如何设置的：内部面和边界面都共享索引范围，所有批次的内部面的数字都比批次的边界单元格低。两种变体的单一索引使我们可以很容易地在两种情况下使用相同的数据结构FEFaceEvaluation，它附着在同一个数据域上，只是位置不同。内层面的批次数（其中一个批次是由于将几个面合并成一个面进行矢量化）由[2.x.190]给出，而边界面的批次数由[2.x.191]给出。
*


* [1.x.69]
*
* MatrixFree类让我们可以查询当前面批的边界_id。请记住，MatrixFree为矢量化设置了批次，使一个批次中的所有面具有相同的属性，其中包括它们的`边界_id`。因此，我们可以在这里为当前面的索引`face`查询该id，并在Dirichlet情况下（我们在函数值上添加一些东西）或Neumann情况下（我们在法线导数上添加一些东西）施加。
*


* [1.x.70]
*
* 由于我们手动运行了单元格的循环，而不是使用[2.x.192]，我们不能忘记与MPI进行数据交换
*
* 或者说，对于DG元素来说，我们不需要这样做，因为每个单元都有自己的自由度，而且单元和边界积分只对本地拥有的单元进行量的评估。与相邻子域的耦合只能通过内表面积分来实现，我们在这里没有做这个。尽管如此，在这里调用这个函数并没有什么坏处，所以我们这样做是为了提醒大家里面发生了什么[2.x.193] 。
*


* [1.x.71]
*
* `solve()`函数几乎是逐字复制自 [2.x.194] 。我们设置了相同的多网格成分，即水平转移、平滑器和粗网格求解器。唯一不同的是，我们没有使用拉普拉斯的对角线作为用于平滑的切比雪夫迭代的预处理，而是使用我们新解决的类`%PreconditionBlockJacobi`。不过，机制是一样的。
*


* [1.x.72]
*
* 因为我们已经用分析法解决了一个问题，所以我们想通过计算数值结果与分析法的L2误差来验证我们实现的正确性。
*


*


* [1.x.73]
*
* `run()`函数设置了初始网格，然后以常规方式运行多网格程序。作为一个域，我们选择一个矩形，在[2.x.195]-方向上有周期性的边界条件，在[2.x.196]方向上的正面（即索引号为2的面，边界id等于0）有一个Dirichlet条件，在3D情况下，背面以及[2.x.197]方向上的两个面有Neumann条件（边界id等于1）。与[2.x.199]和[2.x.200]方向相比，[2.x.198]方向的域的范围有些不同（鉴于 "解决方案 "的定义，我们希望在这里实现周期性的解决方案）。
*


*


* [1.x.74]
*
* `main()`函数中没有任何意外。我们通过`MPI_Init()`类调用`MPI_InitFinalize`，传入文件顶部设置的关于维度和度的两个参数，然后运行拉普拉斯问题。
*


*


* [1.x.75]
* [1.x.76][1.x.77] 。


*[1.x.78][1.x.79] 。


* 就像在[2.x.201]中一样，我们以运行时间来评估多栅格求解器。  在两个空间维度上，元素的度数为8，可能的输出如下。
* [1.x.80]

* 与[2.x.202]一样，随着问题大小的增加，CG的迭代次数保持不变。迭代次数要高一些，这是因为我们使用的切比雪夫多项式的度数较低（[2.x.203]中是2比5），而且内部惩罚离散化的不特征值分布也比较大。尽管如此，13次迭代将残差减少了12个数量级，或者说每次迭代几乎是9个系数，这表明这是一个总体上非常有效的方法。特别是，当使用12个核心时，我们可以在5秒内解决一个具有2100万自由度的系统，这是一个非常好的效率。当然，在二维中，我们已经进入了八次方程的四舍五入体系；事实上，大约83000个自由度或0.025个自由度就足以完全收敛这个（简单的）分析解。
* 如果我们在三个空间维度上运行这个程序，并没有什么变化，只是我们现在用更高的多项式度和更大的网格尺寸来做一些更有用的事情，因为舍入误差只在最细的网格上获得。尽管如此，我们仍然可以在一台12核心的机器上非常容易地解决一个具有三个周期的波浪的三维拉普拉斯问题，并达到四舍五入的精度，这一点非常了不起。
*
* - 在第二至最大的案例中，24m DoFs总共使用了约3.5GB的内存，花费不超过8秒。最大的案例使用了30GB的内存，有1.91亿个DoFs。
* [1.x.81]

*[1.x.82][1.x.83]
*

* 在介绍和代码注释中，多次提到用FEE评估和FEFaceEvaluation评估器可以非常有效地处理高阶。现在，我们想通过观察三维多网格求解器对不同多项式阶数的吞吐量来证实这些说法。我们收集的时间如下。我们首先在接近一千万的问题规模下运行一个求解器，如表前四行所示，并记录时间。然后，我们通过记录每秒解决的百万自由度数（MDoFs/s）来规范吞吐量，以便能够比较不同自由度的效率，其计算方法是自由度数除以求解器时间。
* [2.x.204]
* 我们清楚地看到每个自由度的效率最初是如何提高的，直到它达到多项式程度的最大值 [2.x.205] 。这种效果是令人惊讶的，不仅是因为较高的多项式度数通常会产生一个好得多的解决方案，而且特别是当考虑到基于矩阵的方案时，在较高的度数下密度耦合会导致单调地减少吞吐量（在三维中是巨大的，[2.x.206]比[2.x.207]慢十倍以上！）。对于更高的度数，吞吐量略有下降，这既是由于迭代次数的增加（从[2.x.208]的12次到[2.x.209]的19次），也是由于操作评估的[2.x.210]的复杂性。尽管如此，对于更高的多项式度数来说，解题时间的效率仍然会更好，因为它们有更好的收敛率（至少对于像这个问题一样简单的问题）。对于[2.x.211]，我们在100万个DoFs（求解时间小于1秒）的情况下已经达到了舍入精度，而对于[2.x.212]，我们需要2400万个DoFs和8秒。对于[2.x.213]，误差约为[2.x.214]，有5700万个DoFs，因此，尽管需要16秒的时间，但仍然离舍入很远。
* 请注意，上述数字有点悲观，因为它们包括切比雪夫平滑器计算特征值估计的时间，这大约是求解器时间的10%。如果系统被多次求解（例如在流体力学中很常见），这个特征值的成本只需支付一次，更快的时间就可以得到。
*[1.x.84][1.x.85]
*

* 最后，我们看一下教程中的一些特殊成分，即FE_DGQHermite基础和[2.x.215]的指定。]设置为 "未指定 "而非最佳 "梯度"，最后一行是用基本的FE_DGQ元素替换FE_DGQHermite，其中MPI交换更加昂贵，操作由[2.x.217]和[2.x.218]完成。
* [2.x.219]
* 表中的数据显示，如果不使用[2.x.220]，对于较高的多项式度数，成本会增加10%左右。对于较低的度数，差异显然没有那么明显，因为体积与表面的比例更有利，需要改变的数据更少。如果只看矩阵-向量乘积，而不是这里显示的完整的多网格求解器，差异会更大，仅仅因为MPI通信，就有大约20%的工作量。
* 对于[2.x.221]和[2.x.222]，类似Hermite的基函数显然没有真正发挥作用（事实上，对于[2.x.223]，多项式与FE_DGQ完全相同），其结果与FE_DGQ基类似。然而，对于从三开始的度数，我们看到FE_DGQHermite的优势越来越大，显示了这些基函数的有效性。
* [1.x.86][1.x.87] 。


* 正如介绍中提到的，快速对角线化方法是与具有恒定系数的笛卡尔网格相联系的。如果我们想解决可变系数的问题，我们需要在平滑参数的设计上投入更多的时间，选择适当的概括（例如，在最近的箱形元素上近似反）。
* 另一种扩展程序的方式是包括对自适应网格的支持，对于这种支持，在不同细化水平的边缘的界面操作是必要的，正如在[2.x.224]中所讨论的那样。
*

* [1.x.88][1.x.89] [2.x.225] 。
* [0.x.1]

