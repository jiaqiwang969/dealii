include/deal.II-translator/fe/fe_dgp_monomial_0.txt
[0.x.0]*
 基于单项式的不连续有限元。
* 这种有限元实现了完整的多项式空间，即p度的dim-维多项式。例如，在2d中，元素FE_DGP(1)将代表函数[2.x.0]的跨度，这与由[2.x.1]的跨度形成的元素FE_DGQ(1)相反。由于DGP空间中每个四边形只有三个未知数，因此立即可以看出这个元素不可能是连续的。
* 这个元素的基函数被选择为上面列出的单项式。请注意，这是与FE_DGP类的主要区别，FE_DGP类使用一组完整度数[2.x.2]的多项式，在单位平方上形成Legendre基。因此，在那里，如果网格单元是平行四边形，质量矩阵是对角线的。这里的基不具有这种特性；然而，它的计算更简单。另一方面，这个元素有一个额外的缺点，即局部单元矩阵通常比源自FE_DGP元素的矩阵有更差的条件数。
* 这类元素没有在二维一的情况下实现（<tt>spacedim != dim</tt>）。
* [1.x.0]
* 值得注意的是，在（双，三）线性映射下，这个元素描述的空间不包含[2.x.3] ，即使我们使用度数为[2.x.4]的多项式基。因此，例如，在具有非affine单元的网格上，线性函数不能由FE_DGP(1)或FE_DGPMonomial(1)类型的元素准确表示。
* 这可以通过下面的二维例子来理解：考虑顶点在[2.x.5]的单元：[2.x.6] 的单元。
* 对于这个单元，双线性变换[2.x.7]产生的关系[2.x.8]和[2.x.9]将参考坐标[2.x.10]和实空间坐标[2.x.11]关联起来。在这种映射下，常数函数显然被映射到它自己，但[2.x.12]空间的另外两个形状函数，即[2.x.13]和[2.x.14]被映射到[2.x.15]，其中[2.x.16] 。
* 对于[2.x.17]这种简单情况，即如果实心单元是单位平方，表达式可以简化为[2.x.18]和[2.x.19] 。然而，对于所有其他情况，函数[2.x.20]不再是线性的，也不是它们的任何线性组合。因此，线性函数不在映射的[2.x.21]多项式的范围内。
* 

* [1.x.1] 在2d中，这个元素的形状函数看起来如下。
* [1.x.2]
* [2.x.22] 
* [1.x.3]
* [2.x.23] 
* 

* [1.x.4]
* [2.x.24] 
 

* [1.x.5]
* [2.x.25] 
 

* [1.x.6] [2.x.26]. 

 
* [0.x.1]*
   度数为<tt>p</tt>的多项式空间的构造函数。 
* [0.x.2]*
   返回一个唯一标识有限元的字符串。这个类返回<tt>FE_DGPMonomial<dim>(degree)</tt>，其中<tt>dim</tt>和<tt>p</tt>被适当的值替换。 
* [0.x.3]*
    [2.x.27] 支持hp的函数 [2.x.28] 。  
* [0.x.4]*
   如果在一个顶点上，有几个有限元处于活动状态，hp代码首先为这些FEs的每个自由度分配不同的全局索引。然后调用这个函数来找出其中哪些应该得到相同的值，从而可以得到相同的全局自由度指数。  因此，该函数返回当前有限元对象的自由度与[2.x.29]的自由度之间的相同性列表，后者是对代表在该特定顶点上活动的其他有限元之一的有限元对象的引用。该函数计算两个有限元对象的哪些自由度是等价的，两个自由度的编号都在零和两个有限元的n_dofs_per_vertex()的相应值之间。每一对的第一个索引表示本元素的一个顶点自由度，而第二个是另一个有限元素的相应索引。    作为一个不连续的元素，这种约束的集合当然是空的。 
* [0.x.5]*
   与hp_vertex_dof_indices()相同，只是该函数处理的是线上的自由度。    这是一个不连续的元素，这种约束的集合当然是空的。 
* [0.x.6]*
   与hp_vertex_dof_indices()相同，只是该函数处理的是四边形上的自由度。    这是一个不连续的元素，这种约束的集合当然是空的。 
* [0.x.7]*
   返回该元素是否以新的方式实现其悬挂节点约束，这必须用于使元素 "hp-compatible"。    对于FE_DGPMonomial类，结果总是真（与元素的程度无关），因为它没有悬挂节点（是一个不连续的元素）。 
* [0.x.8]*
    [2.x.30] [2.x.31].   
* [0.x.9]*
    [2.x.32]   
* [0.x.10]*
   返回从给定的有限元插值到现在的矩阵。然后矩阵的大小是[2.x.33]乘以<tt>source.n_dofs_per_cell()</tt>。    这些矩阵只有在源元素也是[2.x.34]元素时才可用。否则，会抛出一个[2.x.35]类型的异常。 
* [0.x.11]*
   返回从一个元素的一个面插值到邻近元素的面的矩阵。矩阵的大小是[2.x.36] dofs_per_face乘以<tt>source.dofs_per_face</tt>。    衍生元素将不得不实现这个功能。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现从一个给定元素的内插，那么他们必须抛出一个类型为[2.x.37]的异常。  
* [0.x.12]*
   返回从一个元素的一个面插值到邻近元素的面的矩阵。矩阵的大小是[2.x.38] dofs_per_face乘以<tt>source.dofs_per_face</tt>。    衍生元素将不得不实现这个功能。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现从一个给定元素的内插，那么他们必须抛出一个类型为[2.x.39]的异常。  
* [0.x.13]*
   如果形状函数[2.x.41]在面[2.x.42]的某处有非零函数值，该函数返回[2.x.40]。  
* [0.x.14]*
   确定这个对象的内存消耗（以字节为单位）的估计值。    这个函数是虚拟的，因为有限元对象通常是通过指向其基类的指针来访问的，而不是类本身。 
* [0.x.15]*
   仅供内部使用。其全称是[2.x.43]函数，它创建了[2.x.44]向量，在构造函数内需要传递给[2.x.45]FiniteElementData的构造函数。 
* [0.x.16]*
   初始化限制矩阵。从构造函数中调用。 
* [0.x.17]

