include/deal.II-translator/fe/mapping_0.txt
[0.x.0]*
 用于[2.x.0]函数的变换种类。
* 特殊的有限元可能需要从参考单元到实际网格单元的特殊Mapping。为了做到最灵活，这个枚举为任意变换提供了一个可扩展的接口。尽管如此，这些必须在继承类的transform()函数中实现，才能发挥作用。
* 

* 
* [2.x.1] 

* 
* [0.x.1]*
   无映射，即形状函数不从参考单元映射，而是直接在实空间单元上定义。 
* [0.x.2]*
   协变映射（详见[2.x.2]）。 
* [0.x.3]*
   等变量映射（详见[2.x.3]）。 
* [0.x.4]*
   协变向量场梯度的映射（详见[2.x.4]）。 
* [0.x.5]*
   不变向量场的梯度映射（详见[2.x.5]）。 
* [0.x.6]*
   通常用于Hdiv元素的皮奥拉变换。Piola变换是H<sup>div</sup>中矢量值元素的标准变换。  它相当于一个以体积元素的逆值为尺度的禁忌变换。 
* [0.x.7]*
   对应于mapping_piola变换的矢量场的梯度变换（详见[2.x.6]）。 
* [0.x.8]*
   用于Nedelec元素的映射。    卷曲元素被映射为协变向量。尽管如此，我们还是引入了一个单独的映射种类，这样我们就可以对向量和其梯度使用相同的标志（详见[2.x.7]）。 
* [0.x.9]*
   用于Raviart-Thomas元素的映射。 
* [0.x.10]*
   用于BDM元素的映射。 
* [0.x.11]*
   2-forms和三阶张量的映射。    这些是典型的应用于转换到参考单元的豫章的映射。    协变向量场的赫斯的映射（详见[2.x.8]）。 
* [0.x.12]*
   忌变向量场的犹豫值的映射（详见[2.x.9]）。 
* [0.x.13]*
   皮奥拉（piola）矢量场的赫斯的映射（详见[2.x.10]）。 
* [0.x.14]*
  [2.x.11] 映射类的抽象基类。
* 该类声明了用于描述从参考（单位）单元到实空间单元的映射功能的接口，以及用于填写使用FEValues、FEFaceValues和FESubfaceValues类所需的信息。这些接口的具体实现是在派生类中提供的。
* [1.x.0]
* 映射是一种转换[2.x.12]，它将参考单元[2.x.14]中的点[2.x.13]映射到实际网格单元[2.x.16]中的点[2.x.15] 。这种映射的许多应用都需要这种映射的雅各布， [2.x.17] 。例如，如果dim=spacedim=2，我们有 [1.x.1] 。
* [1.x.2]
*标量有限元的形状函数通常是在参考单元上定义的，然后根据规则[1.x.3]简单地进行映射。
* 

* [1.x.4]
* 使用简单的变量变化，标量函数在一个单元上的积分 [2.x.18] 可以表示为在参考单元上的积分 [2.x.19] 。具体来说，体积形式[2.x.20]被转换为[1.x.5]。
* 在这种积分被正交近似的表达中，这就导致了形式为[1.x.6]的项。 这里，每个正交点的权重[2.x.21]（其中[1.x.7]象征着[1.x.8]）在原始积分中扮演了[2.x.22]的角色。因此，它们出现在所有计算正交积分的代码中，并通过[2.x.23]访问。
* [2.x.24] 记录了在二维-1的情况下会发生什么。
* 

* [1.x.9]
* 矢量场或微分形式（标量函数的梯度）[2.x.25] ，以及矢量场的梯度[2.x.26]的变换遵循一般形式
* [1.x.10] 微分形式[1.x.11]和[1.x.12]是由被转换的对象的种类决定。这些转换是通过transform()函数进行的，被转换的对象的类型由其MappingKind参数指定。关于可能的选择，请看那里的文档。
* [1.x.13]
* 一些应用需要映射的导数，其中一阶导数是映射的Jacobian， [2.x.27] ，如上所述。映射的高阶导数也有类似的定义，例如，雅各布导数 [2.x.28] ，以及雅各布二阶导数 [2.x.29] 。定义高阶导数的 "前推 "版本也很有用：雅各布前推导数，[2.x.30] ，以及雅各布后推导数，[2.x.31] 。这些向前推的版本可以用来计算定义在参考单元上的函数相对于实际单元坐标的高阶导数。例如，相对于实细胞坐标的雅各布导数由以下公式给出。
* [1.x.14]，而相对于实细胞坐标的雅各布反导也同样由以下公式给出。[1.x.15]
* 以类似的方式，在参考单元上定义的函数的高阶导数，相对于实数单元坐标，可以使用雅各布式推前高阶导数来定义。例如，Jacobian pushed-forward导数相对于实际单元坐标的导数由以下公式给出。
* [1.x.16]
* [1.x.17]
* 关于微分几何和有限元的一般出版物是调查报告[2.x.32] [2.x.33] Douglas N. Arnold, Richard S. Falk, and Ragnar Winther. [1.x.18] Bull. Amer. Math. Soc. (N.S.), 47:281-354, 2010. [1.x.19].  [2.x.34] 
*皮奥拉变换的描述来自休斯顿大学Ronald H. W. Hoppe的[1.x.20]，第七章。
* 

* 
* [2.x.35] 

* 
* [0.x.15]*
   虚拟解构器。 
* [0.x.16]*
   返回一个指向当前对象副本的指针。然后，这个副本的调用者将拥有它的所有权。    这个函数在这个基类中被声明为抽象的虚函数，派生类将不得不实现它。    这个函数主要由[2.x.36]类使用。 
* [0.x.17]*
   返回一个单元格的映射顶点。    大多数时候，这些值将仅仅是由[2.x.37]返回的顶点[2.x.38]的坐标，即由三角法存储的信息。  然而，也有增加位移或选择完全不同位置的映射，例如MappingQEulerian, MappingQ1Eulerian, 或MappingFEField。    这个函数的默认实现只是返回三角形所存储的信息，即：[2.x.39] .  
* [0.x.18]*
   返回一个单元格的映射中心。    如果你使用的是保留顶点位置的(bi-,tri-)线性映射，这个函数只是返回同样由`cell->center()`产生的值。然而，也有一些映射会增加位移或选择完全不同的位置，例如MappingQEulerian、MappingQ1Eulerian或MappingFEField，以及基于高阶多项式的映射，对于这些映射，中心可能不会与顶点位置的平均值重合。    默认情况下，该函数返回参考单元中心的前推。如果参数[2.x.40]被设置为false，那么返回值将是由get_vertices()方法返回的顶点位置的平均值。     [2.x.41] cell 你想计算中心的单元格 [2.x.42] map_center_of_reference_cell 一个标志，用于将计算单元格中心的算法从应用于参考单元格中心的transform_unit_to_real_cell()转换为计算顶点平均数。 
* [0.x.19]*
   返回映射的单元格的边界盒。    如果你使用的是保留顶点位置的(bi-,tri-)线性映射，这个函数简单地返回同样由`cell->bounding_box()`产生的值。然而，也有一些映射会增加位移或选择完全不同的位置，例如MappingQEulerian、MappingQ1Eulerian或MappingFEField。    对于线性映射，该函数返回包含单元格所有顶点的边界框，如get_vertices()方法所返回的。对于通过支持点定义的高阶映射，边界盒只保证包含所有支持点，而且一般来说，它只是真正边界盒的近似值，可能更大。     [2.x.43]单元格 你想计算边界框的单元格  
* [0.x.20]*
   返回映射是否保留了顶点位置。换句话说，这个函数返回参考单元格顶点的映射位置（由[2.x.44]给出）是否等于[2.x.45]的结果（即由三角法存储的信息）。    例如，派生类中的实现对MappingQ、MappingQGeneric、MappingCartesian返回[2.x.46]，但对MappingQEulerian、MappingQ1Eulerian、MappingFEField返回[2.x.47]。 
* [0.x.21]*
   返回这个Mapping实例是否与[2.x.48]中的单元格类型兼容。  
* [0.x.22]*
    [2.x.49] 引用单元格和实数单元格之间的映射点 [2.x.50] 。  
* [0.x.23]*
   将单元格上的点[2.x.51]映射到实数单元格上的相应点[2.x.52] [2.x.53] 单元格 迭代器到将用于定义映射的单元。   [2.x.54] p 参考单元格上一个点的位置。   [2.x.55] 参考点的位置，使用由当前实现映射的派生类所定义的映射映射到实空间，以及第一个参数所确定的单元格的坐标。 
* [0.x.24]*
   将实数[2.x.56]上的点[2.x.57]映射到单元格上的相应点，并返回其坐标。这个函数提供了transform_unit_to_real_cell()所提供的映射的逆映射。    在一维的情况下，本函数返回实点[2.x.58]在[2.x.59]所标识的曲线或曲面上的法线投影。    
* [2.x.60] 如果要计算反映射的点位于单元格边界之外，从参考（单位）单元格坐标到实数单元格坐标系的多项式映射并不总是可逆的。在这种情况下，当前函数可能无法计算参考单元上的一个点，该点在映射下的图像等于给定的点 [2.x.61] 如果是这种情况，该函数会抛出一个 [2.x.62] 类型的异常。因此，给定的点[2.x.63]是否位于单元格之外可以通过检查返回的参考坐标是否位于参考单元格之内或之外来确定（例如，使用[2.x.64]或上述异常是否被抛出。     [2.x.65] cell 将用于定义映射的单元的迭代器。   [2.x.66] p 给定单元格上的一个点的位置。   [2.x.67] 点的参考单元位置，当映射到实空间时等于第二个参数给出的坐标。这个映射使用由当前实现映射的派生类所定义的映射，以及第一个参数所确定的单元格的坐标。 
* [0.x.25]*
   将多个点从真实点位置映射到参考位置的点。其功能基本上与在所有点上循环并为每个点单独调用[2.x.68]函数相同，但对于某些实现了更专业的版本的映射，如MappingQGeneric，其速度会更快。行为上的唯一区别是，这个函数永远不会抛出ExcTransformationFailed()异常。如果对`real_points[i]`转换失败，返回的`unit_points[i]`包含[2.x.69]作为第一个条目。 
* [0.x.26]*
   将实数[2.x.71]上的点[2.x.70]转换为参考单元上的对应点，然后将此点投射到给定面数[2.x.72]的面的坐标系中的一个(dim-1)维的点，理想情况下，点[2.x.73]靠近面[2.x.74]，但技术上单元中的任何点都可以被投影。    当dim=1时，这个函数没有物理意义，所以在这种情况下它会抛出一个异常。 
* [0.x.27]*
    [2.x.75]   
* [0.x.28]*
    [2.x.76] 异常情况 [2.x.77]   
* [0.x.29]*
   异常情况  
* [0.x.30]*
   计算实空间点和参考空间点之间的映射失败，通常是因为给定的点位于反向映射不唯一的单元之外。   
* [2.x.78]   
* [0.x.31]*
   deal.II假设雅各布行列式为正。当单元格的几何形状在映射的图像下被扭曲时，映射变得无效，并抛出这个异常。   
* [2.x.79]   
* [0.x.32]*
    [2.x.80]   
* [0.x.33]*
    [2.x.81] 与FEValues的接口 [2.x.82].   
* [0.x.34]*
   用于映射对象内部数据的基类。内部机制是，在构建FEValues对象时，它要求将要使用的映射和有限元类为自己的目的分配内存，在其中可以存储只需要计算一次的数据。例如，大多数有限元将在这个对象中存储正交点的形状函数值，因为它们不会在单元之间变化，只需要计算一次。对于希望只在正交点评估一次用于映射的形状函数的映射类也是如此。    由于使用不同正交规则的不同FEValues对象可能同时访问同一个映射对象，因此有必要为每个FEValues对象创建一个这样的对象。FEValues通过调用[2.x.83]或在现实中调用派生类中相应函数的实现来做到这一点。由[2.x.84]创建的对象的所有权随后被转移到FEValues对象中，但每次要求它计算具体单元的信息时，这个对象的引用就会被传递给映射对象。当[2.x.85]（或FEFaceValues和FESubfaceValues中的相应类）调用[2.x.86]（以及类似地通过[2.x.87]和[2.x.88]该类的目的是让映射对象存储可以在开始时在参考单元上计算一次的信息，并在以后计算具体单元的信息时访问它。因此，交给[2.x.89]的对象被标记为[2.x.90] ，因为假设在使用这些信息的时候，不需要再次修改。然而，从Mapping派生出来的类也可以将这类对象用于其他两个目的。
* 

* 
* 

* 
 

 
 

 
 

 
 

 
* 
* - 为在[2.x.91]和类似函数中进行的计算提供划痕空间。一些派生类希望使用从头开始的数组，如果每次调用这个函数时都要分配这些数组，只是在函数结束时再去分配，那就太浪费时间了。相反，可以把这块内存作为当前类的成员变量分配一次，然后在[2.x.92]中简单地使用它。
* 

* 
* 

* 
 

 
* 
* - 在调用[2.x.93]后，[2.x.94]调用[2.x.95]，其中有限元计算形状函数的值、梯度等，使用与这里描述的机制类似的开始时计算的信息（见[2.x.96 作为其工作的一部分，[2.x.98]的一些实现需要转换形状函数数据，它们通过调用[2.x.99]来实现。对后者的调用也会收到对[2.x.100]对象的引用。由于[2.x.101]可能会在每个单元上被多次调用，有时值得派生类在[2.x.102]中只计算一次某些信息，并在[2.x.103]中重复使用，这些信息也可以存储在派生映射类从InternalDataBase派生的类中。    在这两种情况下，被传递的InternalDataBase对象都是 "道德上的约束"，也就是说，任何外部观察者都无法判断[2.x.104]的抓取数组或一些中间数据是否被[2.x.105]所修改。因此，InternalDataBase对象总是作为[2.x.106]对象被传递。因此，想要利用上述两种额外用途的派生类需要将他们想要用于这些目的的成员变量标记为[2.x.107]，以允许它们被修改，尽管周围的对象被标记为[2.x.108] 。 
* [0.x.35]*
     构造函数。设置update_flags为[2.x.109]，[2.x.110]为[2.x.111] 。    
* [0.x.36]*
     禁止复制构造。   
* [0.x.37]*
     派生类的虚拟解构器    
* [0.x.38]*
     一组更新标志，指定Mapping接口的实现需要在每个单元或面计算的信息种类，即在[2.x.112]和朋友圈。        这组标志被[2.x.113][2.x.114]或[2.x.115]的实现存储在这里，是传递给那些需要对每个单元进行重新计算的函数的更新标志的子集。    (对应于在调用[2.x.116]时已经可以一次性计算的信息的标志子集。
* 
* - 或该接口的实现
* 
* - 不需要存储在这里，因为它已经被处理过了)。   
* [0.x.39]*
     返回这个对象的内存消耗估计值（以字节为单位）。   
* [0.x.40]*
   给定一组更新标志，计算哪些其他的量[1.x.21]需要被计算，以满足给定标志的请求。  然后返回原始标志集和刚刚计算的标志的组合。    举个例子，如果[2.x.117]包含update_JxW_values（即雅各布式的行列式和正交公式提供的权重的乘积），一个映射可能需要计算完整的雅各布式矩阵，以便计算其行列式。然后他们将不仅返回update_JxW_values，而且还返回update_jacobians。在计算JxW值的派生类中，内部实际上不是这样做的
* 
* - 他们设置了update_contravariant_transformation来代替，由此也可以计算出行列式。
* 
* - 但这并不影响这个例子的启发性）。)     关于这个函数和FEValues之间的互动的广泛讨论可以在[2.x.118]文档模块中找到。     [2.x.119] UpdateFlags  
* [0.x.41]*
   创建并返回一个指向对象的指针，映射可以在该对象中存储数据，这些数据只需要计算一次，但在映射应用于具体单元时都可以使用（例如，在各种transform()函数中，以及构成映射与FEValues类接口的fill_fe_values()、fill_fe_face_values()和fill_fe_subface_values()中）。    派生类将返回指向从[2.x.120]派生的类型的对象的指针（更多信息见那里），并且可能已经预先计算了一些信息（根据未来对映射的要求，由更新标志指定）和给定的正交对象。随后对transform()或fill_fe_values()和friends的调用将收到这里创建的对象（具有相同的更新标志集和相同的正交对象）。因此，派生类可以在其get_data()函数中预先计算一些信息，并将其存储在内部数据对象中。    映射类不会跟踪由该函数创建的对象。因此，所有权将归调用者所有。    关于这个函数和FEValues之间的互动的广泛讨论可以在[2.x.121]文档模块中找到。     [2.x.122] update_flags 一组标志，定义了在未来调用transform()或fill_fe_values()函数组时对映射类的期望。这组标志可能包含映射不知道如何处理的标志（例如，对于事实上由有限元类计算的信息，如[2.x.123] 派生类将需要存储这些标志，或者至少是需要映射在fill_fe_values()中执行任何操作的标志子集，在[2.x.124] [2.x.125] quadrature 必须计算映射信息的正交对象。这包括正交点的位置和权重。   [2.x.126] 一个指向新创建的InternalDataBase类型（或派生类）对象的指针。该对象的所有权转移给调用函数。   
* [2.x.127] C++允许派生类中的虚拟函数可以返回不是InternalDataBase类型的对象的指针，但实际上是指向InternalDataBase的类[1.x.22]的对象的指针。(这个特性被称为 "共变返回类型"。)这在某些情况下是很有用的，因为在派生类中的调用将立即使用返回的对象，知道它的真实（派生）类型。 
* [0.x.42]*
   像get_data()一样，但是为以后调用transform()或fill_fe_face_values()做准备，这些调用需要关于从参考面到具体单元面的映射信息。     [2.x.128] update_flags 一组标志，定义在未来调用transform()或fill_fe_values()函数组时对映射类的期望。这组标志可能包含映射不知道如何处理的标志（例如，对于事实上由有限元类计算的信息，如[2.x.129] 派生类将需要存储这些标志，或者至少是需要映射在fill_fe_values()中执行任何操作的标志子集，在[2.x.130] [2.x.131] quadrature 需要计算映射信息的正交对象。这包括正交点的位置和权重。   [2.x.132] 一个指向新创建的InternalDataBase类型（或派生类）对象的指针。该对象的所有权转移给调用函数。   
* [2.x.133] C++允许派生类中的虚拟函数可以返回不是InternalDataBase类型的对象的指针，但实际上是指向InternalDataBase的类[1.x.23]的对象的指针。(这个特性被称为 "共变返回类型"。)这在某些情况下是很有用的，因为在派生类中的调用将立即使用返回的对象，知道它的真实（派生）类型。 
* [0.x.43]*
    [2.x.134] 使用带有[2.x.135]参数的版本。 
* [0.x.44]*
   像get_data()和get_face_data()一样，但是为以后调用transform()或fill_fe_subface_values()做准备，这些调用将需要关于从参考面到具体单元的面的子（即子面）的映射信息。     [2.x.136] update_flags 一组标志，定义在未来调用transform()或fill_fe_values()函数组时对映射类的期望。这组标志可能包含映射不知道如何处理的标志（例如，对于事实上由有限元类计算的信息，如[2.x.137] 派生类将需要存储这些标志，或者至少是需要映射在fill_fe_values()中执行任何操作的标志子集，在[2.x.138] [2.x.139] quadrature 必须计算映射信息的正交对象。这包括正交点的位置和权重。   [2.x.140] 一个指向新创建的InternalDataBase类型（或派生类）对象的指针。该对象的所有权转移给调用函数。   
* [2.x.141] C++允许派生类中的虚拟函数可以返回不是InternalDataBase类型的对象的指针，但实际上是指向InternalDataBase的类[1.x.24]的对象的指针。(这个特性被称为 "共变返回类型"。)这在某些情况下是很有用的，在这些情况下，调用是在派生类中，并且将立即使用返回的对象，知道它的真实（派生）类型。 
* [0.x.45]*
   计算从参考单元到此函数的第一个参数所指示的实数单元的映射信息。派生类将不得不根据它们所代表的映射类型来实现这个函数。它被 [2.x.142] 调用。从概念上讲，这个函数代表了从参考坐标 [2.x.144] 到实空间坐标 [2.x.145] 的映射 [2.x.146] 的应用。它的目的是计算以下种类的数据。
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
* 
* - 从应用映射本身产生的数据，例如，计算实数单元上正交点的位置[2.x.147]，对FEValues的用户直接有用，例如在装配过程中。
* 

* 
* 

* 
* 

 
 
* - 数据是有限元实现在真实单元上计算其形状函数所必需的。为此，[2.x.148]函数在当前函数后调用[2.x.149]，该函数的输出作为[2.x.150]的输入。这里需要计算的信息的例子是映射的Jacobian，[2.x.151]或其逆，例如，将参考单元上的形状函数的梯度转换为实单元上形状函数的梯度。    这个函数计算出来的信息被用来填充这个函数的输出参数的各个成员变量。该结构中的哪些成员变量应该被填充，由存储在传递给该函数的[2.x.152]对象中的更新标志决定。    关于此函数和FEValues之间的互动的广泛讨论可以在[2.x.153]文档模块中找到。     [2.x.154] cell 三角形中的单元格，本函数要计算从参考单元格到的映射。   [2.x.155] cell_similarity 作为第一个参数的单元格是否是最近一次调用此函数的单元格的简单平移、旋转等。这个信息是通过匹配前一个单元和当前单元之间的顶点（由三角结构存储）简单计算出来的。这里传递的值可能被这个函数的实现所修改，然后应该被返回（见关于这个函数的返回值的讨论）。   [2.x.156] quadrature 对当前评估中使用的正交公式的引用。这个正交对象与创建[2.x.157]对象时使用的对象相同。该对象既用于映射正交点的位置，也用于计算每个正交点的JxW值（涉及正交权重）。   [2.x.158] internal_data 一个对先前由get_data()创建的对象的引用，可用于存储映射在参考单元上可以计算一次的信息。参见[2.x.159]类的文档，以了解这些对象的用途的广泛描述。   [2.x.160] output_data 对成员变量应被计算的对象的引用。并非所有这个参数的成员都需要被填充；哪些成员需要被填充是由存储在[2.x.161]对象内的更新标志决定的。   [2.x.162] 这个函数的[2.x.163]参数的一个更新值。当[2.x.164]调用[2.x.165]时，返回的值将被用于相应的参数。在大多数情况下，派生类只想返回为[2.x.166]cell_similarity传递的值。然而，这个函数的实现可能会降低细胞相似度的级别。例如，对于那些不仅考虑到单元格顶点的位置（如Triangulation所报告的），而且还考虑到映射的其他特定信息的类，就是这种情况。目的是[2.x.167]可以只根据单元格的顶点来计算一个单元格是否与前一个单元格相似，而映射也可以考虑位移场（例如，在MappingQ1Eulerian和MappingFEField类中）。在这种情况下，映射可能会得出结论，先前计算的单元格相似度过于乐观，并通过返回一个不那么乐观的单元格相似度值，使其在随后的使用中无效[2.x.168] 。   
* [2.x.169] FEValues确保这个函数总是用同一对[2.x.170]和[2.x.171]对象调用。换句话说，如果这个函数的实现知道它在之前的调用中已经把一个数据写入了输出参数，那么在以后的调用中，如果实现知道这是同一个值，就没有必要再把它复制到那里。 
* [0.x.46]*
   这个函数等同于[2.x.172]，但用于单元格的面。有关其目的的广泛讨论，请参见那里。它被[2.x.173][2.x.174]单元格所调用，该函数要计算从参考单元格到的映射。   [2.x.175] face_no 请求提供信息的给定单元的面的编号。   [2.x.176] quadrature 当前评估中使用的正交公式的引用。此正交对象与创建[2.x.177]对象时使用的对象相同。该对象既用于映射正交点的位置，也用于计算每个正交点的JxW值（涉及正交权重）。   [2.x.178] internal_data 一个对先前由get_data()创建的对象的引用，可用于存储映射在参考单元上可以计算一次的信息。参见[2.x.179]类的文档，以了解这些对象的用途的广泛描述。   [2.x.180] output_data 对成员变量应被计算的对象的引用。并非这个参数的所有成员都需要被填充；哪些成员需要被填充是由存储在[2.x.181]对象内的更新标志决定的。 
* [0.x.47]*
    [2.x.182] 使用带有[2.x.183]参数的版本。 
* [0.x.48]*
   这个函数等同于[2.x.184]，但适用于单元格的子面（即面的子女）。关于其目的的广泛讨论见那里。它被[2.x.185] [2.x.186] cell 三角形中的单元格，这个函数要为其计算从参考单元格到的映射。   [2.x.187] face_no 请求提供信息的给定单元的面的编号。   [2.x.188] subface_no 请求提供信息的给定单元的面的子的编号。   [2.x.189] quadrature 对当前评估中使用的正交公式的引用。这个正交对象与创建[2.x.190]对象时使用的对象相同。该对象既用于映射正交点的位置，也用于计算每个正交点的JxW值（涉及正交权重）。   [2.x.191] internal_data 一个对先前由get_data()创建的对象的引用，可用于存储映射在参考单元上可以计算一次的信息。参见[2.x.192]类的文档，以了解这些对象的用途的广泛描述。   [2.x.193] output_data 对成员变量应被计算的对象的引用。并非所有这个参数的成员都需要被填充；哪些成员需要被填充是由存储在[2.x.194]对象内的更新标志决定的。 
* [0.x.49]*
    [2.x.195]   
* [0.x.50]*
    [2.x.196] 将张量从参考坐标转换为实数坐标的函数 [2.x.197] 。  
* [0.x.51]*
   根据所选的MappingKind对矢量或1-差分形式的场进行变换。   
* [2.x.198] 通常情况下，这个函数被一个有限元调用，填充FEValues对象。对于这个有限元，应该有一个别名MappingKind，如[2.x.199] [2.x.200] 等。这个别名应该优先于使用下面的种类。    目前由派生类实现的映射种类是。   [2.x.201] [2.x.202] [2.x.203] 通过Jacobian将参考单元上的矢量场映射到物理单元。  [1.x.25] 在物理学中，这通常被称为反变量变换。在数学上，它是一个矢量场的前推。     2.x.204] [2.x.205] 将参考单元上的一形场映射到物理单元上的一形场。理论上，这将指的是DerivativeForm<1,dim,1>，但我们将这种类型与Tensor<1,dim>进行规范性的识别）。在数学上，它是微分形式的回拉[1.x.26]标量可微分函数的梯度是这样转化的。    在dim=spacedim的情况下，前面的公式简化为[1.x.27]，因为我们假设映射[2.x.206]总是可逆的，因此其雅各布[2.x.207]是一个可逆矩阵。     [2.x.208] [2.x.209] 参考单元上的[1.x.28]形式的场也由矢量场表示，但同样以不同的方式变换，即通过皮奥拉变换[1.x.29] [2.x.210] [2.x.211] 输入 一个应该被映射的输入对象的数组（或数组的一部分）。   [2.x.212] kind 要应用的映射的种类。   [2.x.213] internal 一个指向[2.x.214]类型的对象的指针，该对象包含先前由映射存储的信息。指向的对象是由get_data()、get_face_data()或get_subface_data()函数创建的，在调用当前函数之前，将作为对当前单元格的fill_fe_values()、fill_fe_face_values()或fill_fe_subface_values()调用的一部分而被更新。换句话说，这个对象也代表了与哪个单元格有关的变换应该被应用。   [2.x.215] 输出 一个数组（或数组的一部分），转换后的对象应该被放入其中。(注意，数组视图是[2.x.216]常数，但它所指向的张量不是。)  
* [0.x.52]*
   将一个微分形式的场从参考单元转换到物理单元。 认为[2.x.217]和[2.x.218]是有用的，[2.x.219]是一个矢量场。 目前由派生类实现的映射种类有。   [2.x.220] [2.x.221] [2.x.222] 将参考单元上的形式域映射到物理单元上的形式域。在数学上，它是微分形式的回拉[1.x.30]间隔向量值微分函数的雅各布斯是这样转换的。    在dim=spacedim的情况下，前面的公式简化为[1.x.31] [2.x.223] 。    
* [2.x.224] 如果把这个变换变成一个模板函数，其等级在<code>DerivativeForm [2.x.225] dim, rank [2.x.226] 中会更合理，可惜C++不允许模板化虚拟函数。这就是为什么我们在这个函数transform()上面使用mapping_covariant()时，将<code>DerivativeForm [2.x.227] dim, 1 [2.x.228]标识为[2.x.229]。     [2.x.230] input 应该被映射的输入对象的一个数组（或数组的一部分）。   [2.x.231] kind 要应用的映射的种类。   [2.x.232] internal 一个指向[2.x.233]类型的对象的指针，该对象包含先前由映射存储的信息。指向的对象是由get_data()、get_face_data()或get_subface_data()函数创建的，在调用当前函数之前，将作为对当前单元格的fill_fe_values()、fill_fe_face_values()或fill_fe_subface_values()调用的一部分被更新。换句话说，这个对象也代表了与哪个单元格有关的变换应该被应用。   [2.x.234] 输出 一个数组（或数组的一部分），转换后的对象应该被放入其中。(注意，数组视图是[2.x.235]常数，但它所指向的张量不是。)  
* [0.x.53]*
   将一个张量场从参考单元转换到物理单元。  这些张量通常是参考单元中已经从物理单元拉回来的矢量场的雅各布系数。 目前由派生类实现的映射种类有。   [2.x.236] [2.x.237] [2.x.238]它假设[2.x.239]这样[1.x.32] [2.x.240] [2.x.241]它假设[2.x.242]这样[1.x.33] [2.x.243] [2.x.244]它假设[2.x.245]这样 [1.x.34 ] [2.x.246] [2.x.247] mapping_covariant_gradient、mapping_contravariant_gradient和mapping_piola_gradient的公式只对线性映射而言是真的。例如，如果映射是双线性的（或具有高阶多项式程度），那么就会有一个与 [2.x.248] 的导数相关的缺失项。     [2.x.249] 输入 一个应该被映射的输入对象的数组（或数组的一部分）。   [2.x.250] kind 要应用的映射的种类。   [2.x.251] internal 一个指向[2.x.252]类型的对象的指针，该对象包含先前由映射存储的信息。指向的对象是由get_data()、get_face_data()或get_subface_data()函数创建的，在调用当前函数之前，将作为对当前单元格的fill_fe_values()、fill_fe_face_values()或fill_fe_subface_values()调用的一部分被更新。换句话说，这个对象也代表了与哪个单元格有关的变换应该被应用。   [2.x.253] output 一个数组（或数组的一部分），转换后的对象应该被放入其中。(注意，数组视图是[2.x.254]常数，但它所指向的张量不是。)  
* [0.x.54]*
   将一个张量场从参考单元转换到物理单元。  这种张量在大多数情况下是参考单元中的向量场的 hessians，这些向量场已经从物理单元拉回来。    目前由派生类实现的映射种类有。   [2.x.255] [2.x.256] [2.x.257] 将参考单元上的形式场映射到物理单元上的形式场。在数学上，它是微分形式[1.x.35]的回拉，其中[1.x.36] [2.x.258]间隔向量值可微函数的Hessians是这样转化的（在减去导数与雅各布梯度的乘积后）。    在dim=spacedim的情况下，前面的公式简化为 [1.x.37] [2.x.259] input 应该被映射的输入对象的数组（或数组的一部分）。   [2.x.260] kind 要应用的映射的种类。   [2.x.261] internal 一个指向类型为[2.x.262]的对象的指针，该对象包含先前由映射存储的信息。指向的对象是由get_data()、get_face_data()或get_subface_data()函数创建的，在调用当前函数之前，将作为对当前单元格的fill_fe_values()、fill_fe_face_values()或fill_fe_subface_values()调用的一部分被更新。换句话说，这个对象也代表了与哪个单元格有关的变换应该被应用。   [2.x.263] output 一个数组（或数组的一部分），转换后的对象应该被放入其中。(注意，数组视图是[2.x.264]常数，但它指向的张量不是。)  
* [0.x.55]*
   将一个3差分形式的场从参考单元转换到物理单元。 认为[2.x.265]和[2.x.266]很有用，[2.x.267]是一个矢量场。    目前由派生类实现的映射种类是。   [2.x.268] [2.x.269] [2.x.270] 它假定[2.x.271]以便[1.x.38] [2.x.272] [2.x.273] 它假定[2.x.274] 以便[1.x.39] [2.x.275] [2.x.276 ] 它假定 [2.x.277] 这样 [1.x.40] [2.x.278] [2.x.279] 输入 一个应该被映射的输入对象的数组（或数组的一部分）。   [2.x.280] kind 要应用的映射的种类。   [2.x.281] internal 一个指向[2.x.282]类型的对象的指针，该对象包含先前由映射存储的信息。指向的对象是由get_data()、get_face_data()或get_subface_data()函数创建的，在调用当前函数之前，将作为对当前单元格的fill_fe_values()、fill_fe_face_values()或fill_fe_subface_values()调用的一部分被更新。换句话说，这个对象也代表了与哪个单元格有关的变换应该被应用。   [2.x.283] output 一个数组（或数组的一部分），转换后的对象应该被放入其中。 
* [0.x.56]*
    [2.x.284]   
* [0.x.57]*
 返回一个适用于给定三角形的默认线性映射。在内部，这个函数为给定的三角结构所使用的参考单元调用上述函数，假设三角结构只使用单一的单元类型。如果三角剖分使用混合单元格类型，那么这个函数将触发一个异常。

* 
* [0.x.58]

