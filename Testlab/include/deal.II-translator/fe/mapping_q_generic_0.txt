include/deal.II-translator/fe/mapping_q_generic_0.txt
[0.x.0]*
 这个类实现了多项式映射[2.x.0]的功能，其多项式程度[2.x.1]将被用于网格的所有单元。MappingQ1和MappingQ类对这一行为进行了轻微的专业化。
* 这个类的名字很糟糕。它确实应该被称为MappingQ，因为它在三角形的所有单元上持续使用[2.x.2]映射。然而，当我们为映射重写整个类的层次结构时，MappingQ这个名字已经被使用了。人们可能会争论说，应该总是使用MappingQGeneric而不是现有的MappingQ类（除非在构造对象时明确指定，否则它只使用程度为[2.x.3] [1.x.0]的映射）。另一方面，在很多情况下有很好的理由使用MappingQ：在很多情况下，曲线域只提供了关于边界处的边缘到底是如何形成的信息，但我们对内部的边缘一无所知。因此，在没有其他信息的情况下，我们只能假设内部边缘是直线，在这种情况下，内部单元也可以被视为双线性四边形或三线性六面体。(在[2.x.4]中已经展示了这样的网格的例子，但在[2.x.5]的 "结果 "部分也有讨论) 。由于双线/三线映射的计算成本明显低于高阶映射，在这种情况下，只在域的边界单元上使用高阶映射是有利的。
* 
*--也就是MappingQ的行为。当然，MappingQGeneric也对内部单元使用双线性映射，只要它不知道内部边缘的曲率，但它以昂贵的方式实现这一点：作为一般的[2.x.6]映射，其中映射支持点只是[1.x.1]，沿着线性或双线性的边缘或面排列。
* 有一些特殊情况值得考虑。
* 

* 
* 
* - 如果你真的想对所有的单元格使用高阶映射，你可以使用当前的类来做，但这只有在你能真正提供关于网格内部边缘和面应该如何弯曲的信息时才有意义。这通常是通过将一个Manifold与内部单元和边缘关联来实现的。一个简单的例子在[2.x.7]的 "结果 "部分讨论；关于流形的完整讨论在[2.x.8]中提供。
* 

* 
* 
* - 如果你正在处理描述嵌入更高空间维度的（弯曲的）流形的网格，即，如果dim!=spacedim，那么每个单元都位于域的边界，你很可能已经为所有单元附加了一个流形对象，然后也可以被映射类用于高阶映射。
* [1.x.2]
* 如上所述，人们往往只知道一个表面的流形描述，而不知道计算域的内部。在这种情况下，一个FlatManifold对象将被分配给内部实体，它描述了一个通常的平面坐标系，其中高阶映射的附加点被准确地按照双/三线性映射放置。当与边界上的非平面流形结合时，例如一个圆凸入一个正方形单元的内部，这两个流形描述一般来说是不相容的。例如，仅通过单元格顶点定义的平坦流形会把内部点放在离边界沿直线的某个小距离epsilon处，因此一般是在圆的凹陷部分之外。如果MappingQ的多项式程度足够高，从参考单元到这样一个单元的转换一般会包含靠近边界的倒置区域。
*为了避免这种情况，该类应用了一种算法，利用所谓的转折插值使这种转换变得平滑，这种插值本质上是沿着周围实体的描述之间的线性混合。在计算附加点的算法中，即compute_mapping_support_points()方法，单元格的所有实体都是分层次通过的，从线开始到四边形，最后是六边形。层次结构中更高的对象上的点是从与该对象相关的流形中获得的，同时考虑到之前由与低维对象相关的流形计算的所有点，而不仅仅是顶点。如果只给一条线分配了一个弯曲的边界，但相邻的四边形却在一个平面流形上，那么四边形上的平面流形在插值四边形内的附加点的位置时将考虑到变形线上的点，从而总是导致一个定义明确的变换。
* 本类中使用的插值方案确保曲线描述可以在单层元素内过度到平面描述，保持有限元插值的整体最佳收敛率。然而，如果随着网格的细化，弯曲边界和平坦内域之间的过渡被分散在更大的范围内，人们往往会得到更好的解质量。这是由特殊流形TransfiniteInterpolationManifold提供的。

* 
* [0.x.1]*
   构造函数。  [2.x.9]表示用于从参考单元映射到实际单元的多项式程度。 
* [0.x.2]*
   复制构造函数。 
* [0.x.3]*
   返回映射的程度，即传递给构造函数的值。 
* [0.x.4]*
   总是返回[2.x.10]，因为这个类中函数的默认实现保留了顶点位置。 
* [0.x.5]*
    [2.x.11] 参考单元和实数单元之间的映射点[2.x.12] 。  
* [0.x.6]*
    [2.x.13]   
* [0.x.7]*
    [2.x.14] 将张量从参考坐标转换为实坐标的函数 [2.x.15]   
* [0.x.8]*
       
* [0.x.9]*
    [2.x.17] 与FEValues和朋友的接口 [2.x.18].   
* [0.x.10]*
   多项式映射的内部数据的存储。见[2.x.19]的广泛描述。    对于当前的类，InternalData类存储了对象创建时（在get_data()中）计算一次的数据，以及类希望从调用fill_fe_values()、fill_fe_face_values()或fill_fe_subface_values()之间存储的数据，直到以后可能从有限元调用转化()等函数。后一类的成员变量被标记为 "可变"。 
* [0.x.11]*
     构造函数。参数表示该对象所对应的映射的多项式程度。   
* [0.x.12]*
     根据给定的参数，初始化对象中与单元格数据相关的成员变量。        该函数还调用compute_shape_function_values()来实际设置与映射形状函数的值和导数有关的成员变量。   
* [0.x.13]*
     根据给定的参数，初始化对象中与单元格和面的数据有关的成员变量。为了初始化单元格数据，本函数调用initialize()。   
* [0.x.14]*
     计算用于映射的形状函数的值和/或导数。        哪些值、导数或高阶导数被计算是由哪些成员数组有非零大小决定的。它们通常被initialize()和initialize_face()函数设置为适当的大小，这些函数确实在内部调用这个函数。然而，用手来调整大小，然后直接调用这个函数是可能的（有时也很有用）。一个例子是在牛顿迭代中，我们更新了一个正交点的位置（例如，在[2.x.20]，需要重新计算这个位置的映射和它的导数，但已经正确调整了所有内部数组的大小。   
* [0.x.15]*
     正交点的形状函数。形状函数是按张量积顺序排列的，所以必须对顶点重新排序以获得变换。   
* [0.x.16]*
     正交点的形状函数。见上文。   
* [0.x.17]*
     形状函数在正交点的梯度。见上文。   
* [0.x.18]*
     形状函数在正交点的梯度。见上文。   
* [0.x.19]*
     形状函数在正交点的二阶导数。见上文。   
* [0.x.20]*
     形状函数在正交点的二阶导数。见上文。   
* [0.x.21]*
     形状函数在正交点的三次导数。见上文。   
* [0.x.22]*
     形状函数在正交点的三阶导数。见上文。   
* [0.x.23]*
     形状函数在正交点的第四次导数。见上文。   
* [0.x.24]*
     形状函数在正交点的四次导数。见上文。   
* [0.x.25]*
     返回这个对象的内存消耗估计值（以字节为单位）。   
* [0.x.26]*
     形状函数的值。通过函数访问 [2.x.21] 计算一次。   
* [0.x.27]*
     形状函数导数的值。通过函数访问 [2.x.22] 计算一次。   
* [0.x.28]*
     形状函数二次导数的值。通过函数[2.x.23] second_derivative访问。        计算一次。   
* [0.x.29]*
     形状函数第三导数的值。通过函数[2.x.24] second_derivative访问。        计算一次。   
* [0.x.30]*
     形状函数第四导数的值。通过函数[2.x.25] second_derivative访问。        计算一次。   
* [0.x.31]*
     单位切向量。用于计算边界形式和法向量。        这个数组有`(dim-1) [2.x.26] 条目。第一个[2.x.27]包含每个面的第一个切向的向量；第二组[2.x.28]条目包含第二个切向的向量（只有在3D中，因为每个面有两个切向），等等。        填充一次。   
* [0.x.32]*
     映射的多项式程度。由于这里的对象也被MappingQ使用（稍作调整），我们需要存储这个。   
* [0.x.33]*
     形状函数的数量。如果这是一个Q1映射，那么它就是简单的每个单元格的顶点数量。然而，由于派生类也使用这个类（例如Mapping_Q()类），形状函数的数量也可能不同。        一般来说，它是[2.x.29] ，其中[2.x.30] 是映射的多项式程度。   
* [0.x.34] 默认的线支持点。是在计算形状函数值时使用的。        正交点的数量取决于该类的度数，它与FE_Q<1>(this->degree)的自由度数相匹配。   
* [0.x.35]*
     如果给定的正交规则代表一个张量乘积，我们需要存储1d正交点上的1d多项式的值。这就是这个变量的作用。   
* [0.x.36]*
     如果给定的正交规则代表一个张量积，我们需要在这个对象中存储临时数据。   
* [0.x.37]*
     如果给定的正交规则代表一个张量积，那么在映射的支持点上的值将存储在这个对象中。   
* [0.x.38]*
     如果给定的正交规则代表一个张量乘积，那么正交点的值将存储在此对象中。   
* [0.x.39]*
     如果给定的正交规则代表一个张量乘积，那么正交点的梯度将存储在这个对象中。   
* [0.x.40]*
     如果给定的正交规则代表张量乘积，则正交点的斜率将存储在此对象中。   
* [0.x.41]*
     表示给定的正交对象是否是张量积。   
* [0.x.42]*
     每个正交点的协变的张量。    存储的矩阵是Jacobian G^{-1}，其中G = Jacobian^{t}的     Jacobian，是地图的第一基本形式；如果dim=spacedim，则还原为Jacobian矩阵的转置，其本身被存储在该结构的[2.x.31]域中。        在每个单元格上计算。   
* [0.x.43]*
     每个正交点上的禁忌变换的张量。不变矩阵是变换的雅各布系数，即[2.x.32] 。        在每个单元上计算。   
* [0.x.44]*
     供内部使用的辅助向量。   
* [0.x.45]*
     在[2.x.33] cell_of_current_support_points上存储映射形状函数的支持点。   
* [0.x.46]*
     存储[2.x.34]的单元格。   
* [0.x.47]*
     每个正交点中的雅各布系数的行列式。如果#update_volume_elements就会被填满。   
* [0.x.48]*
   相对于其他的fill_fe_values()和fill_fe_face_values()函数依赖InternalDataBase的预计算信息，这个函数在传入当前函数的单元格和点上选择灵活的评估路径。     [2.x.35] cell 要评估映射的单元 [2.x.36] unit_points 参考坐标中的点，应该在这里计算变换（Jacobians，位置）。     [2.x.37] update_flags 应该被计算的信息种类。     [2.x.38] output_data 一个包含评估量的结构，例如在给定单元上应用映射及其底层流形后产生的雅各布系数。 
* [0.x.49]*
    [2.x.39]   
* [0.x.50]*
   用作单元格映射的形状函数的多项式的程度。 
* [0.x.51] 默认的线支持点。在计算线和四边形上的支持点在实空间中的位置时，这些支持点是由Manifold<dim,spacedim>类需要的。    点的数量取决于这个类的程度，它与FE_Q<1>(this->degree)的自由度数量相匹配。 
* [0.x.52] 从线支持点定义为拉格朗日多项式的一维多项式。这些用于点评估，与FE_Q<1>(this->degree)的多项式空间相匹配。 
* [0.x.53] 在扩展与映射支持点（以分层数字形式出现）的张量积时，使用的从词法到分层排序的编号。 
* [0.x.54] 参考坐标中的支持点。这些用于构建计算_mapping_support_points()的输出的近似值，而不是通过InternalData提供的FEValues接口来评估映射时。    点的数量取决于这个类的程度，它与FE_Q<dim>(this->degree)的自由度数量相匹配。 
* [0.x.55]*
   一个权重表的向量，我们将物体（直线、四边形、六边形）周边的支持点的位置与之相乘，得到内部支持点的位置。    进入该表的方法是[2.x.40]，即用0来访问直线上的支持点权重（即Gauss-Lobatto正交的内部点），用1来访问从周长到四边形内部的支持点权重，用2来访问从周长到六角形内部的支持点权重。    该表本身包含有多少列，就有多少个特定对象的周边点（2代表直线，[2.x.41]代表四边形，[2.x.42]代表六边形）和多少行，就有多少个严格意义上的内部点。    该表的定义见 "映射 "报告的公式（8）。 
* [0.x.56]*
   一个权重表，我们将单元格的顶点位置与之相乘，得到所有额外支持点的位置，包括线、四边形和六边形（根据情况）。这个数据结构是在我们一次性填充所有支持点时使用的，如果一个单元的所有子实体都连接着同一个流形，就会出现这种情况。这样一来，我们就可以避免为映射转换数据时的一些开销。    该表的行数与单元格的顶点数相同（一维为2，二维为4，三维为8），行数与映射中的额外支持点数相同，即：<code>(degree+1)^dim
* 
* - 2^dim</code>。 
* [0.x.57]*
   返回该映射的支持点的位置。例如，对于[2.x.43]映射来说，这些是顶点，而对于高阶多项式映射来说，它们是顶点加上边、面和单元格内部的点，这些点是根据域和其边界的Manifold描述而放置。然而，其他类可以用不同的方式覆盖这个函数。特别是，MappingQ1Eulerian类正是这样做的，它不从当前单元的几何形状计算支持点，而是在单元的几何形状之外评估一个外部给定的位移场。    这个函数的默认实现适用于大多数情况。它从底层流形中获取单元边界上的支持点的位置。然后使用低维实体（线、四边形）的内插法计算内部支持点（即二维的四边形支持点，三维的六边形支持点），以使转换尽可能平滑，而不会因为支持点的放置而在单元内引入额外的边界层。    该函数从顶点（取自给定的单元）出发，通过线的支撑点（调用add_line_support_points()函数）和四边形面上的支撑点（在三维中，调用add_quad_support_points()函数）来工作。  然后，它添加内部支持点，这些支持点是通过使用权重从周围的点插值计算出来的，如果dim<spacedim，它就向底层流形询问内部点的位置。 
* [0.x.58]*
   通过牛顿迭代将实单元上的点[2.x.44]转换为单位单元上的相应点[2.x.45]。 
* [0.x.59]*
   将位于给定单元格边界线上的所有形状函数的支持点追加到矢量[2.x.46]中 位于线的顶点上的点不包括在内。    该函数使用线的底层流形对象（如果没有设置，则使用单元格的底层流形对象）来确定请求的点的位置。这个函数通常由compute_mapping_support_points()函数调用。    这个函数是虚拟的，以便让派生类选择形状函数支持点的方式与本类不同，本类选择的点是边界上的插值点。 
* [0.x.60]*
   将位于给定单元格的边界面（3D中的四边形）上的所有形状函数的支持点附加到矢量上 [2.x.47] 这个函数只定义于<tt>dim=3</tt>。位于四边形的顶点或线上的点不包括在内。    该函数使用四边形的底层流形对象（如果没有设置，则使用单元格的底层流形对象）来确定所请求的点的位置。这个函数通常由compute_mapping_support_points()调用。    这个函数是虚拟的，以便允许派生类以不同于本类的方式选择形状函数支持点，本类选择的点是边界上的插值点。 
* [0.x.61]

