include/deal.II-translator/fe/fe_interface_values_0.txt
[0.x.0]*
 使用提取器访问FEInterfaceValues得到的视图的命名空间。

* 
* [0.x.1]*
   视图的基类。 
* [0.x.2]*
     构造函数。  
* [0.x.3]*
     存储一个指向FEInterfaceValues实例的指针。   
* [0.x.4]*
   FEInterfaceValues的标量变量的视图。 
* [0.x.5]*
     这是返回数值的类型。   
* [0.x.6]*
     这是返回梯度的类型，例如从average_gradient()返回。   
* [0.x.7]*
     这是为hesians返回的类型，例如从jump_hessian()返回。   
* [0.x.8]*
     这是返回三阶导数的类型，例如从jump_hessian()返回。   
* [0.x.9]*
     表示一个单一标量分量的对象的构造函数    
* [0.x.10]*
     返回该视图所选分量的正交点[2.x.1]中具有界面dof索引[2.x.0]的形状函数的值。        参数[2.x.2]在上游值和下游值之间进行选择，上游值由该正交点的法向量方向定义。如果[2.x.3]为真，则使用界面的第一个单元的形状函数。        换句话说，当从界面的两个单元之一接近给定的正交点时，该函数返回形状函数值的极限。       
* [2.x.4] 这个函数通常用于根据一个方向来挑选上游或下游的值。这可以通过使用[2.x.5]作为该函数的第一个参数来实现。   
* [0.x.11]*
     返回该视图所选部件的正交点[2.x.8]中形状函数[2.x.7]在界面上的跳变[2.x.6]。   
* [0.x.12]*
     返回此视图所选组件的正交点[2.x.11]的形状函数[2.x.10]的界面上的平均值[2.x.9]。   
* [0.x.13]*
     返回此视图所选组件的正交点[2.x.14]的形状函数[2.x.13]在界面上的梯度[2.x.12]的平均值。   
* [0.x.14]*
     返回此视图所选组件的正交点[2.x.17]的形状函数[2.x.16]在界面上的梯度[2.x.15]的跳跃。   
* [0.x.15]*
     返回此视图所选组件的正交点[2.x.20]q_point处形状函数[2.x.19]界面上的Hessian[2.x.18]的平均值。   
* [0.x.16]*
     返回此视图所选组件的正交点[2.x.23]处的形状函数[2.x.22]interface_dof_index的界面上的梯度[2.x.21]的跳变。   
* [0.x.17]*
     返回此视图所选组件的正交点[2.x.26]处形状函数[2.x.25]的界面上的第三导数[2.x.24]的跳变。   
* [0.x.18]*
     该视图的提取器。   
* [0.x.19]*
   FEInterfaceValues的矢量值变量的视图。 
* [0.x.20]*
     这是返回数值的类型。   
* [0.x.21]*
     这是返回梯度的类型，例如从average_gradient()返回。   
* [0.x.22]*
     这个类所代表的视图的二阶导数的类型的别名。这里，对于一组[2.x.27]分量的有限元，Hessian是一个[2.x.28] 。   
* [0.x.23]*
     该类代表的视图的第三导数类型的别名。这里，对于有限元的一组[2.x.29]分量，第三导数是一个[2.x.30] 。   
* [0.x.24]*
     代表一个矢量分量的对象的构造函数    
* [0.x.25]*
     返回该视图选择的具有界面dof索引[2.x.31]的向量分量在正交点[2.x.32]的值 参数[2.x.33]在该正交点的法向量方向定义的上游值和下游值之间选择。如果[2.x.34]为真，则使用界面的第一个单元的形状函数。        换句话说，当从界面的两个单元之一接近给定正交点时，该函数返回形状函数的极限值。       
* [2.x.35] 这个函数通常用于根据一个方向来挑选上游或下游的值。这可以通过使用[2.x.36]作为该函数的第一个参数来实现。   
* [0.x.26]*
     返回正交点[2.x.39]中形状函数[2.x.38]的界面上的跳跃向量[2.x.37]。    
* [0.x.27]*
     返回正交点[2.x.42]的形状函数[2.x.41]的界面上的平均矢量[2.x.40]。    
* [0.x.28]*
     返回正交点[2.x.45]的形状函数[2.x.44]在界面上的梯度（等级2的张量）[2.x.43]的平均值。    
* [0.x.29]*
     返回形状函数[2.x.47]在正交点[2.x.48]的界面上的梯度（等级为2的张量）[2.x.46]的跳跃。    
* [0.x.30]*
     返回该视图所选组件的正交点[2.x.51]q_point处形状函数[2.x.50]的界面上的Hessian[2.x.49]的平均值。   
* [0.x.31]*
     返回此视图所选组件的正交点[2.x.54]处的形状函数[2.x.53]interface_dof_index的界面上的梯度[2.x.52]的跳变。   
* [0.x.32]*
     返回此视图所选组件的正交点[2.x.57]处形状函数[2.x.56]的界面上的第三导数[2.x.55]的跳变。   
* [0.x.33]*
     此视图的提取器。   
* [0.x.34]*
 FEInterfaceValues是一个数据结构，用于访问和组合网格中两个单元之间的界面上的有限元数据。
* 它提供了一种方法来访问两个相邻单元之间的界面上的平均数、跳跃项和用于非连续加尔金方法的类似操作。这允许以类似于FEValues对单元、FEFaceValues对面的方式计算典型的网格相关的线性或双线性形式。在文献中，相邻单元之间的面被称为 "内部界面 "或 "面"。
* 在内部，该类为两个FEFaceValues对象（或使用自适应细化时的FESubfaceValues）提供了一个抽象。该类引入了一个新的 "界面dof索引"，它在两个FEFaceValues对象的dof索引的联盟上行走。辅助函数允许在新的 "界面dof索引 "和相应的 "单元格索引"（0代表第一个单元格，1代表第二个单元格）以及该单元格中的 "dof索引 "之间进行转换。
* 该类是在[2.x.58]中使用的，其目的是作为MeshWorker和LocalIntegrators的低级替代品，与手动组装面状术语相比，它是一个更高级的抽象。

* 
* [0.x.35]*
   正交点的数量。 
* [0.x.36]*
   用一个有限元素（FiniteElement）构建FEInterfaceValues（面的两边都一样）。FEFaceValues对象将以给定的[2.x.59] [2.x.60]和[2.x.61]进行初始化。  
* [0.x.37]*
   与上述相同，但取一个正交规则的集合，以便不同的正交规则可以分配给不同的面。 
* [0.x.38]*
   用一个FiniteElement和一个Q1 Mapping构造FEInterfaceValues。    见上面的构造函数。 
* [0.x.39]*
   重新初始化这个对象，以用于由两个相邻单元的两个面给出的新接口。`cell`和`cell_neighbor`单元格将通过`cell_index`零和一在此调用后在所有需要识别界面相邻的两个单元格的地方被提及。    使用 [2.x.62] 表示 [2.x.63] 或 [2.x.64] sub_face_no_neighbor 表示你想在整个面而不是子面工作。    参数（包括它们的顺序）与[2.x.65]中的[2.x.66]参数相同 [2.x.67] cell 与界面相邻的第一个单元的迭代器。   [2.x.68] face_no 一个整数，识别接口在第一个单元的哪个面上。   [2.x.69] sub_face_no 一个整数，标识界面所对应的面（由前面两个参数标识）的子面（子）。如果等于[2.x.70]，那么该界面被认为是整个面。   [2.x.71] cell_neighbor 一个与界面相邻的第二个单元格的迭代器。这个迭代器的类型不一定等于`cell`，但必须可以转换为`cell`。这允许对`cell`使用活动单元迭代器，对`cell_neighbor`使用`cell->neighbor(f)`，因为`cell->neighbor(f)`的返回类型只是一个单元迭代器（不一定是一个活动单元迭代器）。   [2.x.72] face_no_neighbor 和`face_no`一样，只是针对邻近的单元。   [2.x.73] sub_face_no_neighbor 和`sub_face_no`一样，只是针对相邻的单元。 
* [0.x.40]*
   重新初始化此对象，使其用于由单元格的单个面[2.x.74]给出的界面[2.x.75] 这对于在域的边界上使用FEInterfaceValues很有用。    因此，像jump()这样的成员将假定 "另一边 "的值为零。请注意，不需要sub_face_number，因为一个边界面不能与更细的单元相邻。    调用此函数at_boundary()后将返回true。 
* [0.x.41]*
   返回对界面中指定单元的FEFaceValues或FESubfaceValues对象的引用。    [2.x.76]是0或1，对应于interface_dof_to_cell_and_dof_index()返回的单元格索引。 
* [0.x.42]*
   对所选映射对象的常量引用。 
* [0.x.43]*
   对所选有限元对象的常数引用。 
* [0.x.44]*
   返回对使用中的正交对象的引用。 
* [0.x.45]*
   返回设置的更新标志。 
* [0.x.46]*
    [2.x.77] 查询给定接口信息的函数 [2.x.78].   
* [0.x.47]*
   返回当前界面是一个边界面还是一个有两个相邻单元的内部面。    详见相应的reinit()函数。 
* [0.x.48]*
   映射的正交权重。这个值等于映射的表面元素乘以正交点的权重。    你可以把这个函数返回的数量看作是我们在这里通过四分法实现的积分中的表面元素[2.x.79]。     [2.x.80]   
* [0.x.49]*
   返回每个正交点的JxW值的向量。     [2.x.81]   
* [0.x.50]*
   返回每个正交点中界面的法向量。    返回值与get_fe_face_values(0).get_normal_vectors()相同，因此，从这个界面的第一个单元的角度来看，是外部法向量。     [2.x.82]   
* [0.x.51]*
   返回实空间中正交点的引用。     [2.x.83]   
* [0.x.52]*
   返回当前界面上的DoFs（或形状函数）的数量。   
* [2.x.84] 这个数字只有在调用reinit()后才能得到，而且在调用reinit()后会发生变化。例如，在一个边界界面上，它等于单个FEFaceValues对象的道夫数，而对于一个DG元素的内部界面，它是这个数字的两倍。对于一个连续元素，它略小，因为界面上的两个单元共享一些道夫。 
* [0.x.53]*
   返回联合DoF指数的集合。这包括两个单元的指数。  如果调用 reinit 时有一个活动单元的迭代器，该指数基于活动指数（由 [2.x.85] 返回），如果是水平单元（即，如果 is_level_cell() 返回 true ），则返回 mg dof 指数。   
* [2.x.86]这个函数只有在调用reinit()后才能使用，并且在调用reinit()后会发生变化。 
* [0.x.54]*
   将一个界面DoF指数转换成两个单元的相应本地DoF指数。如果一个界面DoF只在其中一个单元上起作用，另一个索引将是 [2.x.87] 对于不连续的有限元，每个界面Dof将正好对应一个DoF索引。   
* [2.x.88]该函数仅在调用reinit()后可用，并且可以从一次调用reinit()到下一次调用而改变。 
* [0.x.55]*
   返回给定正交点的法线。    法线指向从这个界面的第一个单元看到的向外的方向。     [2.x.89]   
* [0.x.56]*
    [2.x.90]   
* [0.x.57]*
    [2.x.91] 用于评估形状函数数据的函数 [2.x.92]   
* [0.x.58]*
   返回正交点[2.x.95]中具有接口道夫索引[2.x.94]的形状函数值的分量[2.x.93] 参数[2.x.96]在0单元（这里为[2.x.97]）和1单元（那里为[2.x.98]）的值之间选择。你也可以把它解释为 "上游"（[2.x.99]和 "下游"（[2.x.100] 由这个正交点的法向量的方向定义。如果[2.x.101]为真，则使用界面的第一个单元的形状函数。    换句话说，当从界面的两个单元之一接近给定正交点时，该函数返回形状函数的极限值。   
* [2.x.102] 这个函数通常用于根据一个方向来挑选上游或下游的值。这可以通过使用[2.x.103]作为该函数的第一个参数来实现。 
* [0.x.59]*
   返回形状函数[2.x.105]在分量[2.x.107]的正交点[2.x.106]的界面上的跳变[2.x.104]注意，可以用不同的方式定义跳变（"那里 "的值减去 "这里 "的值，或者用其他方式；两者在有限元文献中都使用）。这里的定义使用 "这里的值减去那里的值"，从第一个单元格看。    如果这是一个边界面（at_boundary()返回true），那么[2.x.108] .  
* [0.x.60]*
   返回组件[2.x.112]的正交点[2.x.111]处的形状函数[2.x.109]在界面上的平均值 如果这是一个边界面（at_boundary()返回true），那么[2.x.113] .  
* [0.x.61]*
   返回组件[2.x.117]的正交点[2.x.116]q_point处的形状函数[2.x.114]在界面上的梯度平均值，如果这是一个边界面（at_boundary()返回true），那么[2.x.118] .  
* [0.x.62]*
   返回形状函数[2.x.120]在组件[2.x.121]q_point的正交点[2.x.122]的界面上的Hessian[2.x.119]的平均值 如果这是一个边界面（at_boundary()返回true），那么[2.x.123] .  
* [0.x.63]*
   返回形状函数[2.x.125]interface_dof_index在组件[2.x.127]的正交点[2.x.126]的界面上的梯度跳变[2.x.124]。    如果这是一个边界面（at_boundary()返回true），那么[2.x.128] .  
* [0.x.64]*
   返回形状函数[2.x.130]在组件[2.x.132]的正交点[2.x.131]的界面上的Hessian[2.x.129]的跳变 如果这是一个边界面（at_boundary()返回true），那么[2.x.133] .  
* [0.x.65]*
   返回形状函数[2.x.135]在组件[2.x.137]的正交点[2.x.136]的界面上的第三导数[2.x.134]的跳变，如果这是一个边界面（at_boundary()返回真），那么[2.x.138] .  
* [0.x.66]*
   创建一个当前FEInterfaceValues对象的视图，该视图代表了可能是矢量值的有限元中的一个特定标量分量。  视图的概念在命名空间FEValuesViews的文档中解释。 
* [0.x.67]*
   为当前的FEInterfaceValues对象创建一个视图，该视图表示矢量值有限元的一组[2.x.139]标量分量（即一个矢量）。视图的概念在命名空间FEValuesViews的文档中有所解释。 
* [0.x.68]*
    [2.x.140]   
* [0.x.69]*
   当前界面的DoF指数列表，在reinit()中填写。 
* [0.x.70]*
   从界面DoF到FeFaceValues对象的两个局部DoF指数的映射。如果一个界面DoF只在其中一个单元上活动，另一个单元将有[2.x.141]。  
* [0.x.71]*
   当前单元的FEFaceValues对象。 
* [0.x.72]*
   当前单元格的FEFaceValues对象，如果该单元格被精炼。 
* [0.x.73]*
   邻近单元格的FEFaceValues对象。 
* [0.x.74]*
   如果该单元格被细化，则为相邻单元格的FEFaceValues对象。 
* [0.x.75]*
   指向internal_fe_face_values或internal_fe_subface_values的指针，分别在reinit()中确定。 
* [0.x.76]*
   指向internal_fe_face_values_neighbor、internal_fe_subface_values_neighbor或nullptr的指针，分别在reinit()中确定。 
* [0.x.77] 让视图类成为该类的朋友，因为它们访问内部数据。 
* [0.x.78]

