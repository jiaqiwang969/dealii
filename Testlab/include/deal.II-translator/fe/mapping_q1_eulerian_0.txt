include/deal.II-translator/fe/mapping_q1_eulerian_0.txt
[0.x.0]*
 该类提供了一个映射，在每个单元的位置上添加一个[2.x.0]-线性位移场。对高阶多项式的概括在MappingQEulerian类中提供）。因此，每个单元在空间中的位移是通过有限元场给映射的值来实现的。
* [1.x.0]
* 这个类的构造函数需要两个参数：一个是对定义从参考配置到当前配置的映射的向量的引用，一个是对DoFHandler的引用。然后，该向量应该代表一个在DoFHandler定义的节点上定义的（扁平化版本的）向量值场，其中向量场的分量数量等于空间维度的数量。因此，DoFHandler应该在一个有限元上操作，该有限元的分量与空间维数一样多。作为一个额外的要求，我们规定它的每个顶点的自由度与空间维数一样多；因为这个对象只在顶点评估有限元场，所有其他自由度的值（不与顶点相关）都被忽略了。如果给定的DoFHandler操作的有限元是由[2.x.1]连续的FE_Q()对象构造成系统元(FESystem)，则满足这些要求。
* 在许多情况下，移位矢量也将是所研究问题的解决矢量。如果不是这种情况（即解变量的分量数不等于空间维度，例如对于<tt>dim>1</tt>中的标量问题，欧拉坐标只给出一个背景场），或者对于需要计算更多变量而不仅仅是流场的耦合问题），那么必须在给定的三角形上设置一个不同的DoFHandler，然后将位移向量与之关联。
* 下面是一个例子。

* 
* [1.x.1]
* 
* 请注意，由于移位值向量和dof处理程序只在构造时与这个对象相关联，你必须确保无论何时使用这个对象，给定的对象仍然代表有效数据。
* 为了使MappingQ1Eulerian类也能在使用PETSc或Trilinos包装类的并行代码中使用，矢量的类型可以被指定为模板参数<tt>VectorType</tt>。
* 关于<tt>spacedim</tt>模板参数的更多信息，请查阅FiniteElement或Triangulation的文档。

* 
* [0.x.1]*
   构造函数。     [2.x.2] euler_dof_handler 一个DoFHandler对象，定义了一个有限元空间。这个空间需要有精确的dim分量，这些分量将被视为相对于三角形的单元的原始位置的位移。  这个DoFHandler必须基于一个[2.x.3]有限元。   [2.x.4] euler_vector 在第一个参数定义的空间中的一个有限元函数。这个函数的dim分量将被解释为我们在定义映射时使用的位移，相对于底层三角结构的单元位置。 
* [0.x.2]*
   返回单元格的映射顶点。对于当前类，这个函数不使用当前单元格的几何形状中的支持点，而是在单元格的几何形状之外，评估一个外部给定的位移场。 
* [0.x.3]*
   返回一个指向当前对象副本的指针。这个副本的调用者就拥有了它的所有权。 
* [0.x.4]*
   总是返回[2.x.5]，因为MappingQ1Eulerian一般不保留顶点位置（除非翻译矢量恰好规定顶点位置的位移为零）。 
* [0.x.5]*
   异常情况。 
* [0.x.6]*
   计算一个单元的映射相关信息。关于这个函数的目的、参数和返回值的讨论，请参见[2.x.6]的文档。    这个函数覆盖了基类中的函数，因为我们不能为这个类使用任何单元格的相似性。 
* [0.x.7]*
   计算映射的支持点。对于当前类，这些是顶点，通过调用[2.x.7]得到的，更多信息请参见[2.x.8]的文档。 
* [0.x.8]*
   对移位矢量的引用。 
* [0.x.9]*
   指向映射向量所关联的DoFHandler的指针。 
* [0.x.10]

