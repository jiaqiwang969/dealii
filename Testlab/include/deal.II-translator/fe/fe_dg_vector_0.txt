include/deal.II-translator/fe/fe_dg_vector_0.txt
[0.x.0]*
 基于矢量值多项式的DG元素。
* 这些元素使用矢量值多项式空间，因为它们已经被引入H<sup>div</sup>和H<sup>curl</sup>符合的有限元，但不使用这些元素的通常连续性。因此，它们适用于涉及这些函数空间的DG和混合公式。
* 模板参数<tt>PolynomialType</tt>指的是一个矢量值的多项式空间，比如PolynomialsRaviartThomas或者PolynomialsNedelec。注意，多项式空间的维度和参数<tt>dim</tt>必须重合。
* 

* 
* [2.x.0] 

* 
* [0.x.1]*
   程度为[2.x.1]的向量元素的构造函数   
* [0.x.2]*
   返回一个唯一标识有限元的字符串。这个类返回`FE_DGVector_`加上一块取自多项式对象返回的名称，再加上`<dim>(degree)`，其中[2.x.2]和[2.x.3]用适当的值代替。 
* [0.x.3]*
   如果形状函数[2.x.5]在面的某处有非零函数值，这个函数就会返回[2.x.4] 对于这个元素，我们总是返回[2.x.7] 。  
* [0.x.4]*
   仅供内部使用。它的全称是[2.x.8]函数，它创建了[2.x.9]向量，在构造函数内需要传递给[2.x.10] FiniteElementData的构造函数。 
* [0.x.5]*
   与单元无关的数据字段。    关于这个类的一般用途的信息，请看基类的文档。 
* [0.x.6]*
     具有正交点的形状函数值的数组。每个形状函数都有一行，包含每个正交点的值。    由于形状函数是矢量值（有多少分量就有多少空间维度），所以值是一个张量。        在这个数组中，我们将形状函数的值存储在单元格上的正交点。然后，向实空间单元的转换只需与映射的雅各布系数相乘即可完成。   
* [0.x.7]*
     包含正交点的形状函数梯度的数组。每个形状函数都有一行，包含每个正交点的值。        我们将梯度存储在单元格的正交点上。然后我们只需要在访问实际单元格时应用转换（这是一个矩阵-向量乘法）。   
* [0.x.8]*
 一个基于FE_Nedelec的多项式空间的矢量值DG元素。这个类实现了一个 "破碎的 "有限元空间，它在单元之间是不连续的，在每个单元上的形状函数等于Nedelec元素的形状函数。
* 相关的类FE_DGRT用于 [2.x.11] 。

* 
* [2.x.12] 

* 
* [0.x.9]*
   度的不连续N&eacute;d&eacute;lec元素的构造函数 [2.x.13] 。  
* [0.x.10]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_DGNedelec<dim>(degree)</tt>，其中[2.x.14]和[2.x.15]被适当的值替换。 
* [0.x.11]*
 一个基于FE_RaviartThomas的多项式空间的矢量值DG元素。该类实现了一个 "破碎的 "有限元空间，在单元之间是不连续的，在每个单元上的形状函数与Raviart-Thomas元的形状函数相同。
* 该类在 [2.x.16] 中使用。
* 

* 
* [2.x.17] 

* 
* [0.x.12]*
   度的拉维奥特-托马斯元素的构造函数 [2.x.18] 。  
* [0.x.13]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_DGRaviartThomas<dim>(degree)</tt>，其中[2.x.19]和[2.x.20]度被适当的值取代。 
* [0.x.14]*
 一个基于FE_BDM的多项式空间的矢量值DG元素。该类实现了一个 "破碎的 "有限元空间，在单元之间是不连续的，在每个单元上的形状函数与BDM元素相同。
* 相关的类FE_DGRT用于 [2.x.21] 。
* 

* 
* [2.x.22] 

* 
* [0.x.15]*
   度的不连续BDM元素的构造函数 [2.x.23] 。  
* [0.x.16]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_DGBDM<dim>(degree)</tt>，其中[2.x.24]和[2.x.25]由适当的值代替。 
* [0.x.17]

