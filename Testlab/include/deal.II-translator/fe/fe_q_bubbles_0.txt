include/deal.II-translator/fe/fe_q_bubbles_0.txt
[0.x.0]*
 实现标量拉格朗日有限元[2.x.0]，得到每个坐标方向上连续的、程度为[2.x.1]的分片多项式的有限元空间，加上一些由附加形状函数[2.x.2]跨越的（非归一化）气泡富集空间。 对于[2.x.3] 。 如果[2.x.4]为1，那么第一个因素就会消失，人们会得到以单元格中点为中心的通常的气泡函数。因为这些最后的形状函数的多项式程度是[2.x.5]，这个类所描述的空间中形状函数的总体多项式程度是[2.x.6]。
* 该类使用基于等距或给定支持点的张量积多项式来实现，与人们向FE_Q类的构造函数提供支持点的方式相同。
* 关于<tt>spacedim</tt>模板参数的更多信息，请查阅FiniteElement类的文档，或者Triangulation的文档。
* 由于大的[2.x.7]的富集度几乎都很小，质量和刚度矩阵的条件数随着[2.x.8]的增加而迅速增加。下面你可以看到与FE_Q(QGaussLobatto(p+1))在dim=1时的比较。
* [2.x.9] 
* 因此，对于 [2.x.10] 应谨慎使用该元素。
* 

* [1.x.0]
* 构造函数创建一个TensorProductPolynomials对象，其中包括[2.x.11]度数为[2.x.12]的多项式的张量乘积加上气泡富集。这个[2.x.13]对象提供形状函数的所有值和导数。在给出正交规则的情况下，构造函数创建一个TensorProductPolynomialsBubbles对象，其中包括[2.x.14]多项式与[2.x.15]的支持点的张量乘积以及上面定义的气泡丰富度。
* 此外，构造函数还填充了[2.x.16]、[2.x.17]的延长（嵌入）和[2.x.18]矩阵。
* 

* [1.x.1]
* TensorProductPolynomialsBubbles所代表的形状函数的原始排序是张量积的编号。然而，单元格上的形状函数被重新编号，从支持点在顶点的形状函数开始，然后是在线上，在四边形上，最后（对于三维）在六边形上。最后，在单元格的中间有支持点的气泡富集。

* 
* [0.x.1]*
   度数为[2.x.19]的张量乘积多项式的构造器，加上气泡富集点  
* [0.x.2]*
   用于支持点为[2.x.20]的张量积多项式的构造器，加上基于一维正交公式的气泡富集。 然后有限元的度数是<tt>points.size()</tt>，与FE_Q类的相应情况相比，其加数来自于额外的气泡函数。更多信息请参见FE_Q构造函数的文档。    注意，第一个点必须是0，最后一个是1。 
* [0.x.3]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_Q_Bubbles<dim>(degree)</tt>，其中[2.x.21]和[2.x.22]由适当的值替换。 
* [0.x.4]*
   返回从给定的有限元插值到现在的矩阵。 然后矩阵的大小是[2.x.23]乘以<tt>source.n_dofs_per_cell()</tt>。    这些矩阵只有在源元素也是[2.x.24]FE_Q_Bubbles元素时才能使用。否则，会抛出一个[2.x.25]类型的异常。 
* [0.x.5]*
   检查一个面的非零值。    如果形状函数[2.x.27]在面的非零值，该函数返回[2.x.26] [2.x.28] 在FiniteElement中实现接口。 
* [0.x.6]*
    [2.x.29] [2.x.30].   
* [0.x.7]*
   返回restriction_is_additive标志。只有气泡富集的最后一个成分是真的。 
* [0.x.8]*
   仅供内部使用。它的全称是[2.x.31]函数，它创建了[2.x.32]向量，在构造函数内需要传递给[2.x.33]FiniteElementData的构造函数。 
* [0.x.9]*
   额外气泡函数的数量  
* [0.x.10]

