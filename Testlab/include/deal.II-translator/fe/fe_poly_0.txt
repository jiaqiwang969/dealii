include/deal.II-translator/fe/fe_poly_0.txt
[0.x.0]*
 这个类给出了一个统一的框架，用于实现基于标量多项式空间的FiniteElement类，如TensorProductPolynomials或PolynomialSpace类。这个类在FE_PolyTensor类中有一个对应的张量值有限元的类。
* 每一个拥有以下公共成员变量和函数的类都可以作为模板参数[2.x.0] 
* 

* 
* [1.x.0]
* 示例类是TensorProductPolynomials、PolynomialSpace或PolynomialsP。
* 这个类不是一个完全实现的FiniteElement类。相反，有几个在FiniteElement和FiniteElement类中声明的纯虚拟函数不能被这个类实现，而是留待派生类实现。
* [2.x.1] 由于spacedim != dim的几乎所有函数都是专用的，这个类需要清理。

* 
* [0.x.1]*
   构造函数。 
* [0.x.2]*
   复制构造函数。 
* [0.x.3]*
   返回该有限元的多项式程度，即传递给构造函数的值。 
* [0.x.4]*
   返回底层多项式空间。 
* [0.x.5]*
   返回底层多项式空间的编号与基函数的lexicographic排序相比。返回[2.x.2]。    
* [2.x.3] 这个类的一些实现不支持这个函数，因为对它们来说，基函数的lexicographic排序是不可能的。这方面的例子有。FE_SimplexP, FE_WedgeP, 和 FE_PyramidP.  
* [0.x.6]*
   返回底层多项式空间的反编号。返回 [2.x.4]     
* [2.x.5] 参见get_poly_space_numbering()的说明。 
* [0.x.7]*
   返回在点<tt>p</tt>处的<tt>i</tt>的形状函数的值。关于这个函数的语义，请看FiniteElement基类的更多信息。 
* [0.x.8]*
   返回<tt>i</tt>第1个形状函数在点<tt>p</tt>处的<tt>分量</tt>的值。关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素是标量，返回值与调用不带<tt>_component</tt>后缀的函数相同，前提是指定的分量为零。 
* [0.x.9]*
   返回<tt>i</tt>第1个形状函数在点<tt>p</tt>的梯度。关于这个函数的语义，请看FiniteElement基类的更多信息。 
* [0.x.10]*
   返回<tt>i</tt>第1个形状函数在点<tt>p</tt>处的<tt>分量</tt>向量分量的梯度。关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素是标量，返回值与调用不带<tt>_component</tt>后缀的函数相同，前提是指定的分量为零。 
* [0.x.11]*
   返回单元格上<tt>p</tt>点的<tt>i</tt>th形状函数的二阶导数张量。关于这个函数的语义，请看FiniteElement基类的更多信息。 
* [0.x.12]*
   返回<tt>i</tt>第1个形状函数的<tt>分量</tt>在<tt>p</tt>点的二阶导数。关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素是标量，返回值与调用不带<tt>_component</tt>后缀的函数相同，前提是指定的分量为零。 
* [0.x.13]*
   返回单元格上<tt>p</tt>点的<tt>i</tt>th形状函数的三阶导数的张量。关于这个函数的语义，请看FiniteElement基类的更多信息。 
* [0.x.14]*
   返回<tt>i</tt>第1个形状函数在<tt>p</tt>点的<tt>分量</tt>的3次导数。关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素是标量，返回值与调用不带<tt>_component</tt>后缀的函数相同，前提是指定的分量为零。 
* [0.x.15]*
   返回单元格上<tt>p</tt>点的<tt>i</tt>第4个形状函数的四阶导数的张量。关于这个函数的语义，请看FiniteElement基类的更多信息。 
* [0.x.16]*
   返回<tt>i</tt>第1个形状函数在<tt>p</tt>点的<tt>分量</tt>向量分量的四阶导数。关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素是标量，返回值与调用不带<tt>_component</tt>后缀的函数相同，前提是指定的分量为零。 
* [0.x.17]*
   返回这个对象的内存消耗估计值（以字节为单位）。 
* [0.x.18]注意：以下函数的定义被内联到类声明中，因为我们在MS Visual Studio中会遇到编译器错误。 
* [0.x.19]*
   独立于细胞的数据字段。    关于这个类的一般用途的信息，请看基类的文档。 
* [0.x.20]*
     带有正交点的形状函数值的数组。每个形状函数都有一行，包含每个正交点的值。        在这个数组中，我们将形状函数的值存储在单元格的正交点上。由于这些值在转换到实际单元时不会改变，我们只需要在访问具体单元时将它们复制过来。   
* [0.x.21]*
     包含正交点的形状函数梯度的数组。每个形状函数都有一行，包含每个正交点的值。        我们将梯度存储在单元格的正交点上。然后我们只需要在访问实际单元格时应用转换（这是一个矩阵-向量乘法）。   
* [0.x.22]*
     包含正交点的形状函数豫备数的数组。每个形状函数都有一行，包含每个正交点的值。        我们在单元格的正交点上存储豫备值。然后，我们只需要在访问实际单元格时应用转换。   
* [0.x.23]*
     包含正交点的形状函数三阶导数的数组。每个形状函数都有一行，包含每个正交点的值。        我们将三阶导数存储在单元格的正交点上。然后，我们只需要在访问实际单元格时应用转换。   
* [0.x.24]*
   通过减去对应于Jacobian推动的前向梯度的项来修正形状Hessians。    在修正之前，Hessians将由[1.x.1]给出，其中[2.x.6] 。在校正之后，正确的黑森斯将由[1.x.2]给出，其中[2.x.7]是雅各布式推前导数。 
* [0.x.25]*
   通过减去对应于Jacobian推前梯度和第二导数的项来修正形状的第三导数。    在修正之前，第三导数将由[1.x.3]给出，其中[2.x.8] 。修正后，正确的第三导数将由[1.x.4]给出，其中[2.x.9]是雅各布式推前导数，[2.x.10]是雅各布式推前二导数。 
* [0.x.26]*
   多项式空间。 
* [0.x.27]

