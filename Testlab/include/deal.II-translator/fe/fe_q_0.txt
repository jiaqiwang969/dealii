include/deal.II-translator/fe/fe_q_0.txt
[0.x.0]*
 标量拉格朗日有限元[2.x.0]的实现，得到每个坐标方向上连续的、程度为[2.x.1]的分片多项式的有限元空间。该类使用基于1D Lagrange多项式的张量积多项式实现，具有等距（2度以内）、Gauss-Lobatto（从3度开始）或给定支持点。
* 该类的标准构造函数取该有限元的度数[2.x.2]。或者，它可以取一个正交公式[2.x.3]，定义一个坐标方向上拉格朗日插值的支持点。
* 关于<tt>spacedim</tt>模板参数的更多信息，请查阅FiniteElement或Triangulation的文档。
* [1.x.0]
* 构造函数创建一个TensorProductPolynomials对象，其中包括度数为[2.x.4]的多项式的张量积[2.x.5]这个[2.x.6]对象提供形状函数的所有值和导数。 在给出正交规则的情况下，构造函数创建一个TensorProductPolynomials对象，其中包括[2.x.7]多项式与[2.x.8]的支持点的张量乘积。
* 此外，构造函数还填充了[2.x.9]、[2.x.10]的延长（嵌入）和[2.x.11]矩阵。这些只在一定程度上实现，对于非常高的多项式程度可能无法使用。
* [1.x.1]
* 在构建多项式度数为1或2的FE_Q元素时，使用0和1（线性情况）或0、0.5和1（二次情况）的等距支持点。单位支持点或节点点[1.x.2]是那些[1.x.3]个拉格朗日多项式满足[2.x.12]属性的点，即一个多项式为1，其他都是0。 对于更高的多项式度数，支持点默认为非流动性的，并选择为<tt>（度数+1）</tt>阶Gauss-Lobatto正交规则的支持点。这种点分布在任意多项式度数下产生条件良好的Lagrange插值。相比之下，基于等距点的多项式随着多项式度数的增加而变得越来越没有条件。在内插法中，这种效应被称为Runge现象。对于Galerkin方法，Runge现象通常在解的质量上不明显，而是在相关系统矩阵的条件数上。例如，10度的等距点的元素质量矩阵的条件数为2.6e6，而Gauss-Lobatto点的条件数约为400。
*一维的Gauss-Lobatto点包括单位区间的端点0和+1。内部点被移向端点，这使得靠近元素边界的点分布更加密集。
* 如果与Gauss-Lobatto正交相结合，基于默认支持点的FE_Q可以得到对角线的质量矩阵。这种情况在 [2.x.13] 中得到了证明。然而，这个元素可以通过通常的FEValues方法与任意的正交规则相结合，包括全高斯正交。在一般情况下，质量矩阵是非对角线的。
* [1.x.4]
* TensorProductPolynomials所代表的形状函数的原始排序是张量乘法的编号。然而，单元格上的形状函数被重新编号，从支持点在顶点的形状函数开始，然后是直线上的，四边形上的，最后是（对于三维）六边形上的。为了明确起见，这些编号列在下面。
* [1.x.5] [2.x.14] [2.x.15] 1D情况。 
* [1.x.6]
 
* [2.x.16] 二维情况。 
* [1.x.7]
 
* [2.x.17] 3D情况。 
* [1.x.8]
 
* 形状函数的支持点的各自坐标值如下。 [2.x.18] [2.x.19] 形状函数0。<tt>[0, 0, 0]</tt>; [2.x.20] 形状函数1：<tt>[1, 0, 0]</tt>; [2.x.21] 形状函数2：<tt>[0, 1, 0]</tt>; [2.x.22] 形状函数3：<tt>[1, 1, 0]</tt>; [2.x.23 ] 形状函数4：<tt>[0, 0, 1]</tt>; [2.x.24] 形状函数5：<tt>[1, 0, 1]</tt>; [2.x.25] 形状函数6：<tt>[0, 1, 1]</tt>; [2.x.26] 形状函数7：<tt>[1, 1, 1]</tt>; [2.x.27] [2.x.28] 
* 在2d中，这些形状函数看起来如下。 [2.x.29] 
* 

* [1.x.9] [2.x.30] [2.x.31] 1D情况。 
* [1.x.10]
* 
* [2.x.32] 2D情况。 
* [1.x.11]
 
* [2.x.33] 3D情况。 
* [1.x.12]
* 中心顶点的编号为26。
* 形状函数的支持点的各自坐标值如下。 [2.x.34] [2.x.35] 形状函数0。<tt>[0, 0, 0]</tt>; [2.x.36] 形状函数1：<tt>[1, 0, 0]</tt>; [2.x.37] 形状函数2：<tt>[0, 1, 0]</tt>; [2.x.38] 形状函数3：<tt>[1, 1, 0]</tt>; [2.x.39 ] 形状函数4：<tt>[0，0，1]</tt>; [2.x.40] 形状函数5：<tt>[1，0，1]</tt>; [2.x.41] 形状函数6：<tt>[0，1，1]</tt>; [2.x.42 ] 形状函数7：<tt>[1，1，1]</tt>; [2.x.43] 形状函数8：<tt>[0，1/2，0]</tt>; [2.x.44] 形状函数9：<tt>[1，1/2，0]</tt>; [2.x.45] 形状函数10：<tt>[1/2，0，0]</tt>; [2.x.46 ] 形状函数11：<tt>[1/2, 1, 0]/tt>; [2.x.47] 形状函数12：<tt>[0, 1/2, 1]/tt>; [2.x.48] 形状函数13：<tt>[1, 1/2, 1]/tt>; [2.x.49 ] 形状函数14：<tt>[1/2, 0, 1]</tt>; [2.x.50] 形状函数15：<tt>[1/2, 1, 1]</tt>; [2.x.51] 形状函数16：<tt>[0, 0, 1/2]</tt>; [2.x.52] 形状函数17：<tt>[1, 0, 1/2]</tt>; [2.x.53 ] 形状函数18：<tt>[0, 1, 1/2]/tt>; [2.x.54] 形状函数19：<tt>[1, 1, 1/2]/tt>; [2.x.55] 形状函数20：<tt>[0, 1/2, 1/2]/tt>; [2.x.56 ] 形状函数21：<tt>[1, 1/2, 1/2]/tt>; [2.x.57] 形状函数22：<tt>[1/2, 0, 1/2]/tt>; [2.x.58] 形状函数23：<tt>[1/2, 1/2]/tt>; [2.x.59 ] 形状函数24：<tt>[1/2, 1/2, 0]</tt>; [2.x.60] 形状函数25：<tt>[1/2, 1/2, 1]</tt>; [2.x.61] 形状函数26：<tt>[1/2, 1/2]</tt>; [2.x.62] [2.x.63] 
* 

* 在2d中，这些形状函数看起来如下（黑色平面对应于零；负的形状函数值可能不可见）。 [2.x.64] 
* 

* [1.x.13] [2.x.65] [2.x.66] 1D情况。 
* [1.x.14]
 
* [2.x.67] 2D情况。 
* [1.x.15]
* [2.x.68] 
* 在2D中，这些形状函数看起来如下（黑色平面对应于零；负的形状函数值可能不可见）。 [2.x.69] 
* 

* [1.x.16] [2.x.70] [2.x.71] 1D情况。 
* [1.x.17]
 
* [2.x.72] 二维情况。 
* [1.x.18]
* [2.x.73] 
* 在2D中，这些形状函数看起来如下（黑色平面对应于零；负的形状函数值可能不可见）。 [2.x.74] 

* 
* [0.x.1]*
   基于Gauss-Lobatto支持（节点）点的度数[2.x.75]的张量乘积多项式的构造器。对于度数为1和2的多项式，这些是通常的等距点。 
* [0.x.2]*
   基于一维正交公式的支持点[2.x.76]的张量乘积多项式的构造器。有限元的程度是<tt>points.size()-1</tt>。注意，第一个点必须是0，最后一个是1。构建<tt>FE_Q<dim>(QGaussLobatto<1>(fe_degree+1))</tt>等同于只指定多项式程度的构建器。对于选择<tt>fe_degree > 2</tt>的等距节点，构造<tt>FE_Q<dim>(QIterated<1>(QTrapezoid<1>(),fe_degree))</tt>。    这个构造函数所创建的空间*与你调用`FE_Q<dim>(point.size()-1)'的情况相同，但*不同的是这个空间的基函数。
   不同的是这个空间的基函数。这在一些情况下是很有用的，人们希望通过整合这些形状函数的双线性形式来实现矩阵的某些属性。  例如，当计算单元格[2.x.77]、[1.x.19]上的质量矩阵时，人们通常应用正交公式，并通过以下方式近似真实质量矩阵。  [1.x.20] 其中正交点[2.x.78]和权重[2.x.79]的位置取决于单元格[2.x.80] 。如果用于定义这些点的正交公式[2.x.81]与传递给这个构造器的公式相同（或者，在更高维度上，由用于构造器的张量积产生），那么[2.x.82] ，矩阵还原为[1.x.21]，即，对角线上有权重[2.x.83]的斜向矩阵。这样的结构在使用显式时间步进方法时非常有用，因为，例如，在解决线性系统时，人们只需要在每个时间步进中反转对角线质量矩阵。 
* [0.x.3]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_Q<dim>(degree)</tt>，[2.x.84]和[2.x.85]用适当的值代替。 
* [0.x.4]*
   在FiniteElement类中实现相应的函数。 由于当前元素是插值的，所以节点值正好是支持点的值。此外，由于当前元素是标量的，支持点的值需要是长度为1的向量。 
* [0.x.5]*
    [2.x.86] [2.x.87]。  
* [0.x.6]

