include/deal.II-translator/fe/fe_bernstein_0.txt
[0.x.0]*
 实现标量伯恩斯坦有限元[2.x.0]，我们称之为FE_Bernstein，与FE_Q相类似，得到每个坐标方向上的连续、分片伯恩斯坦多项式[2.x.1]度的有限元空间。这类空间是通过伯恩斯坦基础多项式的张量积多项式实现的。
* 

* 该类的标准构造函数取该有限元的度数[2.x.2]。
* 关于<tt>spacedim</tt>模板参数的更多信息，请查阅FiniteElement或Triangulation的文档。
* [1.x.0]
* 构造函数创建一个TensorProductPolynomials对象，其中包括度数为[2.x.3]的多项式的张量积[2.x.4] 这个[2.x.5]TensorProductPolynomials对象提供形状函数的所有值和导数。
* [1.x.1]
* TensorProductPolynomials所代表的形状函数的原始排序是张量乘法的编号。然而，单元格上的形状函数被重新编号，从支持点在顶点的形状函数开始，然后是在直线上，在四边形上，最后（对于三维）在六边形上。更多细节请参见FE_Q的文档。

* 
* [0.x.1]*
   度数为[2.x.6]的张量乘积多项式的构造函数。  
* [0.x.2]*
   FE_Bernstein在元素内部不是插值的，这使得这个元素不能定义插值矩阵。将会抛出一个异常。    这个函数覆盖了来自FE_Q_Base的实现。 
* [0.x.3]*
   FE_Bernstein在元素内部没有插值，这使得这个元素无法定义限制矩阵。将会抛出一个异常。    这个函数重写了来自FE_Q_Base的实现。 
* [0.x.4]*
   FE_Bernstein在元素内部没有插值，这使得这个元素不能定义一个延长矩阵。将会抛出一个异常。    这个函数重写了来自FE_Q_Base的实现。 
* [0.x.5]*
   返回从一个元素的一个面插值到相邻元素的面的矩阵。 矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。FE_Bernstein元素家族只为相同类型的元素、有支持点的元素和FE_Nothing提供插值矩阵。对于所有其他元素，会抛出一个[2.x.7]类型的异常。 
* [0.x.6]*
   返回从一个元素的一个面插值到相邻元素的面的矩阵。 矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。FE_Bernstein元素家族只为相同类型的元素、有支持点的元素和FE_Nothing提供插值矩阵。对于所有其他元素，会抛出一个[2.x.8]类型的异常。 
* [0.x.7]*
   返回这个元素是否以新的方式实现了它的悬挂节点约束，这必须被用来使元素 "hp-compatible"。 
* [0.x.8]*
   如果在一个顶点上，有几个有限元处于活动状态，hp代码首先为这些FEs中的每个自由度分配不同的全局索引。然后调用这个函数来找出其中哪些应该得到相同的值，从而可以得到相同的全局自由度指数。  因此，该函数返回当前有限元对象的自由度与[2.x.9]的自由度之间的相同性列表，该列表是对代表该特定顶点上活动的其他有限元之一的有限元对象的引用。该函数计算两个有限元对象的哪些自由度是相等的，这两个自由度的编号都在零和两个有限元的n_dofs_per_vertex()的相应值之间。每一对的第一个索引表示本元素的一个顶点自由度，而第二个是另一个有限元素的相应索引。 
* [0.x.9]*
   与hp_vertex_dof_indices()相同，只是该函数处理线上自由度。 
* [0.x.10]*
   与hp_vertex_dof_indices()相同，只是该函数处理四边形上的自由度。 
* [0.x.11]*
    [2.x.10] [2.x.11].   
* [0.x.12]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_Bernstein<dim>(degree)</tt>，其中[2.x.12]和[2.x.13]由适当的值代替。 
* [0.x.13]*
   仅供内部使用。它的全称是[2.x.14]函数，它创建了[2.x.15]向量，在构造函数中需要传递给[2.x.16]FiniteElementData的构造函数。 
* [0.x.14]*
   该函数将伯恩斯坦基函数的编号从分层编号改为列举式编号。 
* [0.x.15]

