include/deal.II-translator/fe/fe_system_0.txt
[0.x.0]*
 这个类提供了一个接口，将几个元素组合成一个，矢量值的元素。作为例子，考虑用于解决斯托克斯和纳维-斯托克斯方程的泰勒-霍德元素。在这里，速度（其分量与域的维数[2.x.0]一样多）用[2.x.1]元素离散，压力用[2.x.2]元素。在数学上，耦合问题的有限元空间通常被写成[2.x.3]，其中指数化被理解为空间的张量乘积
* 
* - 即在2d中，我们有[2.x.4] 
* 
* - 而张量积导致向量，其中向量值函数空间的每个分量对应于[2.x.5]或[2.x.6]空间中的一个标量函数。使用FESystem类，这个空间的创建方法是

* 
* [1.x.0]
* 在这里创建这个元素相当于在FESystem构造函数的参数列表的第一行中对[2.x.7]元素进行张量乘法，然后通过另一个张量乘法与第二行中的元素进行串联。例如，在[2.x.8]的教程程序中就使用了这种构造。
* 同样，[2.x.9]解决了一个弹性方程，我们需要解决一个固体物体的位移。如果域是[2.x.11]-维的，位移又有[2.x.10]分量，因此，组合有限元是用以下方法创建的

* 
* [1.x.1]
*现在组合元素的每个（矢量）分量都对应于一个[2.x.12]空间。
* 对外界来说，FESystem对象看起来就像一个普通的有限元对象，它们只是碰巧由其他几个可能是不同类型的有限元组成。这些 "基元 "本身可以有多个分量，特别是也可以是矢量值的。
* 
* - 例如，如果其中一个基元是一个FESystem本身（也见下文）。在命名空间[2.x.13]的文档中给出了一个使用 "张量乘积 "策略的例子。
* %矢量值元素在一些教程程序中讨论，例如[2.x.14] , [2.x.15] , [2.x.16] , [2.x.17] ，特别是在[2.x.18]模块中。
* [2.x.19] 
 

* [1.x.2]
* 一个FESystem，除了最微不足道的情况，会产生一个有多个分量的向量值的有限元。分量的数量n_components()对应于PDE系统中解函数的维度，相应地也对应于你的PDE系统的方程数量。例如，[2.x.20]中涉及的混合拉普拉斯系统在[2.x.22]空间维度上有[2.x.21]个分量：标量压力和速度矢量的[2.x.23]分量。同样，[2.x.24]中涉及的弹性方程在[2.x.26]空间维度上有[2.x.25]分量。一般来说，FES系统元素的分量数是所有基础元素的分量累积数乘以其倍数。在[2.x.27]的 "元件术语条目 "中也给出了更多关于元件的信息。
* 虽然从偏微分方程的角度来看，分量的概念很重要，但在有限元方面看起来有点不同，因为不仅是FESystem，还有像FE_RaviartThomas这样的矢量值元素，都有几个分量。这里需要的概念是一个[2.x.28]"块"。每个块包含了与FESystem的单个基元相关的自由度集合，其中具有倍数的基元要计算多次。这些块通常使用[2.x.29]中的信息来处理，一个FESystem对象的块数只是所有基元的倍数之和，由n_blocks()给出。
* 例如，用于三维斯托克斯问题的Taylor-Hood元素的FESystem可以用以下代码建立

* 
* [1.x.3]
* 或者更简洁地通过

* 
* [1.x.4]
* 甚至更短（模仿数学符号，我们正在处理一个[2.x.30]元素）。

* 
* [1.x.5]
* 
* 这个例子创建了一个FES系统[2.x.31]，有四个元件，三个是速度元件，一个是压力元件，还有四个块，每个速度元件的自由度和压力都在一个单独的块中。由于第一个基元重复了三次，所以块的数量为四。
* 另一方面，Taylor-Hood元素也可以用以下方法构造
* 

* 
* [1.x.6]
* 
* 这里创建的FES系统[2.x.32]具有相同的四个部件，但自由度只分布在两个块中。第一个块有[2.x.33]的所有速度自由度，而第二个块包含压力自由度。请注意，虽然[2.x.34]本身有3个块，但FES系统[2.x.35]并不试图将[2.x.36]分割成其基本元素，而是将其视为自己的一个块。通过像[2.x.37]那样先将所有速度封锁在一个系统中，我们实现了相同的块结构，如果我们不使用[2.x.38]元素来表示速度，而是使用矢量值的基本元素，例如使用达尔西定律的混合离散化，就会产生相同的块结构。
* 

* 
* [1.x.7]
* 
* 这个例子也产生了一个有四个元件的系统，但只有两个块。
* 在大多数情况下，组成元素的行为就像它是一个普通元素一样。它只是比大多数 "普通 "元素有更多的自由度。然而，底层结构在限制、延长和界面约束矩阵中是可见的，它们并不与基础元素的自由度相联系。例如，连续性要求是对子对象的形状函数分别施加的；不同子对象的形状函数之间不存在要求，即在上面的例子中：在一个悬挂的节点上，[2.x.39]速度的各自值只与[2.x.40]的顶点和这个顶点旁边的大单元上的线耦合，但与这个或其他单元的[2.x.41]和[2.x.42]没有互动。
* 

* [1.x.8]
* 自由度的总体编号如下：对于每个子对象（顶点、线、四边形或六边形），自由度的编号是这样的：我们首先运行所有的子元素，然后再转向这个子对象的下一个自由度或下一个子对象。例如，对于一个在一个空间维度上有三个分量的元素，前两个分量是立方滞后元素，第三个是二次滞后元素，系统<tt>s=(u,v,p)</tt>的排序是。
* [2.x.43] [2.x.44] 第一个顶点。<tt>u0, v0, p0 = s0, s1, s2</tt> [2.x.45] 第二个顶点。<tt>u1, v1, p1 = s3, s4, s5</tt> [2.x.46] 线上第一个分量。<tt>u2, u3 = s4, s5</tt> [2.x.47] 线上的第二个分量。<tt>v2, v3 = s6, s7</tt>。 [2.x.48] 线路上的第三个分量。<tt>p2 = s8</tt>。 [2.x.49] 也就是说，你不应该在你的应用程序中依赖这个编号，因为这些%的内部成员将来可能会改变。而是使用函数system_to_component_index()和component_to_system_index()。
* 关于模板参数<tt>spacedim</tt>的更多信息，请参见Triangulation的文档。
* 

* 
* [2.x.50] 
* 

* 
* [0.x.1]*
   删除默认构造函数，以便在没有提供FiniteElement的情况下，`FESystem(FEPairs &&... fe_pairs)`不会被意外选中。 
* [0.x.2]*
   构造函数。取一个有限元和你想用这个类来组合的元素数量。    这个对象[2.x.51]除了创建一个副本，然后被当前对象所拥有之外，实际上没有其他用途。换句话说，用一个临时的有限元对象来调用这个构造函数是完全可以的，就像在这个代码片段中。 
* [1.x.9]
* 这里，[2.x.52]构造了一个未命名的临时对象，传递给FESystem构造函数来创建一个由两个组件组成的有限元，这两个组件都是二次FE_Q元素。在这一行对应的代码结束时，这个临时对象又被销毁了，但这并不重要，因为FESystem创建了自己的FE_Q对象的副本。    这个构造函数（或其下面的变体）基本上在所有处理矢量值问题的教程程序中都会用到。用例见[2.x.53] , [2.x.54] , [2.x.55] 等。也可参见 [2.x.56] "处理向量值问题 "模块。     [2.x.57] [2.x.58] fe 将被用来表示该组成元素的组件的有限元素。   [2.x.59] n_elements 一个整数，表示这个元素应该由多少份[2.x.60]组成。 
* [0.x.3]*
   用于具有两个基本元素的混合离散的构造函数。    参见上面的另一个构造函数，以了解组成元素的一般想法。 
* [0.x.4]*
   用于具有三个基本元素的混合离散的构造函数。    参见上面的另一个构造函数，以解释组成元素的一般想法。 
* [0.x.5]*
   用于具有四个基本元素的混合离散的构造函数。    参见上述其他构造函数中的第一个，以获得对组成元素的一般概念的解释。 
* [0.x.6]*
   五个基本元素的混合离散的构造函数。    关于组成元素的一般概念，请看上面第一个其他构造函数的解释。 
* [0.x.7]*
   与上述相同，但适用于任何数量的基元。指向基数元素的指针和它们的乘数被作为向量传递给这个构造函数。这些向量的长度被认为是相等的。    如上所述，第一个参数所指向的有限元对象除了在内部创建副本外，实际上并不使用。因此，你可以在调用这个构造函数后立即再次删除这些指针。    [1.x.10] 使用这个构造函数有时会有点尴尬，因为你需要在一个地方传递两个向量，而这个地方可能无法直接构造这样一个向量
* 
* - 例如，在一个有FESystem成员变量的类的成员初始化列表中。例如，如果你的主类看起来像这样。 
* [1.x.11]
* 使用C++11语言标准（或更高版本），你可以这样做来创建一个具有四个基元和乘数1、2、3、4的元素。 
* [1.x.12]
* 这就在原地创建了两个向量，并使用大括号中的初始化器列表对它们进行初始化 [2.x.61] 。    这段代码有一个问题：它产生了四个内存泄漏，因为上面的第一个向量是用指向[2.x.62]分配的元素的指针创建的，但从未销毁。    解决其中第二个问题的方法是创建两个可以创建向量的静态成员函数。下面是一个例子。 
* [1.x.13]
* 这样做的方法是，我们有两个静态成员函数来创建必要的向量，以传递给成员变量的构造函数 [2.x.63] 。它们需要是静态的，因为它们是在 [2.x.64] 的构造函数中被调用的，此时 [2.x.65] 对象还没有完全构造好，因此，常规的成员函数还不能被调用。    不过上面的代码还没有解决内存泄漏的问题：[2.x.66]函数创建了一个指针向量，但没有任何东西破坏这些指针。这就是解决方案。 
* [1.x.14]
* 换句话说，我们从[2.x.67]中收到的向量被打包到一个[2.x.68]类型的临时对象中；然后我们立即从这个临时对象中获得向量，将其传递给[2.x.69]的构造器，析构器在整个表达式的最后被调用（在[2.x.70]的构造器完成后），并销毁了临时向量的元素。瞧：既不短也不优雅，但它是有效的!  
* [0.x.8]*
   构造函数接受任意数量的参数，类型为[2.x.71] spacedim>>, unsigned int></code>。与[2.x.72]相结合，可以构造如下的FESystem对象。 
* [1.x.15]
* `fe_1`和`fe_2`对象除了创建一个副本，然后被当前对象所拥有之外，实际上没有其他用途。换句话说，用一个临时的有限元对象来调用这个构造函数是完全可以的，就像这个代码片断一样。 
* [1.x.16]
* 这里，[2.x.73]构造了一个未命名的临时对象，传递给FESystem构造函数来创建一个由两个组件组成的有限元，这两个组件都是二次FE_Q元素。在这一行对应的代码结束时，这个临时对象又被销毁了，但这并不重要，因为FESystem创建了自己的FE_Q对象的副本。    作为一种快捷方式，这个构造函数也允许调用  
* [1.x.17]
* 而不是更明确的  
* [1.x.18]
* 换句话说，如果没有通过指数化操作明确指定一个元素的倍数，那么就假定它是1（正如人们所期望的）。     [2.x.74] 这个功能在19.0版之前的英特尔编译器上是不可用的。对于18.0之前的英特尔编译器，定义这个构造函数会导致内部编译器错误。 
* [0.x.9]*
   与上述相同，允许采用以下语法。 
* [1.x.19]
* [2.x.75] 这个功能对19.0版以前的英特尔编译器是不可用的。构造函数只是没有被选中进行重载解析。 
* [0.x.10]*
   复制构造函数。该构造函数被删除，即不允许复制FESystem对象。 
* [0.x.11]*
   移动构造函数。 
* [0.x.12]*
   解构器。 
* [0.x.13]*
   返回一个唯一标识一个有限元素的字符串。该元素返回一个字符串，该字符串由基础元素返回的字符串[2.x.76] nameN组成。从这些中，我们创建一个序列<tt>FESystem<dim>[name1^m1-name2^m2-...-nameN^mN]</tt>，其中[2.x.77]是基元的倍率。如果一个倍数等于1，那么上标就省略了。 
* [0.x.14]*
    [2.x.78] [2.x.79]。  
* [0.x.15]*
   返回[2.x.80]点的形状函数值 [2.x.81] [2.x.82]是参考元素上的一个点。由于这个有限元总是矢量值的，我们返回这个形状函数的矢量值的唯一非零分量的值。如果形状函数有一个以上的非零分量（我们用非原始分量来指代），那么抛出一个[2.x.83]类型的异常 如果[2.x.85]的形状值（对应于[2.x.86]形状函数）取决于实空间中的单元的形状，就会抛出[2.x.84]。 
* [0.x.16]*
   返回[2.x.87]形状函数的[2.x.88]矢量分量在[2.x.89]点的值，关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素一般都是矢量值，所以它把这些值的计算转交给基元素。 
* [0.x.17]*
   返回[2.x.90]形状函数在[2.x.91]点的梯度[2.x.92]是参考元素上的一个点，同样，梯度是单元格上关于单元格坐标的梯度。由于这个有限元总是矢量值的，我们返回这个形状函数的矢量值的唯一非零分量的值。如果形状函数有一个以上的非零分量（我们用非原始分量一词来指代），那么就抛出一个类型为[2.x.93] ExcShapeFunctionNotPrimitive的异常。    如果[2.x.95]的形状值（对应于[2.x.96]形状函数）取决于实空间中的单元格形状，则抛出一个[2.x.94]。 
* [0.x.18]*
   返回[2.x.97]形状函数的[2.x.98]矢量分量在[2.x.99]点的梯度，关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素一般都是矢量值，它把这些值的计算转给了基元素。 
* [0.x.19]*
   返回[2.x.100]形状函数在单元格上[2.x.101]点的二次导数的张量。该导数是单元格上相对于单元格坐标的导数。由于这个有限元总是矢量值的，我们返回这个形状函数的矢量值的唯一非零分量的值。如果形状函数有一个以上的非零分量（我们用非原始分量一词来指代），那么抛出一个类型为[2.x.102] ExcShapeFunctionNotPrimitive的异常。    如果[2.x.104]的形状值（对应于[2.x.105]形状函数）取决于实空间中的单元格形状，则抛出[2.x.103]。 
* [0.x.20]*
   返回[2.x.106]形状函数的[2.x.107]矢量分量在[2.x.108]点的二阶导数，关于这个函数的语义，请看FiniteElement基类的更多信息。    由于这个元素一般都是矢量值，它把这些值的计算转给了基元素。 
* [0.x.21]*
   返回[2.x.109]形状函数在单元格上[2.x.110]点的三次导数的张量。这些导数是单元格上相对于单元格坐标的导数。由于这个有限元总是矢量值的，我们返回这个形状函数的矢量值的唯一非零分量的值。如果形状函数有一个以上的非零分量（我们用非原始分量一词来指代），那么抛出一个[2.x.111] ExcShapeFunctionNotPrimitive类型的异常。    如果[2.x.113]的形状值（对应于[2.x.114]形状函数）取决于实空间中的单元格形状，则抛出[2.x.112]。 
* [0.x.22]*
   返回[2.x.115]形状函数的[2.x.116]矢量分量在点[2.x.117]处的三阶导数 关于此函数的语义，请参见FiniteElement基类。    由于这个元素一般都是矢量值，它把这些值的计算转给了基元素。 
* [0.x.23]*
   返回[2.x.118]形状函数在单元格上[2.x.119]点的第四导数的张量。这些导数是单元格上关于单元格坐标的导数。由于这个有限元总是矢量值的，我们返回这个形状函数的矢量值的唯一非零分量的值。如果形状函数有一个以上的非零分量（我们用非原始分量一词来指代），那么抛出一个[2.x.120] ExcShapeFunctionNotPrimitive类型的异常。    如果[2.x.122]的形状值（对应于[2.x.123]形状函数）取决于实空间中的单元格的形状，则抛出[2.x.121]。 
* [0.x.24]*
   返回[2.x.124]形状函数的[2.x.125]矢量分量在点[2.x.126]处的四次导数，关于此函数的语义，请参见FiniteElement基类。    因为这个元素一般都是矢量值，所以它把这些值的计算转交给基元素。 
* [0.x.25]*
   返回从给定的有限元内插到现在的矩阵。然后矩阵的大小是[2.x.127]乘以<tt>source.n_dofs_per_cell()</tt>。    如果源元素和目的元素都是[2.x.128]元素，有相同数量的基本元素，有相同的元素倍数，并且这些基本元素也实现了它们的[2.x.129]get_interpolation_matrix函数，这些矩阵就可以使用。否则，会抛出一个[2.x.130]类型的异常。 
* [0.x.26]*
   访问一个合成元素。索引需要小于基数元素的数量。请注意，如果乘数大于1，基础元素的数量可能反过来小于系统元素的组件数量。 
* [0.x.27]*
   如果形状函数[2.x.132]在面[2.x.133]的某处有非零函数值，该函数返回[2.x.131]。  
* [0.x.28]*
   从精细网格空间投射到粗略网格空间。重写FiniteElement中的相应方法，实现懒人评估（在请求时初始化）。    如果这个投影运算符与一个矩阵[2.x.134]相关联，那么这里将返回这个矩阵[2.x.135]对一个子单元的限制。    矩阵[2.x.136]是单元格矩阵[2.x.137]P_i的连接或相加，取决于[2.x.138]的值，这区分了插值（连接）和标量积（相加）方面的投影。    行和列指数分别与粗网格和细网格空间有关，与相关运算符的定义一致。    如果投影矩阵没有在派生的有限元类中实现，这个函数会以[2.x.139]类型的异常中止，你可以通过首先调用restriction_is_implemented()或isotropic_restriction_is_implemented()函数检查是否会发生这种情况。 
* [0.x.29]*
   网格间的嵌入矩阵。重写FiniteElement中的相应方法，实现懒人评估（查询时初始化）。    从粗网格空间到细网格空间的身份运算符与一个矩阵[2.x.140]相关联，该矩阵[2.x.141]对单个子单元的限制在这里被返回。    矩阵[2.x.142]是串联的，而不是单元格矩阵[2.x.143]P_i的总和。也就是说，如果同一个非零条目<tt>j,k</tt>存在于两个不同的子矩阵[2.x.144]中，其值在两个矩阵中应该是相同的，它只被复制到矩阵[2.x.145]中一次。    行和列指数分别与细格和粗格空间相关，与相关运算符的定义一致。    这些矩阵被组装多级方法的延长矩阵的程序所使用。 在使用这个矩阵阵列组装单元间的转移矩阵时，延长矩阵中的零元素被丢弃，不会填满转移矩阵。    如果延长矩阵没有在一个基本的有限元类中实现，这个函数会以[2.x.146]类型的异常中止。你可以通过首先调用prolongation_is_implemented()或isotropic_prolongation_is_implemented()函数来检查是否会发生。 
* [0.x.30]*
   给出一个面的指数自然排序中的指数，返回单元格上相同自由度的指数。    为了解释这个概念，考虑这样的情况：我们想知道一个面的自由度，例如作为FESystem元素的一部分，是否是原始的。不幸的是，FiniteElement类中的is_primitive()函数需要一个单元格索引，所以我们需要找到对应于当前面的索引的形状函数的单元格索引。  这个函数可以做到这一点。    实现这一点的代码将看起来像这样。 
* [1.x.20]
* 这个函数需要额外的参数，以考虑到实际的面可以是相对于所考虑的单元格的标准排序，或者可以是翻转的，定向的，等等。     [2.x.147] face_dof_index 一个面的自由度的索引。这个指数必须在零和每个面的自由度之间。   [2.x.148] face 这个自由度所在的面的编号。这个数字必须介于零和[2.x.149] [2.x.150] face_orientation 描述面的方向的一个部分。见 [2.x.151] 。   [2.x.152] face_flip 对脸部方向的描述的一部分。参见 [2.x.153] 。   [2.x.154] face_rotation 描述脸部方向的一部分。见 [2.x.155] 。   [2.x.156] 这个自由度在整个单元上的自由度集合中的索引。返回值将介于0和dofs_per_cell之间。 
* [0.x.31]*
   在基类中实现相应的函数。 
* [0.x.32]*
   在基类中实现相应的函数。 
* [0.x.33]*
   返回一个元素的常量模式列表。返回表有多少行，就有多少个元素中的元件和dofs_per_cell列。对于有限元的每个分量，返回表中的行包含该元上常数函数1的基础表示。将每个基元的常数模式串联起来。 
* [0.x.34]*
    [2.x.157]支持hp的函数 [2.x.158]。  
* [0.x.35]*
   返回该元素是否以新的方式实现其悬挂的节点约束，这必须用于使元素 "hp-兼容"。    当且仅当其所有基础元素都返回[2.x.160]时，此函数才会返回[2.x.159]。 
* [0.x.36]*
   返回从一个元素的面插值到邻近元素的面的矩阵。 矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。    这个元素的基础元素将不得不实现这个功能。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现给定元素的插值，那么他们必须抛出一个类型为[2.x.161]的异常，这个异常将从这个元素传播出去。 
* [0.x.37]*
   返回从一个元素的面插值到邻近元素的子面的矩阵。 矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。    这个元素的基础元素将不得不实现这个功能。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现给定元素的插值，那么他们必须抛出一个类型为[2.x.162]的异常，这个异常将从这个元素传播出去。 
* [0.x.38]*
   如果在一个顶点上，有几个有限元被激活，hp-code首先为这些FEs的自由度分配不同的全局索引。然后调用这个函数来找出其中哪些应该得到相同的值，从而可以得到相同的全局自由度指数。  因此，该函数返回当前有限元对象的自由度与[2.x.163]的自由度之间的相同性列表，后者是对代表在该特定顶点上活动的其他有限元之一的有限元对象的引用。该函数计算两个有限元对象的哪些自由度是等价的，两个自由度的编号都在零和两个有限元的n_dofs_per_vertex()的相应值之间。每一对的第一个索引表示本元素的一个顶点自由度，而第二个是另一个有限元素的相应索引。 
* [0.x.39]*
   与hp_vertex_dof_indices()相同，只是该函数处理线上自由度。 
* [0.x.40]*
   与hp_vertex_dof_indices()相同，只是该函数处理四边形上的自由度。 
* [0.x.41]*
    [2.x.164] [2.x.165].   
* [0.x.42]*
   [2.x.166]函数的实现。    这个函数简单地调用[2.x.167]的基本元素，并将所有内容重新组合到输出参数中。如果一个基元是非插值的，那么相应的dof值将用 "信号 "NaN来代替。    如果FES系统的基本元素没有一个是插值的，则该函数失败。 
* [0.x.43]*
   确定此对象的内存消耗（以字节为单位）的估计值。    这个函数是虚拟的，因为有限元对象通常是通过指向其基类的指针来访问的，而不是类本身。 
* [0.x.44]*
   为三个<tt>fill_fe*_values</tt>函数做工作。    调用（除其他外）<tt>fill_fe_([sub]face)_values</tt>的基础元素。如果<tt>face_no==invalid_face_no</tt>和<tt>sub_no==invalid_face_no</tt>，调用[2.x.168]；调用[2.x.169 ] 如果<tt>face_no==invalid_face_no</tt>和<tt>sub_no!=invalid_face_no</tt>；如果<tt>face_no!=invalid_face_no</tt>和<tt>sub_no!  
* [0.x.45]*
   表示一个给定的面或子面编号无效的值。 
* [0.x.46]*
   指向底层有限元对象的指针。    这个对象包含一个指向混合离散化的每个贡献元素的指针和它的倍率。它是由构造函数创建的，之后是常量。 
* [0.x.47]*
   一个索引表，将基础元素的广义支持点映射到FE系统的广义支持点的矢量。  它成立的原因是  
* [1.x.21]
* 对于每个基元（以i为索引）和基元的每个g.s.点（以j为索引）。 
* [0.x.48]*
   这个函数是简单地从构造函数中挑出来的，因为它有几个。它设置了系统的索引表，以及[2.x.171]限制和[2.x.172]矩阵。 
* [0.x.49]*
   由[2.x.173]使用。  
* [0.x.50]*
   一个计算hp_vertex_dof_identities()、hp_line_dof_identities()或hp_quad_dof_identities()的函数，这取决于模板参数的值。 
* [0.x.51]*
   通常情况下。独立于细胞的数据字段。    然而，在这里，这个类本身并不存储数据，而只是指向每个基本元素的[2.x.174]对象的指针。 
* [0.x.52]*
     构造函数。由[2.x.175]函数调用。设置[2.x.176]向量的大小为[2.x.177]。    
* [0.x.53]*
     销毁器。删除所有[2.x.178]，其指针由[2.x.179]向量存储。   
* [0.x.54]*
     对[2.x.181]base_noth基元的[2.x.180]的指针给予写权限。   
* [0.x.55]*
     给予对[2.x.182]的[2.x.183]基数元素的指针的读访问权。   
* [0.x.56]*
     当调用[2.x.185]和类似函数时，给读访问指向[2.x.184]第1个基元的对象的指针，该对象将写入其输出。   
* [0.x.57]*
     指向每个基元的[2.x.186]对象的指针。它们被[2.x.187]和[2.x.188]函数所访问。        这个向量的大小由InternalData构造函数设置为[2.x.189]。 它由[2.x.190]函数填充。    请注意，由于基类的每个实例的数据必然是相同的，我们只需要有多少个基类元素就有多少个这样的对象，而不考虑它们的多重性。   
* [0.x.58]*
     一个对象的集合，当我们对它们调用[2.x.191]和相关函数时，基元将把它们的输出写入其中。        这个向量的大小由InternalData构造函数设置为[2.x.192]。   
* [0.x.59]*
   用于保护限制和嵌入矩阵的初始化的互斥器。 
* [0.x.60]

