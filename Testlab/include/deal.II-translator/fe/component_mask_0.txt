include/deal.II-translator/fe/component_mask_0.txt
[0.x.0]*
 该类代表一个掩码，可用于选择有限元的单个矢量分量（另见[2.x.0]"该术语条目"）。它通常有与有限元的矢量分量一样多的元素，人们可以使用[2.x.1]来查询某个特定分量是否被选中。
* 

* 
* [2.x.2] "掩码 "代表一个具有[2.x.3]和[2.x.4]项的数据结构，通常用于启用或禁用某个特定向量分量的操作。根据这个定义，禁用的向量组件仍然存在
* 
* - 它们只是没有被触及。因此，当你应用分量掩码来插值一个带有[2.x.5]矢量分量的问题时（仅选择一个例子），描述边界值的输入参数仍然必须提供[2.x.6]分量，即使掩码说我们只想把这些分量的一个子集插值到有限元空间。换句话说，分量掩码不代表[1.x.0]操作，它代表[1.x.1]。
* 这类对象在很多地方被使用，人们希望将操作限制在某个分量子集上，例如在[2.x.7]或[2.x.8]中。 这些对象可以手工创建，或者更简单，要求有限元使用代码从某些选定的分量中生成一个分量掩码，例如我们创建一个只表示斯托克斯元速度分量的掩码（见[2.x.9] ）。

* 
* [1.x.2]
* 结果是一个分量掩码，在2d中，它的值是<code>[false, false, true]</code>。同样地，使用

* 
* [1.x.3]
* 在2d中会产生一个[2.x.10]的掩码。当然，在3D中，其结果将是[2.x.11] 。
* 

* 
* [2.x.12] 

* 
* [2.x.13] 

 
* [0.x.1]*
   初始化一个组件掩码。默认情况下，一个组件掩码代表一组[1.x.4]被选中的组件，也就是说，调用这个构造函数的结果是一个组件掩码，每当问到一个组件是否被选中时，总是返回[2.x.14]。 
* [0.x.2]*
   用参数指定的一组选定的组件初始化这个类型的对象。     [2.x.15] component_mask 一个[2.x.16]项的向量，决定有限元的哪些分量被选择。如果给定矢量的长度为零，则解释为[1.x.5]分量被选中的情况。 
* [0.x.3]*
   用一定数量的元素初始化分量掩码，这些元素要么是真，要么是假。     [2.x.17] n_components 这个掩码的元素数量 [2.x.18] initializer 这些元素中的每一个应该具有的值：要么是真，要么是假。 
* [0.x.4]*
   将掩码中的某个条目设置为一个值。 
* [0.x.5]*
   如果这个组件掩码已经被初始化为一个大小大于0的掩码，那么返回这个对象所代表的掩码的大小。  另一方面，如果这个掩码已被初始化为一个空对象，代表一个对每个元素都是真的掩码（即，如果这个对象在调用 represents_the_all_selected_mask()时将返回true），那么返回0，因为没有明确的大小。 
* [0.x.6]*
   返回一个特定的组件是否被这个掩码所选择。如果这个掩码代表了选择[1.x.6]的对象的情况（例如，如果它是用默认的构造函数创建的，或者是从bool类型的空向量转换而来的），那么无论给定的参数是什么，这个函数都返回true。     [2.x.19] component_index 该函数应返回该组件是否被选中的索引。如果这个对象代表一个掩码，其中所有组件总是被选中，那么这里允许任何索引。  否则，给定的索引需要在零和该掩码所代表的组件数量之间。 
* [0.x.7]*
   返回这个分量掩码是否正好代表[2.x.20]分量的掩码。如果它被初始化为一个正好有[2.x.21]的向量（在这种情况下，[2.x.22]必须等于size()的结果），或者它被初始化为一个空向量（或者使用默认构造函数），在这种情况下，它可以代表一个有任意数量组件的掩码，并且将总是说一个组件被选中，这就是真的。 
* [0.x.8]*
   返回被这个掩码选中的组件的数量。    由于空的组件掩码代表每个组件都会返回[2.x.23]，这个函数可能不知道组件掩码的真实大小，因此它需要一个参数来表示组件的总数量。    如果该对象已经被初始化为一个非空的掩码（即，如果size()函数返回大于0的东西，或者等价地，如果respresent_the_all_selected_mask()返回false），那么该参数可以被省略，而size()的结果被取走。 
* [0.x.9]*
   返回第一个被选中的组件的索引。该参数存在的原因与n_selected_components()函数存在的原因相同。    如果没有任何组件被选中，该函数会抛出一个异常。 
* [0.x.10]*
   如果这个掩码代表一个默认构建的掩码，对应于所有组件被选中的掩码，则返回true。如果为真，那么size()函数将返回0。 
* [0.x.11]*
   返回一个包含由当前对象选择的组件和作为参数传递的组件的联合体的组件掩码。 
* [0.x.12]*
   返回一个组件掩码，该掩码只包含那些在当前对象以及作为参数传递的对象中都被设置的元素。 
* [0.x.13]*
   返回这个对象和参数是否相同。 
* [0.x.14]*
   返回这个对象和参数是否不相同。 
* [0.x.15]*
   确定此对象的内存消耗（以字节为单位）的估计值。 
* [0.x.16]*
   异常情况  
* [0.x.17]*
   实际的组件掩码。 
* [0.x.18]*
 将一个组件掩码写到输出流中。如果组件掩码代表所有的组件都被选中，而没有指定掩码的特定大小，那么它就会将字符串<code>[所有组件被选中]</code>写到流中。否则，它将以[2.x.24]这样的形式打印出组件掩码。
* [2.x.25] out 要写入的流。 [2.x.26] mask 要写的掩码。 [2.x.27] 对第一个参数的引用。

* 
* [0.x.19]

