include/deal.II-translator/fe/fe_dgp_0.txt
[0.x.0]*
 基于Legendre多项式的不连续有限元。
* 例如，在2d中，FE_DGP(1)元素将代表函数[2.x.0]的跨度，这与FE_DGQ(1)元素是由[2.x.1]的跨度形成的。由于DGP空间的每个四边形只有三个未知数，因此立即可以看出这个元素不可能是连续的。
* 该元素中用于上述空间的基函数被选为在单位平方上形成Legendre基，即，特别是它们是[2.x.2]正交的，并且在参考单元上被归一化（但不一定在实数单元上）。因此，该元素的第一个基函数总是常数且等于1的函数，与该元素的多项式程度无关。此外，由于基函数的正交性，如果网格单元是平行四边形，质量矩阵是对角线。请注意，这与FE_DGPMonomial类相反，后者实际上是使用上面列出的单项式基作为基函数，没有从参考单元到实际单元的转换。
* 形状函数被定义在PolynomialSpace类中。PolynomialSpace中使用的多项式是FE_DGP中给出的高达<tt>p</tt>度的[2.x.3]。对于基函数的排序，请参考PolynomialSpace，记住Legendre多项式是按度数升序排序的。
* 

* 
* [2.x.4] 这个元素不是通过在给定的函数空间内寻找插值一组特定点的形状函数来定义的。因此，不存在可以对给定函数进行内插的支持点；因此，寻找与给定函数相近的有限元函数只能通过投影，而不是内插来实现。其次，这个元素的形状函数并不共同加到1。因此，增加或减少一个常量值
* 
* --比如说我们要做的是使一个函数的平均值为零
* 
* 不能通过简单地从每个自由度中减去常数值来完成。相反，我们需要利用第一个基础函数是等于1的常数这一事实，并简单地从每个单元上对应于这个第一形状函数的自由度值中减去常数。
* 

* 

* 
* [2.x.5] 该类仅对一维情况（<tt>spacedim != dim </tt>）部分实现，因为不同细化程度的网格之间不可能有信息传递，因为嵌入和投影矩阵没有在类构造函数中计算。
* [1.x.0]
* 值得注意的是，在（双，三）线性映射下，该元素描述的空间不包含[2.x.6]，即使我们使用度数为[2.x.7]的多项式基础。因此，例如，在具有非affine单元的网格上，线性函数不能由FE_DGP(1)或FE_DGPMonomial(1)类型的元素准确表示。
* 这可以通过下面的二维例子来理解：考虑顶点在[2.x.8]的单元：[2.x.9] 的单元。
* 对于这个单元，双线性变换[2.x.10]产生的关系[2.x.11]和[2.x.12]将参考坐标[2.x.13]和实空间坐标[2.x.14]联系起来。在这种映射下，常数函数显然被映射到它自己，但[2.x.15]空间的另外两个形状函数，即[2.x.16]和[2.x.17]被映射到[2.x.18]，其中[2.x.19] 。
* 对于[2.x.20]这种简单的情况，即如果实心单元是单位平方，表达式可以简化为[2.x.21]和[2.x.22] 。然而，对于所有其他情况，函数[2.x.23]不再是线性的，也不是它们的任何线性组合。因此，线性函数不在映射的[2.x.24]多项式的范围内。
* [1.x.1] 在2d中，这个元素的形状函数看起来如下。
* [1.x.2]
* [2.x.25] 
* [1.x.3]
* [2.x.26] 
* 

* [1.x.4]
* [2.x.27] 
 

* [1.x.5]
* [2.x.28] 
* 

* [1.x.6] [2.x.29]. 

 
* [0.x.1]*
   度数为[2.x.30]的张量乘积多项式的构造器。  
* [0.x.2]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_DGP<dim>(degree)</tt>，其中[2.x.31]和[2.x.32]用适当的值替换。 
* [0.x.3]*
    [2.x.33] 支持hp的函数 [2.x.34] 。  
* [0.x.4]*
   如果在一个顶点上，有几个有限元处于活动状态，hp代码首先为这些FEs的每个自由度分配不同的全局索引。然后调用这个函数来找出其中哪些应该得到相同的值，从而可以得到相同的全局自由度指数。  因此，该函数返回当前有限元对象的自由度与[2.x.35]的自由度之间的相同性列表，后者是对代表在该特定顶点上活动的其他有限元之一的有限元对象的引用。该函数计算两个有限元对象的哪些自由度是等价的，两个自由度的编号都在零和两个有限元的n_dofs_per_vertex()的相应值之间。每一对的第一个索引表示本元素的一个顶点自由度，而第二个是另一个有限元素的相应索引。    作为一个不连续的元素，这种约束的集合当然是空的。 
* [0.x.5]*
   与hp_vertex_dof_indices()相同，只是该函数处理的是线上的自由度。    这是一个不连续的元素，这种约束的集合当然是空的。 
* [0.x.6]*
   与hp_vertex_dof_indices()相同，只是该函数处理的是四边形上的自由度。    这是一个不连续的元素，这种约束的集合当然是空的。 
* [0.x.7]*
   返回该元素是否以新的方式实现其悬挂节点约束，这必须用于使元素 "hp-compatible"。    对于FE_DGP类，结果总是真（与元素的程度无关），因为它没有悬挂节点（是一个不连续的元素）。 
* [0.x.8]*
    [2.x.36] [2.x.37].   
* [0.x.9]*
    [2.x.38]   
* [0.x.10]*
   返回从一个元素的一个面插值到相邻元素的面的矩阵。矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。    衍生元素将不得不实现这个函数。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现从一个给定元素的内插，那么他们必须抛出一个类型为[2.x.39]的异常。  
* [0.x.11]*
   返回从一个元素的一个面插值到邻近元素的面的矩阵。矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。    衍生元素将不得不实现这个函数。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现从一个给定元素的内插，那么他们必须抛出一个类型为[2.x.40]的异常。  
* [0.x.12]*
   如果形状函数[2.x.42]在面的某处有非零的函数值，这个函数返回[2.x.41]。  
* [0.x.13]*
   确定这个对象的内存消耗（以字节为单位）的估计值。    这个函数是虚拟的，因为有限元对象通常是通过指向其基类的指针来访问的，而不是类本身。 
* [0.x.14]*
   返回一个元素的常数模式列表。对于这个元素，第一个条目是真，其他都是假。 
* [0.x.15]*
   仅供内部使用。它的全称是[2.x.44]函数，它创建了[2.x.45]向量，在构造函数内需要传递给[2.x.46]FiniteElementData的构造函数。 
* [0.x.16]

