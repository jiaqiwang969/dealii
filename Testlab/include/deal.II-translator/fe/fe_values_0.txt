include/deal.II-translator/fe/fe_values_0.txt
[0.x.0]*
   一个类，其特化用于定义一个向量值函数的卷曲对应于什么类型。 
* [0.x.1]*
   一个专门用于定义向量值函数的curl所对应的类型的类。    在1d中，curl是一个标量。 
* [0.x.2]*
   一个专门用于定义向量值函数的curl所对应的类型的类。    在2d中，curl是一个标量。 
* [0.x.3]*
   一个专门用于定义向量值函数的curl所对应的类型的类。    在3D中，curl是一个矢量。 
* [0.x.4]*
 一个用于FEValues、FEFaceValues或FESSubfaceValues对象的 "视图 "的命名空间。一个视图只代表整体的某一部分：而FEValues对象代表[1.x.0]向量值元素的所有分量的值、梯度或二阶导数，视图将注意力限制在单个分量或分量的一个子集上。你通常通过使用方括号操作符将FEValuesExtractors对象应用于FEValues、FEFaceValues或FESubfaceValues对象，来获得这个命名空间中定义的类的对象。
* 有一些类为单个标量组件、由[2.x.0]元素组成的向量组件和由[2.x.1]元素组成的对称二阶张量组件提供视图。
* 参见[2.x.2]模块的描述，了解如何使用该命名空间的特征的例子。
* 

* 
* [2.x.3] 

* 
* [0.x.5]*
   一个代表对一个可能是矢量值的有限元的单一标量分量的视图的类。视图将在[2.x.4]模块中讨论。    如果你将[2.x.5]应用于FEValues、FEFaceValues或FESSubfaceValues对象，你会得到这种类型的对象。   
* [2.x.6]   
* [0.x.6]*
     这个类所代表的视图值的数据类型的别名。由于我们处理的是一个单一的组件，所以值的类型是一个标量的双数。   
* [0.x.7]*
     该类代表的视图的梯度类型的别名。    这里，对于有限元的标量分量，梯度是一个[2.x.7] 。   
* [0.x.8]*
     该类代表的视图的二阶导数类型的别名。这里，对于有限元的标量分量，Hessian是一个 [2.x.8] .    
* [0.x.9]*
     该类所代表的视图的第三导数的类型的别名。这里，对于有限元的标量分量，第三导数是一个[2.x.9] 。   
* [0.x.10]*
     a [2.x.10]与本类提供的视图值的乘积的数据类型的别名。这是一个有限元场的标量分量的数据类型，其自由度由元素类型为[2.x.11]的向量描述。    
* [0.x.11]*
     [2.x.12]和该类提供的视图梯度的乘积的数据类型的别名。这是一个有限元场的标量分量的数据类型，其自由度由元素类型为[2.x.13]的向量描述。    
* [0.x.12]*
     一个[2.x.14]和该类提供的视图的拉普拉斯的乘积的数据类型的别名。这是一个有限元场的标量分量的数据类型，其自由度由元素类型为[2.x.15]的向量描述。    
* [0.x.13]*
     一个[2.x.16]和该类提供的视图的赫西的乘积的数据类型的别名。这是一个有限元场的标量分量的数据类型，其自由度由元素类型为[2.x.17]的向量描述。    
* [0.x.14]*
     一个[2.x.18]和该类提供的视图的第三导数的乘积的数据类型的别名。这是一个有限元场的标量分量的数据类型，其自由度由元素类型为[2.x.19]的向量描述。    
* [0.x.15]*
     一个结构，为标量视图和任何[2.x.20]类型的基函数的值和导数的乘积提供输出类型。         [2.x.21] 使用周围类中定义的类型来代替。   
* [0.x.16]*
       一个[2.x.22]和Scalar类的视图值的乘积的数据类型的别名。     
* [0.x.17]*
       [2.x.23]和Scalar类视图的梯度的乘积的数据类型的别名。     
* [0.x.18]*
       一个[2.x.24]和拉普拉斯类视图的乘积的数据类型的别名。     
* [0.x.19]*
       2.x.25]和Scalar类视图的Hessians之积的数据类型的别名。     
* [0.x.20]*
       一个[2.x.26]的乘积和Scalar类视图的第三导数的数据类型的别名。     
* [0.x.21]*
     一个结构，对于每个形状函数，我们预先计算出一堆数据，这将使以后的访问变得更加便宜。   
* [0.x.22]*
       对于每个形状函数，存储所选向量分量是否可能为非零。对于原始形状函数，我们可以肯定地知道某个给定形状函数的某个标量分量是否为非零，而对于非原始形状函数，这可能并不完全清楚（例如，对于RT元素，它取决于单元格的形状）。     
* [0.x.23]*
       对于每个形状函数，在shape_values、shape_gradients和shape_hessians表中存储行索引（列索引是正交点的索引）。如果形状函数是原始的，那么我们可以从FEValues对象的shape_function_to_row_table中获得这些信息；否则，我们必须花点功夫来计算这些信息。     
* [0.x.24]*
     默认构造函数。创建一个无效的对象。   
* [0.x.25]*
     表示FEValuesBase对象（或从FEValuesBase派生的类之一）的单个标量分量的对象的构造函数。   
* [0.x.26]*
     复制构造函数。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.27]*
     移动构造函数。   
* [0.x.28]*
     解构器。   
* [0.x.29]*
     拷贝操作符。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.30]*
     移动赋值运算符。   
* [0.x.31]*
     返回该视图所选择的矢量分量的值，用于参数所选择的形状函数和正交点。         [2.x.27] shape_function 要评估的形状函数的编号。    请注意，这个数字从零到dofs_per_cell，即使是在FEFaceValues或FESubfaceValues对象的情况下。         [2.x.28] q_point 要评估函数的正交点的编号。         [2.x.29]     
* [0.x.32]*
     返回该视图所选择的矢量分量的梯度（等级为1的张量），用于形状函数和参数选择的正交点。       
* [2.x.30]参数的含义与value()函数的记录相同。         [2.x.31]     
* [0.x.33]*
     对于参数选择的形状函数和正交点，返回该视图选择的向量分量的Hessian（所有二次导数的等级2的张量）。       
* [2.x.32] 参数的含义与value()函数的记载相同。         [2.x.33]     
* [0.x.34]*
     返回该视图选择的向量分量的所有三次导数的等级3的张量，用于参数选择的形状函数和正交点。       
* [2.x.34]参数的含义与value()函数的记录相同。         [2.x.35]     
* [0.x.35]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的标量分量的值。        这个函数等同于[2.x.36]函数，但它只对选定的标量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的值相乘后得到的（即[2.x.37]乘以用于存储你的有限元向量[2.x.39]的未知数[2.x.38]值的类型（由[2.x.40]参数代表）。         [2.x.41]     
* [0.x.36]*
     与上述相同，但使用局部自由度值的向量。换句话说，这个函数不是从与DoFHandler对象相关的全局向量中提取位于当前单元上的自由度的节点值（如上面的函数），而是通过其第一个参数获取这些局部节点值。获得这样一个向量的典型方法是通过调用如下代码    
* [1.x.1]
* 当前函数的意义在于，人们可以先修改这些局部值，例如应用限制器或确保所有节点值为正，然后再评估与当前单元上这些局部值相对应的有限元场。另一种应用是，人们希望将一个单元上的解后处理为每个单元上的不同的有限元空间，而不需要实际创建一个相应的DoFHandler
* 
* 在这种情况下，我们所要计算的是该后处理函数的局部表示，其特征是节点值；然后该函数允许在正交点评估该表示。         [2.x.43] dof_values 一个本地节点值的向量。该向量的长度必须等于当前单元上的DoF数量，并且必须按照参考单元上自由度的编号顺序排列。         [2.x.44] 值 给定的有限元场的值的向量，在当前对象上的正交点。         [2.x.45] InputVector [2.x.46] 类型必须允许从中创建ArrayView对象；这一点由[2.x.47]类和其他类满足。   
* [0.x.37]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的标量分量的梯度。        这个函数等同于[2.x.48]函数，但它只对选定的标量分量起作用。        输出向量存储的数据类型必须是你将形状函数的梯度相乘后得到的数据类型（即[2.x.49]乘以用于存储你的有限元向量[2.x.51]的未知数[2.x.50]值的类型（由[2.x.52]参数代表）。         [2.x.53]     
* [0.x.38]*
     这个函数与get_function_gradients()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.39]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的Hessians。        这个函数等同于[2.x.54]函数，但它只对选定的标量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的Hessians相乘后得到的（即[2.x.55]乘以用于存储你的有限元向量[2.x.57]的未知数[2.x.56]值的类型（由[2.x.58]参数代表）。         [2.x.59]     
* [0.x.40]*
     这个函数与get_function_hessians()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.41]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数标量分量的拉普拉斯。Laplacians是Hessians的轨迹。        这个函数相当于[2.x.60]函数，但它只对选定的标量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的拉普拉斯系数相乘后得到的（即[2.x.61]乘以用于存储你的有限元向量[2.x.62]的未知数值的类型[2.x.63]（由[2.x.64]参数代表）。         [2.x.65]     
* [0.x.42]*
     这个函数与get_function_laplacians()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.43]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的标量分量的三次导数。        这个函数相当于[2.x.66]函数，但它只对选定的标量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的三次导数（即[2.x.67] third_derivative_type）乘以你的有限元向量[2.x.69]（由[2.x.70] fe_function参数表示）用于存储未知数[2.x.68]的值的类型。         [2.x.71]     
* [0.x.44]*
     这个函数与get_function_third_derivatives()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.45]*
     一个指向我们操作的FEValuesBase对象的指针。   
* [0.x.46]*
     这个视图代表FEValuesBase对象的单一标量组件。   
* [0.x.47]*
     存储有关形状函数的数据。   
* [0.x.48]*
   一个代表对一组[2.x.72]分量的视图的类，这些分量构成了一个矢量值的有限元的矢量部分。视图将在[2.x.73]模块中讨论。    请注意，在目前的上下文中，矢量是指物理学上使用的意义：它有[2.x.74]个分量，在坐标系变换下以特定的方式表现出来。例子包括速度或位移场。这与数学中使用 "向量 "一词的方式相反（以及我们在库中的其他上下文中使用这个词的方式，例如在向量类中），在那里它真正代表了一个数字的集合。后者的一个例子是火焰中化学物种浓度的集合；然而，这些实际上只是标量变量的集合，因为如果坐标系被旋转，它们不会改变，不像速度矢量的分量，因此，这个类不应该被用于这种情况。    该类允许查询代表矢量的形状函数和解决方案的（分量）的值、梯度和发散。一个向量的梯度 [2.x.75] 被定义为 [2.x.76] 。    如果你将[2.x.77]应用于FEValues、FEFaceValues或FESubfaceValues对象，你会得到这种类型的对象。   
* [2.x.78]   
* [0.x.49]*
     这个类所代表的视图值的数据类型的别名。因为我们处理的是一组[2.x.79]的组件，所以值的类型是Tensor<1,spacedim>。   
* [0.x.50]*
     这个类所代表的视图的梯度类型的别名。    这里，对于一组[2.x.80]分量的有限元，梯度是一个[2.x.81] 。        关于向量的梯度到底是如何定义的，请看这个类的一般文档。   
* [0.x.51]*
     这个类所代表的视图的对称梯度的类型的别名。这里，对于一组[2.x.82]分量的有限元，对称梯度是一个[2.x.83] 。        一个矢量场[2.x.84]的对称梯度定义为[2.x.85] .    
* [0.x.52]*
     该类代表的视图发散的类型的别名。这里，对于一组[2.x.86]分量的有限元，发散当然是一个标量。   
* [0.x.53]*
     这个类所代表的视图的卷曲类型的别名。    这里，对于一组[2.x.87]的有限元分量，curl是一个[2.x.88] 。对于[2.x.89] .    
* [0.x.54]*
     这个类所代表的视图的二阶导数的类型的别名。这里，对于一组[2.x.90]分量的有限元，Hessian是一个[2.x.91] 。   
* [0.x.55]*
     该类代表的视图的第三导数类型的别名。这里，对于有限元的一组[2.x.92]分量，第三导数是一个[2.x.93] 。   
* [0.x.56]*
     a [2.x.94]和该类提供的视图值的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.95]的矢量描述。    
* [0.x.57]*
     [2.x.96]和该类提供的视图梯度的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.97]的矢量描述。    
* [0.x.58]*
     一个[2.x.98]和该类提供的视图的对称梯度的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.99]的矢量描述。    
* [0.x.59]*
     一个[2.x.100]和该类提供的视图的分歧的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.101]的矢量描述。    
* [0.x.60]*
     一个[2.x.102]和该类提供的视图的拉普拉斯的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.103]的矢量描述。    
* [0.x.61]*
     一个[2.x.104]和该类提供的视图的卷积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.105]的矢量描述。    
* [0.x.62]*
     一个[2.x.106]和该类提供的视图的赫西的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.107]的矢量描述。    
* [0.x.63]*
     一个[2.x.108]和该类提供的视图的第三导数的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.109]的矢量描述。    
* [0.x.64]*
     一个结构，为矢量视图和任何[2.x.110]类型的基函数的值和导数的乘积提供输出类型。         [2.x.111] 使用周围类中定义的类型来代替。   
* [0.x.65]*
       一个[2.x.112]和Vector类的视图值的乘积的数据类型的别名。     
* [0.x.66]*
       一个[2.x.113]和视图矢量类的梯度的乘积的数据类型的别名。     
* [0.x.67]*
       [2.x.114]与向量类的对称梯度的乘积的数据类型的别名。     
* [0.x.68]*
       一个[2.x.115]和向量类视图的发散的数据类型的别名。     
* [0.x.69]*
       一个[2.x.116]和矢量类视图的拉普拉斯的乘积的数据类型的别名。     
* [0.x.70]*
       一个[2.x.117]和向量类视图的卷积的数据类型的别名。     
* [0.x.71]*
       一个[2.x.118]和视图向量类的Hessians的乘积的数据类型的别名。     
* [0.x.72]*
       一个[2.x.119]和向量类视图的第三导数的乘积的数据类型的别名。     
* [0.x.73]*
     一个结构，对于每个形状函数，我们预先计算出一堆数据，这将使以后的访问变得更加便宜。   
* [0.x.74]*
       对于每一对(形状函数,向量内的分量)，存储所选向量分量是否可能为非零。对于原始形状函数，我们可以肯定地知道某个给定形状函数的某个标量分量是否为非零，而对于非原始形状函数，这可能并不完全清楚（例如，对于RT元素，它取决于单元格的形状）。     
* [0.x.75]*
       对于每一对（形状函数，矢量内的组件），在shape_values、shape_gradients和shape_hessians表中存储行索引（列索引是正交点索引）。如果形状函数是原始的，那么我们可以从FEValues对象的shape_function_to_row_table中获得这些信息；否则，我们必须花点功夫来计算这些信息。     
* [0.x.76]*
       对于每个形状函数说如下：如果这个形状函数的is_nonzero_shape_function_component中只有一个条目是非零的，那么就存储row_index的相应值，single_nonzero_component_index代表在0和dim之间的索引，对它来说，是达到了非零的。如果多个分量不为零，那么就存储
* 
如果没有组件是非零的，则存储 * - 。
* 
* - .      
* [0.x.77]*
     默认构造函数。创建一个无效的对象。   
* [0.x.78]*
     表示FEValuesBase对象（或从FEValuesBase派生的类之一）的dim分量的对象的构造函数，代表一个向量值变量。        第二个参数表示所选向量的第一个分量的索引。   
* [0.x.79]*
     复制构造函数。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.80]*
     移动构造器。   
* [0.x.81]*
     解构器。   
* [0.x.82]*
     拷贝操作符。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.83]*
     移动赋值运算符。   
* [0.x.84]*
     返回该视图所选择的向量分量的值，用于参数所选择的形状函数和正交点。    这里，由于视图代表FEValues对象中具有[2.x.120]分量的向量值部分，所以返回类型是具有[2.x.121]分量的秩1张量。         [2.x.122] shape_function 要评估的形状函数的编号。    注意，这个数字从零到dofs_per_cell，即使是在FEFaceValues或FESubfaceValues对象的情况下。         [2.x.123] q_point 要评估函数的正交点的编号。         [2.x.124]     
* [0.x.85]*
     返回该视图所选择的矢量分量的梯度（等级为2的张量），用于参数所选择的形状函数和正交点。        关于向量的梯度到底是如何定义的，请看这个类的一般文档。       
* [2.x.125] 参数的含义与value()函数的记录相同。         [2.x.126]     
* [0.x.86]*
     返回该视图选择的向量分量的对称梯度（等级为2的对称张量），用于参数选择的形状函数和正交点。        对称梯度定义为[2.x.127] ，其中[2.x.128]代表从FEValuesBase对象中选择的[2.x.129]分量，[2.x.130]是第[2.x.131]个正交点的位置。       
* [2.x.132] 参数的含义与value()函数的记载相同。         [2.x.133]     
* [0.x.87]*
     返回该视图所选择的向量分量的标量发散，用于参数所选择的形状函数和正交点。       
* [2.x.134] 参数的含义与value()函数的记录相同。         [2.x.135]     
* [0.x.88]*
     对于参数选择的形状函数和正交点，返回该视图选择的矢量分量的向量卷曲。    对于1d来说，这个函数没有任何意义。因此，它没有在 [2.x.136] 中实现。 在2D中，卷曲被定义为[1.x.2] 。
* 而在三维中，它是由[1.x.3]给出的。
*         
* [2.x.137] 参数的含义与value()函数的记录相同。         [2.x.138]     
* [0.x.89]*
     对于参数选择的形状函数和正交点，返回该视图选择的向量分量的Hessian（所有二次导数的等级2的张量）。       
* [2.x.139] 参数的含义与value()函数的记录相同。         [2.x.140]     
* [0.x.90]*
     返回该视图选择的向量分量的所有三次导数的等级3的张量，用于参数选择的形状函数和正交点。       
* [2.x.141]参数的含义与value()函数的记录相同。         [2.x.142]     
* [0.x.91]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上以<tt>fe_function</tt>为特征的有限元函数的选定向量分量的值。        这个函数相当于[2.x.143]函数，但它只对选定的向量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的值相乘后得到的（即[2.x.144]乘以用于存储你的有限元向量[2.x.146]的未知数[2.x.145]值的类型（由[2.x.147]参数代表）。         [2.x.148]     
* [0.x.92]*
     与上述相同，但使用局部自由度值的向量。换句话说，这个函数不是从与DoFHandler对象相关的全局向量中提取位于当前单元上的自由度的节点值（如上面的函数），而是通过其第一个参数获取这些局部节点值。获得这样一个向量的典型方法是调用如下代码    
* [1.x.4]
* 当前函数的意义在于，人们可以先修改这些局部值，例如应用限制器或确保所有节点值为正，然后再评估当前单元上与这些局部值相对应的有限元场。另一种应用是，人们希望将一个单元上的解后处理为每个单元上的不同的有限元空间，而不需要实际创建一个相应的DoFHandler
* 
* 在这种情况下，我们所要计算的是该后处理函数的局部表示，其特征是节点值；然后该函数允许在正交点评估该表示。         [2.x.150] dof_values 一个本地节点值的向量。该向量的长度必须等于当前单元上的DoF数量，并且必须按照参考单元上自由度的编号顺序排列。         [2.x.151] 值 给定的有限元场的值的向量，在当前对象上的正交点。         [2.x.152] InputVector [2.x.153] 类型必须允许从中创建ArrayView对象；这一点由[2.x.154]类等满足。   
* [0.x.93]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的选定矢量成分的梯度。        这个函数相当于[2.x.155]函数，但它只对选定的向量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的梯度相乘后得到的数据（即[2.x.156]乘以用于存储你的有限元向量[2.x.157]的未知数值的类型[2.x.158]（由[2.x.159]参数代表）。         [2.x.160]     
* [0.x.94]*
     这个函数与get_function_gradients()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.95]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>描述的有限元函数的对称梯度。        矢量场的对称梯度[2.x.161]定义为[2.x.162] 。       
* [2.x.163] 在FEValues类中没有[2.x.164]这样的等效函数，但当然可以从[2.x.165]中获得相关信息。        输出向量存储的数据类型必须是你将形状函数的对称梯度（即[2.x.166] symmetric_gradient_type）乘以用于存储你的有限元向量[2.x.167]的未知数值的类型[2.x.168]（由[2.x.169] fe_function参数表示）时得到的。         [2.x.170]     
* [0.x.96]*
     这个函数与get_function_symmetric_gradients()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.97]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的选定矢量分量的发散。        在FEValues类中没有诸如[2.x.171]这样的等效函数，但当然可以从[2.x.172]中获得相关信息。        输出向量所存储的数据类型必须是你将形状函数的发散量相乘后得到的（即[2.x.173]乘以用于存储你的有限元向量[2.x.175]（由[2.x.176]参数表示）的未知数[2.x.174]的值的类型）。         [2.x.177]     
* [0.x.98]*
     这个函数与get_function_divergences()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。更多信息请参见get_function_values_from_local_dof_values()的文档。   
* [0.x.99]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的所选向量分量的卷曲。        在FEValues类中没有诸如[2.x.178]这样的等效函数，但当然可以从[2.x.179]中获得相关信息。        输出向量所存储的数据类型必须是你将形状函数的卷曲相乘后得到的（即[2.x.180]乘以用于存储你的有限元向量[2.x.182]（由[2.x.183]参数表示）的未知数[2.x.181]的值的类型）。         [2.x.184]     
* [0.x.100]*
     这个函数与get_function_curls()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.101]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的选定矢量分量的Hessians。        这个函数相当于[2.x.185]函数，但它只对选定的向量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的Hessians相乘后得到的（即[2.x.186]乘以用于存储你的有限元向量[2.x.187]的未知数值的类型[2.x.188]（由[2.x.189]参数代表）。         [2.x.190]     
* [0.x.102]*
     这个函数与get_function_hessians()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.103]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的选定向量分量的拉普拉斯。Laplacians是Hessians的轨迹。        这个函数相当于[2.x.191]函数，但它只对选定的向量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的拉普拉斯系数相乘后得到的数据（即[2.x.192]乘以用于存储你的有限元向量[2.x.194]（由[2.x.195]参数表示）的未知数[2.x.193]的值的类型。         [2.x.196]     
* [0.x.104]*
     这个函数与get_function_laplacians()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.105]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的标量分量的三次导数。        这个函数相当于[2.x.197]函数，但它只对选定的标量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的三次导数（即[2.x.198] third_derivative_type）乘以用于存储你的有限元向量[2.x.200]（由[2.x.201] fe_function参数表示）的未知数[2.x.199]的值的类型。         [2.x.202]     
* [0.x.106]*
     这个函数与get_function_third_derivatives()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.107]*
     一个指向我们操作的FEValuesBase对象的指针。   
* [0.x.108]*
     这个视图代表FEValuesBase对象的向量的第一个分量。   
* [0.x.109]*
     存储有关形状函数的数据。   
* [0.x.110]*
   一个代表对一组[2.x.203]分量的视图的类，该分量形成了一个来自矢量值有限元的对称二阶张量。视图将在[2.x.204]模块中讨论。    该类允许查询代表对称张量的形状函数和解决方案的（组件）的值和发散。对称张量的发散 [2.x.205] 被定义为 [2.x.206] ，由于张量的对称性，它也是 [2.x.207] 。 换句话说，由于[2.x.208]的对称性，我们是按行还是按列应用纳布拉算子来得到发散并不重要。    如果你将[2.x.209]应用于FEValues、FEFaceValues或FESubfaceValues对象，你会得到一个这种类型的对象。   
* [2.x.210]   
* [0.x.111]*
     这个类所代表的视图值的数据类型的别名。由于我们处理的是一组[2.x.211]成分（即对称二阶张量的唯一成分），所以数值类型是SymmetricTensor<2,spacedim>。   
* [0.x.112]*
     这个类所代表的视图的发散类型的别名。这里，对于一组代表对称二阶张量的有限元的[2.x.212]唯一分量，发散当然是一个[2.x.213] 。        关于发散的定义，请参见该类的一般讨论。   
* [0.x.113]*
     a [2.x.214]与本类提供的视图值之积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.215]的矢量描述。    
* [0.x.114]*
     一个[2.x.216]和该类提供的视图的分歧的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.217]的矢量描述。    
* [0.x.115]*
     一个结构，为SymmetricTensor视图和任何[2.x.218]类型的基函数的值和导数的乘积提供输出类型。         [2.x.219] 使用周围类中定义的类型来代替。   
* [0.x.116]*
       [2.x.220]与SymmetricTensor类的视图值之积的数据类型的别名。     
* [0.x.117]*
       一个[2.x.221]的乘积的数据类型和SymmetricTensor类视图的分歧的别名。     
* [0.x.118]*
     一个结构，对于每个形状函数，我们预先计算出一堆数据，这将使以后的访问变得更加便宜。   
* [0.x.119]*
       对于每一对(形状函数,向量内的分量)，存储所选向量分量是否可能为非零。对于原始形状函数，我们肯定知道某个给定形状函数的某个标量分量是否为非零，而对于非原始形状函数，这可能并不完全清楚（例如，对于RT元素，它取决于单元格的形状）。     
* [0.x.120]*
       对于每一对（形状函数，矢量内的组件），在shape_values、shape_gradients和shape_hessians表中存储行索引（列索引是正交点索引）。如果形状函数是原始的，那么我们可以从FEValues对象的shape_function_to_row_table中获得这些信息；否则，我们必须花点功夫来计算这些信息。     
* [0.x.121]*
       对于每个形状函数说如下：如果这个形状函数的is_nonzero_shape_function_component中只有一个条目是非零的，那么就存储row_index的相应值，single_nonzero_component_index代表在0和（dim^2+dim）/2之间的索引，对它来说是达到的。如果多个分量为非零，那么就存储
* 
如果没有分量是非零的，则存储 * - 。
* 
* - .      
* [0.x.122]*
       [2.x.222]的索引。     
* [0.x.123]*
     默认构造函数。创建一个无效的对象。   
* [0.x.124]*
     表示<code>(dim*dim + dim)/2</code> FEValuesBase对象（或从FEValuesBase派生的类之一）的组件的构造函数，代表构成对称二阶张量值变量的唯一组件。        第二个参数表示所选对称二阶张量的第一个分量的索引。   
* [0.x.125]*
     复制构造函数。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.126]*
     移动构造函数。   
* [0.x.127]*
     复制操作符。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.128]*
     移动赋值运算符。   
* [0.x.129]*
     返回该视图所选择的向量分量的值，用于参数所选择的形状函数和正交点。    这里，由于视图代表FEValues对象的一个矢量值部分，具有[2.x.223]分量（对称二阶张量的唯一分量），所以返回类型是等级2的对称张量。         [2.x.224] shape_function 要评估的形状函数的编号。    注意，这个数字从零到dofs_per_cell，即使是在FEFaceValues或FESubfaceValues对象的情况下。         [2.x.225] q_point 要评估函数的正交点的编号。         [2.x.226]     
* [0.x.130]*
     返回该视图所选择的矢量分量的矢量发散，对于参数所选择的形状函数和正交点。        关于发散的定义，请参见本类的一般讨论。       
* [2.x.227] 参数的含义与value()函数的记录相同。         [2.x.228]     
* [0.x.131]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上以<tt>fe_function</tt>为特征的有限元函数的选定向量分量的值。        这个函数相当于[2.x.229]函数，但它只对选定的向量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的值相乘后得到的（即[2.x.230]乘以用于存储你的有限元向量[2.x.232]的未知数[2.x.231]值的类型（由[2.x.233]参数代表）。         [2.x.234]     
* [0.x.132]*
     与上述相同，但使用局部自由度值的向量。换句话说，这个函数不是从与DoFHandler对象相关的全局向量中提取位于当前单元上的自由度的节点值（如上面的函数），而是通过其第一个参数获取这些局部节点值。获得这样一个向量的典型方法是调用如下代码    
* [1.x.5]
* 当前函数的意义在于，人们可以先修改这些局部值，例如应用限制器或确保所有节点值为正，然后再评估与当前单元上这些局部值相对应的有限元场。另一种应用是，人们希望将一个单元上的解后处理为每个单元上的不同的有限元空间，而不需要实际创建一个相应的DoFHandler
* 
* 在这种情况下，我们所要计算的是该后处理函数的局部表示，其特征是节点值；然后该函数允许在正交点评估该表示。         [2.x.236] dof_values 一个本地节点值的向量。该向量的长度必须等于当前单元上的DoF数量，并且必须按照参考单元上自由度的编号顺序排列。         [2.x.237] 值 给定的有限元场的值的向量，在当前对象的正交点上。         [2.x.238] InputVector [2.x.239] 类型必须允许从中创建ArrayView对象；这一点由[2.x.240]类等满足。   
* [0.x.133]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的选定向量分量的发散。        在FEValues类中没有诸如[2.x.241]这样的等效函数，但当然可以从[2.x.242]中获得信息。        关于发散的定义，请参见该类的一般讨论。        输出向量存储的数据类型必须是你将形状函数的发散量相乘后得到的（即[2.x.243]乘以用于存储你的有限元向量[2.x.244]的未知数值的类型[2.x.245]（由[2.x.246]参数代表）。         [2.x.247]     
* [0.x.134]*
     这个函数与get_function_divergences()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.135]*
     一个指向我们操作的FEValuesBase对象的指针。   
* [0.x.136]*
     这个视图代表FEValuesBase对象的向量的第一个分量。   
* [0.x.137]*
     存储有关形状函数的数据。   
* [0.x.138]*
   一个代表对一组[2.x.248]分量的视图的类，这些分量构成了一个来自矢量值有限元的二阶张量。视图将在[2.x.249]模块中讨论。    该类允许查询代表张量的形状函数和解决方案的（组件）的值、梯度和发散。张量[2.x.250]的发散被定义为[2.x.251]，而它的梯度是[2.x.252]。    如果你将[2.x.253]应用于FEValues、FEFaceValues或FESubfaceValues对象，你会得到这种类型的对象。   
* [2.x.254]   
* [0.x.139]*
     当你将这种提取器应用于一个矢量值的有限元时，你得到的数据类型。   
* [0.x.140]*
     用于获取张量的发散的数据类型：一个矢量。   
* [0.x.141]*
     用于获取二阶张量的梯度的数据类型：三阶张量。   
* [0.x.142]*
     [2.x.255]与该类提供的视图值的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由一个元素类型为[2.x.256]的矢量描述。    
* [0.x.143]*
     一个[2.x.257]和该类提供的视图的分歧的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.258]的矢量描述。    
* [0.x.144]*
     该类提供的[2.x.259]与视图梯度的乘积的数据类型的别名。这是一个有限元场的矢量分量的数据类型，其自由度由元素类型为[2.x.260]的矢量描述。    
* [0.x.145]*
     一个结构，为张量视图和任何[2.x.261]类型的基函数的值和导数的乘积提供输出类型。         [2.x.262] 使用周围类中定义的类型来代替。   
* [0.x.146]*
       一个[2.x.263]和张量类的视图值的乘积的数据类型的别名。     
* [0.x.147]*
       一个[2.x.264]和张量类视图的分歧的乘积的数据类型的别名。     
* [0.x.148]*
       张量类中[2.x.265]与梯度的乘积的数据类型的别名。     
* [0.x.149]*
     一个结构，对于每个形状函数，我们预先计算出一堆数据，这将使以后的访问变得更便宜。   
* [0.x.150]*
       对于每一对(形状函数,向量内的分量)，存储所选向量分量是否可能为非零。对于原始形状函数，我们肯定知道某个给定形状函数的某个标量分量是否为非零，而对于非原始形状函数，这可能并不完全清楚（例如，对于RT元素，它取决于单元格的形状）。     
* [0.x.151]*
       对于每一对（形状函数，矢量内的成分），在shape_values、shape_gradients和shape_hessians表中存储行索引（列索引是正交点索引）。如果形状函数是原始的，那么我们可以从FEValues对象的shape_function_to_row_table中获得这些信息；否则，我们必须花点功夫来计算这些信息。     
* [0.x.152]*
       对于每个形状函数说如下：如果这个形状函数的is_nonzero_shape_function_component中只有一个条目是非零的，那么就存储row_index的相应值，single_nonzero_component_index代表在0和（dim^2）之间的索引，对它来说是达到了。如果多个分量为非零，则存储
* 
如果没有组件是非零的，则存储* - 。
* 
* - .      
* [0.x.153]*
       [2.x.266]的索引。     
* [0.x.154]*
     默认构造函数。创建一个无效的对象。   
* [0.x.155]*
     复制构造函数。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.156]*
     移动构造函数。   
* [0.x.157]*
     解构器。   
* [0.x.158]*
     表示FEValuesBase对象（或从FEValuesBase派生的类之一）的[2.x.267]分量的对象的构造函数，表示构成二阶张量值变量的唯一分量。        第二个参数表示所选对称二阶张量的第一个分量的索引。   
* [0.x.159]*
     复制操作符。这不是一个轻量级的对象，所以我们不允许复制，如果调用这个函数会产生一个编译时错误。   
* [0.x.160]*
     移动赋值运算符。   
* [0.x.161]*
     返回该视图所选择的向量分量的值，用于参数所选择的形状函数和正交点。    这里，由于视图代表了FEValues对象中具有[2.x.268]分量（二阶张量的唯一分量）的矢量值部分，所以返回类型是等级2的张量。         [2.x.269] shape_function 要评估的形状函数的编号。    注意，这个数字从零到dofs_per_cell，即使是在FEFaceValues或FESubfaceValues对象的情况下。         [2.x.270] q_point 要评估函数的正交点的编号。         [2.x.271]     
* [0.x.162]*
     返回该视图所选择的矢量分量的矢量发散，对于参数所选择的形状函数和正交点。        关于发散的定义，请参见本类的一般讨论。       
* [2.x.272] 参数的含义与value()函数的记录相同。         [2.x.273]     
* [0.x.163]*
     返回该视图选择的向量分量的梯度（3阶张量），用于参数选择的形状函数和正交点。        关于梯度的定义，请参见本类的一般讨论。       
* [2.x.274] 参数的含义与value()函数的记录相同。         [2.x.275]     
* [0.x.164]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上以<tt>fe_function</tt>为特征的有限元函数的选定向量分量的值。        这个函数相当于[2.x.276]函数，但它只对选定的向量分量起作用。        输出向量所存储的数据类型必须是你将形状函数的值相乘后得到的（即[2.x.277]乘以用于存储你的有限元向量[2.x.279]的未知数[2.x.278]的值的类型（由[2.x.280]参数代表）。         [2.x.281]     
* [0.x.165]*
     与上述相同，但使用局部自由度值的向量。换句话说，这个函数不是从与DoFHandler对象相关的全局向量中提取位于当前单元上的自由度的节点值（如上面的函数），而是通过其第一个参数获取这些局部节点值。获得这样一个向量的典型方法是调用如下代码    
* [1.x.6]
* 当前函数的意义在于，人们可以先修改这些局部值，例如应用限制器或确保所有节点值为正，然后再评估当前单元上与这些局部值相对应的有限元场。另一种应用是，人们希望将一个单元上的解后处理为每个单元上的不同的有限元空间，而不需要实际创建一个相应的DoFHandler
* 
* 在这种情况下，我们所要计算的是该后处理函数的局部表示，其特征是节点值；然后该函数允许在正交点评估该表示。         [2.x.283] dof_values 一个本地节点值的向量。该向量的长度必须等于当前单元上的DoF数量，并且必须按照参考单元上自由度编号的相同顺序排序。         [2.x.284] 值 给定的有限元场的值的向量，在当前对象上的正交点。         [2.x.285] InputVector [2.x.286]类型必须允许从中创建ArrayView对象；这一点由[2.x.287]类和其他类满足。   
* [0.x.166]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的选定向量分量的发散。        在FEValues类中没有诸如[2.x.288]这样的等效函数，但当然可以从[2.x.289]中获取信息。        关于发散的定义，请参见该类的一般讨论。        输出向量存储的数据类型必须是你将形状函数的发散量相乘后得到的数据（即[2.x.290]乘以用于存储你的有限元向量[2.x.292]的未知数[2.x.291]值的类型（由[2.x.293]参数代表）。         [2.x.294]     
* [0.x.167]*
     这个函数与get_function_divergences()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.168]*
     返回上次调用FEValues对象的<tt>reinit</tt>函数时选择的单元、面或子面的正交点上由<tt>fe_function</tt>表征的有限元函数的梯度。        关于梯度的定义，请参见本类的一般讨论。        输出向量所存储的数据类型必须是你将形状函数的梯度相乘后得到的（即[2.x.295]乘以用于存储你的有限元向量[2.x.296]的未知数值的类型[2.x.297]（由[2.x.298]参数代表）。         [2.x.299]     
* [0.x.169]*
     这个函数与get_function_gradients()的关系，与get_function_values_from_local_dof_values()与get_function_values()的关系相同。参见get_function_values_from_local_dof_values()的文档以了解更多信息。   
* [0.x.170]*
     一个指向我们操作的FEValuesBase对象的指针。   
* [0.x.171]*
     这个视图代表FEValuesBase对象的向量的第一个分量。   
* [0.x.172]*
     存储有关形状函数的数据。   
* [0.x.173]*
     一个类，其特化用于定义什么FEValuesViews对象与给定的FEValuesExtractors对象相对应。   
* [0.x.174]*
     一个类，它的特化是用来定义什么FEValuesViews对象对应于给定的FEValuesExtractors对象。        当使用[2.x.300]时，对应的视图是一个[2.x.301]spacedim>。   
* [0.x.175]*
     一个类，其专门化用于定义什么FEValuesViews对象与给定的FEValuesExtractors对象相对应。        当使用[2.x.302]时，对应的视图是一个[2.x.303]spacedim>。   
* [0.x.176]*
     一个类，其专门化用于定义什么FEValuesViews对象与给定的FEValuesExtractors对象相对应。        当使用[2.x.304]时，对应的视图是一个[2.x.305]dim, spacedim>。   
* [0.x.177]*
     一个类，其专门化用于定义什么FEValuesViews对象与给定的FEValuesExtractors对象相对应。        当使用[2.x.306]时，对应的视图是一个[2.x.307]dim, spacedim>。   
* [0.x.178]*
     一个类的对象，其中存储有[2.x.308][2.x.309]等对象的集合。FEValuesBase类在构建时使用它来生成所有可能的Views类；我们在构建时这样做，因为Views类会缓存一些信息，因此创建起来相对昂贵。   
* [0.x.179]*
       缓存标量和矢量以及对称二阶张量值的视图。     
* [0.x.180]*
       构造函数。     
* [0.x.181]*
   一个模板化的别名，将FEValuesViews中的相应视图关联到给定的Extractor类。 
* [0.x.182]*
 FEValues、FEFaceValues和FESSubfaceValues对象一方面是有限元和映射类的接口，另一方面是单元和正交规则的接口。它们允许在正交公式的正交点评估形状函数的值或导数，当通过映射从单元格投射到实空间的单元格时。这种抽象的原因是可能的优化。根据有限元和映射的类型，有些值可以在单元格上计算一次。其他的必须在每个单元上计算，但也许同时计算几个值会提供优化的方法。由于这种相互作用可能很复杂，并且取决于实际的有限元，所以不能留给应用程序的程序员。
* FEValues、FEFaceValues和FESSubfaceValues只提供数据处理：计算留给Mapping和FiniteElement类型的对象。这些对象提供了<tt>get_*_data</tt>和<tt>fill_*_values</tt>函数，分别由<tt>FEValues*</tt>的构造器和<tt>reinit</tt>函数调用。
* [1.x.7]
* 通常，<tt>FEValues*</tt>的对象被用于一个三角形的所有单元（或单元的面）的积分循环中。为了充分利用优化功能，应该在循环之前构建该对象，这样就可以一劳永逸地计算不依赖于单元格位置和形状的信息（例如，这包括最常见元素的正交点的形状函数值：我们可以在单元格上评估它们，当映射到真实单元格时它们将是一样的）。然后，在所有单元的循环中，必须为每个网格单元重新初始化，以计算根据实际单元而变化的那部分信息（例如，形状函数的梯度等于单元格上的梯度
* 
* - 可以一次性计算出来
* 
* - 乘以单位和实际单元之间映射的雅各布矩阵，这需要为每个单元重新计算）。)
* 一段典型的代码，把对拉普拉斯矩阵的局部贡献加起来，看起来像这样。
* 

* 
* [1.x.8]
* 
* 这里使用的各个函数描述如下。请注意，根据设计，在FEValues对象内部使用的正交点的顺序与上述传递给FEValues对象构造函数的正交公式所定义的相同。
* [1.x.9]
* 本类的函数分为不同的类别。 [2.x.310] [2.x.311] shape_value(), shape_grad()等：每次返回此对象的一个值。这些函数都是内联的，所以这就是对所有有限元值的建议访问。使用优化的编译器应该不会有性能上的损失。如果有限元是矢量值的，那么这些函数返回所请求的形状函数的唯一非零分量。然而，一些有限元的形状函数有一个以上的非零分量（我们称之为非 "原始"），在这种情况下，这组函数将抛出一个异常，因为它们不能产生一个有用的结果。相反，请使用下一组函数。
* [2.x.312] shape_value_component(), shape_grad_component(), 等等。这是与上面相同的一组函数，只是对于矢量值的有限元，它们只返回一个矢量分量。这对于那些形状函数有多个非零分量的元素来说是很有用的，因为这时不能使用上述函数，你必须使用这组函数走遍形状函数的所有（或只有非零）分量。
* [2.x.313] get_function_values(), get_function_gradients(), etc.: 计算一个有限元函数或其在正交点的导数。
* [2.x.314] reinit：初始化某个单元的FEValues对象。这个函数不在本类中，只在派生类中，并且有一个变量调用语法。更多信息请参见派生类的文档。 [2.x.315] 
* 

* [1.x.10]
* 这个类的工作机制在[2.x.316]"更新标志 "和[2.x.317]"Mapping、FiniteElement和FEValues如何协同工作 "的页面中讨论。
* 

* 

* 
* [2.x.318] 

 
* [0.x.183]*
   该对象所处的尺寸。 
* [0.x.184]*
   该对象所处空间的尺寸。 
* [0.x.185]*
   当前对象的正交点的数量。它的值由max_n_quadrature_points的值初始化并被更新，例如，如果为一个新的单元/面调用[2.x.319]。   
* [2.x.320]默认值等于max_n_quadrature_points的值。 
* [0.x.186]*
   正交点的最大数量。这个值可能与n_quadrature_points不同，例如，如果一个具有不同面孔正交规则的QCollection被传递给初始化FEFaceValues。    这对于初始化数组，分配最大的内存量是非常有用的，在以后重新调整大小的时候，可能会用到n_quadrature_points给出的当前正交点的数量。 
* [0.x.187]*
   每个单元的形状函数的数量。如果我们使用这个基类来评估单元面的有限元，这仍然是每个单元的自由度数量，而不是每个面的自由度。 
* [0.x.188]*
   构造函数。用<tt>n_q_points</tt>正交点，<tt>dofs_per_cell</tt>每个单元的试验函数来设置数组大小，用给定的模式在调用派生类的<tt>reinit</tt>函数时更新字段。字段本身没有被设置，这必须发生在派生类的构造函数中。 
* [0.x.189]*
   复制赋值被删除，因为这个类的对象是不可复制的。 
* [0.x.190]*
   复制构造函数被删除，因为这个类的对象是不可复制的。 
* [0.x.191]*
   解构器。 
* [0.x.192]*
   派生类的<tt>reinit</tt>函数最后一次被调用时选择的单元格、面或子面的正交点上的形状函数的值。    如果形状函数是矢量值，那么这将返回唯一的非零分量。如果形状函数有一个以上的非零分量（也就是说，它不是原始的），那么抛出一个ExcShapeFunctionNotPrimitive类型的异常。在这种情况下，使用 shape_value_component() 函数。     [2.x.321] function_no 要被评估的形状函数的数字。请注意，这个数字从零到dofs_per_cell，即使是在FEFaceValues或FESubfaceValues对象的情况下。     [2.x.322] point_no 要评估函数的正交点的数目 [2.x.323] 。  
* [0.x.193]*
   计算一个正交点的形状函数值的一个向量分量。如果有限元是标量的，那么只允许零分量，返回值等于shape_value()函数的值。如果有限元是矢量值的，但所有形状函数都是原始的（即它们只有一个分量是非零的），那么shape_value()返回的值正好等于这个函数的一个分量。因此，只有在形状函数不是基元的情况下，这个函数才更有意义，但此时它是必要的，因为其他函数不能被使用。     [2.x.324] function_no 要评估的形状函数的编号。     [2.x.325] point_no 要评估函数的正交点的编号。     [2.x.326] component 要评估的向量分量。     [2.x.327]   
* [0.x.194]*
   计算<tt>function_no</tt>第1个形状函数在<tt>quadrature_point</tt>第1个正交点的梯度，相对于实际单元坐标。 如果你想得到其中一个坐标方向的导数，使用张量类的适当函数来提取这个函数返回的张量的一个分量。因为只返回对梯度值的引用，所以应该不会有大的性能缺陷。    如果形状函数是矢量值的，那么它返回唯一的非零分量。如果形状函数有一个以上的非零分量（即它不是原始的），那么它将抛出一个ExcShapeFunctionNotPrimitive类型的异常。在这种情况下，请使用 shape_grad_component() 函数。    这个函数的参数与shape_value()函数的参数相同。     [2.x.328] function_no 要被评估的形状函数的编号。     [2.x.329] quadrature_point 要评估函数的正交点的数量。     [2.x.330]   
* [0.x.195]*
   返回形状函数在正交点的梯度的一个向量分量。如果有限元是标量的，那么只允许零分量，返回值等于shape_grad()函数的值。如果有限元是矢量值的，但所有形状函数都是原始的（即它们只有一个分量是非零的），那么shape_grad()返回的值就等于这个函数的一个分量。因此，只有在形状函数不是基元的情况下，这个函数才更有意义，但此时它是必要的，因为其他函数不能使用。    这个函数的参数与shape_value_component()函数的参数同样成立。     [2.x.331]   
* [0.x.196]*
   <tt>function_no</tt>第1个形状函数在<tt>point_no</tt>第1个正交点相对于实际单元坐标的二次导数。如果你想得到其中一个坐标方向的导数，使用张量类的适当函数来提取一个分量。由于只返回对Hessian值的引用，应该不会有大的性能缺陷。    如果形状函数是矢量值的，那么这将返回唯一的非零分量。如果形状函数有一个以上的非零分量（即它不是原始的），那么抛出一个ExcShapeFunctionNotPrimitive类型的异常。在这种情况下，使用shape_hessian_component()函数。    这个函数的参数与shape_value()函数的参数相同。     [2.x.332]   
* [0.x.197]*
   返回一个正交点上的形状函数的 hessian 的一个向量分量。如果有限元是标量的，那么只允许零分量，返回值等于shape_hessian()函数的值。如果有限元是矢量的，但是所有的形状函数都是原始的（即它们只有一个分量是不为零的），那么shape_hessian()返回的值就等于这个函数的一个分量。因此，只有在形状函数不是原始函数的情况下，这个函数才更有意义，但此时它是必要的，因为其他函数不能使用。    这个函数的参数与shape_value_component()函数的参数同样成立。     [2.x.333]   
* [0.x.198]*
   <tt>function_no</tt>第1个形状函数在<tt>point_no</tt>第1个正交点相对于实际单元坐标的3次导数。如果你想得到其中一个坐标方向的3阶导数，请使用张量类的适当函数来提取一个分量。由于只返回对三阶导数值的引用，应该不会有大的性能缺陷。    如果形状函数是矢量值的，那么这将返回唯一的非零分量。如果形状函数有一个以上的非零分量（即它不是原始的），那么抛出一个ExcShapeFunctionNotPrimitive类型的异常。在这种情况下，使用 shape_3rdderivative_component() 函数。    这个函数的参数与shape_value()函数的参数相同。     [2.x.334]   
* [0.x.199]*
   返回一个正交点的形状函数的三次导数的一个向量分量。如果有限元是标量的，那么只允许零分量，返回值等于shape_3rdderivative()函数的值。如果有限元是矢量值的，但所有形状函数都是原始的（即它们只有一个分量是非零的），那么shape_3rdderivative()返回的值就等于这个函数的一个分量。因此，只有在形状函数不是原始函数的情况下，这个函数才更有意义，但此时它是必要的，因为其他函数不能使用。    这个函数的参数与 shape_value_component() 函数的参数相同。     [2.x.335]   
* [0.x.200]*
   返回限制在当前单元、面或子面的有限元函数的值，这些单元、面或子面是在最后一次调用派生类的<tt>reinit</tt>函数时选择的正交点。    如果当前的单元没有被激活，那么数值将被内插到当前的单元，并从中计算出点值。    这个函数只能在使用的有限元是标量的情况下使用，即只有一个矢量分量。 为了获得多分量元素的值，下面有另一个get_function_values()，返回结果的向量的向量。     [2.x.336] fe_function 一个值向量，描述（全局）该函数应在当前单元的正交点评估的有限元函数。     [2.x.337] values 由fe_function指定的函数在当前单元的正交点的值。 假设该对象已经具有正确的大小。这个输出向量所存储的数据类型必须是当你将形状函数的值乘以用于存储你的有限元向量[2.x.339]（由[2.x.340]参数表示）的未知数的值的类型时得到的。这恰好等于解向量元素的类型。     [2.x.341] [2.x.342] 将包含fe_function描述的场在[2.x.343] 第三个正交点的值。   
* [2.x.344] 输入矢量的实际数据类型可以是Vector&lt;T&gt;、BlockVector&lt;T&gt;或PETSc或Trilinos矢量包装类之一。它代表了与DoFHandler对象相关的全局DoF值的向量，这个FEValues对象最后被初始化。     [2.x.345]   
* [0.x.201]*
   这个函数与其他get_function_values()的作用相同，但应用于多分量（矢量值）元素。参数的含义如那里所解释。     [2.x.346] [2.x.347]是fe_function描述的场在[2.x.348]个正交点的值的向量。由[2.x.349]访问的矢量的大小等于有限元的分量数，即[2.x.350]返回[2.x.352]个正交点的[2.x.351]个矢量的值。        
* [0.x.202]*
   从一个任意的矢量生成函数值。这个函数与上面这个名字的第一个函数本质上是一样的，只是它没有假设输入矢量对应于描述有限元场的未知数的DoFHandler（然后我们会假设`fe_function.size() == dof_handler.n_dofs()`）。相反，对应于当前单元的节点值是一个任意矢量的元素，这些元素由这个函数的第二个参数来索引。`fe_function`输入参数的其余部分对应于什么，对这个函数没有影响。    鉴于此，上面的函数相当于将`fe_function`作为第一个参数传给当前函数，并将以下调用产生的`local_dof_indices`数组作为当前函数的第二个参数。 
* [1.x.11]
* (更多信息见[2.x.354]。)同样地，上面的函数也相当于调用  
* [1.x.12]
* 然后调用当前函数，将`local_dof_values`作为第一个参数，并将一个索引为`{0,...,fe.dofs_per_cell-1}的数组作为第二个参数。    当前函数的意义在于，人们有时希望在正交点评估有限元函数，其节点值没有存储在全局矢量中
* 
* 例如，可以先修改这些局部值，例如应用限制器或确保所有节点值为正值，然后再评估当前单元上与这些局部值对应的有限元场。另一种应用是，人们希望将一个单元上的解后处理为每个单元上的不同有限元空间，而不需要实际创建一个相应的DoFHandler
* 
* 在这种情况下，我们所要计算的是该后处理函数的局部表示，其特征是节点值；然后该函数允许在正交点评估该表示。     [2.x.355] fe_function 一个结点值的向量。这个向量可以有一个任意的大小，只要所有由 "indices "索引的元素可以被实际访问。     [2.x.356] indices 进入`fe_function`的索引的一个向量。这个向量的长度必须等于当前单元上的自由度数量，并且必须按照参考单元上自由度的索引顺序识别`fe_function`中的元素。     [2.x.357] values 给定的有限元场的数值向量，在当前对象上的正交点。     [2.x.358]   
* [0.x.203]*
   从一个任意的矢量生成矢量函数值。    这个函数与前一个函数相对应，只是针对矢量值的情况。     [2.x.359]   
* [0.x.204]*
   从一个任意的向量生成向量函数值。这个函数与前一个函数类似，但`indices`向量也可以是每个单元格的dofs数量的倍数。然后，<tt>value</tt>中的向量应该允许有限元的分量的相同倍数。    根据最后一个参数的值，<tt>values</tt>的外向量要么有正交规则的长度（<tt>quadrature_points_fastest == false</tt>），要么有要填充的元件的长度<tt>quadrature_points_fastest == true</tt>。如果<tt>p</tt>是当前的正交点编号，<tt>i</tt>是所需解决方案的矢量分量，如果<tt>quadrature_points_fastest == false</tt>，对<tt>values[p][i]</tt>的访问是<tt>values[i][p]</tt>，否则是<tt>values</tt>。    由于这个函数允许相当普遍的参数大小组合，所以要注意对参数的检查可能不会发现错误。     [2.x.360]   
* [0.x.205]*
   计算一个单元的正交点上的有限元梯度。这个函数等同于相应的get_function_values()函数（更多信息见那里），但评估的是有限元场的梯度而不是它的值。    这个函数只能在使用的有限元是标量的情况下使用，即只有一个矢量成分。对于矢量值的有限元，有一个相同名称的相应函数。     [2.x.361] fe_function 一个值的向量，描述（全局）该函数应在当前单元的正交点评估的有限元函数。     [2.x.362] gradients 由fe_function指定的函数在当前单元的正交点的梯度。 梯度是在实空间计算的（而不是在单元格上）。 假设该对象已经有了正确的尺寸。这个输出向量所存储的数据类型必须是当你将形状函数的梯度乘以用于存储有限元向量[2.x.363]的未知数[2.x.364]（由[2.x.365]fe_function参数表示）的类型时所得到的。     [2.x.366] [2.x.367] 将包含fe_function描述的场在[2.x.368] 第三个正交点的梯度。   [2.x.369]代表坐标方向[2.x.370]在正交点[2.x.371]的导数。   
* [2.x.372] 输入矢量的实际数据类型可以是Vector&lt;T&gt;、BlockVector&lt;T&gt;或PETSc或Trilinos矢量包装类之一。它代表了与DoFHandler对象相关的全局DoF值的向量，而这个FEValues对象最后被初始化。     [2.x.373]   
* [0.x.206]*
   这个函数与其他get_function_gradients()的作用相同，但应用于多分量（矢量值）元素。参数的含义与那里解释的一样。     [2.x.374] [2.x.375] 是fe_function描述的场在[2.x.376]第1个正交点的梯度的矢量。由[2.x.377]访问的矢量的大小等于有限元的分量数，即[2.x.378]返回[2.x.379]个矢量分量在[2.x.380]个正交点的梯度。因此，[2.x.381]是当前单元的[2.x.383]矢量场的第1个矢量分量在坐标方向[2.x.382]上的导数。     [2.x.385]   
* [0.x.207]*
   这个函数与上述get_function_gradients()函数中的第一个函数的关系，与带有类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.386]   
* [0.x.208]*
   这个函数与上述get_function_gradients()函数中的第一个函数的关系，与带有类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.387]   
* [0.x.209]*
   计算单元格正交点上的有限元二阶导数的张量。这个函数等同于相应的get_function_values()函数（更多信息见那里），但评估有限元场的二阶导数而不是其值。    这个函数只能在使用的有限元是标量的情况下使用，即只有一个矢量成分。对于矢量值的有限元有一个相同名称的相应函数。     [2.x.388] fe_function 一个值的向量，描述（全局）该函数应在当前单元的正交点评估的有限元函数。     [2.x.389] hessians 由fe_function指定的函数在当前单元的正交点上的Hessians。 Hessians是在实空间计算的（而不是在单元格上）。 假设该对象已经有了正确的尺寸。这个输出向量所存储的数据类型必须是你将形状函数的Hessians乘以用于存储你的有限元向量[2.x.390]（由[2.x.392]fe_function参数表示）的未知数值的类型时得到的。     [2.x.393] [2.x.394] 将包含fe_function描述的场在[2.x.395] 第三个正交点的Hessian。   [2.x.396] 代表正交点[2.x.398]的第二导数矩阵的[2.x.397]分量。   
* [2.x.399] 输入矢量的实际数据类型可以是Vector&lt;T&gt;、BlockVector&lt;T&gt;或PETSc或Trilinos矢量封装类之一。它代表了与DoFHandler对象相关的全局DoF值的向量，这个FEValues对象最后被初始化。     [2.x.400]   
* [0.x.210]*
   这个函数与其他get_function_hessians()的作用相同，但应用于多分量（矢量值）元素。参数的含义与那里解释的一样。     [2.x.401] [2.x.402]是fe_function描述的场在[2.x.403]第1个正交点的Hessians的向量。由[2.x.404]访问的矢量的大小等于有限元的分量数，即[2.x.405]返回[2.x.406]第1个正交点的[2.x.407]矢量分量的Hessian。因此，[2.x.408]是当前单元格的正交点[2.x.411]处向量场的[2.x.410]个向量分量的第二导数矩阵的[2.x.409]个分量。     [2.x.412]   
* [0.x.211]*
   这个函数与上述get_function_hessians()函数中的第一个函数的关系，与带有类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.413]   
* [0.x.212]*
   这个函数与上述get_function_hessians()函数中的第一个函数的关系，与带类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.414]   
* [0.x.213]*
   计算单元格正交点上的有限元的（标量）拉普拉斯（即二阶导数张量的迹）。这个函数等同于相应的get_function_values()函数（更多信息见那里），但评估的是有限元场的二阶导数而不是其值。    这个函数只能在使用的有限元是标量的情况下使用，即只有一个矢量成分。对于矢量值的有限元有一个相同名称的相应函数。     [2.x.415] fe_function 一个值的向量，描述（全局）该函数应在当前单元的正交点评估的有限元函数。     [2.x.416] laplacians 由fe_function指定的函数在当前单元的正交点上的拉普拉斯方程。 拉普拉斯是在实空间计算的（而不是在单元格上）。 假设该对象已经有了正确的尺寸。这个输出向量所存储的数据类型必须是当你将形状函数的拉普拉斯系数乘以用于存储有限元向量[2.x.417]的未知数[2.x.418]（由[2.x.419] fe_function参数表示）的类型时所得到的。这恰好等于输入向量元素的类型。     [2.x.420] [2.x.421] 将包含fe_function描述的场在[2.x.422] 第三个正交点的拉普拉斯。     [2.x.423] 对于输出向量的每个分量，都有[2.x.424] ，其中<tt>hessians</tt>将是get_function_hessians()函数的输出。   
* [2.x.425] 输入向量的实际数据类型可以是Vector&lt;T&gt;、BlockVector&lt;T&gt;或PETSc或Trilinos向量封装类之一。它代表了与DoFHandler对象相关的全局DoF值的向量，而这个FEValues对象最后被初始化。     [2.x.426]   
* [0.x.214]*
   这个函数与其他get_function_laplacians()的作用相同，但应用于多分量（矢量值）元素。参数的含义与那里解释的一样。     [2.x.427] [2.x.428] 是fe_function描述的场在[2.x.429]个正交点的拉普拉斯矢量。由[2.x.430]访问的矢量的大小等于有限元的分量数，即[2.x.431]返回[2.x.432]第1个正交点的[2.x.433]矢量的拉普拉斯。     [2.x.434] 对于输出向量的每个分量，持有[2.x.435] ，其中<tt>hessians</tt>将是get_function_hessians() 函数的输出。     [2.x.436]   
* [0.x.215]*
   这个函数与上述get_function_laplacians()函数中的第一个函数的关系，与带有类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.437]   
* [0.x.216]*
   这个函数与上述get_function_laplacians()函数中的第一个函数的关系，与带类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.438]   
* [0.x.217]*
   这个函数与上述get_function_laplacians()函数中的第一个函数的关系，与带类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.439]   
* [0.x.218]*
   计算一个单元的正交点上的有限元的三阶导数张量。这个函数等同于相应的get_function_values()函数（更多信息见那里），但评估的是有限元场的第三导数而不是它的值。    这个函数只能在使用的有限元是标量的情况下使用，即只有一个矢量成分。对于矢量值的有限元有一个相同名称的相应函数。     [2.x.440] fe_function 一个值的向量，描述（全局）该函数应在当前单元的正交点评估的有限元函数。     [2.x.441] third_derivatives 由fe_function指定的函数在当前单元的正交点上的第三导数。  三次导数是在实空间计算的（而不是在单元格上）。 假设该对象已经有了正确的尺寸。这个输出向量所存储的数据类型必须是当你将形状函数的三次导数乘以用于存储你的有限元向量[2.x.442]的未知数值的类型[2.x.443]（由[2.x.444]参数表示）时所得到的。     [2.x.445] [2.x.446]将包含fe_function描述的场在[2.x.447]第1个正交点的第三导数。 [2.x.448]代表在正交点[2.x.450]的三阶张量的[2.x.449]的第三导数的第三部分。   
* [2.x.451] 输入矢量的实际数据类型可以是Vector&lt;T&gt;、BlockVector&lt;T&gt;或PETSc或Trilinos矢量封装类之一。它代表了与DoFHandler对象相关的全局DoF值的向量，而这个FEValues对象最后被初始化。     [2.x.452]   
* [0.x.219]*
   这个函数的作用与其他get_function_third_derivatives()相同，但应用于多分量（矢量值）元素。参数的含义与那里的解释相同。     [2.x.453] [2.x.454] 是fe_function描述的场在[2.x.455]第1个正交点上的第三导数的向量。由[2.x.456]访问的矢量的大小等于有限元的分量数，即[2.x.457]返回[2.x.458]在[2.x.459]第1个正交点的第1个矢量分量的三次导数。因此，[2.x.460]是当前单元的正交点[2.x.463]处向量场的[2.x.462]第3个向量分量的张量的[2.x.461]。     [2.x.464]   
* [0.x.220]*
   这个函数与上述get_function_third_derivatives()函数中的第一个函数的关系，与带有类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.465]   
* [0.x.221]*
   这个函数与上述get_function_third_derivatives()函数中的第一个函数的关系，与带有类似参数的get_function_values()函数与get_function_values()函数中的第一个函数的关系相同。更多信息见那里。     [2.x.466]   
* [0.x.222]*
   返回一个对象，它可以被认为是一个包含从零（包括）到`dofs_per_cell`（不包括）所有索引的数组。这允许人们使用基于范围的 "for "循环来编写代码，如以下类型。 
* [1.x.13]
* 这里，我们在所有单元上的所有自由度上循环，`i'和`j'代表所有单元自由度的有效指数，由传递给`fe_values'的有限元定义。 
* [0.x.223]*
   返回一个对象，可以认为是一个数组，包含从[2.x.467]（包括）到`dofs_per_cell`（包括）的所有索引。  这允许人们使用基于范围的 "for "循环来编写以下类型的代码。 
* [1.x.14]
* 这里，我们在所有单元上的所有局部自由度上循环，`i`取所有单元自由度的有效指数，由传递给`fe_values`的有限元定义，而`j`取`i`范围的指定子集，从`i`本身开始，到单元自由度的数量为止。通过这种方式，我们可以构建刚度矩阵贡献的上半部分和对角线（假设它是对称的，并且只需要计算它的一半），例如。   
* [2.x.468]如果[2.x.469]等于单元格中的DoF数量，则返回的索引范围为空。 
* [0.x.224]*
   返回一个对象，它可以被认为是一个包含从0（包括）到[2.x.470]（包括）所有索引的数组。这允许人们使用基于范围的 "for "循环来编写以下类型的代码。 
* [1.x.15]
* 这里，我们在所有单元上的所有局部自由度上循环，`i'代表所有单元自由度的有效指数，由传递给`fe_values'的有限元定义，而`j'代表`i'范围的指定子集，从零开始，到`i'本身结束。这样，我们可以构建刚度矩阵贡献的下半部分和对角线（假设它是对称的，并且只需要计算它的一半），例如。   
* [2.x.471]如果[2.x.472]等于零，则返回的索引范围为空。 
* [0.x.225]*
   返回一个对象，可以认为是一个包含从零到`n_quadrature_points`所有索引的数组。这允许使用基于范围的`for'循环来编写以下类型的代码。 
* [1.x.16]
* 这里，我们正在循环所有单元格上的所有正交点，`q_point`采用所有有效的正交点索引，由传递给`fe_values`的正交规则定义。     [2.x.473] CPP11  
* [0.x.226]*
   <tt>q</tt>第1个正交点在实空间的位置。     [2.x.474]   
* [0.x.227]*
   返回实空间中正交点向量的参考。     [2.x.475]   
* [0.x.228]*
   映射的正交点权重。如果这个对象指的是体积评价（即派生类是FEValues类型），那么这就是雅可比行列式乘以<tt>i</tt>第1个单位正交点的权重。    对于表面评估（即类FEFaceValues或FESubfaceValues），它是映射的表面元素乘以正交点的权重。    你可以把这个函数返回的数量看作是我们在这里通过正交实现的积分中的体积或表面元素[2.x.476]。     [2.x.477]   
* [0.x.229]*
   返回一个对存放JxW()返回值的数组的引用。 
* [0.x.230]*
   返回指定正交点上的变换的雅各布系数，即 [2.x.478] [2.x.479] 。  
* [0.x.231]*
   返回一个对存放jacobian()返回值的数组的引用。     [2.x.480]   
* [0.x.232]*
   返回在指定的正交点，即[2.x.481]，从单位到实数单元转换的二阶导数，即雅各布式的一阶导数。     [2.x.482]   
* [0.x.233]*
   返回对存放jacobian_grads()返回值的数组的引用。     [2.x.483]   
* [0.x.234]*
   返回从单位单元到实数单元转换的二阶导数，即雅各布式的一阶导数，在指定的正交点，向前推到实数单元坐标，即 [2.x.484] 。     [2.x.485]   
* [0.x.235]*
   返回持有jacobian_pushed_forward_grads()返回值的数组的引用。     [2.x.486]   
* [0.x.236]*
   返回在指定的正交点上，即[2.x.487]，从单位到实数单元转换的第三导数，即雅各布的第二导数。     [2.x.488]   
* [0.x.237]*
   返回对存放jacobian_2nd_derivatives()返回值的数组的引用。     [2.x.489]   
* [0.x.238]*
   返回从单位到实心单元转换的第三导数，即雅各布的第二导数，在指定的正交点，向前推到实心单元坐标，即 [2.x.490] 。     [2.x.491]   
* [0.x.239]*
   返回持有jacobian_pushed_forward_2nd_derivatives()返回值的数组的引用。     [2.x.492]   
* [0.x.240]*
   返回在指定的正交点，即[2.x.493]，从单位到实数单元转换的第四导数，即雅各布式的第三导数 。     [2.x.494]   
* [0.x.241]*
   返回对存放jacobian_3rd_derivatives()返回值的数组的引用。     [2.x.495]   
* [0.x.242]*
   返回从单位到实心单元转换的第四导数，即雅各布的第三导数，在指定的正交点，向前推到实心单元坐标，即 [2.x.496] 。     [2.x.497]   
* [0.x.243]*
   返回持有jacobian_pushed_forward_3rd_derivatives()返回值的数组的引用。     [2.x.498]   
* [0.x.244]*
   返回指定正交点上的变换的逆雅各布系数，即 [2.x.499] [2.x.500] 。  
* [0.x.245]*
   返回一个对存放inverse_jacobian()返回值的数组的引用。     [2.x.501]   
* [0.x.246]*
   返回一个正交点的法向量。如果你为一个面调用这个函数（即，当使用FEFaceValues或FESubfaceValues对象时），那么这个函数返回面的<tt>i</tt>第1个正交点处的单元格的外向法向量。    相反，如果你为一个一维的单元格调用这个函数（即，当使用`FEValues<dim,spacedim>`对象时，`spacedim>dim`），那么这个函数返回单元格的法向量
* 
* - 换句话说，是对嵌入三角形的流形的法向量的一个近似值。在这种情况下，流形的法线方向当然有两个，这个函数返回由顶点编号引起的 "向上 "方向。    矢量的长度被规范化为1。     [2.x.502]   
* [0.x.247]*
   返回此对象所代表的所有正交点的法向量。关于法向量所代表的内容，请参见normal_vector()函数。     [2.x.503]   
* [0.x.248]*
   创建当前FEValues对象的一个视图，该视图代表可能是矢量值的有限元的特定标量分量。视图的概念在命名空间FEValuesViews的文档中解释，特别是在[2.x.504]模块中。 
* [0.x.249]*
   创建一个当前FEValues对象的视图，该视图代表了一组[2.x.505]矢量值有限元的标量分量（即矢量）。视图的概念在命名空间FEValuesViews的文档中解释，特别是在[2.x.506]模块中。 
* [0.x.250]*
   创建当前FEValues对象的视图，该视图代表了一组[2.x.507]矢量值有限元的标量分量（即对称的二阶张量）。视图的概念在命名空间FEValuesViews的文档中解释，特别是在[2.x.508]模块中。 
* [0.x.251]*
   创建一个当前FEValues对象的视图，该视图表示一组[2.x.509]矢量值有限元的标量分量（即二阶张量）。视图的概念在命名空间FEValuesViews的文档中解释，特别是在[2.x.510]模块中。 
* [0.x.252]*
   对所选映射对象的常量引用。 
* [0.x.253]*
   对所选有限元对象的常数参考。 
* [0.x.254]*
   返回为该对象设置的更新标志。 
* [0.x.255]*
   返回到当前单元的三角形迭代器。 
* [0.x.256]*
   返回当前单元格与前一个单元格的关系。如果结果是[2.x.511]，这允许重新使用一些单元格数据（如具有常数系数的方程的局部矩阵）。  
* [0.x.257]*
   确定这个对象的内存消耗（以字节为单位）的估计值。 
* [0.x.258]*
   如果要求FEValuesBase返回一个字段的值，而这个字段不是这个FEValuesBase的UpdateFlags所要求的，就会抛出这个异常。   
* [2.x.512]   
* [0.x.259]*
   FEValues FiniteElement和cell->get_dof_handler().get_fe()之间不匹配。   
* [2.x.513]   
* [0.x.260]*
   一个给定的形状函数不是原始的，但它需要是。   
* [2.x.514]   
* [0.x.261]*
   给定的FiniteElement不是原始元素，见[2.x.515]。    
* [2.x.516]   
* [0.x.262]*
   FEValues类的对象需要存储一个指向当前单元的迭代器，以便能够在get_function_values()和各种函数中提取该单元上的自由度值。另一方面，这个类也应该适用于不同的迭代器，只要它们有相同的接口来提取自由度值（即，例如，它们需要有一个[2.x.517]get_interpolated_dof_values函数）。    这就需要一个共同的迭代器类的基类，并使我们在这里需要的函数 [2.x.518] 另一方面，这是我们在库中唯一需要的地方，引入一个迭代器的基类并使一个函数虚化会惩罚 [2.x.519] 迭代器的所有 [2.x.520] 用户，这些函数基本上是作为非常快速的存取函数。所以我们不想这样做。相反，我们在这里做的是让我们需要的函数变成虚拟的，只用于 [2.x.521] 这个类 [2.x.522] 。这个想法是这样的：有一个共同的基类，它声明了一些纯虚拟的函数，对于每个可能的迭代器类型，我们有一个派生类，它将迭代器存储到单元格并实现这些函数。由于迭代器类具有相同的接口，我们可以使派生类成为模板，对迭代器类型进行模板化。    这样一来，虚函数的使用就只限于这个类，其他迭代器的使用者就不用承担负面影响了。   
* [2.x.523] 这个类是[1.x.17]设计模式的一个例子。 
* [0.x.263]*
   向前声明源自CellIteratorBase的类。它们的定义和实现在.cc文件中给出。 
* [0.x.264]*
   存储上次调用reinit()函数时选择的单元格。 这对<tt>get_function_*</tt>函数以及提取器类中的同名函数是必要的。 
* [0.x.265]*
   一个信号连接，我们用来确保每当三角结构因细化而发生变化时，我们会得到通知。我们需要知道这一点，因为它使所有的单元格迭代器失效，作为其中的一部分，我们在随后调用reinit()时保留了'present_cell'迭代器，以便计算单元格相似度。 
* [0.x.266]*
   一个信号连接，我们用它来确保每当三角结构因网格转换而发生变化时，我们都能得到通知。我们需要知道这一点，因为它使所有的单元格迭代器失效，作为其中的一部分，我们在后续调用reinit()时保留了'present_cell'迭代器，以便计算单元格的相似度。 
* [0.x.267]*
   一个与三角结构相连的函数，以便在三角结构发生变化，迭代器随之失效时，将存储的'present_cell'迭代器重置为一个无效的迭代器。 
* [0.x.268]*
   这个函数被派生类中的各种 reinit() 函数调用。给定参数所指示的单元格，测试我们是否必须丢弃之前存储的present_cell参数，因为这需要我们比较不同三角形的单元格。在检查这一切的时候，还要确保我们有tria_listener连接到我们将在调用此函数后立即设置present_cell的三角结构。 
* [0.x.269]*
   指向与该FEValues对象相关的映射对象的指针。 
* [0.x.270]*
   一个指向映射内部数据对象的指针，从[2.x.524][2.x.525]或[2.x.526]获得。  
* [0.x.271]*
   一个对象，[2.x.527]和类似的函数将其输出放入其中。 
* [0.x.272]*
   一个指向与此FEValues对象相关的有限元对象的指针。 
* [0.x.273]*
   指向有限元内部数据对象的指针，从[2.x.528][2.x.529]或[2.x.530]获得。  
* [0.x.274]*
   一个对象，[2.x.531]和类似的函数将其输出放入其中。 
* [0.x.275]*
   交给FEValues构造器的原始更新标志。 
* [0.x.276]*
   初始化一些更新标志。从派生类的[2.x.532]函数中调用，这些函数又从它们的构造函数中调用。    基本上，这个函数使用已经存储的有限元和映射对象找出需要设置的标志来计算用户想要的一切，正如通过作为参数传递的标志所表达的那样。 
* [0.x.277]*
   一个枚举变量，可以存储当前单元与之前访问的单元的不同状态。如果需要，可以在这里检查额外的状态，并在重新启动时使用其中一个方法。 
* [0.x.278]*
   一个检查新单元是否与之前使用的单元相似的函数。然后，大量的数据可以被重新使用，例如实空间中的基函数导数，shape_grad。 
* [0.x.279]*
   对所有可能的FEValuesViews对象进行缓存。 
* [0.x.280]*
 在单元格的正交点上评估的有限元。
* 这个函数实现了FEValuesBase的初始化程序，如果需要以单元格的正交点为单位的值。更多的文件请看这个类。
* 

* 
* [2.x.533] 

* 
* [0.x.281]*
   我们对其进行积分的对象的尺寸。对于本类，这等于[2.x.534] 。 
* [0.x.282]*
   构造函数。从映射和有限元对象中获取单元独立数据，匹配正交规则和更新标志。 
* [0.x.283]*
   像上面的函数一样，但取一个正交规则的集合。   
* [2.x.535]与FEFaceValues相反，我们要求集合中正交规则的数量为1。 
* [0.x.284]*
   构造函数。这个构造函数除了使对象隐含地使用[2.x.536]映射（即MappingQGeneric(1)类型的对象）外，与其他构造函数是等价的。 
* [0.x.285]*
   像上面的函数一样，但取一个正交规则的集合。   
* [2.x.537]与FEFaceValues相反，我们要求集合中的正交规则的数量为1。 
* [0.x.286]*
   重新初始化类型为 "iterator into a DoFHandler object "的给定单元的梯度、雅各比行列式等，以及与此对象相关的有限元。假设给定单元所使用的有限元也是这个FEValues对象所使用的有限元。 
* [0.x.287]*
   重新初始化梯度、雅可比行列式等，用于给定类型为 "进入三角测量对象的迭代器 "的单元和给定的有限元。由于进入三角剖分的迭代器只传递单元的几何信息，而不传递可能与此单元相关的自由度的信息，所以如果需要自由度的信息，你将无法调用这一类的一些函数。这些函数首先是<tt>get_function_value/gradients/hessians/laplacians/third_derivatives</tt>函数。如果你想调用这些函数，你必须调用[2.x.538]reinit变体，将迭代器带入DoFHandler或其他DoF处理程序类型对象。 
* [0.x.288]*
   返回对该对象所存储的正交公式副本的引用。 
* [0.x.289]*
   确定此对象的内存消耗（以字节为单位）的估计值。 
* [0.x.290]*
   返回对这个非常对象的引用。    虽然看起来不是很有用，但是这个函数的存在是为了给[2.x.539]类提供能力，在这种情况下，它提供了当前单元的FEValues对象（记住，对于hp-finite元素，实际使用的FE对象可能会在不同的单元之间变化，所以我们也需要不同的FEValues对象用于不同的单元；一旦你重新初始化了[2.x.540 ]对象，它就会为该单元格的FE检索FEValues对象，并通过与此相同的函数返回；因此，这里的这个函数只提供相同的接口，以便人们可以对FEValues和[2.x.541]进行模板化。  
* [0.x.291]*
   在这里存储一份正交公式的副本。 
* [0.x.292]*
   做两个构造函数的共同工作。 
* [0.x.293]*
   reinit()函数只做需要了解迭代器类型的那部分工作。在设置完present_cell()后，它们会传递给这个函数，这个函数做真正的工作，而且与单元格迭代器的实际类型无关。 
* [0.x.294]*
 将FEValuesBase的接口扩展到只有在评估单元格表面的东西时才有意义的值。所有在单元格内部的数据也都可以在这里得到。
* 见FEValuesBase
* 

* 
* [2.x.542] 

* 
* [0.x.295]*
   我们对其进行积分的对象的尺寸。对于本类，这等于[2.x.543] 。 
* [0.x.296]*
   构造函数。调用基类的构造函数，用正确的尺寸设置本类的数组。 实际上，填充这些数组是派生类的构造函数的职责。     [2.x.544]是这个对象所要存储的面或子面的数量。实际数量取决于派生类，对于FEFaceValues来说，它是<tt>2*dim</tt>，而对于FESubfaceValues类来说，它是<tt>2*dim*(1<<(dim-1))</tt>，即面的数量乘以每个面的子面的数量。 
* [0.x.297]*
   像上面的函数一样，但采取的是正交规则的集合。这允许给每个面分配一个不同的正交规则。在集合只包含一个面的正交规则的情况下，这个正交规则将用于所有面。 
* [0.x.298]*
   单元在<tt>i</tt>第1个正交点的变换的边界形式。 见 [2.x.545] 。     [2.x.546]   
* [0.x.299]*
   返回曲面映射的外向法向量乘以雅各布系数的列表。     [2.x.547]   
* [0.x.300]*
   返回上次调用reinit()函数时选择的面的索引。 
* [0.x.301]*
   返回该对象所存储的正交公式副本的引用。 
* [0.x.302]*
   确定此对象的内存消耗（以字节为单位）的估计值。 
* [0.x.303]*
   上次调用reinit()函数时选择的面的编号。 
* [0.x.304]*
   最后一次调用reinit()函数时选择的面的索引。 
* [0.x.305]*
   在这里存储一份正交公式的副本。 
* [0.x.306]*
 在一个面上的正交点中评估的有限元。
* 这个类将FEFaceValuesBase的功能添加到FEValues中；更多的文档请看那里。
* 由于有限元函数及其导数在单元格边界可能是不连续的，所以这个函数对一个网格面没有限制。但是，这些值从相邻的任何一个单元接近面的时候都有限制。
* 

* 
* [2.x.548] 

* 
* [0.x.307]*
   该对象所处的尺寸。 
* [0.x.308]*
   我们对其进行积分的对象的维度。对于本类，这等于[2.x.549] 。 
* [0.x.309]*
   构造函数。从映射和有限元对象中获取单元独立数据，匹配正交规则和更新标志。 
* [0.x.310]*
   像上面的函数一样，但取一个正交规则的集合。这允许给每个面分配一个不同的正交规则。在集合只包含一个面的正交规则的情况下，这个正交规则将用于所有面。 
* [0.x.311]*
   构造函数。这个构造函数等同于其他的构造函数，只是它使对象隐含地使用[2.x.550]映射（即MappingQGeneric(1)类型的对象）。 
* [0.x.312]*
   像上面的函数一样，但采取的是正交规则的集合。这允许给每个面分配一个不同的正交规则。在集合只包含一个面的正交规则的情况下，这个正交规则将用于所有面。 
* [0.x.313]*
   重新初始化[2.x.551]的[2.x.552]面和给定的有限元的梯度、雅克比行列式等。 
* [0.x.314]*
   重新初始化面[2.x.553]和单元[2.x.554]的梯度、雅可比决定数等。    
* [2.x.555] [2.x.556] 必须是[2.x.557]面的迭代器之一。 
* [0.x.315]*
   重新初始化 "进入三角形对象的迭代器 "类型的给定单元上的给定面的梯度、雅可比行列式等，以及给定的有限元。由于进入三角剖分的迭代器只传递单元的几何信息，而不传递可能与此单元相关的自由度信息，如果需要自由度信息，你将无法调用该类的一些函数。这些函数首先是<tt>get_function_value/gradients/hessians/third_derivatives</tt>函数。如果你想调用这些函数，你必须调用[2.x.558] reinit变体，将迭代器带入DoFHandler或其他DoF处理程序类型对象。 
* [0.x.316] 重新初始化 "进入三角形对象的迭代器 "类型的给定单元上的给定面的梯度、雅各比行列式等，以及给定的有限元。由于进入三角剖分的迭代器只传递单元的几何信息，而不传递可能与此单元相关的自由度的信息，所以如果需要自由度的信息，你将无法调用这一类的一些函数。这些函数首先是<tt>get_function_value/gradients/hessians/third_derivatives</tt>函数。如果你想调用这些函数，你必须调用[2.x.559] reinit变体，将迭代器带入DoFHandler或其他DoF处理程序类型对象。   
* [2.x.560] [2.x.561]必须是[2.x.562]面的迭代器之一。 
* [0.x.317]*
   返回对这个非常对象的引用。    虽然看起来不是很有用，但是这个函数的存在是为了给[2.x.563]类提供能力，在这种情况下，它提供了当前单元的FEValues对象（请记住，对于HP-finite元素，实际使用的FE对象可能会在不同的单元之间变化，所以我们也需要不同的FEValues对象用于不同的单元；一旦你重新初始化了[2.x.564 ]对象，它就会为该单元格上的FE检索FEValues对象，并通过与此相同的函数返回；因此，这里的这个函数只提供相同的接口，以便人们可以对FEValues和[2.x.565]进行模板化。  
* [0.x.318]*
   做两个构造函数的共同工作。 
* [0.x.319]*
   reinit()函数只做需要了解迭代器类型的那部分工作。在设置完present_cell()之后，它们会传递给这个函数，这个函数会做真正的工作，而且与单元格迭代器的实际类型无关。 
* [0.x.320]*
 在一个面的正交点上评估的有限元。
* 这个类将FEFaceValuesBase的功能添加到FEValues中；更多的文档请看那里。
* 该类用于位于细化边上的面。在这种情况下，邻近的单元被细化。为了能够计算内部和外部函数值之间的差异，邻近单元的细化必须在这个单元上模拟。这可以通过应用模拟细化的正交规则来实现。由此产生的数据字段被分割开来，以反映邻居的细化结构：一个子面的编号对应于邻居面的孩子的编号。
* 

* 
* [2.x.566] 

* 
* [0.x.321]*
   该对象所处的尺寸。 
* [0.x.322]*
   该对象所处空间的尺寸。 
* [0.x.323]*
   我们所整合的对象的维度。对于本类，这等于[2.x.567] 。 
* [0.x.324]*
   构造函数。从映射和有限元对象中获取独立单元数据，匹配正交规则和更新标志。 
* [0.x.325]*
   像上面的函数一样，但取一个正交规则的集合。   
* [2.x.568]与FEFaceValues相反，我们要求集合中正交规则的数量为1。 
* [0.x.326]*
   构造函数。这个构造函数除了使对象隐含地使用[2.x.569]映射（即MappingQGeneric(1)类型的对象）外，与其他构造函数是等价的。 
* [0.x.327]*
   像上面的函数一样，但取一个正交规则的集合。   
* [2.x.570]与FEFaceValues相反，我们要求集合中的正交规则的数量为1。 
* [0.x.328]*
   重新初始化类型为 "iterator into a DoFHandler object "的给定单元的梯度、雅各比行列式等，以及与该对象相关的有限元。假设给定单元所使用的有限元也是这个FESubfaceValues对象所使用的有限元。 
* [0.x.329]*
   替代的重新初始化函数，作为参数，接受面和子面的迭代器，而不是它们的数字。 
* [0.x.330]*
   重新初始化给定子面的梯度、雅可比行列式等，这些梯度和雅可比行列式是在给定的 "进入三角形对象的迭代器 "和给定的有限元的单元上进行的。由于进入三角剖分的迭代器只传递单元的几何信息，而不传递可能与此单元相关的自由度的信息，如果需要自由度的信息，你将无法调用这一类的一些函数。这些函数首先是<tt>get_function_value/gradients/hessians/third_derivatives</tt>函数。如果你想调用这些函数，你必须调用[2.x.571]reinit变体，将迭代器带入DoFHandler或其他DoF处理程序类型对象。 
* [0.x.331]*
   重新初始化给定子面的梯度、雅可比行列式等，这些梯度、雅可比行列式是在给定的 "进入三角形对象的迭代器 "类型的单元上，以及给定的有限元上。由于进入三角剖分的迭代器只传递单元的几何信息，而不传递可能与此单元相关的自由度的信息，如果需要自由度的信息，你将无法调用这一类的一些函数。这些函数首先是<tt>get_function_value/gradients/hessians/third_derivatives</tt>函数。如果你想调用这些函数，你必须调用[2.x.572]reinit变体，将迭代器带入DoFHandler或其他DoF处理程序类型对象。    这和前面的函数做的事情一样，但是把迭代器而不是数字作为参数。   
* [2.x.573] [2.x.574] 和 [2.x.575] 必须对应于 [2.x.576] 的一个面（以及该面的一个子面）。  
* [0.x.332]*
   返回一个对这个对象的引用。    虽然看起来不是很有用，但是这个函数的存在是为了给[2.x.577]类提供能力，在这种情况下，它提供了当前单元的FEValues对象（记住，对于hp-finite元素，实际使用的FE对象可能在不同的单元中发生变化，所以我们也需要不同的FEValues对象用于不同的单元；一旦你重新初始化了[2.x.578 ]对象，它就会为该单元格上的FE检索FEValues对象，并通过与此相同的函数返回；因此，这里的这个函数只提供相同的接口，以便人们可以对FEValues和[2.x.579]进行模板化。  
* [0.x.333]*
    [2.x.580] Document this    
* [2.x.581]   
* [0.x.334]*
    [2.x.582] 记录这一点    
* [2.x.583]   
* [0.x.335]*
   做两个构造函数的共同工作。 
* [0.x.336]*
   reinit()函数只做需要了解迭代器类型的那部分工作。在设置完present_cell()之后，它们会传递给这个函数，这个函数会做真正的工作，而且与单元格迭代器的实际类型无关。 
* [0.x.337]*
     返回一个张量的对称版本，该张量的第n行等于第二个参数，其他所有的行都等于0。   
* [0.x.338]

