include/deal.II-translator/fe/fe_nedelec_0.txt
[0.x.0]*
  [2.x.0] 实现的几个方面是实验性的。目前，在全局细化的网格上使用该元素是安全的，其面的方向是一致的。更详细的注意事项见下面的todo条目。
* N&eacute;d&eacute;lec元素的实现。N&eacute;d&eacute;lec空间的设计是为了解决解只存在于空间[2.x.1]的问题，而不是更常用的空间[2.x.2]。换句话说，解决方案必须是一个矢量场，其卷曲是可平方整除的，但其梯度可能不是可平方整除的。这个空间（和这些元素）的典型应用是麦克斯韦方程和相应的简化，例如麦克斯韦方程的简化版本，只涉及电场[2.x.3]，在没有电流时，必须满足方程[2.x.4]，或者磁矢量势[2.x.6]在时间独立的情况下必须满足方程[2.x.5]。
* [2.x.7]中的函数的决定性特征是，它们通常是不连续的。
* 
* 但如果你在2D中画一条线（或在3D中画一个表面），那么矢量场的[1.x.0]分量必须在线（或表面）上连续，尽管法线分量可能不是。因此，N&eacute;d&eacute;lec元素的构造是这样的：（i）它是[2.x.8]"矢量值"，（ii）形状函数是不连续的，但（iii）每个形状函数所代表的矢量场的切向分量在单元面上是连续的。
* N&eacute;d&eacute;lec元素的其他属性是：（i）它是[2.x.9]"非原始元素"；（ii）形状函数被定义为使某些面的积分为零或一，而不是常见的某些点值为零或一的情况。
* 我们遵循通常使用的
* 
*--虽然很混乱
* 
* - 对N&eacute;d&eacute;lec元素的 "度 "的定义。具体来说，元素的 "度 "表示有限元空间中包含的[1.x.1]的多项式度，即使该空间可能包含更高多项式度的形状函数。因此，最低阶元素是FE_Nedelec(0)，即 "零度 "的Raviart-Thomas元素，尽管这个空间的函数一般是每个变量的一度多项式。这种 "度 "的选择意味着函数本身的近似顺序是[1.x.2]，就像通常的多项式空间一样。如此选择的编号意味着序列[1.x.3]注意，这遵循Brezzi和Raviart的惯例，尽管不是N&eacute;d&eacute;lec的原始论文中使用的。
* 该类没有在二维一的情况下实现（<tt>spacedim != dim</tt>）。
* [2.x.10] 即使这个元素是为二维和三维空间实现的，节点值的定义也依赖于三维中一致方向的面。因此，在复杂的网格上应该注意。
* 

* [1.x.4]
* [2.x.11] 与N&eacute;d&eacute;lec元素相关的 "插值 "算子的构造是这样的：插值和计算卷曲是矩形网格单元上的换算操作。我们从插值任意函数以及#限制性矩阵中要求这一点。
* [1.x.5]
* 参考单元上度数为[1.x.6]的元素的[2.x.12]"节点值 "是。 [2.x.13] [2.x.14] 在边上：切向分量相对于[1.x.7]度的多项式的矩。 [2.x.15] 在面：切向分量相对于<tt>dim</tt>-1度的FE_Nedelec多项式的矩值[1.x.8]-1。 [2.x.16] 在单元格中：相对于度数为[1.x.9]的FE_Q的多项式的梯度的矩。 [2.x.17] 
* [1.x.10]
* 上面的节点值依赖于积分，这些积分将由正交规则本身计算出来。广义支持点是一组点，使这种正交能够以足够的精度进行。需要的点是每个边上的QGauss<sub>k+1</sub>和每个面上的QGauss<sub>k+2</sub>以及单元内部的那些点（或者对于N<sub>1</sub>来说没有）。

* 
* [0.x.1]*
   给定[2.x.18]的Nedelec元素的构造函数 形状函数的最大多项式程度是`order+1`（在每个变量中；总多项式程度可能更高）。如果`order = 0`，元素是线性的，只在边上有自由度。如果`order >=1`，元素在边、面和体积上都有自由度。例如，FE_Nedelec的3维版本在 "order = 0 "时有12个自由度，在 "degree = 1 "时有54个。为了以足够的精度进行正交，拥有足够的正交点是很重要的。  例如，[QGauss<dim>(order + 2)]( [2.x.19]) 可用于正交公式，其中`order`是FE_Nedelec的阶数。 
* [0.x.2]*
   返回一个唯一标识有限元的字符串。该类返回<tt>FE_Nedelec<dim>(degree)</tt>，[2.x.20]和[2.x.21]用适当的值替换。 
* [0.x.3]*
   如果形状函数[2.x.23]在面[2.x.24]的某处有非零函数值，该函数返回[2.x.22]。  
* [0.x.4]*
   返回这个元素是否以新的方式实现了它的悬挂节点约束，这必须用于使元素 "hp-compatible"。    对于<tt>FE_Nedelec</tt>类，结果总是真（与元素的程度无关），因为它实现了hp-capability所需的完整功能集。 
* [0.x.5]*
    [2.x.25] [2.x.26].   
* [0.x.6]*
   如果在一个顶点上，有几个有限元处于活动状态，hp代码首先为这些FEs的每个自由度分配不同的全局索引。然后调用这个函数来找出其中哪些应该得到相同的值，从而可以得到相同的全局自由度指数。  因此，该函数返回当前有限元对象的自由度与[2.x.27]的自由度之间的相同性列表，后者是对代表在该特定顶点上活动的其他有限元之一的有限元对象的引用。该函数计算两个有限元对象的哪些自由度是等价的，这两个自由度的编号都在0和两个有限元的n_dofs_per_vertex()的相应值之间。每一对的第一个索引表示本元素的一个顶点自由度，而第二个是另一个有限元素的相应索引。 
* [0.x.7]*
   与hp_vertex_dof_indices()相同，只是该函数处理线上自由度。 
* [0.x.8]*
   与hp_vertex_dof_indices()相同，只是该函数处理线上的自由度。 
* [0.x.9]*
   返回从一个元素的面插值到邻近元素的面的矩阵。矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。    衍生元素将不得不实现这个函数。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现从一个给定元素的内插，那么他们必须抛出一个类型为[2.x.28]的异常。  
* [0.x.10]*
   返回从一个元素的面内插到邻近元素的子面的矩阵。矩阵的大小是<tt>source.dofs_per_face</tt>乘以<tt>this->dofs_per_face</tt>。    衍生元素将不得不实现这个函数。他们可能只为某些源有限元提供插值矩阵，例如那些来自同一家族的有限元。如果他们不实现给定元素的插值，那么他们必须抛出一个<tt>ExcInterpolationNotImplemented</tt>类型的异常。 
* [0.x.11]*
   从精细网格空间投射到粗略网格空间。如果这个投影运算符与一个矩阵[2.x.29]相关联，那么这里将返回这个矩阵[2.x.30]对单个子单元的限制。    矩阵[2.x.31]是单元格矩阵[2.x.32]P_i的串联或相加，取决于#restriction_is_additive_flags。这区分了插值（连接）和标量积（求和）方面的投影。    行和列指数分别与粗网格和细网格空间有关，与相关运算符的定义一致。 
* [0.x.12]*
   网格间的嵌入矩阵。    从粗网格空间到细网格空间的同一运算符与一个矩阵[2.x.33]相关，该矩阵[2.x.34]对单个子单元的限制在此返回。    矩阵[2.x.35]是串联的，而不是单元格矩阵[2.x.36]P_i的总和。也就是说，如果同一个非零条目<tt>j,k</tt>存在于两个不同的子矩阵[2.x.37]中，其值在两个矩阵中应该是相同的，它只被复制到矩阵[2.x.38]中一次。    行和列指数分别与细格和粗格空间相关，与相关运算符的定义一致。    这些矩阵被组装多层次方法的延长矩阵的程序所使用。 在使用这个矩阵阵列组装单元格之间的转移矩阵时，延长矩阵中的零元素被丢弃，不会填满转移矩阵。 
* [0.x.13]*
   返回一个元素的常数模式列表。 
* [0.x.14]*
   仅供内部使用。它的全称是[2.x.39]函数，它创建了[2.x.40]向量，在构造函数内需要传递给[2.x.41]FiniteElementData的构造函数。    如果可选参数<tt>dg</tt>为真，返回的向量将有分配给单元的所有自由度，面和边上没有。 
* [0.x.15]*
   初始化FiniteElement类的[2.x.42]字段，用插值权重（#boundary_weights 和 interior_weights）填充表格。从构造函数中调用。 
* [0.x.16]*
   初始化从细化网格单元上的函数到父单元的插值。根据Nédélec元素的理念，这个限制算子弱化地保留了一个函数的卷曲。 
* [0.x.17]*
   这些是计算积分时乘以#generalized_face_support_points中的一个函数的系数。    更多信息请参见[2.x.43]"广义支持点的术语条目"。 
* [0.x.18]*
   用于保护限制和嵌入矩阵的初始化的Mutex。 
* [0.x.19]*
   初始化置换模式和符号变化模式。   
* [2.x.44]这个函数还没有完全充满正确的实现。它需要在未来的版本中统一实现，以便在包含有翻转面的单元格的网格上工作。 
* [0.x.20]

