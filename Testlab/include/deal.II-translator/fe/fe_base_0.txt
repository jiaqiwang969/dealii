include/deal.II-translator/fe/fe_base_0.txt
[0.x.0]*
 一个专门用于定义Domination枚举以及相关运算符的命名空间。

* 
* [0.x.1]*
   一个枚举，描述比较两个元素的相互支配的结果。如果一个元素支配另一个元素，那么被支配的元素所描述的空间对单元格的一个面的限制就严格大于支配元素的限制。例如，在2-d中，Q(2)元素支配Q(4)元素，因为Q(4)元素的轨迹是四次多项式，这是一个严格大于四次多项式（Q(2)元素的限制）的空间。类似的推理也适用于顶点和单元。一般来说，如果[2.x.0]，Q(k)支配Q(k')。    这个枚举用于[2.x.1]函数，该函数在hp-有限元方法的背景下，当决定在两个不同的有限元相遇的面做什么时使用（见[2.x.2]"hp-paper "对以下内容的更详细描述）。在这种情况下，一边的自由度需要被约束到另一边的自由度上。确定哪一方是哪一方的依据是相互支配的比较结果：被支配的一方被约束到支配的一方。    请注意，存在两边都不支配的情况。[2.x.3]"hp-paper "列出了两种情况，比较简单的是一个[2.x.4]矢量值元素（即一个[2.x.5]）遇到一个[2.x.6]元素：这里，对于两个矢量成分中的每一个，我们可以定义一个支配关系，但对于这两个成分是不同的。    很明显，支配的概念对于不连续的元素并不重要。然而，不连续的元素可能是向量值元素的一部分，因此可以相互比较支配关系。在这种情况下，它们应该返回[2.x.7]。同样，当比较两个相同的有限元素时，它们应该返回这个代码；原因是我们在看第一个分量的时候不能决定哪个元素会占主导地位，例如，两个[2.x.8]和[2.x.9]元素，必须保持我们的选择，直到我们到达第二个基本元素。    最后，代码no_requirements存在于元素没有施加连续性要求的情况。这种情况主要是指FE_Nothing，这是一个在子域中没有自由度的元素。它也可以被不连续的元素使用，比如说。    关于支配的更多细节可以在[2.x.10]"hp-paper "中找到。 
* [0.x.2]*
     当前元素占主导地位。   
* [0.x.3]*
     其他元素占主导地位。   
* [0.x.4]*
     两个元素都不占优势。   
* [0.x.5]*
     任何一个元素都可能占主导地位。   
* [0.x.6]*
     没有任何要求。   
* [0.x.7]*
   二进制[2.x.11]运算符的一般化，用于比较关系。其工作方式与你想为向量定义比较关系时差不多：要么第一个向量的所有元素都比第二个向量的元素小、等于或大，要么有些是，有些不是。    这个运算符基本相同：如果两个参数都是[2.x.12]或[2.x.13] ，那么返回值就是这个值。另一方面，如果其中一个值是[2.x.14]，那么返回值就是另一个参数的值。如果其中一个参数是[2.x.15]，或者两个参数是[2.x.16]和[2.x.17]，那么返回值是[2.x.18] 。 
* [0.x.8]*
   用于设置FiniteElementData的内部数据结构。它为每个对象存储（包括/不包括）自由度的数量，以及它在一个单元中的第一个自由度的索引和每个面中的第一个d维对象的索引。    这些信息被保存为一个向量的向量。人们可以通过：dofs_per_object_inclusive[d][i]来查询第i个d维对象的自由度的包容数。    作为一个例子，数据显示的是一个四边形楔形。它由6个顶点、9条线和5个面（两个三角形和三个四边形）组成。 
* [1.x.0]
* 由于上述表格看起来如下： 对于。
* 

* 
* 

* 
* 

 
 

 
 

 
 

 
 
* - 一个三角形。 
* [1.x.1]
 
* 

* 
* 

* 
 

 
 

 
 

 
 

 
 
* - 四边形。 
* [1.x.2]
* 每个面内的第一个d维物体的索引结果为。 
* [1.x.3]
*     
* [0.x.9]*
     每个物体的专属自由度数。   
* [0.x.10]*
     每个对象的自由度的包容数。   
* [0.x.11]*
     一个对象的第一个索引。   
* [0.x.12]*
     一个物体在一个面中的第一个索引。   
* [0.x.13]*
 一个声明若干标量常量变量的类，描述了有限元实现的基本属性。这包括，例如，每个顶点、线或单元的自由度的数量；矢量分量的数量；等等。
* 这里存储的信息是在有限元对象的初始化过程中计算出来的，并通过其构造函数传递给这个类。这个类所存储的数据是有限元类的公共接口的一部分（它派生自当前的类）。更多信息见那里。
* 

* 
* [2.x.19] 

* 
* [0.x.14]*
   一个有限元可能具有的不同类型的连续性的枚举器。连续性是由包含构建的有限元空间的Sobolev空间来衡量的，也这样称呼。    请注意，某些连续性可能意味着其他连续性。例如，[1.x.4]中的函数在[1.x.5]和[1.x.6]中也是如此。    如果你对经典意义上的连续性感兴趣，那么以下关系是成立的。     [2.x.20] [2.x.21] [1.x.7]意味着该函数在单元格边界上是连续的。     2.x.22] [1.x.8]意味着该函数在单元格边界上是连续可微的。     [2.x.23] [1.x.9] 表示该元素是不连续的。  由于不连续元素在网格单元之间没有拓扑耦合，代码实际上可能取决于这一属性，[1.x.10]符合性以特殊方式处理，即它是[1.x.11]由任何更高符合性所暗示的。   [2.x.24] 为了测试一个有限元是否符合某个空间，使用[2.x.25] 。  
* [0.x.15]*
     表示一个系统的不兼容的连续性。   
* [0.x.16]*
     不连续的元素。见上文!    
* [0.x.17]*
     与空间的一致性 [1.x.12]（矢量场的连续切向分量）。   
* [0.x.18]*
     与空间[1.x.13]（矢量场的连续法向分量）的符合性    
* [0.x.19]*
     与空间[1.x.14]的符合性（连续）。   
* [0.x.20]*
     与空间[1.x.15]的符合性（连续可微）。   
* [0.x.21]*
   有限元的尺寸，也就是模板参数<tt>dim</tt>。 
* [0.x.22]*
   参考单元的类型。 
* [0.x.23]*
   唯一四边形的数量。如果所有的四边形都有相同的类型，其值为1；否则等于四边形的数量。 
* [0.x.24]*
   独特的面的数量。如果所有的面都有相同的类型，值是1；否则等于面的数量。 
* [0.x.25]*
   一个顶点上的自由度数量。 
* [0.x.26]*
   一条线的自由度数；不包括线的顶点上的自由度。 
* [0.x.27]*
   四边形上的自由度数。如果所有四边形都有相同的自由度数，则数值等于dofs_per_quad。 
* [0.x.28]*
   四边形的自由度数；不包括四边形的线和顶点的自由度。 
* [0.x.29]*
   任何四边形上的最大自由度数。 
* [0.x.30]*
   六面体的自由度数；不包括六面体的四边形、线和顶点上的自由度。 
* [0.x.31]*
   线上自由度的第一个索引。 
* [0.x.32]*
   一个四边形的第一个索引。如果所有的四边形具有相同的自由度，则只存储第一个四边形的第一个索引，因为其他四边形的索引可以简单地重新计算。 
* [0.x.33]*
   一个四边形上的第一个自由度的索引。 
* [0.x.34]*
   六面体上的第一个索引。 
* [0.x.35]*
   所有面的第一行的索引。 
* [0.x.36]*
   面的数据在一行中的第一个索引。 
* [0.x.37]*
   所有面孔的第一个四边形的索引。 
* [0.x.38]*
   脸部数据在一个四边形上的第一个索引。 
* [0.x.39]*
   面孔上的自由度数。如果所有的面都有相同的自由度数，那么这些值等于dofs_per_quad。 
* [0.x.40]*
   一个面的自由度数。这是构成一个面的<tt>dim-1</tt>以内的所有物体上自由度的累积数。 
* [0.x.41]*
   任何面的最大自由度数。 
* [0.x.42]*
   一个单元上的总自由度数。这是构成一个单元的所有尺寸到<tt>dim</tt>的对象上的自由度的累积数。 
* [0.x.43]*
   该有限元的矢量分量的数量，以及图像空间的维度。对于矢量值的有限元（即当这个数字大于1时），矢量分量的数量在很多情况下等于在FESystem类的帮助下粘在一起的基本元素的数量。然而，对于像Nedelec元素这样的元素，尽管我们只有一个基础元素，但这个数字还是大于1的。 
* [0.x.44]*
   形状函数在单一坐标方向上的最大多项式程度。 
* [0.x.45]*
   表示这个元素所符合的空间。 
* [0.x.46]*
   存储一个描述复合元素每个块的尺寸的对象。对于一个不是FESystem的元素，这只包含一个长度为#dofs_per_cell的单一块。 
* [0.x.47]*
   构造函数，计算从dofs分布到几何对象的所有必要值。     [2.x.26] dofs_per_object 一个向量，描述每个维度的几何对象的自由度数量。这个向量的大小必须是dim+1，条目0描述每个顶点的自由度数，条目1描述每条线的自由度数，等等。作为一个例子，对于2d中常见的[2.x.27]拉格朗日元素，这个向量的元素是[2.x.28] 。另一方面，对于3D中的[2.x.29]元素，它将有条目[2.x.30] 。     [2.x.31] n_components 元素的向量分量的数量。     [2.x.32] degree 这个元素的任何形状函数在参考元素上的任何变量的最大多项式程度。例如，对于[2.x.33]元素(在任何空间维度)，这将是一个；尽管该元素具有[2.x.34](在2D)和[2.x.35](在3D)形式的形状函数，尽管是二次和三次多项式，但仍然只在每个参考变量中分别是线性的，这一点就是如此。这个变量所提供的信息通常用于确定什么是合适的正交公式。     [2.x.36] 符合性 描述这个元素符合哪个Sobolev空间的一个变量。例如，[2.x.37]拉格朗日元素（由FE_Q类实现）是[2.x.38]符合的，而拉维亚-托马斯元素（由FE_RaviartThomas类实现）是[2.x.39]符合的；最后，完全不连续的元素（由FE_DGQ类实现）只有[2.x.40]符合。     [2.x.41] block_indices 一个描述有限元的基本元素如何分组的参数。默认值是构建一个由所有[2.x.42]自由度组成的单一块。这适用于所有 "原子 "元素（包括非原始元素），因此这些元素可以省略这个参数。另一方面，像FESystem这样的组成元素会希望在这里传递一个不同的值。 
* [0.x.48]*
   与上述相同，但不同的是，也可以指定基础几何实体的类型。 
* [0.x.49]*
   与上述相同，但不是传递一个包含每个对象的自由度的向量，而是一个GenericDoFsPerObject类型的结构。这允许二维对象有不同的自由度，这对以三角形和四边形为面的单元格特别有用。 
* [0.x.50]*
   返回这个元素所定义的参考单元的种类。例如，该元素的参考单元是正方形还是三角形，或更高维度的类似选择。 
* [0.x.51]*
   唯一的四边形的数量。如果所有的四边形都有相同的类型，该值为1；否则等于四边形的数量。 
* [0.x.52]*
   独特的面的数量。如果所有的面都有相同的类型，值是1；否则等于面的数量。 
* [0.x.53]*
   每个顶点的道夫数。 
* [0.x.54]*
   每行的道夫数。不包括低维物体上的道夫。 
* [0.x.55]*
   每个四边形的道夫数。不包括低维物体上的道夫。 
* [0.x.56]*
   每个四边形的最多道夫数。不包括低维物体上的道夫。 
* [0.x.57]*
   每个六面体的道夫数。不包括低维物体上的道夫。 
* [0.x.58]*
   每个面的度数，累积所有低维物体的自由度。 
* [0.x.59]*
   每个面的最大度数，累积所有低维物体的自由度。 
* [0.x.60]*
   每个单元的自由度数，累积所有低维物体的自由度。 
* [0.x.61]*
   返回每个structdim维度对象的度数。对于 structdim==0，该函数因此返回 dofs_per_vertex，对于 structdim==1 dofs_per_line，等等。这个函数主要用于允许一些模板技巧，这些函数应该在各种对象上工作，而不想使用与这些对象相关的不同名称（顶点、线...）。 
* [0.x.62]*
   组件的数量。参见[2.x.43]"术语表 "以获得更多信息。 
* [0.x.63]*
   块的数量。参见[2.x.44]"术语表 "以了解更多信息。 
* [0.x.64]*
   关于区块大小的详细信息。 
* [0.x.65]*
   形状函数在单一坐标方向上的最大多项式程度。    这个函数可用于确定最佳正交规则。 
* [0.x.66]*
   测试一个有限元空间是否符合某个Sobolev空间。   
* [2.x.45]即使有限元空间具有比要求的更高的规则性，这个函数也会返回一个真值。 
* [0.x.67]*
   比较运算符。 
* [0.x.68]*
   返回一行中dof的第一个索引。 
* [0.x.69]*
   返回四边形上的第一个索引。 
* [0.x.70]*
   返回六面体上的第一个索引。 
* [0.x.71]*
   返回面的数据在一条线上的第一个索引。 
* [0.x.72]*
   返回一个四面体上的脸部数据的第一个索引。 
* [0.x.73]*
   转换[2.x.46]维度参考单元[2.x.47]的 "每个对象的道夫 "信息的实用函数。  
* [0.x.74]

