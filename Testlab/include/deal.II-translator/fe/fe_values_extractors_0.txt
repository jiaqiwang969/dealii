include/deal.II-translator/fe/fe_values_extractors_0.txt
[0.x.0]*
 一个命名空间，我们在其中声明 "提取器"，即当作为FEValues、FEFaceValues和FESubfaceValues对象上的operator[]表达式的子标时，提取矢量值元素的某些成分的类。对这些对象应用提取器的结果是一个来自命名空间FEValuesViews的具有相应类型的对象。有一些提取器用于单个标量分量、由[2.x.0]元素组成的向量分量和由[2.x.1]分量组成的二阶对称张量，以及二阶非对称张量。
* 我们可以把提取器看作是相当于一个索引，或者一个索引范围。在标量提取器（即[2.x.2]类）的情况下，创建一个像（见[2.x.3]的用途）的对象

* 
* [1.x.0]
* 可以被认为是创建一个具有`dim`值的单一索引。就其本身而言，一个索引不知道它是什么索引，所以它需要相当于一个数组的东西来提取。因此，假设有一个至少有`dim+1`个向量分量的有限元素（在[2.x.4]中确实有），以及一个对其进行操作的FEValues对象，那么就可以编写

* 
* [1.x.1]
* 的结果是一个对象，它只代表整个元素的第`dim`个分量的形状函数。在这个例子中，这些将是压力形状函数的值，或者更准确地说：所有形状函数的（标量）压力值（即使是与压力无关的形状函数，但例如速度）。在上面的例子中，如图所示，在`fe_values`对象上使用`operator[]`的结果是[2.x.5]类型。
* 同样的，当使用

* 
* [1.x.2]
* 那么这样创建的对象可以被认为是一个[1.x.3]，从零开始，正好延伸到`dim`组件上。用Matlab的符号，可以写成`0:dim-1`。然后，写

* 
* [1.x.4]
* 就像在Matlab中写 "array(3:7) "会返回一个长度为5的数组，这个数组是通过查看索引3到7（包括7）从原始数组中提取的。
* 参见[2.x.6]模块的描述，以了解如何使用该命名空间的功能的例子。
* 

* 
* [2.x.7] 

* 
* [0.x.1]*
   矢量值元素的单一标量分量的提取器。将这种类型的对象应用于FEValues、FEFaceValues或FESubfaceValues对象的结果是[2.x.8] 提取器的概念在命名空间FEValuesExtractors的文档和[2.x.9]模块中定义。   
* [2.x.10]   
* [0.x.2]*
     矢量的选定标量分量。   
* [0.x.3]*
     默认构造函数。用一个无效的分量初始化该对象。    这导致了一个不能使用的对象，但它允许将这种对象放入数组中，在调整数组大小时需要一个默认的构造函数，然后再将一个合适的对象分配给数组的每个元素。   
* [0.x.4]*
     构造函数。以选定的向量分量作为参数。   
* [0.x.5]*
     返回一个字符串，唯一标识这个有限元提取器。   
* [0.x.6]*
   向量值元素的[2.x.11]分量的提取器。[2.x.12]的值由该提取器应用的FEValues对象定义。将这种类型的对象应用于FEValues、FEFaceValues或FESubfaceValues对象的结果是[2.x.13]类型。 提取器的概念在命名空间FEValuesExtractors的文档和[2.x.14]模块中定义。    请注意，在当前的上下文中，矢量是指物理学上使用的矢量：它具有[2.x.15]分量，在坐标系变换下以特定的方式表现出来。例子包括速度或位移场。这与数学中使用 "向量 "一词的方式相反（以及我们在库中的其他上下文中使用这个词的方式，例如在向量类中），在那里它真正代表了一个数字的集合。后者的一个例子是火焰中化学物种浓度的集合；然而，这些实际上只是标量变量的集合，因为如果坐标系被旋转，它们不会改变，不像速度矢量的分量，因此，这个类不应该被用于这种情况。   
* [2.x.16]   
* [0.x.7]*
     矢量视图的第一个分量。   
* [0.x.8]*
     默认构造函数。用一个无效的分量初始化对象。    这导致了一个不能使用的对象，但它允许将这种对象放入数组中，在调整数组大小时需要一个默认的构造函数，然后再将一个合适的对象分配给数组的每个元素。   
* [0.x.9]*
     构造函数。以FEValues对象内部所选向量的第一个分量作为参数。   
* [0.x.10]*
     返回一个唯一标识这个有限元提取器的字符串。   
* [0.x.11]*
   对由模板参数指定的等级的对称张量进行提取。对于一个二阶对称张量，这表示一个矢量元素的[2.x.17]分量的集合。[2.x.18]的值由提取器所应用的FEValues对象定义。将这种类型的对象应用于FEValues、FEFaceValues或FESubfaceValues对象的结果是[2.x.19] 提取器的概念在命名空间FEValuesExtractors的文档和[2.x.20]模块中定义。   
* [2.x.21]   
* [0.x.12]*
     张量视图的第一个组成部分。   
* [0.x.13]*
     默认构造函数。用一个无效的组件初始化对象。    这导致了一个不能使用的对象，但它允许将这种对象放入数组中，在调整数组大小时需要一个默认的构造函数，然后再将一个合适的对象分配给数组的每个元素。   
* [0.x.14]*
     构造函数。以FEValues对象内部所选张量的第一个分量作为参数。   
* [0.x.15]*
     返回一个唯一标识这个有限元提取器的字符串。   
* [0.x.16]*
   对由模板参数指定的给定等级的一般张量的提取器。对于一个二阶张量，这代表一个矢量值元素的[2.x.22]分量的集合。[2.x.23]的值由提取器所应用的FEValues对象定义。将这种类型的对象应用于FEValues、FEFaceValues或FESubfaceValues对象的结果是[2.x.24] 提取器的概念在命名空间FEValuesExtractors的文档和[2.x.25]模块中定义。   
* [2.x.26]   
* [0.x.17]*
     张量视图的第一个组成部分。   
* [0.x.18]*
     默认构造函数。用一个无效的组件初始化对象。    这导致了一个不能使用的对象，但它允许将这种对象放入数组中，在调整数组大小时需要一个默认的构造函数，然后再将一个合适的对象分配给数组的每个元素。   
* [0.x.19]*
     构造函数。以FEValues对象内部所选张量的第一个分量作为参数。   
* [0.x.20]*
     返回一个唯一标识此有限元提取器的字符串。   
* [0.x.21]

