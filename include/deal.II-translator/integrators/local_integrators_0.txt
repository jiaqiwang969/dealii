[0.x.0]*


* 
*  [2.x.0] 
*  This namespace contains application specific local integrals for bilinear forms, forms and error estimates. It is a collection of functions organized into namespaces devoted to certain applications. For instance, the namespace Laplace contains functions for computing cell matrices and cell residuals for the Laplacian operator, as well as functions for the weak boundary conditions by Nitsche or the interior penalty discontinuous Galerkin method. The namespace Maxwell does the same for curl-curl type problems.
*  The namespace L2 contains functions for mass matrices and [1.x.0]-inner products.
*  [1.x.1]
*  In most cases, the action of a function in this namespace can be described by a single integral. We distinguish between integrals over cells [1.x.2] and over faces [1.x.3]. If an integral is denoted as [1.x.4] it will yield the following results, depending on the type of operation  [2.x.1]   [2.x.2]  If the function returns a matrix, the entry at position [1.x.5] will be the integrated product of test function [1.x.6] and trial function [1.x.7] (note the reversion of indices) [2.x.3]   [2.x.4]  If the function returns a vector, then the vector entry at position [1.x.8] will be the integrated product of the given function [1.x.9] with the test function [1.x.10]. [2.x.5]   [2.x.6]  If the function returns a number, then this number is the integral of the two given functions [1.x.11] and [1.x.12].  [2.x.7] 
*  We will use regular cursive symbols  [2.x.8]  for scalars and bold symbols  [2.x.9]  for vectors. Test functions are always [1.x.13] and trial functions are always [1.x.14]. Parameters are Greek and the face normal vectors are  [2.x.10] .
*  [1.x.15]
*  Functions in this namespace follow a generic signature. In the simplest case, you have two related functions

* 
* [1.x.16]
* 
*  There is typically a pair of functions for the same operator, the function <tt>cell_residual</tt> implementing the mapping of the operator from the finite element space into its dual, and the function <tt>cell_matrix</tt> generating the bilinear form corresponding to the Frechet derivative of <tt>cell_residual</tt>.
*  The first argument of these functions is the return type, which is  [2.x.11]   [2.x.12]  FullMatrix&lt;double&gt; for matrices  [2.x.13]  BlockVector&ltdouble&gt; for vectors  [2.x.14] 
*  The next argument is the FEValuesBase object representing the finite element for integration. If the integrated operator maps from one finite element space into the dual of another (for instance an off-diagonal matrix in a block system), then first the FEValuesBase for the trial space and after this the one for the test space are specified.
*  This list is followed by the set of required data in the order  [2.x.15]   [2.x.16]  Data vectors from finite element functions  [2.x.17]  Data vectors from other objects  [2.x.18]  Additional data  [2.x.19]  A factor which is multiplied with the whole result  [2.x.20] 
*  [1.x.17]
*  The local integrators can be used wherever a local integration loop would have been implemented instead. The following example is from the implementation of a Stokes solver, using  [2.x.21]  The matrices are  [2.x.22]   [2.x.23]  0: The vector Laplacian for the velocity (here with a vector valued element)  [2.x.24]  1: The divergence matrix  [2.x.25]  2: The pressure mass matrix used in the preconditioner  [2.x.26] 
*  With these matrices, the function called by  [2.x.27]  could be written like

* 
* [1.x.18]
*  See  [2.x.28]  for a worked out example of this code.
* 

* 
*  [2.x.29] 

* 
* [0.x.1]