[0.x.0]*
 [2.x.0] 
* This tutorial depends on  [2.x.1] ,  [2.x.2] ,  [2.x.3] .
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12]
* [1.x.13][1.x.14][1.x.15]
* 

* This is a variant of  [2.x.4]  with the only change that we are using theMeshWorker framework with the pre-made LocalIntegrator helper classes insteadof assembling the face terms using FEInterfaceValues.
* The details of this framework on how it is used in practice will be explainedas part of this tutorial program.
* [1.x.16][1.x.17]
* 

* The problem we solve here is the same as the one in  [2.x.5] .
* 

*  [1.x.18] [1.x.19]
*  The first few files have already been covered in previous examples and will thus not be further commented on:
* 

* 
* [1.x.20]
* 
*  Here the discontinuous finite elements are defined. They are used in the same way as all other finite elements, though
* 
*  -  as you have seen in previous tutorial programs
* 
*  -  there isn't much user interaction with finite element classes at all: they are passed to  [2.x.6]  and  [2.x.7]  objects, and that is about it.
* 

* 
* [1.x.21]
* 
*  We are going to use the simplest possible solver, called Richardson iteration, that represents a simple defect correction. This, in combination with a block SSOR preconditioner (defined in precondition_block.h), that uses the special block matrix structure of system matrices arising from DG discretizations.
* 

* 
* [1.x.22]
* 
*  We are going to use gradients as refinement indicator.
* 

* 
* [1.x.23]
* 
*  Here come the new include files for using the MeshWorker framework. The first contains the class  [2.x.8]  which provides local integrators with a mapping between local and global degrees of freedom. It stores the results of local integrals as well in its base class  [2.x.9]  In the second of these files, we find an object of type  [2.x.10]  which is mostly a wrapper around a group of FEValues objects. The file <tt>meshworker/simple.h</tt> contains classes assembling locally integrated data into a global system containing only a single matrix. Finally, we will need the file that runs the loop over all mesh cells and faces.
* 

* 
* [1.x.24]
* 
*  Like in all programs, we finish this section by including the needed C++ headers and declaring we want to use objects in the dealii namespace without prefix.
* 

* 
* [1.x.25]
* 
*   [1.x.26]  [1.x.27]   
*   First, we define a class describing the inhomogeneous boundary data. Since only its values are used, we implement value_list(), but leave all other functions of Function undefined.
* 

* 
* [1.x.28]
* 
*  Given the flow direction, the inflow boundary of the unit square  [2.x.11]  are the right and the lower boundaries. We prescribe discontinuous boundary values 1 and 0 on the x-axis and value 0 on the right boundary. The values of this function on the outflow boundaries will not be used within the DG scheme.
* 

* 
* [1.x.29]
* 
*  Finally, a function that computes and returns the wind field  [2.x.12] . As explained in the introduction, we will use a rotational field around the origin in 2d. In 3d, we simply leave the  [2.x.13] -component unset (i.e., at zero), whereas the function can not be used in 1d in its current implementation:
* 

* 
* [1.x.30]
* 
*   [1.x.31]  [1.x.32]   
*   After this preparations, we proceed with the main class of this program, called AdvectionProblem. It is basically the main class of  [2.x.14] . We do not have an AffineConstraints object, because there are no hanging node constraints in DG discretizations.
* 

* 
*  Major differences will only come up in the implementation of the assemble functions, since here, we not only need to cover the flux integrals over faces, we also use the MeshWorker interface to simplify the loops involved.
* 

* 
* [1.x.33]
* 
*  Furthermore we want to use DG elements of degree 1 (but this is only specified in the constructor). If you want to use a DG method of a different degree the whole program stays the same, only replace 1 in the constructor by the desired polynomial degree.
* 

* 
* [1.x.34]
* 
*  The next four members represent the linear system to be solved.  [2.x.15]  are generated by  [2.x.16]  is computed in  [2.x.17]  is used to determine the location of nonzero elements in  [2.x.18] .
* 

* 
* [1.x.35]
* 
*  Finally, we have to provide functions that assemble the cell, boundary, and inner face terms. Within the MeshWorker framework, the loop over all cells and much of the setup of operations will be done outside this class, so all we have to provide are these three operations. They will then work on intermediate objects for which first, we here define alias to the info objects handed to the local integration functions in order to make our life easier below.
* 

* 
* [1.x.36]
* 
*  The following three functions are then the ones that get called inside the generic loop over all cells and faces. They are the ones doing the actual integration.     
*   In our code below, these functions do not access member variables of the current class, so we can mark them as  [2.x.19]  and simply pass pointers to these functions to the MeshWorker framework. If, however, these functions would want to access member variables (or needed additional arguments beyond the ones specified below), we could use the facilities of lambda functions to provide the MeshWorker framework with objects that act as if they had the required number and types of arguments, but have in fact other arguments already bound.
* 

* 
* [1.x.37]
* 
*  We start with the constructor. The 1 in the constructor call of  [2.x.20]  is the polynomial degree.
* 

* 
* [1.x.38]
* 
*  In the function that sets up the usual finite element data structures, we first need to distribute the DoFs.
* 

* 
* [1.x.39]
* 
*  We start by generating the sparsity pattern. To this end, we first fill an intermediate object of type DynamicSparsityPattern with the couplings appearing in the system. After building the pattern, this object is copied to  [2.x.21]  and can be discarded.
* 

* 
*  To build the sparsity pattern for DG discretizations, we can call the function analogue to  [2.x.22]  which is called  [2.x.23] 
* 

* 
* [1.x.40]
* 
*  Finally, we set up the structure of all components of the linear system.
* 

* 
* [1.x.41]
* 
*   [1.x.42]  [1.x.43]
* 

* 
*  Here we see the major difference to assembling by hand. Instead of writing loops over cells and faces, we leave all this to the MeshWorker framework. In order to do so, we just have to define local integration functions and use one of the classes in namespace  [2.x.24]  to build the global system.
* 

* 
* [1.x.44]
* 
*  This is the magic object, which knows everything about the data structures and local integration.  This is the object doing the work in the function  [2.x.25]  which is implicitly called by  [2.x.26]  below. After the functions to which we provide pointers did the local integration, the  [2.x.27]  object distributes these into the global sparse matrix and the right hand side vector.
* 

* 
* [1.x.45]
* 
*  First, we initialize the quadrature formulae and the update flags in the worker base class. For quadrature, we play safe and use a QGauss formula with number of points one higher than the polynomial degree used. Since the quadratures for cells, boundary and interior faces can be selected independently, we have to hand over this value three times.
* 

* 
* [1.x.46]
* 
*  These are the types of values we need for integrating our system. They are added to the flags used on cells, boundary and interior faces, as well as interior neighbor faces, which is forced by the four  [2.x.28]  values.
* 

* 
* [1.x.47]
* 
*  After preparing all data in <tt>info_box</tt>, we initialize the FEValues objects in there.
* 

* 
* [1.x.48]
* 
*  The object created so far helps us do the local integration on each cell and face. Now, we need an object which receives the integrated (local) data and forwards them to the assembler.
* 

* 
* [1.x.49]
* 
*  Now, we have to create the assembler object and tell it, where to put the local data. These will be our system matrix and the right hand side.
* 

* 
* [1.x.50]
* 
*  Finally, the integration loop over all active cells (determined by the first argument, which is an active iterator).     
*   As noted in the discussion when declaring the local integration functions in the class declaration, the arguments expected by the assembling integrator class are not actually function pointers. Rather, they are objects that can be called like functions with a certain number of arguments. Consequently, we could also pass objects with appropriate operator() implementations here, or lambda functions if the local integrators were, for example, non-static member functions.
* 

* 
* [1.x.51]
* 
*   [1.x.52]  [1.x.53]
* 

* 
*  These are the functions given to the  [2.x.29]  called just above. They compute the local contributions to the system matrix and right hand side on cells and faces.
* 

* 
* [1.x.54]
* 
*  First, let us retrieve some of the objects used here from  [2.x.30]  Note that these objects can handle much more complex structures, thus the access here looks more complicated than might seem necessary.
* 

* 
* [1.x.55]
* 
*  With these objects, we continue local integration like always. First, we loop over the quadrature points and compute the advection vector in the current point.
* 

* 
* [1.x.56]
* 
*  We solve a homogeneous equation, thus no right hand side shows up in the cell term.  What's left is integrating the matrix entries.
* 

* 
* [1.x.57]
* 
*  Now the same for the boundary terms. Note that now we use FEValuesBase, the base class for both FEFaceValues and FESubfaceValues, in order to get access to normal vectors.
* 

* 
* [1.x.58]
* 
*  Finally, the interior face terms. The difference here is that we receive two info objects, one for each cell adjacent to the face and we assemble four matrices, one for each cell and two for coupling back and forth.
* 

* 
* [1.x.59]
* 
*  For quadrature points, weights, etc., we use the FEValuesBase object of the first argument.
* 

* 
* [1.x.60]
* 
*  For additional shape functions, we have to ask the neighbors FEValuesBase.
* 

* 
* [1.x.61]
* 
*  Then we get references to the four local matrices. The letters u and v refer to trial and test functions, respectively. The %numbers indicate the cells provided by info1 and info2. By convention, the two matrices in each info object refer to the test functions on the respective cell. The first matrix contains the interior couplings of that cell, while the second contains the couplings between cells.
* 

* 
* [1.x.62]
* 
*  Here, following the previous functions, we would have the local right hand side vectors. Fortunately, the interface terms only involve the solution and the right hand side does not receive any contributions.
* 

* 
*  

* 
* [1.x.63]
* 
*  This term we've already seen:
* 

* 
* [1.x.64]
* 
*  We additionally assemble the term  [2.x.31] ,
* 

* 
* [1.x.65]
* 
*  This one we've already seen, too:
* 

* 
* [1.x.66]
* 
*  And this is another new one:  [2.x.32] :
* 

* 
* [1.x.67]
* 
*   [1.x.68]  [1.x.69]   
*   For this simple problem we use the simplest possible solver, called Richardson iteration, that represents a simple defect correction. This, in combination with a block SSOR preconditioner, that uses the special block matrix structure of system matrices arising from DG discretizations. The size of these blocks are the number of DoFs per cell. Here, we use a SSOR preconditioning as we have not renumbered the DoFs according to the flow field. If the DoFs are renumbered in the downstream direction of the flow, then a block Gauss-Seidel preconditioner (see the PreconditionBlockSOR class with relaxation=1) does a much better job.
* 

* 
* [1.x.70]
* 
*  Here we create the preconditioner,
* 

* 
* [1.x.71]
* 
*  then assign the matrix to it and set the right block size:
* 

* 
* [1.x.72]
* 
*  After these preparations we are ready to start the linear solver.
* 

* 
* [1.x.73]
* 
*  We refine the grid according to a very simple refinement criterion, namely an approximation to the gradient of the solution. As here we consider the DG(1) method (i.e. we use piecewise bilinear shape functions) we could simply compute the gradients on each cell. But we do not want to base our refinement indicator on the gradients on each cell only, but want to base them also on jumps of the discontinuous solution function over faces between neighboring cells. The simplest way of doing that is to compute approximative gradients by difference quotients including the cell under consideration and its neighbors. This is done by the  [2.x.33]  class that computes the approximate gradients in a way similar to the  [2.x.34]  described in  [2.x.35]  of this tutorial. In fact, the  [2.x.36]  class was developed following the  [2.x.37]  class of  [2.x.38] . Relating to the discussion in  [2.x.39] , here we consider  [2.x.40] . Furthermore we note that we do not consider approximate second derivatives because solutions to the linear advection equation are in general not in  [2.x.41]  but only in  [2.x.42]  (or, to be more precise: in  [2.x.43] , i.e., the space of functions whose derivatives in direction  [2.x.44]  are square integrable).
* 

* 
* [1.x.74]
* 
*  The  [2.x.45]  class computes the gradients to float precision. This is sufficient as they are approximate and serve as refinement indicators only.
* 

* 
* [1.x.75]
* 
*  Now the approximate gradients are computed
* 

* 
* [1.x.76]
* 
*  and they are cell-wise scaled by the factor  [2.x.46] 
* 

* 
* [1.x.77]
* 
*  Finally they serve as refinement indicator.
* 

* 
* [1.x.78]
* 
*  The output of this program consists of eps-files of the adaptively refined grids and the numerical solutions given in gnuplot format.
* 

* 
* [1.x.79]
* 
*  First write the grid in eps format.
* 

* 
* [1.x.80]
* 
*  Then output the solution in gnuplot format.
* 

* 
* [1.x.81]
* 
*  The following  [2.x.47]  function is similar to previous examples.
* 

* 
* [1.x.82]
* 
*  The following  [2.x.48]  function is similar to previous examples as well, and need not be commented on.
* 

* 
* [1.x.83]
* [1.x.84][1.x.85]
* 

* 
* The output of this program is very similar to  [2.x.49]  and we are not repeating the output here.
* We show the solutions on the initial mesh, the mesh after twoand after five adaptive refinement steps.
*  [2.x.50]  [2.x.51]  [2.x.52] 
* 

* Then we show the final grid (after 5 refinement steps) and the solution again,this time with a nicer 3d rendering (obtained using the  [2.x.53] function and the VTK-based VisIt visualization program) that better shows thesharpness of the jump on the refined mesh and the over- and undershoots of thesolution along the interface:
*  [2.x.54]  [2.x.55] 
* 

* And finally we show a plot of a 3d computation.
*  [2.x.56] 
* 

* [1.x.86][1.x.87][1.x.88]
* 

* For ideas for further extensions, please see see  [2.x.57] .
* 

* [1.x.89][1.x.90] [2.x.58] 
* [0.x.1]