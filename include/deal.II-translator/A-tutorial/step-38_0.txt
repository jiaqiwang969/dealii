[0.x.0]*
 [2.x.0] 
* This tutorial depends on  [2.x.1] .
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19]
*  [2.x.2] 
* [1.x.20]
* [1.x.21]
* [1.x.22][1.x.23]
* 

* In this example, we show how to solve a partial differential equation (PDE)on a codimension one surface  [2.x.3] made of quadrilaterals, i.e. on a surface in 3d or a line in 2d.We focus on the following elliptic second order PDE
* [1.x.24]
* which generalized the Laplace equation we have previously solved in several ofthe early tutorial programs. Our implementation is based on  [2.x.4] .  [2.x.5] also solves problems on lower dimensional surfaces; however, there we onlyconsider integral equations that do not involve derivatives on the solutionvariable, while here we actually have to investigate what it means to takederivatives of a function only defined on a (possibly curved) surface.
* In order to define the above operator, we start by introducing some notations.Let  [2.x.6]  be a parameterization ofa surface  [2.x.7]  from a reference element  [2.x.8] ,i.e. each point  [2.x.9]  induces a point  [2.x.10] . Then let[1.x.25]denotes the corresponding first fundamental form, where  [2.x.11]  is thederivative (Jacobian) of the mapping.In the following,  [2.x.12]  will be either the entire surface  [2.x.13]  or,more convenient for the finite element method, any face  [2.x.14] , where  [2.x.15]  is a partition (triangulation) of  [2.x.16] constituted of quadrilaterals.We are now in position to define the tangential gradient of a function  [2.x.17]  by[1.x.26]The surface Laplacian (also called the Laplace-Beltrami operator) is thendefined as   [2.x.18] .Note that an alternate way to compute the surface gradient on smooth surfaces  [2.x.19]  is[1.x.27]where  [2.x.20]  is a "smooth" extension of  [2.x.21]  in a tubular neighborhood of  [2.x.22]  and [2.x.23]  is the normal of  [2.x.24] .Since  [2.x.25] , we deduce[1.x.28]Worth mentioning, the term  [2.x.26]  appearing in the above expression is the total curvature of the surface (sum of principal curvatures).
* As usual, we are only interested in weak solutions for which we can use  [2.x.27] finite elements (rather than requiring  [2.x.28]  continuity as for strongsolutions). We therefore resort to the weak formulation[1.x.29]and take advantage of the partition  [2.x.29]  to further write[1.x.30]Moreover, each integral in the above expression is computed in the referenceelement  [2.x.30] so that
* [1.x.31]
* and[1.x.32]Finally, we use a quadrature formula defined by points  [2.x.31]  and weights  [2.x.32]  toevaluate the above integrals andobtain[1.x.33]and[1.x.34]
* 

* Fortunately, deal.II has already all the tools to compute the aboveexpressions.In fact, they barely differ from the ways in which we solve the usualLaplacian, only requiring the surface coordinate mapping to be provided in theconstructor of the FEValues class.This surface description given, in the codimension one surface case, the tworoutines  [2.x.33]  and  [2.x.34] return
* [1.x.35]
* This provides exactly the terms we need for our computations.
* On a more general note, details for the finite element approximation onsurfaces can be found for instance in[Dziuk, in Partial differential equations and calculus ofvariations 1357, Lecture Notes in Math., 1988],[Demlow, SIAM J. Numer. Anal.  47(2), 2009]and[Bonito, Nochetto, and Pauletti, SIAM J. Numer. Anal. 48(5), 2010].
* 

* 
* [1.x.36][1.x.37]
* 

* In general when you want to test numerically the accuracy and/or order ofconvergence of an algorithm you need to provide an exact solution. The usualtrick is to pick a function that we want to be the solution, then apply thedifferential operator to it that defines a forcing term for the right handside. This is what we do in this example. In the current case, the form of thedomain is obviously also essential.
* We produce one test case for a 2d problem and another one for 3d:
*  [2.x.35]  [2.x.36]   In 2d, let's choose as domain a half circle. On this domain, we choose the  function  [2.x.37]  as the solution. To compute the right hand  side, we have to compute the surface Laplacian of the  solution function. There are (at least) two ways to do that. The first one  is to project away the normal derivative as described above using the natural extension of  [2.x.38]  (still denoted by  [2.x.39] ) over  [2.x.40] , i.e. to compute  [1.x.38]  where  [2.x.41]  is the total curvature of  [2.x.42] .  Since we are on the unit circle,  [2.x.43]  and  [2.x.44]  so that  [1.x.39]
*   A somewhat simpler way, at least for the current case of a curve in  two-dimensional space, is to note that we can map the interval  [2.x.45]  onto the domain  [2.x.46]  using the transformation   [2.x.47] .  At position  [2.x.48] , the value of the solution is then   [2.x.49] .  Taking into account that the transformation is length preserving, i.e. a  segment of length  [2.x.50]  is mapped onto a piece of curve of exactly the same  length, the tangential Laplacian then satisfies 
* [1.x.40]
*   which is of course the same result as we had above. [2.x.51]  [2.x.52]   In 3d, the domain is again half of the surface of the unit ball, i.e. a half  sphere or dome. We choose  [2.x.53]  as  the solution. We can compute the right hand side of the  equation,  [2.x.54] , in the same way as the method above (with  [2.x.55] ), yielding an  awkward and lengthy expression. You can find the full expression in the  source code. [2.x.56]  [2.x.57] 
* In the program, we will also compute the  [2.x.58]  seminorm error of thesolution. Since the solution function and its numerical approximation are onlydefined on the manifold, the obvious definition of this error functional is [2.x.59] . This requires us to provide the[1.x.41] gradient  [2.x.60]  to the function  [2.x.61] (first introduced in  [2.x.62] ), which wewill do by implementing the function  [2.x.63]  in theprogram below.
* 

* [1.x.42][1.x.43]
* 

* If you've read through  [2.x.64]  and understand the discussion above of howsolution and right hand side correspond to each other, you will be immediatelyfamiliar with this program as well. In fact, there are only two things thatare of significance:
* 
*  - The way we generate the mesh that triangulates the computational domain.
* 
*  - The way we use Mapping objects to describe that the domain on which we solve  the partial differential equation is not planar but in fact curved.
* Mapping objects were already introduced in  [2.x.65]  and  [2.x.66]  and asexplained there, there is usually not a whole lot you have to know about howthey work as long as you have a working description of how the boundarylooks. In essence, we will simply declare an appropriate object of typeMappingQ that will automatically obtain the boundary description from theTriangulation. The mapping object will then be passed to the appropriatefunctions, and we will get a boundary description for half circles or halfspheres that is predefined in the library.
* The rest of the program follows closely  [2.x.67]  and, as far as computing theerror,  [2.x.68] . Some aspects of this program, in particular the use of twotemplate arguments on the classes Triangulation, DoFHandler, and similar, arealready described in detail in  [2.x.69] ; you may wish to read through thistutorial program as well.
* 

*  [1.x.44] [1.x.45]
*   [1.x.46]  [1.x.47]
* 

* 
*  If you've read through  [2.x.70]  and  [2.x.71] , you will recognize that we have used all of the following include files there already. Consequently, we will not explain their meaning here again.
* 

* 
* [1.x.48]
* 
*   [1.x.49]  [1.x.50]
* 

* 
*  This class is almost exactly similar to the  [2.x.72]  class in  [2.x.73] .
* 

* 
*  The essential differences are these:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - The template parameter now denotes the dimensionality of the embedding space, which is no longer the same as the dimensionality of the domain and the triangulation on which we compute. We indicate this by calling the parameter  [2.x.74]  and introducing a constant  [2.x.75]  equal to the dimensionality of the domain
* 
*  -  here equal to  [2.x.76] .
* 

* 
* 
*  - All member variables that have geometric aspects now need to know about both their own dimensionality as well as that of the embedding space. Consequently, we need to specify both of their template parameters one for the dimension of the mesh  [2.x.77]  and the other for the dimension of the embedding space,  [2.x.78]  This is exactly what we did in  [2.x.79] , take a look there for a deeper explanation.
* 

* 
* 
*  - We need an object that describes which kind of mapping to use from the reference cell to the cells that the triangulation is composed of. The classes derived from the Mapping base class do exactly this. Throughout most of deal.II, if you don't do anything at all, the library assumes that you want an object of kind MappingQ1 that uses a (bi-, tri-)linear mapping. In many cases, this is quite sufficient, which is why the use of these objects is mostly optional: for example, if you have a polygonal two-dimensional domain in two-dimensional space, a bilinear mapping of the reference cell to the cells of the triangulation yields an exact representation of the domain. If you have a curved domain, one may want to use a higher order mapping for those cells that lie at the boundary of the domain
* 
*  -  this is what we did in  [2.x.80] , for example. However, here we have a curved domain, not just a curved boundary, and while we can approximate it with bilinearly mapped cells, it is really only prudent to use a higher order mapping for all cells. Consequently, this class has a member variable of type MappingQ; we will choose the polynomial degree of the mapping equal to the polynomial degree of the finite element used in the computations to ensure optimal approximation, though this iso-parametricity is not required.
* 

* 
* [1.x.51]
* 
*   [1.x.52]  [1.x.53]
* 

* 
*  Next, let us define the classes that describe the exact solution and the right hand sides of the problem. This is in analogy to  [2.x.81]  and  [2.x.82]  where we also defined such objects. Given the discussion in the introduction, the actual formulas should be self-explanatory. A point of interest may be how we define the value and gradient functions for the 2d and 3d cases separately, using explicit specializations of the general template. An alternative to doing it this way might have been to define the general template and have a  [2.x.83]  statement (or a sequence of  [2.x.84] s) for each possible value of the spatial dimension.
* 

* 
* [1.x.54]
* 
*   [1.x.55]  [1.x.56]
* 

* 
*  The rest of the program is actually quite unspectacular if you know  [2.x.85] . Our first step is to define the constructor, setting the polynomial degree of the finite element and mapping, and associating the DoF handler to the triangulation:
* 

* 
* [1.x.57]
* 
*   [1.x.58]  [1.x.59]
* 

* 
*  The next step is to create the mesh, distribute degrees of freedom, and set up the various variables that describe the linear system. All of these steps are standard with the exception of how to create a mesh that describes a surface. We could generate a mesh for the domain we are interested in, generate a triangulation using a mesh generator, and read it in using the GridIn class. Or, as we do here, we generate the mesh using the facilities in the GridGenerator namespace.   
*   In particular, what we're going to do is this (enclosed between the set of braces below): we generate a  [2.x.86]  dimensional mesh for the half disk (in 2d) or half ball (in 3d), using the  [2.x.87]  function. This function sets the boundary indicators of all faces on the outside of the boundary to zero for the ones located on the perimeter of the disk/ball, and one on the straight part that splits the full disk/ball into two halves. The next step is the main point: The  [2.x.88]  function creates a mesh that consists of those cells that are the faces of the previous mesh, i.e. it describes the [1.x.60] cells of the original (volume) mesh. However, we do not want all faces: only those on the perimeter of the disk or ball which carry boundary indicator zero; we can select these cells using a set of boundary indicators that we pass to  [2.x.89]    
*   There is one point that needs to be mentioned. In order to refine a surface mesh appropriately if the manifold is curved (similarly to refining the faces of cells that are adjacent to a curved boundary), the triangulation has to have an object attached to it that describes where new vertices should be located. If you don't attach such a boundary object, they will be located halfway between existing vertices; this is appropriate if you have a domain with straight boundaries (e.g. a polygon) but not when, as here, the manifold has curvature. So for things to work properly, we need to attach a manifold object to our (surface) triangulation, in much the same way as we've already done in 1d for the boundary. We create such an object and attach it to the triangulation.   
*   The final step in creating the mesh is to refine it a number of times. The rest of the function is the same as in previous tutorial programs.
* 

* 
* [1.x.61]
* 
*   [1.x.62]  [1.x.63]
* 

* 
*  The following is the central function of this program, assembling the matrix that corresponds to the surface Laplacian (Laplace-Beltrami operator). Maybe surprisingly, it actually looks exactly the same as for the regular Laplace operator discussed in, for example,  [2.x.90] . The key is that the  [2.x.91]  function does the magic: It returns the surface gradient  [2.x.92]  of the  [2.x.93] th shape function at the  [2.x.94] th quadrature point. The rest then does not need any changes either:
* 

* 
* [1.x.64]
* 
*   [1.x.65]  [1.x.66]
* 

* 
*  The next function is the one that solves the linear system. Here, too, no changes are necessary:
* 

* 
* [1.x.67]
* 
*   [1.x.68]  [1.x.69]
* 

* 
*  This is the function that generates graphical output from the solution. Most of it is boilerplate code, but there are two points worth pointing out:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - The  [2.x.95]  function can take two kinds of vectors: Either vectors that have one value per degree of freedom defined by the DoFHandler object previously attached via  [2.x.96]  and vectors that have one value for each cell of the triangulation, for example to output estimated errors for each cell. Typically, the DataOut class knows to tell these two kinds of vectors apart: there are almost always more degrees of freedom than cells, so we can differentiate by the two kinds looking at the length of a vector. We could do the same here, but only because we got lucky: we use a half sphere. If we had used the whole sphere as domain and  [2.x.97]  elements, we would have the same number of cells as vertices and consequently the two kinds of vectors would have the same number of elements. To avoid the resulting confusion, we have to tell the  [2.x.98]  function which kind of vector we have: DoF data. This is what the third argument to the function does.
* 

* 
* 
*  - The  [2.x.99]  function can generate output that subdivides each cell so that visualization programs can resolve curved manifolds or higher polynomial degree shape functions better. We here subdivide each element in each coordinate direction as many times as the polynomial degree of the finite element in use.
* 

* 
* [1.x.70]
* 
*   [1.x.71]  [1.x.72]
* 

* 
*  This is the last piece of functionality: we want to compute the error in the numerical solution. It is a verbatim copy of the code previously shown and discussed in  [2.x.100] . As mentioned in the introduction, the  [2.x.101]  class provides the (tangential) gradient of the solution. To avoid evaluating the error only a superconvergence points, we choose a quadrature rule of sufficiently high order.
* 

* 
* [1.x.73]
* 
*   [1.x.74]  [1.x.75]
* 

* 
*  The last function provides the top-level logic. Its contents are self-explanatory:
* 

* 
* [1.x.76]
* 
*   [1.x.77]  [1.x.78]
* 

* 
*  The remainder of the program is taken up by the  [2.x.102]  function. It follows exactly the general layout first introduced in  [2.x.103]  and used in all following tutorial programs:
* 

* 
* [1.x.79]
* [1.x.80][1.x.81]
* 

* When you run the program, the following output should be printed on screen:
* [1.x.82]
* 
* 

* By playing around with the number of global refinements in the [2.x.104]  function you increase or decrease meshrefinement. For example, doing one more refinement and only running the 3d surfaceproblem yields the followingoutput:
* [1.x.83]
* 
* This is what we expect: make the mesh size smaller by a factor of two and theerror goes down by a factor of four (remember that we use bi-quadraticelements). The full sequence of errors from one to five refinements looks likethis, neatly following the theoretically predicted pattern:
* [1.x.84]
* 
* Finally, the program produces graphical output that we can visualize. Here isa plot of the results:
*  [2.x.105] 
* The program also works for 1d curves in 2d, not just 2d surfaces in 3d. Youcan test this by changing the template argument in  [2.x.106]  likeso:
* [1.x.85]
* The domain is a curve in 2d, and we can visualize the solution by using thethird dimension (and color) to denote the value of the function  [2.x.107] . Thisthen looks like so (the white curve is the domain, the colored curve is thesolution extruded into the third dimension, clearly showing the change in signas the curve moves from one quadrant of the domain into the adjacent one):
*  [2.x.108] 
* 

* [1.x.86][1.x.87][1.x.88]
* 

* Computing on surfaces only becomes interesting if the surface is moreinteresting than just a half sphere. To achieve this, deal.II can readmeshes that describe surfaces through the usual GridIn class. Or, in case youhave an analytic description, a simple mesh can sometimes be stretched andbent into a shape we are interested in.
* Let us consider a relatively simple example: we take the half sphere we usedbefore, we stretch it by a factor of 10 in the z-direction, and then we jumblethe x- and y-coordinates a bit. Let's show the computational domain and thesolution first before we go into details of the implementation below:
*  [2.x.109] 
*  [2.x.110] 
* The way to produce such a mesh is by using the  [2.x.111] function. It needs a way to transform each individual mesh point to adifferent position. Let us here use the following, rather simple function(remember: stretch in one direction, jumble in the other two):
* [1.x.89]
* 
* If we followed the  [2.x.112]  function, we wouldextract the half spherical surface mesh as before, warp it into the shape wewant, and refine as often as necessary. This is not quite as simple as we'dlike here, though: refining requires that we have an appropriate manifoldobject attached to the triangulation that describes where new vertices of themesh should be located upon refinement. I'm sure it's possible to describethis manifold in a not-too-complicated way by simply undoing thetransformation above (yielding the spherical surface again), finding thelocation of a new point on the sphere, and then re-warping the result. But I'ma lazy person, and since doing this is not really the point here, let's justmake our lives a bit easier: we'll extract the half sphere, refine it asoften as necessary, get rid of the object that describes the manifold since wenow no longer need it, and then finally warp the mesh. With the functionabove, this would look as follows:
* [1.x.90]
* 
* Note that the only essential addition is the line marked withasterisks. It is worth pointing out one other thing here, though: because wedetach the manifold description from the surface mesh, whenever we use amapping object in the rest of the program, it has no curves boundarydescription to go on any more. Rather, it will have to use the implicit,FlatManifold class that is used on all parts of the domain notexplicitly assigned a different manifold object. Consequently, whether we useMappingQ(2), MappingQ(15) or MappingQ1, each cell of our mesh will be mappedusing a bilinear approximation.
* All these drawbacks aside, the resulting pictures are still pretty. The onlyother differences to what's in  [2.x.113]  is that we changed the right hand sideto  [2.x.114]  and the boundary values (through the [2.x.115]  class) to  [2.x.116] . Ofcourse, we now no longer know the exact solution, so the computation of theerror at the end of  [2.x.117]  will yield a meaninglessnumber.
* 

* [1.x.91][1.x.92] [2.x.118] 
* [0.x.1]