[0.x.0]*
 Store any amount of any type of data accessible by an identifier string.
*   [2.x.0]  GK: Deprecate access to AnyData by index and change to a map.

* 
* [0.x.1]*
  
*  [2.x.1]   
* [0.x.2]*
  
*  [2.x.2]      Find the object with given name, try to convert it to <tt>type</tt> and   return it. This function throws an exception if either the name does not   exist or if the conversion fails. If such an exception is not desired,   use try_read() instead.  
* [0.x.3]*
  
*  [2.x.3]      Find the object with given name, try to convert it to <tt>type</tt> and   return it. This function throws an exception if either the name does not   exist or if the conversion fails. If such an exception is not desired,   use try_read() instead.  
* [0.x.4]*
  
*  [2.x.4]      For a constant object, this function equals entry(). For a non-const   object, it forces read only access to the data. In particular, it throws   an exception if the object is not found or cannot be converted to type.   If such an exception is not desired, use try_read() instead.      [2.x.5]  Do not use this function for stored objects which are pointers.   Use read_ptr() instead!  
* [0.x.5]*
  
*  [2.x.6]      If the stored data object is a pointer to a constant object, the logic of   access becomes fairly complicated. Namely, the standard read function may   fail, depending on whether it was a const pointer or a regular pointer.   This function fixes the logic and ascertains that the object does not   become mutable by accident.  
* [0.x.6]*
   Perform the same action as read_ptr(), but do not throw an exception if   the pointer does not exist. Return a null pointer instead.  
* [0.x.7]*
  
*  [2.x.7]      This function tries to find the name in the list and return a pointer to   the associated object. If either the name is not found or the object   cannot be converted to the return type, a null pointer is returned.  
* [0.x.8]*
   Access to stored data object by index.  
* [0.x.9]*
  
*  [2.x.8]      Try to find the object and return its index in the list. Throw an   exception if the object has not been found.  
* [0.x.10]*
  
*  [2.x.9]      Try to find the object and return its index in the list. returns    [2.x.10]  if the name was not found.  
* [0.x.11]*
   Exception indicating that a function expected a vector to have a certain   name, but we store a different name in that position.  
* [0.x.12]