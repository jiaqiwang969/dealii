[0.x.0]*
   A little structure, gathering the size of a timestep and the current   time. Time stepping schemes can use this to provide time step information   to the classes actually performing a single step.     The definition of what is considered "current time" depends on the   scheme. For an explicit scheme, this is the time at the beginning of the   step. For an implicit scheme, it is usually the time at the end.  
* [0.x.1]*
   Application class performing the theta timestepping scheme.     The theta scheme is an abstraction of implicit and explicit Euler   schemes, the Crank-Nicholson scheme and linear combinations of those. The   choice of the actual scheme is controlled by the parameter #theta as   follows.    [2.x.0]     [2.x.1]  #theta=0: explicit Euler scheme    [2.x.2]  #theta=1: implicit Euler scheme    [2.x.3]  #theta=½: Crank-Nicholson scheme    [2.x.4]      For fixed #theta, the Crank-Nicholson scheme is the only second order   scheme. Nevertheless, further stability may be achieved by choosing   #theta larger than ½, thereby introducing a first order error term. In   order to avoid a loss of convergence order, the adaptive theta scheme can   be used, where [1.x.0].     Assume that we want to solve the equation [1.x.1] with a   step size [1.x.2].  A step of the theta scheme can be written as     [1.x.3]     Here, [1.x.4] is the mass matrix. We see, that the right hand side   amounts to an explicit Euler step with modified step size in weak form   (up to inversion of M). The left hand side corresponds to an implicit   Euler step with modified step size (right hand side given). Thus, the   implementation of the theta scheme will use two Operator objects, one for   the explicit, one for the implicit part. Each of these will use its own   TimestepData to account for the modified step sizes (and different times   if the problem is not autonomous). Note that once the explicit part has   been computed, the left hand side actually constitutes a linear or   nonlinear system which has to be solved.     [1.x.5]     ThetaTimestepping uses AnyData for communicating vectors and time step   information. With outer or inner Operator objects. It does not use itself   the input vectors provided, but forwards them to the explicit and   implicit operators.     [1.x.6]     The explicit Operator #op_explicit receives in its input in first place   the vector "Previous iterate", which is the solution value after the   previous timestep. It is followed by all vectors provided to    [2.x.5]  as input argument. #op_explicit is supposed   to write its result into the first position of its output argument,   labeled "Result".     The implicit Operator #op_implicit receives the result of #op_explicit in   its first input vector labeled "Previous time". It is followed by all   vectors provided to  [2.x.6]  as input argument. The   output of #op_implicit is directly written into the output argument given   to ThetaTimestepping.     [1.x.7]     Since the introduction of AnyData, ThetaTimestepping is able to   communicate the current time step information through AnyData as well.   Therefore, the AnyData objects handed as input to #op_explicit and   #op_implicit contain two entries of type `const double*` named "Time" and   "Timestep". Note that "Time" refers to the time at the beginning of the   current step for #op_explicit and at the end for #op_implicit,   respectively.     [1.x.8]     The use ThetaTimestepping is more complicated than for instance Newton,   since the inner operators will usually need to access the TimeStepData.   Thus, we have a circular dependency of information, and we include the   following example for its use.     First, we define the two operators used by ThetaTimestepping and call   them  [2.x.7] . They both share the   public interface of Operator, and additionally provide storage for the   matrices to be used and a pointer to TimestepData. Note that we do not   use a SmartPointer here, since the TimestepData will be destroyed before   the operator.    
* [1.x.9]
*      These operators will be implemented after the main program. But let us   look first at how they get used. First, let us define a matrix to be used   for our system and also an OutputOperator in order to write the data of   each timestep to a file.    
* [1.x.10]
*      Now we create objects for the implicit and explicit parts of the steps as   well as the ThetaTimestepping itself. We initialize the timestepping with   the output operator in order to be able to see the output in every step.    
* [1.x.11]
*      The next step is providing the vectors to be used. <tt>value</tt> is   filled with the initial value and is also the vector where the solution   at each timestep will be. Because the interface of Operator has to be   able to handle several vectors, we need to store it in an AnyData object.   Since our problem has no additional parameters, the input AnyData object   remains empty.    
* [1.x.12]
*      Finally, we are ready to tell the solver, that we are starting at the   initial timestep and run it.    
* [1.x.13]
*      Besides the main function, we need to define the members functions   of the implicit and explicit operators.   First the constructor, which simply copies the system matrix into the   member pointer for later use.    
* [1.x.14]
*      Now we need to study the application of the implicit and explicit   operator. We assume that the pointer  [2.x.8]  points to the   matrix created in the main program (the constructor did this for us).   Here, we first get the time step size from the AnyData object that was   provided as input. Then, if we are in the first step or if the timestep   has changed, we fill the local matrix  [2.x.9] , such that with the given   matrix  [2.x.10] , it becomes [1.x.15] After we have worked   off the notifications, we clear them, such that the matrix is only   generated when necessary.    
* [1.x.16]
*      Now we multiply the input vector with the new matrix and store on output.    
* [1.x.17]
*      The code for the implicit operator is almost the same, except   that we change the sign in front of the timestep and use the inverse of   the matrix.    
* [1.x.18]
*   
* [0.x.2]*
     Constructor, receiving the two operators stored in #op_explicit and     #op_implicit. For their meaning, see the description of those     variables.    
* [0.x.3]*
     The timestepping scheme.          [2.x.11]  in is ignored by ThetaTimestepping, but is merged into the     AnyData objects used as input for the operators #op_explicit and     #op_implicit.          [2.x.12]  out in its first argument must contain a pointer to a VectorType     instance, which contains the initial value when the operator is called.     It contains the final value when the operator returns.    
* [0.x.4]*
     Register an event triggered by an outer iteration.    
* [0.x.5]*
     Define an operator which will output the result in each step. Note that     no output will be generated without this.    
* [0.x.6]*
     Declare parameters in a parameter handler.    
* [0.x.7]*
     Read the parameters in the ParameterHandler.    
* [0.x.8]*
     The current time in the timestepping scheme.    
* [0.x.9]*
     The weight between implicit and explicit part.    
* [0.x.10]*
     Set a new weight and return the old    
* [0.x.11]*
     The data handed to the #op_explicit time stepping operator.         The time in here is the time at the beginning of the current step, the     time step is (1-#theta) times the actual time step.    
* [0.x.12]*
     The data handed to the #op_implicit time stepping operator.         The time in here is the time at the beginning of the current step, the     time step is #theta times the actual time step.    
* [0.x.13]*
     Allow access to the control object.    
* [0.x.14]*
     The object controlling the time step size and computing the new time in     each step.    
* [0.x.15]*
     The control parameter theta in the range <tt>[0,1]</tt>. It defaults to     0.5.    
* [0.x.16]*
     Use adaptive #theta if <tt>true</tt>. Not yet implemented.    
* [0.x.17]*
     The data for the explicit part of the scheme.    
* [0.x.18]*
     The data for the implicit part of the scheme.    
* [0.x.19]*
     The operator computing the explicit part of the scheme. This will     receive in its input data the value at the current time with name     "Current time solution". It should obtain the current time and time     step size from explicit_data().         Its return value is  [2.x.13] , where  [2.x.14]  is the current state     vector,  [2.x.15]  the mass matrix,  [2.x.16]  the operator in space and  [2.x.17]  is the     adjusted time step size  [2.x.18] .    
* [0.x.20]*
     The operator solving the implicit part of the scheme. It will receive     in its input data the vector "Previous time". Information on the     timestep should be obtained from implicit_data().         Its return value is the solution [1.x.19] of [1.x.20], where     [1.x.21] is the dual space vector found in the "Previous time" entry of     the input data, [1.x.22] the mass matrix, [1.x.23] the operator in     space and [1.x.24] is the adjusted time step size  [2.x.19]     
* [0.x.21]*
     The operator writing the output in each time step    
* [0.x.22]