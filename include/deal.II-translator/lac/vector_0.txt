[0.x.0]!  [2.x.0]  Vectors [2.x.1] 

* 
* [0.x.1]*
 A class that represents a vector of numerical elements. As for the other classes, in the  [2.x.2]  group, this class has a substantial number of member functions. These include:
* 

* 
* 
*  - functions that initialize the vector or change its size;
* 

* 
* 
*  - functions that compute properties of the vector, such as a variety of   norms;
* 

* 
* 
*  - functions that allow reading from or writing to individual elements of the   vector;
* 

* 
* 
*  - functions that implement algebraic operations for vectors, such as   addition of vectors; and
* 

* 
* 
*  - functions that allow inputting and outputting the data stored by vectors.
*  In contrast to the C++ standard library class  [2.x.3]  this class intends to implement not simply an array that allows access to its elements, but indeed a vector that is a member of the mathematical concept of a "vector space" suitable for numerical computations.
* 

* 
*  [2.x.4]  Instantiations for this template are provided for <tt> [2.x.5]   [2.x.6]   [2.x.7]   [2.x.8]  others can be generated in application programs (see the section on  [2.x.9]  in the manual).

* 
* [0.x.2]*
   Declare standard types used in all containers. These types parallel those   in the <tt>C++</tt> standard libraries <tt>vector<...></tt> class.  
* [0.x.3]*
   Declare a type that has holds real-valued numbers with the same precision   as the template argument to this class. If the template argument of this   class is a real data type, then real_type equals the template argument.   If the template argument is a  [2.x.10]  type then real_type equals the   type underlying the complex numbers.     This alias is used to represent the return type of norms.  
* [0.x.4]*
    [2.x.11]  Basic object handling  
* [0.x.5]*
   Constructor. Create a vector of dimension zero.  
* [0.x.6]*
   Copy constructor. Sets the dimension to that of the given vector, and   copies all elements.     We would like to make this constructor explicit, but standard containers   insist on using it implicitly.      [2.x.12]   
* [0.x.7]*
   Move constructor. Creates a new vector by stealing the internal data of   the vector  [2.x.13]   
* [0.x.8]*
   Copy constructor taking a vector of another data type.     This constructor will fail to compile if   there is no conversion path from  [2.x.14]  to  [2.x.15]  You may   lose accuracy when copying to a vector with data elements with   less accuracy.  
* [0.x.9]*
   Copy constructor taking an object of type  [2.x.16]  This   constructor can be used to initialize a vector using a brace-enclosed   list of numbers, such as in the following example:  
* [1.x.0]
*    This creates a vector of size 3, whose (double precision) elements have   values 1.0, 2.0, and 3.0.     This constructor will fail to compile if   there is no conversion path from  [2.x.17]  to  [2.x.18]  You may   lose accuracy when copying to a vector with data elements with   less accuracy.  
* [0.x.10]*
   Another copy constructor: copy the values from a PETSc vector class. This   copy constructor is only available if PETSc was detected during   configuration time.     Note that due to the communication model used in MPI, this operation can   only succeed if all processes do it at the same time when  [2.x.19]    is a distributed vector: It is not possible for only one process to   obtain a copy of a parallel vector while the other jobs do something   else.  
* [0.x.11]*
   Another copy constructor: copy the values from a Trilinos wrapper vector.   This copy constructor is only available if Trilinos was detected during   configuration time.    
*  [2.x.20]  Due to the communication model used in MPI, this operation can   only succeed if all processes that have knowledge of  [2.x.21]    (i.e. those given by  [2.x.22] ) do it at   the same time. This means that unless you use a split MPI communicator   then it is not normally possible for only one or a subset of processes   to obtain a copy of a parallel vector while the other jobs do something   else. In other words, calling this function is a 'collective operation'   that needs to be executed by all MPI processes that jointly share  [2.x.23]   
* [0.x.12]*
   Constructor. Set dimension to  [2.x.24]  and initialize all elements with zero.     The constructor is made explicit to avoid accidents like this:   <tt>v=0;</tt>. Presumably, the user wants to set every element of the   vector to zero, but instead, what happens is this call:   <tt>v=Vector [2.x.25]  i.e. the vector is replaced by one of   length zero.  
* [0.x.13]*
   Initialize the vector with a given range of values pointed to by the   iterators. This function is there in analogy to the  [2.x.26]  class.  
* [0.x.14]*
   Destructor, deallocates memory. Made virtual to allow for derived classes   to behave properly.  
* [0.x.15]*
   This function does nothing but exists for compatibility with the parallel   vector classes.     For the parallel vector wrapper class, this function compresses the   underlying representation of the vector, i.e. flushes the buffers of the   vector object if it has any. This function is necessary after writing   into a vector element-by-element and before anything else can be done on   it.     However, for the implementation of this class, it is immaterial and thus   an empty function.  
* [0.x.16]*
   Change the dimension of the vector to  [2.x.27]  The reserved memory for this   vector remains unchanged if possible, to make things faster; this may   waste some memory, so keep this in mind.  However, if <tt>N==0</tt> all   memory is freed, i.e. if you want to resize the vector and release the   memory not needed, you have to first call <tt>reinit(0)</tt> and then   <tt>reinit(N)</tt>. This cited behavior is analogous to that of the   standard library containers.     If  [2.x.28]  is false, the vector is filled by zeros.   Otherwise, the elements are left an unspecified state.     This function is virtual in order to allow for derived classes to handle   memory separately.  
* [0.x.17]*
   Same as above, but will preserve the values of vector upon resizing.   If we new size is bigger, we will have   [1.x.1]   whereas if the desired size is smaller, then   [1.x.2]  
* [0.x.18]*
   Apply [1.x.3]    [2.x.29]  (a triplet of cosine, sine and radius, see    [2.x.30]    to the vector in the plane spanned by the  [2.x.31]  and  [2.x.32]  unit vectors.  
* [0.x.19]*
   Change the dimension to that of the vector  [2.x.33]  The same applies as for   the other  [2.x.34]  function.     The elements of  [2.x.35]  are not copied, i.e.  this function is the same as   calling <tt>reinit (V.size(), omit_zeroing_entries)</tt>.  
* [0.x.20]*
   Swap the contents of this vector and the other vector  [2.x.36]  One could do   this operation with a temporary variable and copying over the data   elements, but this function is significantly more efficient since it only   swaps the pointers to the data of the two vectors and therefore does not   need to allocate temporary storage and move data around.     This function is analogous to the  [2.x.37]  function of all C++   standard containers. Also, there is a global function <tt>swap(u,v)</tt>   that simply calls <tt>u.swap(v)</tt>, again in analogy to standard   functions.     This function is virtual in order to allow for derived classes to handle   memory separately.  
* [0.x.21]*
   Set all components of the vector to the given number  [2.x.38]      Since the semantics of assigning a scalar to a vector are not immediately   clear, this operator should really only be used if you want to set the   entire vector to zero. This allows the intuitive notation <tt>v=0</tt>.   Assigning other values is deprecated and may be disallowed in the future.      [2.x.39]   
* [0.x.22]*
   Copy the given vector. Resize the present vector if necessary.      [2.x.40]   
* [0.x.23]*
   Move the given vector. This operator replaces the present vector with   the internal data of the vector  [2.x.41]  and resets  [2.x.42]  to the state it would   have after being newly default-constructed.  
* [0.x.24]*
   Copy the given vector. Resize the present vector if necessary.      [2.x.43]   
* [0.x.25]*
   Copy operator for assigning a block vector to a regular vector.  
* [0.x.26]*
   Another copy operator: copy the values from a PETSc wrapper vector   class. This operator is only available if PETSc was detected during   configuration time.     Note that due to the communication model used in MPI, this operation can   only succeed if all processes do it at the same time when  [2.x.44]    is a distributed vector: It is not possible for only one process to   obtain a copy of a parallel vector while the other jobs do something   else.  
* [0.x.27]*
   Another copy operator: copy the values from a (sequential or parallel,   depending on the underlying compiler) Trilinos wrapper vector class. This   operator is only available if Trilinos was detected during configuration   time.    
*  [2.x.45]  Due to the communication model used in MPI, this operation can   only succeed if all processes that have knowledge of  [2.x.46]    (i.e. those given by  [2.x.47] ) do it at   the same time. This means that unless you use a split MPI communicator   then it is not normally possible for only one or a subset of processes   to obtain a copy of a parallel vector while the other jobs do something   else. In other words, calling this function is a 'collective operation'   that needs to be executed by all MPI processes that jointly share  [2.x.48]   
* [0.x.28]*
   Test for equality. This function assumes that the present vector and the   one to compare with have the same size already, since comparing vectors   of different sizes makes not much sense anyway.  
* [0.x.29]*
   Test for inequality. This function assumes that the present vector and   the one to compare with have the same size already, since comparing   vectors of different sizes makes not much sense anyway.  
* [0.x.30]*
    [2.x.49]  Scalar products, norms and related operations  
* [0.x.31]*
   Return the scalar product of two vectors.  The return type is the   underlying type of  [2.x.50]  vector, so the return type and the accuracy   with which it the result is computed depend on the order of the arguments   of this vector.     For complex vectors, the scalar product is implemented as    [2.x.51] .      [2.x.52]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.32]*
   Return the square of the  [2.x.53] -norm.      [2.x.54]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.33]*
   Mean value of the elements of this vector.      [2.x.55]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.34]*
    [2.x.56] -norm of the vector. The sum of the absolute values.      [2.x.57]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.35]*
    [2.x.58] -norm of the vector. The square root of the sum of the squares of   the elements.      [2.x.59]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.36]*
    [2.x.60] -norm of the vector. The pth root of the sum of the pth powers of   the absolute values of the elements.      [2.x.61]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.37]*
   Maximum absolute value of the elements.  
* [0.x.38]*
   Performs a combined operation of a vector addition and a subsequent inner   product, returning the value of the inner product. In other words, the   result of this function is the same as if the user called  
* [1.x.4]
*      The reason this function exists is that this operation involves less   memory transfer than calling the two functions separately. This method   only needs to load three vectors,  [2.x.62]   [2.x.63]   [2.x.64]  whereas calling   separate methods means to load the calling vector  [2.x.65]  twice. Since   most vector operations are memory transfer limited, this reduces the time   by 25\% (or 50\% if  [2.x.66]  equals  [2.x.67]      For complex-valued vectors, the scalar product in the second step is   implemented as    [2.x.68] .      [2.x.69]  The algorithm uses pairwise summation   with the same order of summation in every run, which gives fully   repeatable results from one run to another.  
* [0.x.39]*
    [2.x.70]  Data access  
* [0.x.40]*
   Return a pointer to the underlying data buffer.  
* [0.x.41]*
   Return a const pointer to the underlying data buffer.  
* [0.x.42]*
   Make the  [2.x.71]  class a bit like the <tt>vector<></tt> class of the   C++ standard library by returning iterators to the start and end of the   elements of this vector.  
* [0.x.43]*
   Return constant iterator to the start of the vectors.  
* [0.x.44]*
   Return an iterator pointing to the element past the end of the array.  
* [0.x.45]*
   Return a constant iterator pointing to the element past the end of the   array.  
* [0.x.46]*
   Access the value of the  [2.x.72]  component.  
* [0.x.47]*
   Access the  [2.x.73]  component as a writeable reference.  
* [0.x.48]*
   Access the value of the  [2.x.74]  component.     Exactly the same as operator().  
* [0.x.49]*
   Access the  [2.x.75]  component as a writeable reference.     Exactly the same as operator().  
* [0.x.50]*
   Instead of getting individual elements of a vector via operator(),   this function allows getting a whole set of elements at once. The   indices of the elements to be read are stated in the first argument, the   corresponding values are returned in the second.     If the current vector is called  [2.x.76]  then this function is the equivalent   to the code  
* [1.x.5]
*       [2.x.77]  The sizes of the  [2.x.78]  and  [2.x.79]  arrays must be identical.  
* [0.x.51]*
   Instead of getting individual elements of a vector via operator(),   this function allows getting a whole set of elements at once. In   contrast to the previous function, this function obtains the   indices of the elements by dereferencing all elements of the iterator   range provided by the first two arguments, and puts the vector   values into memory locations obtained by dereferencing a range   of iterators starting at the location pointed to by the third   argument.     If the current vector is called  [2.x.80]  then this function is the equivalent   to the code  
* [1.x.6]
*       [2.x.81]  It must be possible to write into as many memory locations     starting at  [2.x.82]  as there are iterators between      [2.x.83]  and  [2.x.84]   
* [0.x.52]*
    [2.x.85]  Modification of vectors  
* [0.x.53]*
   Add the given vector to the present one.      [2.x.86]   
* [0.x.54]*
   Subtract the given vector from the present one.      [2.x.87]   
* [0.x.55]*
   A collective add operation: This function adds a whole set of values   stored in  [2.x.88]  to the vector components specified by  [2.x.89]   
* [0.x.56]*
   This is a second collective add operation. As a difference, this function   takes a deal.II vector of values.  
* [0.x.57]*
   Take an address where <tt>n_elements</tt> are stored contiguously and add   them into the vector. Handles all cases which are not covered by the   other two <tt>add()</tt> functions above.  
* [0.x.58]*
   Addition of  [2.x.90]  to all components. Note that  [2.x.91]  is a scalar and not a   vector.      [2.x.92]   
* [0.x.59]*
   Multiple addition of scaled vectors, i.e. <tt>*this += a*V+b*W</tt>.      [2.x.93]   
* [0.x.60]*
   Simple addition of a multiple of a vector, i.e. <tt>*this += a*V</tt>.      [2.x.94]   
* [0.x.61]*
   Scaling and simple vector addition, i.e.  <tt>*this = s*(*this)+V</tt>.      [2.x.95]   
* [0.x.62]*
   Scaling and simple addition, i.e.  <tt>*this = s*(*this)+a*V</tt>.      [2.x.96]   
* [0.x.63]*
   Scale each element of the vector by a constant value.      [2.x.97]   
* [0.x.64]*
   Scale each element of the vector by the inverse of the given value.      [2.x.98]   
* [0.x.65]*
   Scale each element of this vector by the corresponding element in the   argument. This function is mostly meant to simulate multiplication (and   immediate re-assignment) by a diagonal scaling matrix.      [2.x.99]   
* [0.x.66]*
   Scale each element of this vector by the corresponding element in the   argument. This function is mostly meant to simulate multiplication (and   immediate re-assignment) by a diagonal scaling matrix.  
* [0.x.67]*
   Assignment <tt>*this = a*u</tt>.      [2.x.100]   
* [0.x.68]*
   Assignment <tt>*this = a*u</tt>.  
* [0.x.69]*
   This function does nothing but exists for compatibility with the  [2.x.101]    parallel vector classes (e.g.,  [2.x.102]  class).  
* [0.x.70]*
    [2.x.103]  Input and output  
* [0.x.71]*
   Print to a stream.  [2.x.104]  denotes the desired precision with which   values shall be printed,  [2.x.105]  whether scientific notation shall   be used. If  [2.x.106]  is  [2.x.107]  then the vector is printed in a line,   while if  [2.x.108]  then the elements are printed on a separate line each.  
* [0.x.72]*
   Write the vector en bloc to a file. This is done in a binary mode, so the   output is neither readable by humans nor (probably) by other computers   using a different operating system or number format.  
* [0.x.73]*
   Read a vector en block from a file. This is done using the inverse   operations to the above function, so it is reasonably fast because the   bitstream is not interpreted.     The vector is resized if necessary.     A primitive form of error checking is performed which will recognize the   bluntest attempts to interpret some data as a vector stored bitwise to a   file, but not more.  
* [0.x.74]*
   Write the data of this object to a stream for the purpose of   serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.75]*
   Read the data of this object from a stream for the purpose of   serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.76]*
   Write and read the data of this object from a stream for the purpose   of serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.77]*
    [2.x.109]   
* [0.x.78]*
    [2.x.110]  Information about the object  
* [0.x.79]*
   Return true if the given global index is in the local range of this   processor.  Since this is not a distributed vector the method always   returns true.  
* [0.x.80]*
   Return an index set that describes which elements of this vector are   owned by the current processor. Note that this index set does not include   elements this vector may store locally as ghost elements but that are in   fact owned by another processor. As a consequence, the index sets   returned on different processors if this is a distributed vector will   form disjoint sets that add up to the complete index set. Obviously, if a   vector is created on only one processor, then the result would satisfy  
* [1.x.7]
*      Since the current data type does not support parallel data storage across   different processors, the returned index set is the complete index set.  
* [0.x.81]*
   Return dimension of the vector.  
* [0.x.82]*
   Return local dimension of the vector. Since this vector does not support   distributed data this is always the same value as size().    
*  [2.x.111]  This function exists for compatibility with    [2.x.112]   
* [0.x.83]*
   Return whether the vector contains only elements with value zero. This   function is mainly for internal consistency checks and should seldom be   used when not in debug mode since it uses quite some time.  
* [0.x.84]*
   Return  [2.x.113]  if the vector has no negative entries, i.e. all entries   are zero or positive. This function is used, for example, to check   whether refinement indicators are really all positive (or zero).     The function obviously only makes sense if the template argument of this   class is a real type. If it is a complex type, then an exception is   thrown.  
* [0.x.85]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.86]*
   This function exists for compatibility with the  [2.x.114]    parallel vector classes (e.g.,  [2.x.115]  class).   Always returns false since this implementation is serial.  
* [0.x.87]*
   Array of elements owned by this vector.  
* [0.x.88]*
   Convenience function used at the end of initialization or   reinitialization. Resets (if necessary) the loop partitioner to the   correct state, based on its current state and the length of the vector.  
* [0.x.89]*
   Actual implementation of the reinit functions.  
* [0.x.90]*
   For parallel loops with TBB, this member variable stores the affinity   information of loops.  
* [0.x.91]!  [2.x.116]  Vectors [2.x.117] 

* 
* [0.x.92]*
 Global function  [2.x.118]  which overloads the default implementation of the C++ standard library which uses a temporary object. The function simply exchanges the data of the two vectors.
*   [2.x.119]  Vector

* 
* [0.x.93]*
 Output operator writing a vector to a stream. This operator outputs the elements of the vector one by one, with a space between entries. Each entry is formatted according to the flags set on the output stream.
*   [2.x.120]  Vector

* 
* [0.x.94]*
 Declare  [2.x.121]  Number > as serial vector.
*   [2.x.122]  Vector

* 
* [0.x.95]