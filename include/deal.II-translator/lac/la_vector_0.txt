[0.x.0]*
 A namespace for vector classes.
*  This namespace contains various classes that provide wrappers to vector classes from different external libraries like Trilinos (EPetra) or PETSc and native implementations like  [2.x.0] 
*  The different vector classes are derived from VectorSpaceVector to provide a joint interface for vector space operations, are derived from ReadWriteVector (or ReadWriteVector itself), or both. The separation of vector space operations (like norms or vector additions) through VectorSpaceVector and element access through ReadWriteVector are by design and improve performance.

* 
* [0.x.1]!  [2.x.1]  Vectors   [2.x.2]   
* [0.x.2]*
   Numerical vector of data. This class derives from both    [2.x.3]  and    [2.x.4]  As opposed to the array of   the C++ standard library, this class implements an element of a vector   space suitable for numerical computations.  
* [0.x.3]*
     Constructor. Create a vector of dimension zero.    
* [0.x.4]*
     Copy constructor. Sets the dimension to that of the given vector and     copies all elements.    
* [0.x.5]*
     Constructor. Set dimension to  [2.x.5]  and initialize all elements with     zero.         The constructor is made explicit to avoid accident like this:     <tt>v=0;</tt>. Presumably, the user wants to set every element of the     vector to zero, but instead, what happens is this call:     <tt>v=Vector [2.x.6]  i.e. the vector is replaced by one of     length zero.    
* [0.x.6]*
     Initialize the vector with a given range of values pointed to by the     iterators. This function exists in analogy to the  [2.x.7]  class.    
* [0.x.7]*
     Set the global size of the vector to  [2.x.8]  The stored elements have     their index in [0,size).         If the flag  [2.x.9]  is set to false, the memory will be     initialized with zero, otherwise the memory will be untouched (and the     user must make sure to fill it with reasonable data before using it).    
* [0.x.8]*
     Uses the same IndexSet as the one of the input vector  [2.x.10]  and     allocates memory for this vector.         If the flag  [2.x.11]  is set to false, the memory will be     initialized with zero, otherwise the memory will be untouched (and the     user must make sure to fill it with reasonable data before using it).    
* [0.x.9]*
     Initializes the vector. The indices are specified by  [2.x.12]      locally_stored_indices.         If the flag  [2.x.13]  is set to false, the memory will be     initialized with zero, otherwise the memory will be untouched (and the     user must make sure to fill it with reasonable data before using it).     locally_stored_indices.    
* [0.x.10]*
     Change the dimension to that of the vector V. The elements of V are not     copied.    
* [0.x.11]*
     Returns `false` as this is a serial vector.         This functionality only needs to be called if using MPI based vectors and     exists in other objects for compatibility.    
* [0.x.12]*
     Copies the data of the input vector  [2.x.14]     
* [0.x.13]*
     Copies the data of the input vector  [2.x.15]     
* [0.x.14]*
     Sets all elements of the vector to the scalar  [2.x.16]  This operation is     only allowed if  [2.x.17]  is equal to zero.    
* [0.x.15]*
     Multiply the entire vector by a fixed factor.    
* [0.x.16]*
     Divide the entire vector by a fixed factor.    
* [0.x.17]*
     Add the vector  [2.x.18]  to the present one.    
* [0.x.18]*
     Subtract the vector  [2.x.19]  from the present one.    
* [0.x.19]*
     Return the scalar product of two vectors.    
* [0.x.20]*
     This function is not implemented and will throw an exception.    
* [0.x.21]*
     Add  [2.x.20]  to all components. Note that  [2.x.21]  is a scalar not a vector.    
* [0.x.22]*
     Simple addition of a multiple of a vector, i.e. <tt>*this += a*V</tt>.    
* [0.x.23]*
     Multiple addition of a multiple of a vector, i.e. <tt>*this +=     a*V+b*W</tt>.    
* [0.x.24]*
     Scaling and simple addition of a multiple of a vector, i.e. <tt>*this =     s*(*this)+a*V</tt>.    
* [0.x.25]*
     Scale each element of this vector by the corresponding element in the     argument. This function is mostly meant to simulate multiplication (and     immediate re-assignment) by a diagonal scaling matrix.    
* [0.x.26]*
     Assignment <tt>*this = a*V</tt>.    
* [0.x.27]*
     Return whether the vector contains only elements with value zero.    
* [0.x.28]*
     Return the mean value of all the entries of this vector.    
* [0.x.29]*
     Return the l<sub>1</sub> norm of the vector (i.e., the sum of the     absolute values of all entries).    
* [0.x.30]*
     Return the l<sub>2</sub> norm of the vector (i.e., the square root of     the sum of the square of all entries among all processors).    
* [0.x.31]*
     Return the maximum norm of the vector (i.e., the maximum absolute value     among all entries and among all processors).    
* [0.x.32]*
     Perform a combined operation of a vector addition and a subsequent     inner product, returning the value of the inner product. In other     words, the result of this function is the same as if the user called    
* [1.x.0]
*          The reason this function exists is that this operation involves less     memory transfer than calling the two functions separately. This method     only needs to load three vectors,  [2.x.22]   [2.x.23]   [2.x.24]  whereas calling     separate methods means to load the calling vector  [2.x.25]  twice. Since     most vector operations are memory transfer limited, this reduces the time     by 25\% (or 50\% if  [2.x.26]  equals  [2.x.27]          For complex-valued vectors, the scalar product in the second step is     implemented as      [2.x.28] .    
* [0.x.33]*
     Return the global size of the vector, equal to the sum of the number of     locally owned indices among all processors.    
* [0.x.34]*
     Return an index set that describes which elements of this vector are     owned by the current processor. As a consequence, the index sets     returned on different processors if this is a distributed vector will     form disjoint sets that add up to the complete index set. Obviously, if     a vector is created on only one processor, then the result would     satisfy    
* [1.x.1]
*     
* [0.x.35]*
     Print the vector to the output stream  [2.x.29]     
* [0.x.36]*
     Print the vector to the output stream  [2.x.30]  in a format that can be     read by  [2.x.31]  Note that the IndexSet is not printed but only     the values stored in the Vector. To load the vector in python just do     <code>     vector = numpy.loadtxt('my_vector.txt')     </code>    
* [0.x.37]*
     Write the vector en bloc to a file. This is done in a binary mode, so     the output is neither readable by humans nor (probably) by other     computers using a different operating system or number format.    
* [0.x.38]*
     Read a vector en block from a file. This is done using the inverse     operations to the above function, so it is reasonably fast because the     bitstream is not interpreted.         The vector is resized if necessary.         A primitive form of error checking is performed which will recognize     the bluntest attempts to interpret some data as a vector stored bitwise     to a file, but not more.    
* [0.x.39]*
     Return the memory consumption of this class in bytes.    
* [0.x.40]*
     Write and read the data of this object from a stream for the purpose     of serialization using the [BOOST serialization     library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).    
* [0.x.41]*
     Attempt to perform an operation between two incompatible vector types.        
*  [2.x.32]     
* [0.x.42]*
 Declare  [2.x.33]  as serial vector.

* 
* [0.x.43]