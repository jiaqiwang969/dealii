[0.x.0]*
   Index type for UMFPACK. SuiteSparse_long has to be used here for the   Windows 64 build.  
* [0.x.1]*
 This class provides an interface to the sparse direct solver UMFPACK, which is part of the SuiteSparse library (see [1.x.0]). UMFPACK is a set of routines for solving non-symmetric sparse linear systems, Ax=b, using the Unsymmetric-pattern MultiFrontal method and direct sparse LU factorization. Matrices may have symmetric or unsymmetric sparsity patterns, and may have unsymmetric entries. The use of this class is explained in the  [2.x.0]  and  [2.x.1]  tutorial programs.
*  This matrix class implements the usual interface of preconditioners, that is a function initialize(const SparseMatrix<double>&matrix,const AdditionalData) for initializing and the whole set of vmult() functions common to all matrices. Implemented here are only vmult() and vmult_add(), which perform multiplication with the inverse matrix. Furthermore, this class provides an older interface, consisting of the functions factorize() and solve(). Both interfaces are interchangeable.
* 

* 
*  [2.x.2]  This class exists if the [1.x.1] interface was not explicitly disabled during configuration.
* 

* 
*  [2.x.3]  UMFPACK has its own license, independent of that of deal.II. If you want to use the UMFPACK you have to accept that license. It is linked to from the deal.II ReadMe file. UMFPACK is included courtesy of its author, [1.x.2].
* 

*  [1.x.3]
*  There are instantiations of this class for SparseMatrix<double>, SparseMatrix<float>, SparseMatrixEZ<float>, SparseMatrixEZ<double>, BlockSparseMatrix<double>, and BlockSparseMatrix<float>.
* 

* 
*  [2.x.4] 

* 
* [0.x.2]*
   Declare type for container size.  
* [0.x.3]*
   Dummy class needed for the usual initialization interface of   preconditioners.  
* [0.x.4]*
   Constructor. See the documentation of this class for the meaning of the   parameters to this function.  
* [0.x.5]*
   Destructor.  
* [0.x.6]*
    [2.x.5]  Setting up a sparse factorization  
* [0.x.7]*
    [2.x.6]   
* [0.x.8]*
   This function does nothing. It is only here to provide a interface   consistent with other sparse direct solvers.  
* [0.x.9]*
   Factorize the matrix. This function may be called multiple times for   different matrices, after the object of this class has been initialized   for a certain sparsity pattern. You may therefore save some computing   time if you want to invert several matrices with the same sparsity   pattern. However, note that the bulk of the computing time is actually   spent in the factorization, so this functionality may not always be of   large benefit.     In contrast to the other direct solver classes, the initialization method   does nothing. Therefore initialize is not automatically called by this   method, when the initialization step has not been performed yet.     This function copies the contents of the matrix into its own storage; the   matrix can therefore be deleted after this operation, even if subsequent   solves are required.  
* [0.x.10]*
   Initialize memory and call  [2.x.7]   
* [0.x.11]*
    [2.x.8]   
* [0.x.12]*
    [2.x.9]  Functions that represent the inverse of a matrix  
* [0.x.13]*
    [2.x.10]   
* [0.x.14]*
   Preconditioner interface function. Usually, given the source vector, this   method returns an approximate solution of [1.x.4]. As this class   provides a wrapper to a direct solver, here it is actually the exact   solution (exact within the range of numerical accuracy of course).     In other words, this function actually multiplies with the exact inverse   of the matrix,  [2.x.11] .  
* [0.x.15]*
   Same as before, but for block vectors.  
* [0.x.16]*
   Same as before, but uses the transpose of the matrix, i.e. this function   multiplies with  [2.x.12] .  
* [0.x.17]*
   Same as before, but for block vectors  
* [0.x.18]*
   Return the dimension of the codomain (or range) space. Note that the   matrix is of dimension  [2.x.13] .  
* [0.x.19]*
   Return the dimension of the domain space. Note that the matrix is of   dimension  [2.x.14] .  
* [0.x.20]*
    [2.x.15]   
* [0.x.21]*
    [2.x.16]  Functions that solve linear systems  
* [0.x.22]*
    [2.x.17]   
* [0.x.23]*
   Solve for a certain right hand side vector. This function may be called   multiple times for different right hand side vectors after the matrix has   been factorized. This yields substantial savings in computing time, since   the actual solution is fast, compared to the factorization of the matrix.     The solution will be returned in place of the right hand side vector.      [2.x.18]  rhs_and_solution A vector that contains the right hand side      [2.x.19]  of a linear system  [2.x.20]  upon calling this function, and that     contains the solution  [2.x.21]  of the linear system after calling this     function.    [2.x.22]  transpose If set to true, this function solves the linear      [2.x.23]  instead of  [2.x.24] .      [2.x.25]  You need to call factorize() before this function can be called.  
* [0.x.24]*
   Like the previous function, but for a complex-valued right hand side   and solution vector.     If the matrix that was previously factorized had complex-valued entries,   then the `rhs_and_solution` vector will, upon return from this function,   simply contain the solution of the linear system  [2.x.26] . If the matrix   was real-valued, then this is also true, but the solution will simply   be computed by applying the factorized  [2.x.27]  to both the   real and imaginary parts of the right hand side vector.  
* [0.x.25]*
   Same as before, but for block vectors.  
* [0.x.26]*
   Same as before, but for complex-valued block vectors.  
* [0.x.27]*
   Call the two functions factorize() and solve() in that order, i.e.   perform the whole solution process for the given right hand side vector.     The solution will be returned in place of the right hand side vector.  
* [0.x.28]*
   Same as before, but for complex-valued solution vectors.  
* [0.x.29]*
   Same as before, but for block vectors.  
* [0.x.30]*
   Same as before, but for complex-valued block vectors.  
* [0.x.31]*
    [2.x.28]   
* [0.x.32]*
   One of the UMFPack routines threw an error. The error code is included in   the output and can be looked up in the UMFPack user manual. The name of   the routine is included for reference.  
* [0.x.33]*
   The dimension of the range space, i.e., the number of rows of the matrix.  
* [0.x.34]*
   The dimension of the domain space, i.e., the number of columns of the   matrix.  
* [0.x.35]*
   The UMFPACK routines allocate objects in which they store information   about symbolic and numeric values of the decomposition. The actual data   type of these objects is opaque, and only passed around as void pointers.  
* [0.x.36]*
   Free all memory that hasn't been freed yet.  
* [0.x.37]*
   Make sure that the arrays Ai and Ap are sorted in each row. UMFPACK wants   it this way. We need to have three versions of this function, one for the   usual SparseMatrix, one for the SparseMatrixEZ, and one for the   BlockSparseMatrix classes  
* [0.x.38]*
   The arrays in which we store the data for the solver. These are documented   in the descriptions of the umfpack_*_symbolic() and umfpack_*_numeric()   functions, but in short:
* 

* 
* 

* 
* 

* 
* 
*  - `Ap` is the array saying which row starts where in `Ai`
* 

* 
* 

* 
* 

* 
* 
*  - `Ai` is the array that stores the column indices of nonzero entries
* 

* 
* 

* 
* 

* 
* 
*  - `Ax` is the array that stores the values of nonzero entries; if the     matrix is complex-valued, then it stores the real parts
* 

* 
* 

* 
* 

* 
* 
*  - `Az` is the array that stores the imaginary parts of nonzero entries,     and is used only if the matrix is complex-valued.  
* [0.x.39]*
   Control and work arrays for the solver routines.  
* [0.x.40]