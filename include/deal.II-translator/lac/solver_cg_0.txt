[0.x.0]*
 This class implements the preconditioned Conjugate Gradients (CG) method that can be used to solve linear systems with a symmetric positive definite matrix. This class is used first in  [2.x.0]  and  [2.x.1] , but is used in many other tutorial programs as well. Like all other solver classes, it can work on any kind of vector and matrix as long as they satisfy certain requirements (for the requirements on matrices and vectors in order to work with this class, see the documentation of the Solver base class). The type of the solution vector must be passed as template argument, and defaults to  [2.x.2] 
* 

* 
*  [2.x.3]  This version of CG is taken from D. Braess's book "Finite Elements". It requires a symmetric preconditioner (i.e., for example, SOR is not a possible choice).
* 

*  [1.x.0]
*  The cg-method performs an orthogonal projection of the original preconditioned linear system to another system of smaller dimension. Furthermore, the projected matrix  [2.x.4]  is tri-diagonal. Since the projection is orthogonal, the eigenvalues of  [2.x.5]  approximate those of the original preconditioned matrix  [2.x.6]  In fact, after  [2.x.7]  steps, where  [2.x.8]  is the dimension of the original system, the eigenvalues of both matrices are equal. But, even for small numbers of iteration steps, the condition number of  [2.x.9]  is a good estimate for the one of  [2.x.10] 
*  After  [2.x.11]  steps the matrix T_m can be written in terms of the coefficients  [2.x.12]  and  [2.x.13]  as the tri-diagonal matrix with diagonal elements <tt>1/alpha_0</tt>, <tt>1/alpha_1 + beta_0/alpha_0</tt>, ..., <tt>1/alpha_{m-1</tt>+beta_{m-2}/alpha_{m-2}} and off-diagonal elements <tt>sqrt(beta_0)/alpha_0</tt>, ..., <tt>sqrt(beta_{m-2</tt>)/alpha_{m-2}}. The eigenvalues of this matrix can be computed by postprocessing.
*   [2.x.14]  Y. Saad: "Iterative methods for Sparse Linear Systems", section 6.7.3 for details.
*  The coefficients, eigenvalues and condition number (computed as the ratio of the largest over smallest eigenvalue) can be obtained by connecting a function as a slot to the solver using one of the functions  [2.x.15]  connect_coefficients_slot,  [2.x.16]  and  [2.x.17]  connect_condition_number_slot. These slots will then be called from the solver with the estimates as argument.
*  [1.x.1]
*  The solve() function of this class uses the mechanism described in the Solver base class to determine convergence. This mechanism can also be used to observe the progress of the iteration.

* 
* [0.x.1]*
   Declare type for container size.  
* [0.x.2]*
   Standardized data struct to pipe additional data to the solver.   Here, it doesn't store anything but just exists for consistency   with the other solver classes.  
* [0.x.3]*
   Constructor.  
* [0.x.4]*
   Constructor. Use an object of type GrowingVectorMemory as a default to   allocate memory.  
* [0.x.5]*
   Virtual destructor.  
* [0.x.6]*
   Solve the linear system  [2.x.18]  for x.  
* [0.x.7]*
   Connect a slot to retrieve the CG coefficients. The slot will be called   with alpha as the first argument and with beta as the second argument,   where alpha and beta follow the notation in Y. Saad: "Iterative methods   for Sparse Linear Systems", section 6.7. Called once per iteration  
* [0.x.8]*
   Connect a slot to retrieve the estimated condition number. Called on each   iteration if every_iteration=true, otherwise called once when iterations   are ended (i.e., either because convergence has been achieved, or because   divergence has been detected).  
* [0.x.9]*
   Connect a slot to retrieve the estimated eigenvalues. Called on each   iteration if every_iteration=true, otherwise called once when iterations   are ended (i.e., either because convergence has been achieved, or because   divergence has been detected).  
* [0.x.10]*
   Interface for derived class. This function gets the current iteration   vector, the residual and the update vector in each step. It can be used   for graphical output of the convergence history.  
* [0.x.11]*
   Estimates the eigenvalues from diagonal and offdiagonal. Uses these   estimate to compute the condition number. Calls the signals   eigenvalues_signal and cond_signal with these estimates as arguments.  
* [0.x.12]*
   Additional parameters.  
* [0.x.13]*
   Signal used to retrieve the CG coefficients. Called on each iteration.  
* [0.x.14]*
   Signal used to retrieve the estimated condition number. Called once when   all iterations are ended.  
* [0.x.15]*
   Signal used to retrieve the estimated condition numbers. Called on each   iteration.  
* [0.x.16]*
   Signal used to retrieve the estimated eigenvalues. Called once when all   iterations are ended.  
* [0.x.17]*
   Signal used to retrieve the estimated eigenvalues. Called on each   iteration.  
* [0.x.18]