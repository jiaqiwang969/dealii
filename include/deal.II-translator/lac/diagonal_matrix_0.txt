[0.x.0]*
 This class represents a [1.x.0] diagonal matrix based on a vector of size [1.x.1]. The matrix-vector products are realized by  [2.x.0]   [2.x.1]  so the template vector class needs to provide a  [2.x.2]  method.
*  When using this class with  [2.x.3]  the underlying vector needs to provide write access to all entries referenced by cells in an assembly process. This means that this class also needs access to ghost entries that are owned by other processors than the calling one. In practice this requires initialization of the vector as follows

* 
* [1.x.2]
* 

* 
* [0.x.1]*
   Default constructor. The object needs still to be reinitialized to be   usable.  
* [0.x.2]*
   Constructor initializing this object as a diagonal matrix of size `n x n`   where `n` is the size of the vector, and with diagonal entries equal to the   elements of  [2.x.4]   
* [0.x.3]*
   Initialize with a given vector by copying the content of the vector    [2.x.5]   
* [0.x.4]*
   Compresses the data structures and allows the resulting matrix to be used   in all other operations like matrix-vector products. This is a collective   operation, i.e., it needs to be run on all processors when used in   parallel.  
* [0.x.5]*
   Return a reference to the underlying vector for manipulation of the   entries on the matrix diagonal.  
* [0.x.6]*
   Clear content of this object and reset to the state of default constructor.  
* [0.x.7]*
   Return a read-only reference to the underlying vector.  
* [0.x.8]*
   Number of rows of this matrix. This number corresponds to the size of the   underlying vector.  
* [0.x.9]*
   Number of columns of this matrix. This number corresponds to the size of   the underlying vector.  
* [0.x.10]*
   Read-only access to a value. This is restricted to the case where   [1.x.3] due to the matrix storage.     If the vector representing the diagonal is distributed with MPI, not all   of the indices [1.x.4] might actually be accessible. Refer to the method    [2.x.6]  for the entries that   actually are accessible.  
* [0.x.11]*
   Read-write access to a value. This is restricted to the case where   [1.x.5] due to the matrix storage.     If the vector representing the diagonal is distributed with MPI, not all   of the indices [1.x.6] might actually be accessible. Refer to the method    [2.x.7]  for the entries that   actually are accessible.  
* [0.x.12]*
   Add an array of values given by <tt>values</tt> in the given global   matrix row at columns specified by col_indices. Due to the storage of   this matrix, entries are only added to the diagonal of the matrix. All   other entries are ignored and no exception is thrown.     This function is for a consistent interface with the other matrix   classes in deal.II and can be used in    [2.x.8]  to get exactly the same   diagonal as when assembling into a sparse matrix.  
* [0.x.13]*
   Add value to the element (i,j).     Due to the storage of this matrix, entries are only added to the diagonal   of the matrix. All other entries are ignored and no exception is thrown.  
* [0.x.14]*
   Performs a matrix-vector multiplication with the given matrix.  
* [0.x.15]*
   Performs a transpose matrix-vector multiplication with the given   matrix. Since this represents a diagonal matrix, exactly the same as   vmult().  
* [0.x.16]*
   Adds the result of a matrix-vector multiplication into the destination   vector dst. Needs to create a temporary vector, which makes performance   slower than for  [2.x.9]   
* [0.x.17]*
   Adds the result of a transpose matrix-vector multiplication into the   destination vector dst. Needs to create a temporary vector, which makes   performance slower than for  [2.x.10]   
* [0.x.18]*
   Initialize vector  [2.x.11]  to have the same size and partition as    [2.x.12]  member of this class.     This is a part of the interface required   by linear_operator().  
* [0.x.19]*
   Return the memory consumption of this object.  
* [0.x.20]*
   The stored vector.  
* [0.x.21]