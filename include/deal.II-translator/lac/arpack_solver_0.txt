[0.x.0]*
 Interface for using ARPACK. ARPACK is a collection of Fortran77 subroutines designed to solve large scale eigenvalue problems.  Here we interface to the routines  [2.x.0]  of ARPACK. If the operator is specified to be symmetric we use the symmetric interface  [2.x.1]  of ARPACK instead.  The package is designed to compute a few eigenvalues and corresponding eigenvectors of a general n by n matrix A. It is most appropriate for large sparse matrices A.
*  In this class we make use of the method applied to the generalized eigenspectrum problem  [2.x.2] , for  [2.x.3] ; where  [2.x.4]  is a system matrix,  [2.x.5]  is a mass matrix, and  [2.x.6]  are a set of eigenvalues and eigenvectors respectively.
*  The ArpackSolver can be used in application codes with serial objects in the following way:

* 
* [1.x.0]
*  for the generalized eigenvalue problem  [2.x.7] , where the variable  [2.x.8]  tells ARPACK the number of eigenvector/eigenvalue pairs to solve for. Here,  [2.x.9]  is a vector that will contain the eigenvalues computed,  [2.x.10]  a vector that will contain the eigenvectors computed, and  [2.x.11]  is an inverse operation for the matrix  [2.x.12] . Shift and invert transformation around zero is applied.
*  Through the AdditionalData the user can specify some of the parameters to be set.
*  For further information on how the ARPACK routines  [2.x.13] ,  [2.x.14]  work and also how to set the parameters appropriately please take a look into the ARPACK manual.
* 

* 
*  [2.x.15]  Whenever you eliminate degrees of freedom using AffineConstraints, you generate spurious eigenvalues and eigenvectors. If you make sure that the diagonals of eliminated matrix rows are all equal to one, you get a single additional eigenvalue. But beware that some functions in deal.II set these diagonals to rather arbitrary (from the point of view of eigenvalue problems) values. See also  [2.x.16]  " [2.x.17] " for an example.

* 
* [0.x.1]*
   Declare the type for container size.  
* [0.x.2]*
   An enum that lists the possible choices for which eigenvalues to compute   in the solve() function.  
* [0.x.3]*
     The algebraically largest eigenvalues.    
* [0.x.4]*
     The algebraically smallest eigenvalues.    
* [0.x.5]*
     The eigenvalue with the largest magnitudes.    
* [0.x.6]*
     The eigenvalue with the smallest magnitudes.    
* [0.x.7]*
     The eigenvalues with the largest real parts.    
* [0.x.8]*
     The eigenvalues with the smallest real parts.    
* [0.x.9]*
     The eigenvalues with the largest imaginary parts.    
* [0.x.10]*
     The eigenvalues with the smallest imaginary parts.    
* [0.x.11]*
     Compute half of the eigenvalues from the high end of the spectrum and     the other half from the low end. If the number of requested     eigenvectors is odd, then the extra eigenvector comes from the high end     of the spectrum.    
* [0.x.12]*
   Standardized data struct to pipe additional data to the solver.  
* [0.x.13]*
     Constructor. By default, set the number of Arnoldi vectors (Lanczos     vectors if the problem is symmetric) to 15. Set the solver to find the     eigenvalues of largest magnitude for a non-symmetric problem).    
* [0.x.14]*
     Number of Arnoldi/Lanczos vectors. This number should be less than the     size of the problem but greater than 2 times the number of eigenvalues     (or n_eigenvalues if it is set) plus one.    
* [0.x.15]*
     Specify the eigenvalues of interest.    
* [0.x.16]*
     Specify if the problem is symmetric or not.    
* [0.x.17]*
   Access to the object that controls convergence.  
* [0.x.18]*
   Constructor.  
* [0.x.19]*
   Set initial vector for building Krylov space.  
* [0.x.20]*
   Set shift  [2.x.18]  for shift-and-invert spectral transformation.     If this function is not called, the shift is assumed to be zero.  
* [0.x.21]*
   Solve the generalized eigensprectrum problem  [2.x.19]  by calling   the  [2.x.20]  or    [2.x.21]  functions of ARPACK.     The function returns a vector of eigenvalues of length [1.x.1] and a   vector of eigenvectors of length [1.x.2] in the symmetric case   and of length [1.x.3] in the non-symmetric case. In the symmetric case   all eigenvectors are real. In the non-symmetric case complex eigenvalues   always occur as complex conjugate pairs. Therefore the eigenvector for an   eigenvalue with nonzero complex part is stored by putting the real and   the imaginary parts in consecutive real-valued vectors. The eigenvector   of the complex conjugate eigenvalue does not need to be stored, since it   is just the complex conjugate of the stored eigenvector. Thus, if the last   n-th eigenvalue has a nonzero imaginary part, Arpack needs in total n+1   real-valued vectors to store real and imaginary parts of the eigenvectors.      [2.x.22]  A The operator for which we want to compute eigenvalues. Actually,   this parameter is entirely unused.      [2.x.23]  B The inner product of the underlying space, typically the mass   matrix. For constrained problems, it can be a partial mass matrix, like   for instance the velocity mass matrix of a Stokes problem. Only its   function  [2.x.24]  is used.      [2.x.25]  inverse This is the possibly shifted inverse that is actually used   instead of  [2.x.26]  is   used.      [2.x.27]  eigenvalues is a vector of complex numbers in which the   eigenvalues are returned.      [2.x.28]  eigenvectors is a [1.x.4] vector of eigenvectors, containing   the real parts of all eigenvectors and the imaginary parts of the   eigenvectors corresponding to complex conjugate eigenvalue pairs.   Therefore, its length should be [1.x.5] in the symmetric case and   [1.x.6] in the non-symmetric case. In the non-symmetric case the storage   scheme leads for example to the following pattern. Suppose that the first   two eigenvalues are real and the third and fourth are a complex conjugate   pair. Asking for three eigenpairs results in [1.x.7]. Note that we get the same pattern if we ask for   four eigenpairs in this example, since the fourth eigenvector is simply the   complex conjugate of the third one.      [2.x.29]  n_eigenvalues The purpose of this parameter is not clear, but it   is safe to set it to the size of  [2.x.30]  or greater.   Leave it at its default zero, which will be reset to the size of    [2.x.31]  internally.  
* [0.x.22]*
   Reference to the object that controls convergence of the iterative   solver.  
* [0.x.23]*
   Store a copy of the flags for this particular solver.  
* [0.x.24]*
   Store an initial vector  
* [0.x.25]*
   Real part of the shift  
* [0.x.26]*
   Imaginary part of the shift  
* [0.x.27]*
   Exceptions.  
* [0.x.28]