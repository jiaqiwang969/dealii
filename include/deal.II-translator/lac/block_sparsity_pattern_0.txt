[0.x.0]!  [2.x.0]  Sparsity [2.x.1] 

* 
* [0.x.1]*
 This is the base class for block versions of the sparsity pattern and dynamic sparsity pattern classes. It has not much functionality, but only administrates an array of sparsity pattern objects and delegates work to them. It has mostly the same interface as has the SparsityPattern, and DynamicSparsityPattern, and simply transforms calls to its member functions to calls to the respective member functions of the member sparsity patterns.
*  The largest difference between the SparsityPattern and DynamicSparsityPattern classes and this class is that mostly, the matrices have different properties and you will want to work on the blocks making up the matrix rather than the whole matrix. You can access the different blocks using the <tt>block(row,col)</tt> function.
*  Attention: this object is not automatically notified if the size of one of its subobjects' size is changed. After you initialize the sizes of the subobjects, you will therefore have to call the <tt>collect_sizes()</tt> function of this class! Note that, of course, all sub-matrices in a (block-)row have to have the same number of rows, and that all sub-matrices in a (block-)column have to have the same number of columns.
*  You will in general not want to use this class, but one of the derived classes.
*   [2.x.2]  Handle optimization of diagonal elements of the underlying SparsityPattern correctly.
*   [2.x.3]   [2.x.4]  "Block (linear algebra)"

* 
* [0.x.2]*
   Declare type for container size.  
* [0.x.3]*
   Define a value which is used to indicate that a certain value in the  [2.x.5]    colnums array is unused, i.e. does not represent a certain column number   index.     This value is only an alias to the respective value of the   SparsityPattern class.  
* [0.x.4]*
   Initialize the matrix empty, that is with no memory allocated. This is   useful if you want such objects as member variables in other classes. You   can make the structure usable by calling the reinit() function.  
* [0.x.5]*
   Initialize the matrix with the given number of block rows and columns.   The blocks themselves are still empty, and you have to call   collect_sizes() after you assign them sizes.  
* [0.x.6]*
   Copy constructor. This constructor is only allowed to be called if the   sparsity pattern to be copied is empty, i.e. there are no block allocated   at present. This is for the same reason as for the SparsityPattern, see   there for the details.  
* [0.x.7]*
   Destructor.  
* [0.x.8]*
   Resize the matrix, by setting the number of block rows and columns. This   deletes all blocks and replaces them with uninitialized ones, i.e. ones   for which also the sizes are not yet set. You have to do that by calling   the reinit() functions of the blocks themselves. Do not forget to call   collect_sizes() after that on this object.     The reason that you have to set sizes of the blocks yourself is that the   sizes may be varying, the maximum number of elements per row may be   varying, etc. It is simpler not to reproduce the interface of the   SparsityPattern class here but rather let the user call whatever function   they desire.  
* [0.x.9]*
   Copy operator. For this the same holds as for the copy constructor: it is   declared, defined and fine to be called, but the latter only for empty   objects.  
* [0.x.10]*
   This function collects the sizes of the sub-objects and stores them in   internal arrays, in order to be able to relay global indices into the   matrix to indices into the subobjects. Youmust* call this function each   time after you have changed the size of the sub-objects.  
* [0.x.11]*
   Access the block with the given coordinates.  
* [0.x.12]*
   Access the block with the given coordinates. Version for constant   objects.  
* [0.x.13]*
   Grant access to the object describing the distribution of row indices to   the individual blocks.  
* [0.x.14]*
   Grant access to the object describing the distribution of column indices   to the individual blocks.  
* [0.x.15]*
   This function compresses the sparsity structures that this object   represents. It simply calls  [2.x.6]  for all sub-objects.  
* [0.x.16]*
   Return the number of blocks in a column.  
* [0.x.17]*
   Return the number of blocks in a row.  
* [0.x.18]*
   Return whether the object is empty. It is empty if no memory is   allocated, which is the same as that both dimensions are zero. This   function is just the concatenation of the respective call to all sub-   matrices.  
* [0.x.19]*
   Return the maximum number of entries per row. It returns the maximal   number of entries per row accumulated over all blocks in a row, and the   maximum over all rows.  
* [0.x.20]*
   Add a nonzero entry to the matrix. This function may only be called for   non-compressed sparsity patterns.     If the entry already exists, nothing bad happens.     This function simply finds out to which block <tt>(i,j)</tt> belongs and   then relays to that block.  
* [0.x.21]*
   Add several nonzero entries to the specified matrix row.  This function   may only be called for non-compressed sparsity patterns.     If some of the entries already exist, nothing bad happens.     This function simply finds out to which blocks <tt>(row,col)</tt> for   <tt>col</tt> in the iterator range belong and then relays to those   blocks.  
* [0.x.22]*
   Return number of rows of this matrix, which equals the dimension of the   image space. It is the sum of rows of the (block-)rows of sub-matrices.  
* [0.x.23]*
   Return number of columns of this matrix, which equals the dimension of   the range space. It is the sum of columns of the (block-)columns of sub-   matrices.  
* [0.x.24]*
   Check if a value at a certain position may be non-zero.  
* [0.x.25]*
   Number of entries in a specific row, added up over all the blocks that   form this row.  
* [0.x.26]*
   Return the number of nonzero elements of this matrix. Actually, it   returns the number of entries in the sparsity pattern; if any of the   entries should happen to be zero, it is counted anyway.     This function may only be called if the matrix struct is compressed. It   does not make too much sense otherwise anyway.     In the present context, it is the sum of the values as returned by the   sub-objects.  
* [0.x.27]*
   Print the sparsity of the matrix. The output consists of one line per row   of the format <tt>[i,j1,j2,j3,...]</tt>. [1.x.0] is the row number and   [1.x.1] are the allocated columns in this row.  
* [0.x.28]*
   Print the sparsity of the matrix in a format that <tt>gnuplot</tt>   understands and which can be used to plot the sparsity pattern in a   graphical way. This is the same functionality implemented for usual   sparsity patterns, see    [2.x.7]   
* [0.x.29]*
   Print the sparsity of the matrix in <tt>svg</tt> format. This is the same   functionality implemented for usual sparsity patterns, see    [2.x.8]   
* [0.x.30]*
    [2.x.9]  Exceptions    [2.x.10]   
* [0.x.31]*
   Exception  
* [0.x.32]*
   Exception  
* [0.x.33]*
   Number of block rows.  
* [0.x.34]*
   Number of block columns.  
* [0.x.35]*
   Array of sparsity patterns.  
* [0.x.36]*
   Object storing and managing the transformation of row indices to indices   of the sub-objects.  
* [0.x.37]*
   Object storing and managing the transformation of column indices to   indices of the sub-objects.  
* [0.x.38]*
   Temporary vector for counting the elements written into the individual   blocks when doing a collective add or set.  
* [0.x.39]*
   Temporary vector for column indices on each block when writing local to   global data on each sparse matrix.  
* [0.x.40]*
 This class extends the base class to implement an array of sparsity patterns that can be used by block sparse matrix objects. It only adds a few additional member functions, but the main interface stems from the base class, see there for more information.
*  This class is an example of the "static" type of  [2.x.11] .

* 
* [0.x.41]*
   Initialize the matrix empty, that is with no memory allocated. This is   useful if you want such objects as member variables in other classes. You   can make the structure usable by calling the reinit() function.  
* [0.x.42]*
   Initialize the matrix with the given number of block rows and columns.   The blocks themselves are still empty, and you have to call   collect_sizes() after you assign them sizes.  
* [0.x.43]*
   Forwarding to  [2.x.12]   
* [0.x.44]*
   Initialize the pattern with two BlockIndices for the block structures of   matrix rows and columns as well as a row length vector.     The row length vector should be in the format produced by DoFTools.   Alternatively, there is a simplified version, where each of the inner   vectors has length one. Then, the corresponding entry is used as the   maximal row length.     For the diagonal blocks, the inner SparsityPattern is initialized with   optimized diagonals, while this is not done for the off-diagonal blocks.  
* [0.x.45]*
   Return whether the structure is compressed or not, i.e. whether all sub-   matrices are compressed.  
* [0.x.46]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.47]*
   Copy data from an object of type BlockDynamicSparsityPattern, i.e. resize   this object to the size of the given argument, and copy over the contents   of each of the subobjects. Previous content of this object is lost.  
* [0.x.48]*
 This class extends the base class to implement an array of compressed sparsity patterns that can be used to initialize objects of type BlockSparsityPattern. It does not add additional member functions, but rather acts as an  [2.x.13]  to introduce the name of this class, without requiring the user to specify the templated name of the base class. For information on the interface of this class refer to the base class. The individual blocks are based on the DynamicSparsityPattern class.
*  This class is an example of the "dynamic" type of  [2.x.14] .
*  [1.x.2]
*  Usage of this class is very similar to DynamicSparsityPattern, but since the use of block indices causes some additional complications, we give a short example.
*  After the DoFHandler <tt>dof</tt> and the AffineConstraints <tt>constraints</tt> have been set up with a system element, we must count the degrees of freedom in each matrix block:
* 

* 
* [1.x.3]
* 
*  Now, we are ready to set up the BlockDynamicSparsityPattern.
* 

* 
* [1.x.4]
* 
*  It is filled as if it were a normal pattern
* 

* 
* [1.x.5]
* 
*  In the end, it is copied to a normal BlockSparsityPattern for later use.
* 

* 
* [1.x.6]
* 

* 
* [0.x.49]*
   Initialize the matrix empty, that is with no memory allocated. This is   useful if you want such objects as member variables in other classes. You   can make the structure usable by calling the reinit() function.  
* [0.x.50]*
   Initialize the matrix with the given number of block rows and columns.   The blocks themselves are still empty, and you have to call   collect_sizes() after you assign them sizes.  
* [0.x.51]*
   Initialize the pattern with two BlockIndices for the block structures of   matrix rows and columns. This function is equivalent to calling the   previous constructor with the length of the two index vector and then   entering the index values.  
* [0.x.52]*
   Initialize the pattern with symmetric blocks. The number of IndexSets in   the vector determine the number of rows and columns of blocks. The size   of each block is determined by the size() of the respective IndexSet.   Each block only stores the rows given by the values in the IndexSet,   which is useful for distributed memory parallel computations and usually   corresponds to the locally owned DoFs.  
* [0.x.53]*
   Initialize the pattern with two BlockIndices for the block structures of   matrix rows and columns.  
* [0.x.54]*
   Resize the pattern to a tensor product of matrices with dimensions   defined by the arguments.     The matrix will have as many block rows and columns as there are entries   in the two arguments. The block at position ([1.x.7]) will have the   dimensions <tt>row_block_sizes[i]</tt> times <tt>col_block_sizes[j]</tt>.  
* [0.x.55]*
   Resize the pattern with symmetric blocks determined by the size() of each   IndexSet. See the constructor taking a vector of IndexSets for details.  
* [0.x.56]*
   Resize the matrix to a tensor product of matrices with dimensions defined   by the arguments. The two BlockIndices objects must be initialized and   the sparsity pattern will have the same block structure afterwards.  
* [0.x.57]*
   Access to column number field. Return the column number of the  [2.x.15]    th entry in row  [2.x.16]   
* [0.x.58]*
   Allow the use of the reinit functions of the base class as well.  
* [0.x.59]!  [2.x.17]  TrilinosWrappers   [2.x.18]   
* [0.x.60]*
   This class extends the base class to implement an array of Trilinos   sparsity patterns that can be used to initialize Trilinos block sparse   matrices that can be distributed among different processors. It is used in   the same way as the  [2.x.19]  except that it builds upon   the  [2.x.20]  instead of the    [2.x.21]      This class is has properties of the "dynamic" type of    [2.x.22]    (in the sense that it can extend the memory if too little elements were   allocated), but otherwise is more like the basic deal.II SparsityPattern   (in the sense that the method compress() needs to be called before the   pattern can be used).     This class is used in  [2.x.23] .  
* [0.x.61]*
     Initialize the matrix empty, that is with no memory allocated. This is     useful if you want such objects as member variables in other classes.     You can make the structure usable by calling the reinit() function.    
* [0.x.62]*
     Initialize the matrix with the given number of block rows and columns.     The blocks themselves are still empty, and you have to call     collect_sizes() after you assign them sizes.    
* [0.x.63]*
     Initialize the pattern with two BlockIndices for the block structures     of matrix rows and columns. This function is equivalent to calling the     previous constructor with the length of the two index vector and then     entering the index values.    
* [0.x.64]*
     Initialize the pattern with an array of index sets that specifies both     rows and columns of the matrix (so the final matrix will be a square     matrix), where the size() of the IndexSets specifies the size of the     blocks and the values in each IndexSet denotes the rows that are going     to be saved in each block.    
* [0.x.65]*
     Initialize the pattern with two arrays of index sets that specify rows     and columns of the matrix, where the size() of the IndexSets specifies     the size of the blocks and the values in each IndexSet denotes the rows     that are going to be saved in each block. The additional index set     writable_rows is used to set all rows that we allow to write locally.     This constructor is used to create matrices that allow several threads     to write simultaneously into the matrix (to different rows, of course),     see the method  [2.x.24]  method with     three index set arguments for more details.    
* [0.x.66]*
     Resize the matrix to a tensor product of matrices with dimensions     defined by the arguments.         The matrix will have as many block rows and columns as there are     entries in the two arguments. The block at position ([1.x.8]) will     have the dimensions <tt>row_block_sizes[i]</tt> times     <tt>col_block_sizes[j]</tt>.    
* [0.x.67]*
     Resize the matrix to a square tensor product of matrices. See the     constructor that takes a vector of IndexSets for details.    
* [0.x.68]*
     Resize the matrix to a rectangular block matrices. This method allows     rows and columns to be different, both in the outer block structure and     within the blocks.    
* [0.x.69]*
     Resize the matrix to a rectangular block matrices that furthermore     explicitly specify the writable rows in each of the blocks. This method     is used to create matrices that allow several threads to write     simultaneously into the matrix (to different rows, of course), see the     method  [2.x.25]  method with three     index set arguments for more details.    
* [0.x.70]*
     Allow the use of the reinit functions of the base class as well.    
* [0.x.71]