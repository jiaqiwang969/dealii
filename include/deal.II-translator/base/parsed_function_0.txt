[0.x.0]*
   Friendly interface to the FunctionParser class. This class is meant as a   wrapper for the FunctionParser class. It is used in the  [2.x.0]  tutorial   program.     It provides two methods to declare and parse a ParameterHandler object   and creates the Function object declared in the parameter file. This   class is derived from the AutoDerivativeFunction class, so you don't need   to specify derivatives. An example of usage of this class is as follows:      
* [1.x.0]
*      And here is an example of how the input parameter could look like (see   the documentation of the FunctionParser class for a detailed description   of the syntax of the function definition):      
* [1.x.1]
*     
*  [2.x.1]   
* [0.x.1]*
     Construct a vector function. The vector function which is generated has      [2.x.2]  components (defaults to 1). The parameter  [2.x.3]  is used     to initialize the AutoDerivativeFunction class from which this class is     derived.    
* [0.x.2]*
     Declare parameters needed by this class. The additional parameter  [2.x.4]      n_components is used to generate the right code according to the number     of components of the function that will parse this ParameterHandler. If     the number of components which is parsed does not match the number of     components of this object, an assertion is thrown and the program is     aborted.  The default behavior for this class is to declare the     following entries:         
* [1.x.2]
*     
* [0.x.3]*
     Parse parameters needed by this class.  If the number of components     which is parsed does not match the number of components of this object,     an assertion is thrown and the program is aborted.  In order for the     class to function properly, we follow the same conventions declared in     the FunctionParser class (look there for a detailed description of the     syntax for function declarations).         The three variables that can be parsed from a parameter file are the     following:         
* [1.x.3]
*          %Function constants is a collection of pairs in the form name=value,     separated by commas, for example:         
* [1.x.4]
*          These constants can be used in the declaration of the function     expression, which follows the convention of the FunctionParser class.     In order to specify vector functions, semicolons have to be used to     separate the different components, e.g.:         
* [1.x.5]
*          The variable names entry can be used to customize the name of the     variables used in the Function. It defaults to         
* [1.x.6]
*          for one dimensional problems,         
* [1.x.7]
*          for two dimensional problems and         
* [1.x.8]
*          for three dimensional problems.         The time variable can be set according to specifications in the     FunctionTime base class.    
* [0.x.4]*
     Return all components of a vector-valued function at the given point  [2.x.5]      p.    
* [0.x.5]*
     Return the value of the function at the given point. Unless there is     only one component (i.e. the function is scalar), you should state the     component you want to have evaluated; it defaults to zero, i.e. the     first component.    
* [0.x.6]*
     Set the time to a specific value for time-dependent functions.         We need to overwrite this to set the time also in the accessor     FunctionParser<dim>.    
* [0.x.7]*
     The object with which we do computations.    
* [0.x.8]