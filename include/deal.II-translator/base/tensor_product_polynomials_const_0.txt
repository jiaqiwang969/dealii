[0.x.0]*
  [2.x.0]  Polynomials  [2.x.1] 

* 
* [0.x.1]*
 Tensor product of given polynomials and a locally constant function. This class inherits most of its functionality from TensorProductPolynomials. It works similarly to that class but adds a constant function for the last index.

* 
* [0.x.2]*
   Access to the dimension of this object, for checking and automatic   setting of dimension in other classes.  
* [0.x.3]*
   Constructor. <tt>pols</tt> is a vector of objects that should be derived   or otherwise convertible to one-dimensional polynomial objects. It will   be copied element by element into a private variable.  
* [0.x.4]*
   Print the list of <tt>tensor_polys</tt> indices to <tt>out</tt>.  
* [0.x.5]*
   Set the ordering of the polynomials. Requires   <tt>renumber.size()==tensor_polys.n()</tt>.  Stores a copy of   <tt>renumber</tt>.  
* [0.x.6]*
   Give read access to the renumber vector.  
* [0.x.7]*
   Give read access to the inverse renumber vector.  
* [0.x.8]*
   Compute the value and the first and second derivatives of each tensor   product polynomial at <tt>unit_point</tt>.     The size of the vectors must either be equal 0 or equal n(). In the first   case, the function will not compute these values.     If you need values or derivatives of all tensor product polynomials then   use this function, rather than using any of the compute_value(),   compute_grad() or compute_grad_grad() functions, see below, in a loop   over all tensor product polynomials.  
* [0.x.9]*
   Compute the value of the <tt>i</tt>th tensor product polynomial at   <tt>unit_point</tt>. Here <tt>i</tt> is given in tensor product   numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each point value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function with   <tt>values.size()==</tt>n() to get the point values of all tensor   polynomials all at once and in a much more efficient way.  
* [0.x.10]*
   Compute the <tt>order</tt>th derivative of the <tt>i</tt>th tensor   product polynomial at <tt>unit_point</tt>. Here <tt>i</tt> is given in   tensor product numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with the   size of the appropriate parameter set to n() to get the point value of   all tensor polynomials all at once and in a much more efficient way.      [2.x.2]  order The derivative order.  
* [0.x.11]*
    [2.x.3]   [2.x.4]   
* [0.x.12]*
    [2.x.5]   [2.x.6]   
* [0.x.13]*
    [2.x.7]   [2.x.8]   
* [0.x.14]*
    [2.x.9]   [2.x.10]   
* [0.x.15]*
   Compute the grad of the <tt>i</tt>th tensor product polynomial at   <tt>unit_point</tt>. Here <tt>i</tt> is given in tensor product   numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with   <tt>grads.size()==</tt>n() to get the point value of all tensor   polynomials all at once and in a much more efficient way.  
* [0.x.16]*
   Compute the second derivative (grad_grad) of the <tt>i</tt>th tensor   product polynomial at <tt>unit_point</tt>. Here <tt>i</tt> is given in   tensor product numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with   <tt>grad_grads.size()==</tt>n() to get the point value of all tensor   polynomials all at once and in a much more efficient way.  
* [0.x.17]*
   Return the number of tensor product polynomials plus the constant   function. For [1.x.0] 1d polynomials this is [1.x.1].  
* [0.x.18]*
   Return the name of the space, which is   <tt>TensorProductPolynomialsConst</tt>.  
* [0.x.19]*
    [2.x.11]   [2.x.12]   
* [0.x.20]*
   The TensorProductPolynomials object  
* [0.x.21]*
   Index map for reordering the polynomials.  
* [0.x.22]*
   Index map for reordering the polynomials.  
* [0.x.23]