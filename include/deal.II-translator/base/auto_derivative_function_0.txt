[0.x.0]*
 This class automatically computes the gradient of a function by employing numerical difference quotients. This only, if the user function does not provide the gradient function himself.
*  The following example of an user defined function overloads and implements only the value() function but not the gradient() function. If the gradient() function is invoked then the gradient function implemented by the AutoDerivativeFunction is called, where the latter function employs numerical difference quotients.
* 

* 
* [1.x.0]
* 
*  If the user overloads and implements also the gradient function, then, of course, the users gradient function is called.
*  Note, that the usage of the value() and gradient() functions explained above, also applies to the value_list() and gradient_list() functions as well as to the vector valued versions of these functions, see e.g. vector_value(), vector_gradient(), vector_value_list() and vector_gradient_list().
*  The gradient() and gradient_list() functions make use of the  [2.x.0]  function. The vector_gradient() and vector_gradient_list() make use of the  [2.x.1]  function. Make sure that the user defined function implements the value() function and the vector_value() function, respectively.
*  Furthermore note, that an object of this class does [1.x.1] represent the derivative of a function, like FunctionDerivative, that gives a directional derivative by calling the value() function. In fact, this class (the AutoDerivativeFunction class) can substitute the Function class as base class for user defined classes. This class implements the gradient() functions for automatic computation of numerical difference quotients and serves as intermediate class between the base Function class and the user defined function class.
* 

* 
*  [2.x.2] 

* 
* [0.x.1]*
   Names of difference formulas.  
* [0.x.2]*
     The symmetric Euler formula of second order:     [1.x.2]    
* [0.x.3]*
     The upwind Euler formula of first order:     [1.x.3]    
* [0.x.4]*
     The fourth order scheme     [1.x.4]    
* [0.x.5]*
   Constructor. Takes the difference step size <tt>h</tt>. It's within the   user's responsibility to choose an appropriate value here. <tt>h</tt>   should be chosen taking into account the absolute value as well as the   amount of local variation of the function. Setting <tt>h=1e-6</tt> might   be a good choice for functions with an absolute value of about 1, that   furthermore does not vary to much.     <tt>h</tt> can be changed later using the set_h() function.     Sets DifferenceFormula <tt>formula</tt> to the default <tt>Euler</tt>   formula of the set_formula() function. Change this preset formula by   calling the set_formula() function.  
* [0.x.6]*
   Virtual destructor; absolutely necessary in this case.  
* [0.x.7]*
   Choose the difference formula. See the enum #DifferenceFormula for   available choices.  
* [0.x.8]*
   Takes the difference step size <tt>h</tt>. It's within the user's   responsibility to choose an appropriate value here. <tt>h</tt> should be   chosen taking into account the absolute value of as well as the amount of   local variation of the function. Setting <tt>h=1e-6</tt> might be a good   choice for functions with an absolute value of about 1, that furthermore   does not vary to much.  
* [0.x.9]*
   Return the gradient of the specified component of the function at the   given point.     Compute numerical difference quotients using the preset   #DifferenceFormula.  
* [0.x.10]*
   Return the gradient of all components of the function at the given point.     Compute numerical difference quotients using the preset   #DifferenceFormula.  
* [0.x.11]*
   Set <tt>gradients</tt> to the gradients of the specified component of the   function at the <tt>points</tt>.  It is assumed that <tt>gradients</tt>   already has the right size, i.e.  the same size as the <tt>points</tt>   array.     Compute numerical difference quotients using the preset   #DifferenceFormula.  
* [0.x.12]*
   Set <tt>gradients</tt> to the gradients of the function at the   <tt>points</tt>, for all components. It is assumed that   <tt>gradients</tt> already has the right size, i.e. the same size as the   <tt>points</tt> array.     The outer loop over <tt>gradients</tt> is over the points in the list,   the inner loop over the different components of the function.     Compute numerical difference quotients using the preset   #DifferenceFormula.  
* [0.x.13]*
   Return a #DifferenceFormula of the order <tt>ord</tt> at minimum.  
* [0.x.14]*
   Step size of the difference formula. Set by the set_h() function.  
* [0.x.15]*
   Includes the unit vectors scaled by <tt>h</tt>.  
* [0.x.16]*
   Difference formula. Set by the set_formula() function.  
* [0.x.17]