[0.x.0]*
 The ConvergenceTable class is an application to the TableHandler class and stores some convergence data, such as residuals of the cg-method, or some evaluated [1.x.0]-errors of discrete solutions, etc, and evaluates convergence rates or orders.
*  The already implemented #RateMode's are #reduction_rate, where the convergence rate is the quotient of two following rows, and #reduction_rate_log2, that evaluates the order of convergence. These standard evaluations are useful for global refinement, for local refinement this may not be an appropriate method, as the convergence rates should be set in relation to the number of cells or the number of DoFs. The implementations of these non-standard methods is left to a user.
*  For example, the number of cells may be added to the table by calling `add_value("n cells", n_cells)`. The number of DoFs may be added to the table by calling `add_value("n dofs", n_dofs)`. Of course, one can also add more kinds of information by calling add_value() with other arguments. In any case, before the output of the table the functions evaluate_convergence_rates() and evaluate_all_convergence_rates() may be called.
*  There are two possibilities of how to evaluate the convergence rates of multiple columns in the same RateMode.  [2.x.0]   [2.x.1]  call evaluate_convergence_rates() for all wanted columns  [2.x.2]  call omit_column_from_convergence_rate_evaluation() for all columns for which this evaluation is not desired and then evaluate_all_convergence_rates() to evaluate the convergence rates of all columns that have not been flagged for omission.  [2.x.3] 
*  A detailed discussion of this class can also be found in the  [2.x.4]  and  [2.x.5]  example programs. It is also used in  [2.x.6] .
* 

* 
*  [2.x.7] 

* 
* [0.x.1]*
   Constructor.  
* [0.x.2]*
   Rate in relation to the rows.  
* [0.x.3]*
     Do not do anything.    
* [0.x.4]*
     Quotient of values in the previous row and in this row.    
* [0.x.5]*
     Logarithm of #reduction_rate to the base 2 representing the order of     convergence when halving the grid size, e.g. from h to h/2.    
* [0.x.6]*
   Evaluate the convergence rates of the data column   <tt>data_column_key</tt> due to the #RateMode in relation to the   reference column <tt>reference_column_key</tt>. Be sure that the value   types of the table entries of the data column and the reference data   column is a number, i.e. double, float, (unsigned) int, and so on.     As this class has no information on the space dimension upon which the   reference column vs. the value column is based upon, it needs to be   passed as last argument to this method. The [1.x.1] is 2, which is appropriate for the number of cells   in 2D. If you work in 3D, set the number to 3. If the reference column is    [2.x.8] , remember to set the dimension to 1 also when working in 3D to get   correct rates.     The new rate column and the data column will be merged to a supercolumn.   The tex caption of the supercolumn will be (by default) the same as the   one of the data column. This may be changed by using the   <tt>set_tex_supercaption (...)</tt> function of the base class   TableHandler.     This method behaves in the following way:     If RateMode is reduction_rate, then the computed output is  [2.x.9]  where  [2.x.10]  is the reference column (no   dimension dependence!).     If RateMode is reduction_rate_log2, then the computed output is  [2.x.11] .     This is useful, for example, if we use as reference key the number of   degrees of freedom or better, the number of cells.  Assuming that the   error is proportional to  [2.x.12]  in 2D, then this method   will produce the rate  [2.x.13]  as a result. For general dimension, as   described by the last parameter of this function, the formula needs to be    [2.x.14] .    
*  [2.x.15]  Since this function adds columns to the table after several rows   have already been filled, it switches off the auto fill mode of the   TableHandler base class. If you intend to add further data with auto   fill, you will have to re-enable it after calling this function.  
* [0.x.7]*
   Evaluate the convergence rates of the data column   <tt>data_column_key</tt> due to the #RateMode.  Be sure that the value   types of the table entries of the data column is a number, i.e. double,   float, (unsigned) int, and so on.     The new rate column and the data column will be merged to a supercolumn.   The tex caption of the supercolumn will be (by default) the same as the   one of the data column. This may be changed by using the   set_tex_supercaption() function of the base class TableHandler.    
*  [2.x.16]  Since this function adds columns to the table after several rows   have already been filled, it switches off the auto fill mode of the   TableHandler base class. If you intend to add further data with auto   fill, you will have to re-enable it after calling this function.  
* [0.x.8]*
   Omit this column <tt>key</tt> (not supercolumn!) from the evaluation of   the convergence rates of `all' columns (see the following two functions).     The  [2.x.17]  is reserved for omitting the column from convergence   rate evaluation.  
* [0.x.9]*
   Evaluate convergence rates due to the <tt>rate_mode</tt> in relation to   the reference column <tt>reference_column_key</tt>. This function   evaluates the rates of ALL columns except of the columns that are to be   omitted (see previous function) and except of the columns that are   previously evaluated rate columns.  This function allows to evaluate the   convergence rate for almost all columns of a table without calling   evaluate_convergence_rates() for each column separately.     Example: Columns like <tt>n cells</tt> or <tt>n dofs</tt> columns may be   wanted to be omitted in the evaluation of the convergence rates. Hence   they should omitted by calling the   omit_column_from_convergence_rate_evaluation().  
* [0.x.10]*
   Evaluate convergence rates due to the <tt>rate_mode</tt>. This function   evaluates the rates of ALL columns except of the columns that are to be   omitted (see previous function) and except of the columns that are   previously evaluated rate columns.  This function allows to evaluate the   convergence rate for almost all columns of a table without calling   evaluate_convergence_rates() for each column separately.     Example: Columns like <tt>n cells</tt> or <tt>n dofs</tt> columns may be   wanted to be omitted in the evaluation of the convergence rates. Hence   they should omitted by calling the   omit_column_from_convergence_rate_evaluation().  
* [0.x.11]*
    [2.x.18]  Exceptions    [2.x.19]   
* [0.x.12]*
   Exception  
* [0.x.13]