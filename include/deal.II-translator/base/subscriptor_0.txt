[0.x.0]*
 Handling of subscriptions.
*  This class, as a base class, allows to keep track of other objects using a specific object. It is used to avoid that pointers that point to an object of a class derived from Subscriptor are referenced after that object has been invalidated. Here, invalidation is assumend to happen when the object is moved from or destroyed. The mechanism works as follows: The member function subscribe() accepts a pointer to a boolean that is modified on invalidation. The object that owns this pointer (usually an object of class type SmartPointer) is then expected to check the state of the boolean before trying to access this class.
*  The utility of this class is even enhanced by providing identifying strings to the functions subscribe() and unsubscribe(). These strings are represented as  [2.x.0]  pointers since the underlying buffer comes from (and is managed by) the run-time type information system: more exactly, these pointers are the result the function call  [2.x.1]  where  [2.x.2]  is some object. Therefore, the pointers provided to subscribe() and to unsubscribe() must be the same. Strings with equal contents will not be recognized to be the same. The handling in SmartPointer will take care of this. The current subscribers to this class can be obtained by calling list_subscribers().
* 

* 
*  [2.x.3] 

* 
* [0.x.1]*
   Constructor setting the counter to zero.  
* [0.x.2]*
   Copy-constructor.     The counter of the copy is zero, since references point to the original   object.  
* [0.x.3]*
   Move constructor.     An object inheriting from Subscriptor can only be moved if no other   objects are subscribing to it.  
* [0.x.4]*
   Destructor, asserting that the counter is zero.  
* [0.x.5]*
   Assignment operator.     This has to be handled with care, too, because the counter has to remain   the same. It therefore does nothing more than returning <tt>*this</tt>.  
* [0.x.6]*
   Move assignment operator. Only invalidates the object moved from.  
* [0.x.7]*
    [2.x.4]  Subscriptor functionality     Classes derived from Subscriptor provide a facility to subscribe to this   object. This is mostly used by the SmartPointer class.  
* [0.x.8]*
   Subscribes a user of the object by storing the pointer  [2.x.5]  The   subscriber may be identified by text supplied as  [2.x.6]   
* [0.x.9]*
   Unsubscribes a user from the object.    
*  [2.x.7]  The  [2.x.8]  and the  [2.x.9]  pointer must be the same as   the one supplied to subscribe().  
* [0.x.10]*
   Return the present number of subscriptions to this object. This allows to   use this class for reference counted lifetime determination where the   last one to unsubscribe also deletes the object.  
* [0.x.11]*
   List the subscribers to the input  [2.x.10]   
* [0.x.12]*
   List the subscribers to  [2.x.11]   
* [0.x.13]*
    [2.x.12]  Exceptions    [2.x.13]   
* [0.x.14]*
   Exception: Object may not be deleted, since it is used.  
* [0.x.15]*
   A subscriber with the identification string given to    [2.x.14]  did not subscribe to the object.  
* [0.x.16]*
   Read or write the data of this object to or from a stream for the purpose   of serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).     This function does not actually serialize any of the member variables of   this class. The reason is that what this class stores is only who   subscribes to this object, but who does so at the time of storing the   contents of this object does not necessarily have anything to do with who   subscribes to the object when it is restored. Consequently, we do not   want to overwrite the subscribers at the time of restoring, and then   there is no reason to write the subscribers out in the first place.  
* [0.x.17]*
   Store the number of objects which subscribed to this object. Initially,   this number is zero, and upon destruction it shall be zero again (i.e.   all objects which subscribed should have unsubscribed again).     The creator (and owner) of an object is counted in the map below if HE   manages to supply identification.     We use the <tt>mutable</tt> keyword in order to allow subscription to   constant objects also.     This counter may be read from and written to concurrently in   multithreaded code: hence we use the  [2.x.15]  class   template.  
* [0.x.18]*
   In this map, we count subscriptions for each different identification   string supplied to subscribe().  
* [0.x.19]*
   The data type used in #counter_map.  
* [0.x.20]*
   The iterator type used in #counter_map.  
* [0.x.21]*
   In this vector, we store pointers to the validity bool in the SmartPointer   objects that subscribe to this class.  
* [0.x.22]*
   Pointer to the typeinfo object of this object, from which we can later   deduce the class name. Since this information on the derived class is   neither available in the destructor, nor in the constructor, we obtain it   in between and store it here.  
* [0.x.23]*
   Check that there are no objects subscribing to this object. If this check   passes then it is safe to destroy the current object. It this check fails   then this function will either abort or print an error message to deallog   (by using the AssertNothrow mechanism), but will not throw an exception.    
*  [2.x.16]  Since this function is just a consistency check it does nothing in   release mode.    
*  [2.x.17]  If this function is called when there is an uncaught exception   then, rather than aborting, this function prints an error message to the   standard error stream and returns.  
* [0.x.24]*
   A mutex used to ensure data consistency when printing out the list   of subscribers.  
* [0.x.25]