[0.x.0]*
     A namespace for consensus algorithms designed for dynamic-sparse     communication patterns.        
*  [2.x.0]     
* [0.x.1]*
       An interface to be able to use the Interface classes. The main       functionality of the implementations is to return a list of process       ranks this process wants data from and to deal with the optional       payload of the messages sent/received by the ConsensusAlgorithm       classes.             There are two kinds of messages:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - send/request message: A message consisting of a data request         which should be answered by another process. This message is         considered as a request message by the receiving rank.
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - recv message: The answer to a send/request message.              [2.x.1]  T1 the type of the elements of the vector to sent        [2.x.2]  T2 the type of the elements of the vector to received            
*  [2.x.3]  Since the payloads of the messages are optional, users have             to deal with buffers themselves. The ConsensusAlgorithm classes       1) deliver only references to empty vectors (of size 0) the data to be       sent can be inserted to or read from, and 2) communicate these vectors       blindly.      
* [0.x.2]*
         Destructor.        
* [0.x.3]*
          [2.x.4]  A vector of ranks this process wants to send a request to.                
*  [2.x.5]  This is the only method which has to be implemented since the               payloads of the messages are optional.        
* [0.x.4]*
         Add to the request to the process with the specified rank a payload.                  [2.x.6]   other_rank rank of the process          [2.x.7]  send_buffer data to be sent part of the request         (optional)                
*  [2.x.8]  The buffer is empty. Before using it, you have to set its size.        
* [0.x.5]*
         Prepare the buffer where the payload of the answer of the request to         the process with the specified rank is saved in. The most obvious         task is to resize the buffer, since it is empty when the function is         called.                  [2.x.9]   other_rank rank of the process          [2.x.10]  recv_buffer data to be sent part of the request         (optional)        
* [0.x.6]*
         Prepare the buffer where the payload of the answer of the request to         the process with the specified rank is saved in.                  [2.x.11]   other_rank rank of the process          [2.x.12]   buffer_recv received payload (optional)          [2.x.13]  request_buffer payload to be sent as part of the request                     (optional)                
*  [2.x.14]  The request_buffer is empty. Before using it, you have to set               its size.        
* [0.x.7]*
         Process the payload of the answer of the request to the process with         the specified rank.                  [2.x.15]  other_rank rank of the process          [2.x.16]  recv_buffer data to be sent part of the request (optional)        
* [0.x.8]*
       A base class for algorithms that implement the task of coming up with       communication patterns to retrieve data from other processes in a       dynamic-sparse way. In computer science, this is often called a       [1.x.0].             Dynamic-sparse means in this context:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - By the time this function is called, the other processes do         not know yet that they have to answer requests.
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - Each process only has to communicate with a small subset of         processes of the MPI communicator.             Naturally, the user has to provide:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - A communicator.
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - For each rank a list of ranks of processes this process should         communicate to.
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - Functionality to pack/unpack data to be sent/received.             This base class only introduces a basic interface to achieve       these goals, while derived classes implement different algorithms       to actually compute such communication patterns.       The last two features of the list above this paragraph are implemented       in classes derived from  [2.x.17]               [2.x.18]  T1 The type of the elements of the vector to be sent.        [2.x.19]  T2 The type of the elements of the vector to be received.      
* [0.x.9]*
         Destructor.        
* [0.x.10]*
         Run consensus algorithm and return the requesting processes.        
* [0.x.11]*
         Reference to the process provided by the user.        
* [0.x.12]*
         MPI communicator.        
* [0.x.13]*
         Cache if job supports MPI.        
* [0.x.14]*
         Rank of this process.        
* [0.x.15]*
         Number of processes in the communicator.        
* [0.x.16]*
       This class implements a concrete algorithm for the        [2.x.20]  base class, using only point-to-point       communications and a single IBarrier.            
*  [2.x.21]  This class closely follows  [2.x.22] . Since the             algorithm shown there is not considering payloads, the algorithm             has been modified here in such a way that synchronous sends             (Issend) have been replaced by equivalent Isend/Irecv, where             Irecv receives the answer to a request (with payload).              [2.x.23]  T1 The type of the elements of the vector to be sent.        [2.x.24]  T2 The type of the elements of the vector to be received.      
* [0.x.17]*
         Constructor.                  [2.x.25]  process Process to be run during consensus algorithm.          [2.x.26]  comm MPI Communicator        
* [0.x.18]*
         Destructor.        
* [0.x.19]*
          [2.x.27]   [2.x.28]         
* [0.x.20]*
         List of processes this process wants to send requests to.        
* [0.x.21]*
         Buffers for sending requests.        
* [0.x.22]*
         Requests for sending requests.        
* [0.x.23]*
         Buffers for receiving answers to requests.        
* [0.x.24]*
         Requests for receiving answers to requests.        
* [0.x.25]*
         Buffers for sending answers to requests.        
* [0.x.26]*
         Requests for sending answers to requests.        
* [0.x.27]*
         List of processes who have made a request to this process.        
* [0.x.28]*
         Check if all request answers have been received by this rank.        
* [0.x.29]*
         Signal to all other ranks that this rank has received all request         answers via entering IBarrier.        
* [0.x.30]*
         Check if all ranks have received all their request answers, i.e.         all ranks have reached the IBarrier.        
* [0.x.31]*
         A request message from another rank has been received: process the         request and send an answer.        
* [0.x.32]*
         Start to send all requests via ISend and post IRecvs for the incoming         answer messages.        
* [0.x.33]*
         After all rank has received all answers, the MPI data structures can         be freed and the received answers can be processed.        
* [0.x.34]*
       This class implements a concrete algorithm for the        [2.x.29]  base class, using a two step approach.       In the first step the source ranks are determined and in the second       step a static sparse data exchange is performed.            
*  [2.x.30]  In contrast to NBX, this class splits the same         task into two distinct steps. In the first step, all processes         are identified who want to send a request to this process. In the         second step, the data is exchanged. However, since
* 
*  - in the         second step
* 
*  - now it is clear how many requests have to be answered,         i.e. when this process can stop waiting for requests, no IBarrier is         needed.            
*  [2.x.31]  The function          [2.x.32]  is         used to determine the source processes, which implements a         PEX-algorithm from  [2.x.33] .              [2.x.34]  T1 The type of the elements of the vector to be sent.        [2.x.35]  T2 The type of the elements of the vector to be received.      
* [0.x.35]*
         Constructor.                  [2.x.36]  process Process to be run during consensus algorithm.          [2.x.37]  comm MPI Communicator        
* [0.x.36]*
         Destructor.        
* [0.x.37]*
          [2.x.38]   [2.x.39]         
* [0.x.38]*
         List of ranks of processes this processes wants to send a request to.        
* [0.x.39]*
         List of ranks of processes wanting to send a request to this process.        
* [0.x.40]*
         Buffers for sending requests.        
* [0.x.41]*
         Buffers for receiving answers to requests.        
* [0.x.42]*
         Requests for sending requests and receiving answers to requests.        
* [0.x.43]*
         Buffers for sending answers to requests.        
* [0.x.44]*
         Requests for sending answers to requests.        
* [0.x.45]*
         List of processes who have made a request to this process.        
* [0.x.46]*
         The ith request message from another rank has been received: process         the request and send an answer.        
* [0.x.47]*
         Start to send all requests via ISend and post IRecvs for the incoming         answer messages.        
* [0.x.48]*
         After all answers have been exchanged, the MPI data structures can be         freed and the received answers can be processed.        
* [0.x.49]*
       A serial fall back for the above classes to allow programming       independently of whether MPI is used or not.      
* [0.x.50]*
         Constructor.                  [2.x.40]  process Process to be run during consensus algorithm.          [2.x.41]  comm MPI Communicator (ignored)        
* [0.x.51]*
          [2.x.42]   [2.x.43]         
* [0.x.52]*
       A class which delegates its task to other        [2.x.44]  implementations depending on the number       of processes in the MPI communicator. For a small number of processes       it uses PEX and for a large number of processes NBX. The threshold       depends if the program is compiled in debug or release mode.              [2.x.45]  T1 The type of the elements of the vector to be sent.        [2.x.46]  T2 The type of the elements of the vector to be received.      
* [0.x.53]*
         Constructor.                  [2.x.47]  process Process to be run during consensus algorithm.          [2.x.48]  comm MPI Communicator.        
* [0.x.54]*
         Destructor.        
* [0.x.55]*
          [2.x.49]   [2.x.50]                 
*  [2.x.51]  The function call is delegated to another  [2.x.52]  implementation.        
* [0.x.56]*
       This class implements  [2.x.53]        using user-provided function wrappers.       The advantage of this class is that users do not have to write their       own implementation but can register lambda functions directly.      
* [0.x.57]*
         Register functions that should be called for implementing the         interface of Process.                  [2.x.54]  function_compute_targets called during `compute_targets`.          [2.x.55]  function_create_request called during `create_request`.          [2.x.56]  function_answer_request called during `answer_request`.          [2.x.57]  function_prepare_buffer_for_answer called during           `prepare_buffer_for_answer`.          [2.x.58]  function_read_answer called during `read_answer`.        
* [0.x.58]*
          [2.x.59]   [2.x.60]         
* [0.x.59]*
          [2.x.61]   [2.x.62]         
* [0.x.60]*
          [2.x.63]   [2.x.64]         
* [0.x.61]*
          [2.x.65]   [2.x.66]         
* [0.x.62]*
          [2.x.67]   [2.x.68]         
* [0.x.63]