[0.x.0]*
 Support for time dependent functions. The library was also designed for time dependent problems. For this purpose, the function objects also contain a field which stores the time, as well as functions manipulating them. Time independent problems should not access or even abuse them for other purposes, but since one normally does not create thousands of function objects, the gain in generality weighs out the fact that we need not store the time value for not time dependent problems. The second advantage is that the derived standard classes like <tt>ZeroFunction</tt>, <tt>ConstantFunction</tt> etc also work for time dependent problems.
*  Access to the time goes through the following functions:  [2.x.0]    [2.x.1]  <tt>get_time</tt>: return the present value of the time variable.   [2.x.2]  <tt>set_time</tt>: set the time value to a specific value.   [2.x.3]  <tt>advance_time</tt>: increase the time by a certain time step.  [2.x.4]  The latter two functions are virtual, so that derived classes can perform computations which need only be done once for every new time. For example, if a time dependent function had a factor <tt>sin(t)</tt>, then it may be a reasonable choice to calculate this factor in a derived version of set_time(), store it in a member variable and use that one rather than computing it every time <tt>value()</tt>, <tt>value_list</tt> or one of the other functions of class Function is called.
*  By default, the advance_time() function calls the set_time() function with the new time, so it is sufficient in most cases to overload only set_time() for computations as sketched out above.
*  The constructor of this class takes an initial value for the time variable, which defaults to zero. Because a default value is given, none of the derived classes needs to take an initial value for the time variable if not needed.
*   [2.x.5]  Number The data type in which time values are to be stored. This will, in almost all cases, simply be the default  [2.x.6]  but there are cases where one may want to store the time in a different (and always scalar) type. An example would be an interval type that can store a value as well as its uncertainty. Another example would be a type that allows for Automatic Differentiation (see, for example, the Sacado type used in  [2.x.7] ) and thereby can generate analytic (temporal) derivatives of a function.
* 

* 

* 
*  [2.x.8] 

* 
* [0.x.1]*
   Constructor. May take an initial value for the time variable, which   defaults to zero.  
* [0.x.2]*
   Virtual destructor.  
* [0.x.3]*
   Return the value of the time variable.  
* [0.x.4]*
   Set the time to <tt>new_time</tt>, overwriting the old value.  
* [0.x.5]*
   Advance the time by the given time step <tt>delta_t</tt>.  
* [0.x.6]*
   The type this class is initialized with and that is used to represent time.  
* [0.x.7]*
   Store the present time.  
* [0.x.8]