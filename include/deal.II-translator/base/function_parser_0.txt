[0.x.0]*
 This class implements a function object that gets its value by parsing a string describing this function. It is a wrapper class for the muparser library (see https://beltoforion.de/en/muparser/). This class lets you evaluate strings such as "sqrt(1-x^2+y^2)" for given values of 'x' and 'y'. Please refer to the muparser documentation for more information.  This class is used in the  [2.x.0]  and  [2.x.1]  tutorial programs (the latter being much simpler to understand).
*  In addition to the built-in functions of muparser, namely

* 
* [1.x.0]
*  this class also supports the following operations:
* 

* 
* 
*  -  [2.x.2] 
* 

* 
* 
*  -  [2.x.3]  (logic or and and)
* 

* 
* 
*  -  [2.x.4]  (rounding)
* 

* 
* 
*  -  [2.x.5] 
* 

* 
* 
*  -  [2.x.6] 
* 

* 
* 
*  -  [2.x.7] 
* 

* 
* 
*  -  [2.x.8] 
* 

* 
*  [2.x.9]  This class implements the list of functions just mentioned as   user-defined functions by extending muparser. This means, in particular,   that the `if(condition, then-value, else-value)` syntax evaluates all   three arguments before determining whether the condition is true, and   then discarding either the "then" or the "else" expressions. In almost   all situations, this is not a problem except if the evaluation of   one of the expressions throws a floating point exception in cases   where it will later be discarded. (Assuming floating point exceptions   are switched on, as is the default for deal.II in debug mode on most   systems.) An example would be the expression `if(x>0, sqrt(x), 0)`   which is mathematically well defined, but on systems where this is   enabled will abort the program with a floating point exception when   evaluated with a negative `x`. This is because the square root of   `x` is computed before the `if` statement's condition is considered   to determine whether the result should be the second or third   argument. If this kind of behavior is a problem, you can resort to   the muparser built-in syntax `(condition ? then-value : else-value)`,   using the ternary syntax familiar to C++ programmers. If this   syntax is used, muparser uses lazy evaluation in which only one of the   branches is evaluated, depending on whether the `condition` is   true or false.
*  The following examples shows how to use this class:

* 
* [1.x.1]
*  The second example is a bit more complex:

* 
* [1.x.2]
* 
*  This class overloads the virtual methods value() and vector_value() of the Function base class with the byte compiled versions of the expressions given to the initialize() methods. Note that the class will not work unless you first call the initialize() method that accepts the text description of the function as an argument (among other things).
*  The syntax to describe a function follows usual programming practice, and is explained in detail at the homepage of the underlying muparser library at https://beltoforion.de/en/muparser/.
*  For a wrapper of the FunctionParser class that supports ParameterHandler, see  [2.x.10] 
*  Vector-valued functions can either be declared using strings where the function components are separated by semicolons, or using a vector of strings each defining one vector component.
*  An example of time dependent scalar function is the following:

* 
* [1.x.3]
* 
*  The following is another example of how to instantiate a vector valued function by using a single string:

* 
* [1.x.4]
* 
* 

* 
*  [2.x.11]  The difference between this class and the SymbolicFunction class is that the SymbolicFunction class allows to compute first and second order derivatives (in a symbolic way), while this class computes first order derivatives only, using finite differences. For complicated expressions, this class is generally faster than SymbolicFunction.
* 

* 
*  [2.x.12] 

* 
* [0.x.1]*
   Constructor. Its arguments are the same of the base class Function, with   the additional parameter  [2.x.13]  used for the computation of gradients   using finite differences. This object needs to be initialized with the   initialize() method before you can use it. If an attempt to use this   function is made before the initialize() method has been called, then an   exception is thrown.  
* [0.x.2]*
   Constructor for parsed functions. Takes directly a semi-colon separated   list of expressions (one for each component of the function), an optional   comma-separated list of constants, variable names and step size for the   computation of first order derivatives by finite differences.  
* [0.x.3]*
   Copy constructor. Objects of this type can not be copied, and   consequently this constructor is deleted.  
* [0.x.4]*
   Move constructor. Objects of this type can not be moved, and   consequently this constructor is deleted.  
* [0.x.5]*
   Destructor.  
* [0.x.6]*
   Copy operator. Objects of this type can not be copied, and   consequently this operator is deleted.  
* [0.x.7]*
   Move operator. Objects of this type can not be moved, and   consequently this operator is deleted.  
* [0.x.8]*
   Type for the constant map. Used by the initialize() method.  
* [0.x.9]*
   Initialize the object by setting the actual parsed functions.      [2.x.14]  vars a string with the variables that will be used by the   expressions to be evaluated. Note that the variables can have any name   (of course different from the function names defined above!), but the   order IS important. The first variable will correspond to the first   component of the point in which the function is evaluated, the second   variable to the second component and so forth. If this function is also   time dependent, then it is necessary to specify it by setting the    [2.x.15]  parameter to true.  An exception is thrown if   the number of variables specified here is different from dim (if this   function is not time-dependent) or from dim+1 (if it is time-dependent).      [2.x.16]  expressions a list of strings containing the expressions that   will be byte compiled by the internal parser (muParser). Note that   the size of this vector must match exactly the number of components of   the FunctionParser, as declared in the constructor. If this is not the   case, an exception is thrown.      [2.x.17]  constants a map of constants used to pass any necessary constant   that we want to specify in our expressions (in the example above the   number pi). An expression is valid if and only if it contains only   defined variables and defined constants (other than the functions   specified above). If a constant is given whose name is not valid (eg:    [2.x.18] ) an exception is thrown.      [2.x.19]  time_dependent If this is a time dependent function, then the   last variable declared in  [2.x.20]  is assumed to be the time variable, and    [2.x.21]  is used to initialize it when evaluating the   function. Naturally the number of variables parsed by initialize() in   this case is dim+1. The value of this parameter defaults to false, i.e.,   do not consider time.  
* [0.x.10]*
   Initialize the function. Same as above, but accepts a string rather than   a vector of strings. If this is a vector valued function, its components   are expected to be separated by a semicolon. An exception is thrown if   this method is called and the number of components successfully parsed   does not match the number of components of the base function.  
* [0.x.11]*
   A function that returns default names for variables, to be used in the   first argument of the initialize() functions: it returns "x" in 1d, "x,y"   in 2d, and "x,y,z" in 3d.  
* [0.x.12]*
   Return the value of the function at the given point. Unless there is only   one component (i.e., the function is scalar), you should state the   component you want to have evaluated; it defaults to zero, i.e., the first   component.  
* [0.x.13]*
   Return all components of a vector-valued function at the given point  [2.x.22]    p.      [2.x.23]  shall have the right size beforehand, i.e.   #n_components.  
* [0.x.14]*
   Return an array of function expressions (one per component), used to   initialize this function.  
* [0.x.15]*
    [2.x.24]  Exceptions    [2.x.25]   
* [0.x.16]*
   Place for the variables for each thread  
* [0.x.17]*
   The muParser objects for each thread (and one for each component). We are   storing a unique_ptr so that we don't need to include the definition of    [2.x.26]  in this header.  
* [0.x.18]*
   An array to keep track of all the constants, required to initialize fp in   each thread.  
* [0.x.19]*
   An array for the variable names, required to initialize fp in each   thread.  
* [0.x.20]*
   Initialize fp and vars on the current thread. This function may only be   called once per thread. A thread can test whether the function has   already been called by testing whether 'fp.get().size()==0' (not   initialized) or >0 (already initialized).  
* [0.x.21]*
   An array of function expressions (one per component), required to   initialize fp in each thread.  
* [0.x.22]*
   State of usability. This variable is checked every time the function is   called for evaluation. It's set to true in the initialize() methods.  
* [0.x.23]*
   Number of variables. If this is also a function of time, then the number   of variables is dim+1, otherwise it is dim. In the case that this is a   time dependent function, the time is supposed to be the last variable. If   #n_vars is not identical to the number of the variables parsed by the   initialize() method, then an exception is thrown.  
* [0.x.24]