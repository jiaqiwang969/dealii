[0.x.0]*
 A namespace for utility functions that are not particularly specific to finite element computing or numerical programs, but nevertheless are needed in various contexts when writing applications.
* 

* 
*  [2.x.0] 

* 
* [0.x.1]*
   Return a string of the form "deal.II version x.y.z" where "x.y.z"   identifies the version of deal.II you are using. This information   is also provided by the DEAL_II_PACKAGE_NAME and   DEAL_II_PACKAGE_VERSION preprocessor variables.  
* [0.x.2]*
   Assign to each point in  [2.x.1]  an index using the Hilbert space filling curve.   To that end, a bounding box for  [2.x.2]  will be determined, based on which their   integer coordinates are calculated.   The linear index is given as a dim-collection of bits, from high to low.   This is done in order to keep the maximum resolution in terms of bit depth   along each axis. Note that this dim-integer index can still be easily used   for sorting and ordering, for example using the lexicographic ordering of   tuples of integers.     The depth of the Hilbert curve (i.e. the number of bits per dimension) by   default is equal to  [2.x.3] .    
*  [2.x.4]  This function can also handle degenerate cases, e.g. when the bounding   box has zero size in one of the dimensions.  
* [0.x.3]*
   Same as above, but for points in integer coordinates.  
* [0.x.4]*
   Pack the least significant  [2.x.5]  bits from each element of  [2.x.6]    (starting from last) into a single unsigned integer. The last element   of  [2.x.7]  will be used to set the first  [2.x.8]  bits in the   resulting integer, the second to last element is used to set the next  [2.x.9]  bits,   etc.. To fit all the data into the output, the following should hold    [2.x.10] .     The function is useful in debugging and visualization of indices returned   by inverse_Hilbert_space_filling_curve().    
*  [2.x.11]  There is no need to use this function in order to compare indices   returned by inverse_Hilbert_space_filling_curve(), as that can easily be   done via  [2.x.12] .  
* [0.x.5]*
   If the library is configured with ZLIB, then this function compresses the   input string and returns a non-zero terminated string containing the   compressed input.     If the library was not configured with ZLIB enabled, the returned string   is identical to the input string.      [2.x.13]  input The string to compress      [2.x.14]  A compressed version of the input string  
* [0.x.6]*
   If the library is configured with ZLIB, then this function assumes that the   input string has been compressed using the compress() function, and returns   the original decompressed string.     If the library was not configured with ZLIB enabled, the returned string   is identical to the input string.      [2.x.15]  compressed_input A compressed string, as returned by the   function compress()      [2.x.16]  The original uncompressed string.  
* [0.x.7]*
   Encodes the binary input as a base64 string.     Base64 is a group of binary-to-text encoding schemes that represent binary   data in an ASCII string format by translating it into a radix-64   representation. Base64 is designed to carry data stored in binary formats   across channels that only reliably support text content. It is used also   to store binary formats in a machine independent way.      [2.x.17]  binary_input A vector of characters, representing your input as   binary data.    [2.x.18]  A string containing the binary input as a base64 string.  
* [0.x.8]*
   Decodes a base64 string into a binary output.     This is the inverse of the encode_base64() function above.      [2.x.19]  base64_input A string that contains the input in base64 format.    [2.x.20]  A vector of characters that represents your input as binary data.  
* [0.x.9]*
   Convert a number  [2.x.21]  to a string, with as many digits as given to   fill with leading zeros.     If the second parameter is left at its default value, the number is not   padded with leading zeros. The result is then the same as if the standard   C++  [2.x.22]  (or the older C function `itoa()`) had been called.     This function takes an `unsigned int` as argument. As a consequence,   if you call it with a `signed int` (which is of course the same   type as `int`), the argument is implicitly converted to   unsigned integers and negative numbers may not be printed as you had   hoped. Similarly, if you call the function with a `long int`, the   printed result might show the effects of an overflow upon conversion   to `unsigned int`.    
*  [2.x.23]  The use of this function is discouraged and users should use    [2.x.24]  instead. In its current   implementation the function simply calls <code>to_string [2.x.25]    int [2.x.26]   
* [0.x.10]*
   Convert a number  [2.x.27]  to a string, with  [2.x.28]  characters. The   string is padded with leading zeros, after a possible minus sign.   Therefore the total number of padding zeros is  [2.x.29]  minus any signs,   decimal points and digits of  [2.x.30]      If the second parameter is left at its default value, the number is not   padded with leading zeros. The result is then the same as if the C++   function  [2.x.31]  had been called (for integral types),   or if  [2.x.32]  had been called (for all other types).  
* [0.x.11]*
   Determine how many digits are needed to represent numbers at most as   large as the given number.  
* [0.x.12]*
   This function allows to cut off a floating point number  [2.x.33]    after  [2.x.34]  of accuracy, i.e., after  [2.x.35]  decimal places   in scientific floating point notation. When interpreted as rounding   operation, this function reduces the absolute value of a floating point   number and always rounds towards zero, since decimal places are simply   cut off.  
* [0.x.13]*
   Given a string, convert it to an integer. Throw an assertion if that is   not possible.  
* [0.x.14]*
   Return a string describing the dimensions of the object. Often, functions   in the deal.II library as well as in user codes need to define a string   containing the template dimensions of some objects defined using two   template parameters: dim (the topological dimension of the object) and   spacedim (the dimension of the embedding Euclidean space).  Since in all   deal.II classes, by default spacedim is equal to dimension, the above   string is usually contracted to "<dim>", instead of "<dim,spacedim>".   This function returns a string containing "dim" if dim is equal to   spacedim, otherwise it returns "dim,spacedim".  
* [0.x.15]*
   Given a list of strings, convert it to a list of integers. Throw an   assertion if that is not possible.  
* [0.x.16]*
   Given a string, convert it to an double. Throw an assertion if that is   not possible.  
* [0.x.17]*
   Given a list of strings, convert it to a list of doubles. Throw an   assertion if that is not possible.  
* [0.x.18]*
   Given a string that contains text separated by a  [2.x.36]  split it   into its components; for each component, remove leading and trailing   spaces. The default value of the delimiter is a comma, so that the   function splits comma separated lists of strings.     To make data input from tables simpler, if the input string ends in a   delimiter (possibly followed by an arbitrary amount of whitespace), then   this last delimiter is ignored. For example,  
* [1.x.0]
*    yields the same 3-element list of output  [2.x.37]    as you would get if the input had been  
* [1.x.1]
*    or  
* [1.x.2]
*    As a consequence of this rule, a call like  
* [1.x.3]
*    yields a one-element list. Because of the trimming of whitespace, the   single element is the empty string.     This function can digest the case that the delimiter is a space. In this   case, it returns all words in the string. Combined with the rules above,   this implies that  
* [1.x.4]
*    yields again the 3-element list of output    [2.x.38]  from above despite the presence of space   at the end of the string. Furthermore,  
* [1.x.5]
*    yields an empty list regardless of the number of spaces in the string.  
* [0.x.19]*
   Specialization of split_string_list() for the case where the delimiter   is a single char.  
* [0.x.20]*
   Take a text, usually a documentation or something, and try to break it   into individual lines of text at most  [2.x.39]  characters wide, by   breaking at positions marked by  [2.x.40]  in the text. If this is not   possible, return the shortest lines that are longer than  [2.x.41]   The   default value of the delimiter is a space character. If original_text   contains newline characters (\n), the string is split at these locations,   too.  
* [0.x.21]*
   Return true if the given pattern string appears in the first position of   the string.  
* [0.x.22]*
   Read a (signed) integer starting at the position in  [2.x.42]  indicated by   the second argument, and return this integer as a pair together with how   many characters it takes up in the string.     If no integer can be read at the indicated position, return    [2.x.43]   
* [0.x.23]*
   Return a string with all occurrences of  [2.x.44]  in  [2.x.45]  replaced by    [2.x.46]   
* [0.x.24]*
   Return a string with all standard whitespace characters (including   '<tt>\\t</tt>', '<tt>\\n</tt>', and '<tt>\\r</tt>') at the beginning and   end of  [2.x.47]  removed.  
* [0.x.25]*
   Generate a random number from a normalized Gaussian probability   distribution centered around  [2.x.48]  and with standard deviation  [2.x.49]    The returned number will be different every time the function is called.     This function is reentrant, i.e., it can safely be called from multiple   threads at the same time. In addition, each thread will get the same   sequence of numbers every time. On the other hand, if you run    [2.x.50]  objects via the Threading Building Blocks, then tasks will   be assigned to mostly random threads, and may get a different sequence of   random numbers in different runs of the program, since a previous task   may already have consumed the first few random numbers generated for the   thread you're on. If this is a problem, you need to create your own   random number generator objects every time you want to start from a   defined point.    
*  [2.x.51]  Like the system function rand(), this function produces the same   sequence of random numbers every time a program is started. This is an   important property for debugging codes, but it makes it impossible to   really verify statistical properties of a code. For `rand()`, you can call   `srand()` to "seed" the random number generator to get different sequences   of random numbers every time a program is called. However, this function   does not allow seeding the random number generator. If you need this, as   above, use one of the C++ or BOOST facilities.  
* [0.x.26]*
   Return a string description of the type of the variable  [2.x.52]      In general, C++ uses mangled names to identify types. This function   uses  [2.x.53]  to return a human readable string describing   the type of the variable passed as argument.  
* [0.x.27]*
   Calculate a fixed power, provided as a template argument, of a number.     This function provides an efficient way to calculate things like    [2.x.54]  is a known number at compile time.     Use this function as in  [2.x.55] .  
* [0.x.28]*
   A replacement for  [2.x.56]  that allows compile-time   calculations for constant expression arguments. The  [2.x.57]  must   be an integer type and the exponent  [2.x.58]  must not be negative.  
* [0.x.29]*
   Optimized replacement for  [2.x.59]  for searching within   the range of column indices. Slashes execution time by approximately one   half for the present application, partly because the binary search is   replaced by a linear search for small loop lengths.     Another reason for this function is rather obscure: when using the GCC   libstdc++ function  [2.x.60]  complexity is O(log(N)) as required.   However, when using the debug version of the GCC libstdc++ as we do when   running the testsuite, then  [2.x.61]  tests whether the sequence   is in fact partitioned with respect to the pivot 'value' (i.e. in essence   that the sequence is sorted as required for binary search to work).   However, verifying this means that the complexity of  [2.x.62]    jumps to O(N); we call this function O(N) times below, making the overall   complexity O(N**2). The consequence is that a few tests with big meshes   completely run off the wall time limit for tests and fail with the   libstdc++ debug mode     This function simply makes the assumption that the sequence is sorted,   and we simply don't do the additional check.  
* [0.x.30]*
   The same function as above, but taking an argument that is used to   compare individual elements of the sequence of objects pointed to by the   iterators.  
* [0.x.31]*
   Given a permutation vector (i.e. a vector  [2.x.63]  where each    [2.x.64]  and  [2.x.65]  for  [2.x.66] ), produce the reverse   permutation  [2.x.67] .  
* [0.x.32]*
   Given a permutation vector (i.e. a vector  [2.x.68]  where each    [2.x.69]  and  [2.x.70]  for  [2.x.71] ), produce the inverse   permutation  [2.x.72]  so that  [2.x.73] .  
* [0.x.33]*
   Given an arbitrary object of type T, use  [2.x.74]  utilities   to pack the object into a vector of characters and append it to the   given buffer. The number of elements that have been added to the buffer   will be returned. The object can be unpacked using the  [2.x.75]    function below.     If the library has been compiled with ZLIB enabled, then the output buffer   can be compressed. This can be triggered with the parameter    [2.x.76]  and is only of effect if ZLIB is enabled.     If many consecutive calls with the same buffer are considered, it is   recommended for reasons of performance to ensure that its capacity is   sufficient.  
* [0.x.34]*
   Creates and returns a buffer solely for the given object, using the   above mentioned pack function.     If the library has been compiled with ZLIB enabled, then the output buffer   can be compressed. This can be triggered with the parameter    [2.x.77]  and is only of effect if ZLIB is enabled.  
* [0.x.35]*
   Given a vector of characters, obtained through a call to the function    [2.x.78]  restore its content in an object of type T.     This function uses  [2.x.79]  utilities to unpack the object   from a vector of characters, and it is the inverse of the function    [2.x.80]      The  [2.x.81]  parameter denotes if the buffer to   read from could have been previously compressed with ZLIB, and   is only of effect if ZLIB is enabled.    
*  [2.x.82]  Since no arguments to this function depend on the template type     [2.x.83]  you must manually specify the template argument when calling    this function.    
*  [2.x.84]  If you want to pack() or unpack() arrays of objects, then the    following works:   
* [1.x.6]
*     However, the converse does not:   
* [1.x.7]
*     This is because C++ does not allow functions to return arrays.    Consequently, there is a separate unpack() function for arrays, see    below.  
* [0.x.36]*
   Same unpack function as above, but takes constant iterators on   (a fraction of) a given packed buffer of type  [2.x.85]  instead.     The  [2.x.86]  parameter denotes if the buffer to   read from could have been previously compressed with ZLIB, and   is only of effect if ZLIB is enabled.  
* [0.x.37]*
   Given a vector of characters, obtained through a call to the function    [2.x.87]  restore its content in an array of type T.     This function uses  [2.x.88]  utilities to unpack the object   from a vector of characters, and it is the inverse of the function    [2.x.89]      The  [2.x.90]  parameter denotes if the buffer to   read from could have been previously compressed with ZLIB, and   is only of effect if ZLIB is enabled.    
*  [2.x.91]  This function exists due to a quirk of C++. Specifically,    if you want to pack() or unpack() arrays of objects, then the    following works:   
* [1.x.8]
*     However, the converse does not:   
* [1.x.9]
*     This is because C++ does not allow functions to return arrays.    The current function therefore allows to write   
* [1.x.10]
*     Note that unlike the other unpack() function, it is not necessary    to explicitly specify the template arguments since they can be    deduced from the second argument.  
* [0.x.38]*
   Same unpack function as above, but takes constant iterators on   (a fraction of) a given packed buffer of type  [2.x.92]  instead.     The  [2.x.93]  parameter denotes if the buffer to   read from could have been previously compressed with ZLIB, and   is only of effect if ZLIB is enabled.  
* [0.x.39]*
   Check if the bit at position  [2.x.94]  in  [2.x.95]  is set.  
* [0.x.40]*
   Set the bit at position  [2.x.96]  in  [2.x.97]  to value  [2.x.98]   
* [0.x.41]*
   Convert an object of type  [2.x.99]  to an object of   type  [2.x.100]  where it is assumed that we can cast   the pointer to `From` to a pointer to `To` using a `dynamic_cast`
* 

* 
* 

* 
* 

* 
* 
*  -  in other words, we assume that `From` and `To` are connected   through a class hierarchy, and that the object pointed to is in   fact of a type that contains both a `From` and a `To`. An example   is if either `To` is derived from `From` or the other way around.     The function throws an exception of type  [2.x.101]  if the   `dynamic_cast` does not succeed. This is the same exception you   would get if a regular `dynamic_cast` between object types (but not   pointer types) does not succeed.     An example of how this function works is as follows:  
* [1.x.11]
*     
*  [2.x.102]  This function does not try to convert the `Deleter` objects stored     by  [2.x.103]  objects. The function therefore only works if the     deleter objects are at their defaults, i.e., if they are of type      [2.x.104]  and  [2.x.105]   
* [0.x.42]*
   Return underlying value. Default: return input.  
* [0.x.43]*
   Return underlying value. Specialization for  [2.x.106]   
* [0.x.44]*
   Return underlying value. Specialization for const  [2.x.107]   
* [0.x.45]*
   Return underlying value. Specialization for  [2.x.108]   
* [0.x.46]*
   Return underlying value. Specialization for const  [2.x.109]   
* [0.x.47]*
   A namespace for utility functions that probe system properties.    
*  [2.x.110]   
* [0.x.48]*
     Return the CPU load as returned by "uptime". Note that the     interpretation of this number depends on the actual number of     processors in the machine. This is presently only implemented on Linux,     using the /proc/loadavg pseudo-file, on other systems we simply return     zero.    
* [0.x.49]*
     Return the instruction set extension for vectorization as described by     DEAL_II_VECTORIZATION_WIDTH_IN_BITS in vectorization.h as a string. The     list of possible return values is:          [2.x.111]     
* [0.x.50]*
     Structure that hold information about memory usage in kB. Used by     get_memory_stats(). See man 5 proc entry /status for details.    
* [0.x.51]*
       Peak virtual memory size in kB.      
* [0.x.52]*
       Current virtual memory size in kB.      
* [0.x.53]*
       Peak resident memory size in kB. Also known as "high water mark" (HWM).      
* [0.x.54]*
       Current resident memory size in kB. Also known as "resident set size"       (RSS).      
* [0.x.55]*
     Fill the  [2.x.112]  structure with information about the memory     consumption of this process. This is only implemented on Linux.    
* [0.x.56]*
     Return the name of the host this process runs on.    
* [0.x.57]*
     Return the present time as HH:MM:SS.    
* [0.x.58]*
     Return the present date as YYYY/MM/DD. MM and DD may be either one or     two digits.    
* [0.x.59]*
     Call the system function posix_memalign, or a replacement function if     not available, to allocate memory with a certain minimal alignment. The     first argument will then return a pointer to this memory block that can     be released later on through a standard  [2.x.113]  call.          [2.x.114]  memptr The address of a pointer variable that will after this     call point to the allocated memory.      [2.x.115]  alignment The minimal alignment of the memory block, in bytes.      [2.x.116]  size The size of the memory block to be allocated, in bytes.        
*  [2.x.117]  This function checks internally for error codes, rather than     leaving this task to the calling site.    
* [0.x.60]*
   This namespace provides some of the basic structures used in the   initialization of the Trilinos objects (e.g., matrices, vectors, and   preconditioners).  
* [0.x.61]*
     Return a Trilinos Epetra_Comm object needed for creation of     Epetra_Maps.         If deal.II has been configured to use a compiler that does not support     MPI then the resulting communicator will be a serial one. Otherwise,     the communicator will correspond to MPI_COMM_WORLD, i.e. a communicator     that encompasses all processes within this MPI universe.    
* [0.x.62]*
     Return a Trilinos Epetra_Comm object needed for creation of     Epetra_Maps.         If deal.II has been configured to use a compiler that does not support     MPI then the resulting communicator will be a serial one. Otherwise,     the communicator will correspond to MPI_COMM_SELF, i.e. a communicator     that comprises only this one processor.    
* [0.x.63]*
     Return a  [2.x.118]  object needed for creation of  [2.x.119]          If deal.II has been configured to use a compiler that does not support     MPI then the resulting communicator will be a serial one. Otherwise,     the communicator will correspond to MPI_COMM_SELF, i.e. a communicator     that comprises only this one processor.    
* [0.x.64]*
     Given a communicator, duplicate it. If the given communicator is     serial, that means to just return a copy of itself. On the other hand,     if it is %parallel, we duplicate the underlying MPI_Comm object: we     create a separate MPI communicator that contains the same processors     and in the same order but has a separate identifier distinct from the     given communicator. The function returns a pointer to a new object of a     class derived from Epetra_Comm. The caller of this function needs to     assume ownership of this function. The returned object should be     destroyed using the destroy_communicator() function.         This facility is used to separate streams of communication. For     example, a program could simply use MPI_Comm_World for everything. But     it is easy to come up with scenarios where sometimes not all processors     participate in a communication that is intended to be global
* 
*  -  for     example if we assemble a matrix on a coarse mesh with fewer cells than     there are processors, some processors may not sync their matrices with     the rest because they haven't written into it because they own no     cells. That's clearly a bug. However, if these processors just continue     their work, and the next %parallel operation happens to be a sync on a     different matrix, then the sync could succeed
* 
*  -  by accident, since     different processors are talking about different matrices.         This kind of situation can be avoided if we use different communicators     for different matrices which reduces the likelihood that communications     meant to be separate aren't recognized as such just because they happen     on the same communicator. In addition, it is conceivable that some MPI     operations can be parallelized using multiple threads because their     communicators identifies the communication in question, not their     relative timing as is the case in a sequential program that just uses a     single communicator.    
* [0.x.65]*
     Given an Epetra communicator that was created by the     duplicate_communicator() function, destroy the underlying MPI     communicator object and reset the Epetra_Comm object to a the result of     comm_self().         It is necessary to call this function at the time when the result of     duplicate_communicator() is no longer needed. The reason is that in     that function, we first create a new MPI_Comm object and then create an     Epetra_Comm around it. While we can take care of destroying the latter,     it doesn't destroy the communicator since it can only assume that it     may also be still used by other objects in the program. Consequently,     we have to take care of destroying it ourselves, explicitly.         This function does exactly that. Because this has to happen while the     Epetra_Comm object is still around, it first resets the latter and then     destroys the communicator object.        
*  [2.x.120]  If you call this function on an Epetra_Comm object that is not     created by duplicate_communicator(), you are likely doing something     quite wrong. Don't do this.    
* [0.x.66]*
     Return the number of MPI processes there exist in the given      [2.x.121]  "communicator"     object. If this is a sequential job (i.e., the program     is not using MPI at all, or is using MPI but has been started with     only one MPI process), then the communicator necessarily involves     only one process and the function returns 1.    
* [0.x.67]*
     Return the number of the present MPI process in the space of processes     described by the given communicator. This will be a unique value for     each process between zero and (less than) the number of all processes     (given by get_n_mpi_processes()).    
* [0.x.68]*
     Given a Trilinos Epetra map, create a new map that has the same     subdivision of elements to processors but uses the given communicator     object instead of the one stored in the first argument. In essence,     this means that we create a map that communicates among the same     processors in the same way, but using a separate channel.         This function is typically used with a communicator that has been     obtained by the duplicate_communicator() function.    
* [0.x.69]