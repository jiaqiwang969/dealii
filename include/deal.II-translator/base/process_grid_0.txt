[0.x.0]*
     A class taking care of setting up a two-dimensional processor grid.     For example an MPI communicator with 5 processes can be arranged into a     2x2 grid with the 5-th processor being inactive:    
* [1.x.0]
*          A shared pointer to this class is provided to ScaLAPACKMatrix matrices to     perform block-cyclic distribution.         Note that this class allows to setup a process grid which has fewer     MPI cores than the total number of cores in the communicator.         Currently the only place where one would use a ProcessGrid object is     in connection with a ScaLAPACKMatrix object.    
* [0.x.1]*
       Constructor for a process grid with  [2.x.0]  and  [2.x.1]  for a given  [2.x.2]        The product of rows and columns should be less or equal to the total       number of cores       in the  [2.x.3]       
* [0.x.2]*
       Constructor for a process grid for a given  [2.x.4]        In this case the process grid is heuristically chosen based on the       dimensions and block-cyclic distribution of a target matrix provided       in  [2.x.5]   [2.x.6]   [2.x.7]  and  [2.x.8]              The maximum number of MPI cores one can utilize is        [2.x.9] , where  [2.x.10]  are the matrix       dimension and  [2.x.11]  are the block sizes and  [2.x.12]  is the number of       processes in the  [2.x.13]  This function then creates a 2D processor grid       assuming the ratio between number of process row  [2.x.14]  and columns  [2.x.15]  to       be equal the ratio between matrix dimensions  [2.x.16]  and  [2.x.17] .             For example, a square matrix  [2.x.18]  with the block size  [2.x.19]        and the  [2.x.20]  with 11 cores will result in the  [2.x.21]        process grid.      
* [0.x.3]*
       Destructor.      
* [0.x.4]*
       Return the number of rows in the processes grid.      
* [0.x.5]*
       Return the number of columns in the processes grid.      
* [0.x.6]*
       Return row of this process in the process grid.             It's negative for inactive processes.      
* [0.x.7]*
       Return column of this process in the process grid.             It's negative for inactive processes.      
* [0.x.8]*
       Send  [2.x.22]  values stored consequently starting at  [2.x.23]  from       the process with rank zero to processes which       are not in the process grid.      
* [0.x.9]*
       Return  [2.x.24]  if the process is active within the grid.      
* [0.x.10]*
       A private constructor which takes grid dimensions as an        [2.x.25] .      
* [0.x.11]*
       An MPI communicator with all processes (active and inactive).      
* [0.x.12]*
       An MPI communicator with inactive processes and the process with rank       zero.      
* [0.x.13]*
       BLACS context. This is equivalent to MPI communicators and is       used by ScaLAPACK.      
* [0.x.14]*
       Rank of this MPI process.      
* [0.x.15]*
       Total number of MPI processes.      
* [0.x.16]*
       Number of rows in the processes grid.      
* [0.x.17]*
       Number of columns in the processes grid.      
* [0.x.18]*
       Row of this process in the grid.             It's negative for in-active processes.      
* [0.x.19]*
       Column of this process in the grid.             It's negative for in-active processes.      
* [0.x.20]*
       A flag which is true for processes within the 2D process grid.      
* [0.x.21]