[0.x.0]*
 Representation of the space of polynomials of degree at most n in higher dimensions.
*  Given a vector of [1.x.0] one-dimensional polynomials [1.x.1] to [1.x.2], where [1.x.3] has degree [1.x.4], this class generates all dim-dimensional polynomials of the form [1.x.5], where the sum of [1.x.6], [1.x.7] and [1.x.8] is less than or equal [1.x.9].
*  The output_indices() function prints the ordering of the polynomials, i.e. for each dim-dimensional polynomial in the polynomial space it gives the indices i,j,k of the one-dimensional polynomials in x,y and z direction. The ordering of the dim-dimensional polynomials can be changed by using the set_numbering() function.
*  The standard ordering of polynomials is that indices for the first space dimension vary fastest and the last space dimension is slowest. In particular, if we take for simplicity the vector of monomials [1.x.10], we get
*   [2.x.0]  <dt> 1D  [2.x.1]  [1.x.11] <dt> 2D:  [2.x.2]  [1.x.12] <dt> 3D:  [2.x.3]  [1.x.13]  [2.x.4] 
* 

* 
*  [2.x.5] 

* 
* [0.x.1]*
   Access to the dimension of this object, for checking and automatic   setting of dimension in other classes.  
* [0.x.2]*
   Constructor. <tt>pols</tt> is a vector of pointers to one-dimensional   polynomials and will be copied into a private member variable. The static   type of the template argument <tt>pols</tt> needs to be convertible to    [2.x.6]  i.e. should usually be a derived class   of  [2.x.7]   
* [0.x.3]*
   Prints the list of the indices to <tt>out</tt>.  
* [0.x.4]*
   Set the ordering of the polynomials. Requires   <tt>renumber.size()==n()</tt>. Stores a copy of <tt>renumber</tt>.  
* [0.x.5]*
   Compute the value and the first and second derivatives of each   polynomial at <tt>unit_point</tt>.     The size of the vectors must either be equal 0 or equal n(). In the first   case, the function will not compute these values, i.e. you indicate what   you want to have computed by resizing those vectors which you want   filled.     If you need values or derivatives of all polynomials then use this   function, rather than using any of the compute_value(), compute_grad() or   compute_grad_grad() functions, see below, in a loop over all polynomials.  
* [0.x.6]*
   Compute the value of the <tt>i</tt>th polynomial at unit point   <tt>p</tt>.     Consider using evaluate() instead.  
* [0.x.7]*
   Compute the <tt>order</tt>th derivative of the <tt>i</tt>th polynomial   at unit point <tt>p</tt>.     Consider using evaluate() instead.      [2.x.8]  order The order of the derivative.  
* [0.x.8]*
    [2.x.9]   [2.x.10]   
* [0.x.9]*
    [2.x.11]   [2.x.12]   
* [0.x.10]*
    [2.x.13]   [2.x.14]   
* [0.x.11]*
    [2.x.15]   [2.x.16]   
* [0.x.12]*
   Compute the gradient of the <tt>i</tt>th polynomial at unit point   <tt>p</tt>.     Consider using evaluate() instead.  
* [0.x.13]*
   Compute the second derivative (grad_grad) of the <tt>i</tt>th polynomial   at unit point <tt>p</tt>.     Consider using evaluate() instead.  
* [0.x.14]*
   Return the number of polynomials spanning the space represented by this   class. Here, if <tt>N</tt> is the number of one-dimensional polynomials   given, then the result of this function is [1.x.14] in 1d,   [1.x.15] in 2d, and [1.x.16] in 3d.  
* [0.x.15]*
   Return the name of the space, which is <tt>PolynomialSpace</tt>.  
* [0.x.16]*
    [2.x.17]   [2.x.18]   
* [0.x.17]*
   Compute numbers in x, y and z direction. Given an index <tt>n</tt> in the   d-dimensional polynomial space, return the indices i,j,k such that   [1.x.17].     In 1d and 2d, obviously only i and i,j are returned.  
* [0.x.18]*
   Copy of the vector <tt>pols</tt> of polynomials given to the constructor.  
* [0.x.19]*
   Index map for reordering the polynomials.  
* [0.x.20]*
   Index map for reordering the polynomials.  
* [0.x.21]