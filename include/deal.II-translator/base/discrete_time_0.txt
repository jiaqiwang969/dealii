[0.x.0]*
 This class provides a means to keep track of the simulation time in a time-dependent simulation. It manages stepping forward from a start time  [2.x.0]  to an end time  [2.x.1] . It also allows adjusting the time step size during the simulation. This class provides the necessary interface to be incorporated in any time-dependent simulation. The usage of this class is demonstrated in  [2.x.2]  and  [2.x.3] .
*  This class provides a number of invariants that are guaranteed to be true at all times.
*  The current simulation time is within the closed interval between the   start time and the end time ( [2.x.4] ). Whenever time is incremented, the step size is positive ( [2.x.5] ).   In other words, time advances in strictly ascending order   ( [2.x.6] ).
*  The model this class follows is that one sets adesired* time step length either through the constructor or using set_desired_next_step_size() function. This step size will then be used in all following calls to the advance_time() function, but may be adjusted slightly towards the end of the simulation to ensure that the simulation time hits the end time exactly. The adjustment is useful for the following reasons:
*  Let's say that you loop over all of the time steps by using a `for` loop

* 
* [1.x.0]
*  or, if you like this better, the equivalent `while` loop:

* 
* [1.x.1]
* 
*  In the above example the time starts at  [2.x.7]  until  [2.x.8] . Assuming the time step  [2.x.9]  is not modified inside the loop, the time is advanced from  [2.x.10]  to  [2.x.11] ,  [2.x.12] ,  [2.x.13]  and finally it reaches the end time at  [2.x.14] . Here, the final step size needs to be reduced from its desired value of 0.3 to  [2.x.15]  in order to ensure that we finish the simulation exactly at the specified end time. In fact, you should assume that not only the last time step length may be adjusted, but also previously ones
* 
*  -  for example, this class may take the liberty to spread the decrease in time step size out over several time steps and increment time from  [2.x.16] , to  [2.x.17] ,  [2.x.18] ,  [2.x.19] , and finally  [2.x.20]  to avoid too large a change in time step size from one step to another.
*  The other situation in which the time step needs to be adjusted (this time to slightly larger values) is if a time increment falls just short of the final time. Imagine, for example, a similar situation as above, but with different end time:

* 
* [1.x.2]
*  Here, the time step from  [2.x.21]  to  [2.x.22]  falls just short of the final time  [2.x.23] . Instead of following up with a very small step of length  [2.x.24] , the class stretches the last time step (or last time steps) slightly to reach the desired end time.
*  The examples above make clear that the time step size given to this class is only adesired* step size. You can query the actual time step size using the get_next_step_size() function.
* 

*  ### Details of time-stepping
*  Since time is marched forward in a discrete manner in our simulations, we need to discuss how we increment time. During time stepping we enter two separate alternating regimes in every step.
*  The*snapshot** stage (the*current** stage, the*consistent**
   stage): In this part of the algorithm, we are at  [2.x.25]  and all   quantities of the simulation (displacements, strains, temperatures, etc.)   are up-to-date for  [2.x.26] . In this stage,current time* refers to    [2.x.27] ,next time* refers to  [2.x.28] ,previous time* refers to    [2.x.29] . The other useful notation quantities are thenext* time step   size  [2.x.30]  andprevious* time step size  [2.x.31] . In   this stage, it is a perfect occasion to generate text output using print   commands within the user's code. Additionally, post-processed outputs can   be prepared here, which can then later be viewed by visualization programs   such as `Tecplot`, `Paraview`, and `VisIt`. Additionally, during the   snapshot stage, the code can assess the quality of the previous step and   decide whether it wants to increase or decrease the time step size. The   step size for the next time step can be modified here, by calling   set_desired_next_step_size(). The*update** stage (the*transition** stage, the*inconsistent**
   stage): In this section of the program, the internal state of the   simulation is getting updated from  [2.x.32]  to  [2.x.33] . All of the   variables need to be updated one by one, the step number is incremented,   the time is incremented by  [2.x.34] , and time-integration   algorithms are used to update the other simulation quantities. In the   middle of this stage, some variables have been updated to  [2.x.35]  but   other variables still represent their value at  [2.x.36] . Thus, we call this   the inconsistent stage, requiring that no post-processing output related   to the state variables take place within it. The state variables, namely   those related to time, the solution field and any internal variables, are   not synchronized and then get updated one by one. In general, the order of   updating variables is arbitrary, but some care should be taken if there   are interdependencies between them. For example, if some variable such as    [2.x.37]  depends on the calculation of another variable such as  [2.x.38] , then  [2.x.39]    must be updated before  [2.x.40]  can be updated.
*    The question arises whether time should be incremented before updating   state quantities. Multiple possibilities exist, depending on program and   formulation requirements, and possibly the programmer's preferences:   Time is incrementedbefore* the rest of the updates. In this case, even     though time is incremented to  [2.x.41] , not all variables are updated     yet. During this update phase,  [2.x.42]  equals theprevious* time step     size.Previous* means that it is referring to the  [2.x.43]  of the     `advance_time()` command that was performed previously. In the     following example code, we are assuming that `a` and `b` are two state     variables that need to be updated in this time step.    
* [1.x.3]
*      Here, the code starts in a consistent state, but once advance_time()     is called, the time variable, `a`, and `b` are no longer consistent     with each other until after the last statement. At that point,     the variables are all consistent again.   Time is incremented from  [2.x.44]  to  [2.x.45] after* all variables have     already been updated for  [2.x.46] . During the update stage,  [2.x.47]  is     denoted as thenext* time step size.Next* means that  [2.x.48]  of the     step corresponds to the `advance_time()` command that will happen     subsequently.    
* [1.x.4]
*    Time is incremented in the middle of the other updates: In this case      [2.x.49]  would correspond tonext* orprevious* depending of whether it     is used before or after the call to `advance_time()`.    
* [1.x.5]
* 
*  One thing to note is that, during the update phase,  [2.x.50]  is referred to either*next** or*previous** time step size, depending on whether advance_time() has been called yet. The notion ofcurrent* time step size is ill-defined. In fact, in the update stage the definition of every variable depends on whether it has been updated yet or not, hence the name*the inconsistent stage**.
*  The following code snippet shows the code sections for the snapshot stage and the update stage in the context of a complete time-dependent simulation. This code follows the coding conventions incorporated in the tutorial examples. Note that even though this example is written in the format of a `for` loop, it can equivalently be written as a `while` or `do while` loop (as shown in  [2.x.51] ).

* 
* [1.x.6]
*  The `run()` function in  [2.x.52]  shows a very similar example where the call to advance_time() ends the update stage and is followed by generating graphical output with the then-current time.

* 
* [0.x.1]*
   Constructor.      [2.x.53]  start_time The time at the start of the simulation.      [2.x.54]  end_time The time at the end of the simulation.      [2.x.55]  desired_start_step_size A desired step size for incrementing   time for the first step. It is not guaranteed that this value will be   actually used as the size of the first step, as discussed in the   introduction.      [2.x.56]   [2.x.57]  must be non-negative.    
*  [2.x.58]   [2.x.59]  is an optional parameter. If it is not   provided or it is specified as zero, it indicates that the   desired size for the time step will be calculated at a different location   in the code. In this case, the created object cannot increment time until   the step size is changed by calling set_desired_next_step_size().  
* [0.x.2]*
   Return the current time.  
* [0.x.3]*
   Return the next time that we would reach if we were to advance the time   by one step.    
*  [2.x.60]  If the simulation is at the end time, this method returns the   end time.  
* [0.x.4]*
   Return the time we were at before `advance_time()` was called last time.    
*  [2.x.61]  If the simulation is at the start time, this method returns the   start time.  
* [0.x.5]*
   Return the start time.  
* [0.x.6]*
   Return the end of the time interval.   The final time step ends exactly at this point. This exact floating-point   equality is very important because it allows us to equality-compare   current time with end time and decide whether we have reached the end of   the simulation.  
* [0.x.7]*
   Return whether no step has taken place yet.  
* [0.x.8]*
   Return whether time has reached the end time.  
* [0.x.9]*
   Return the size of the step from current time step to the   next. As discussed in the introduction to the class, this is the  actual* time step, and may differ from thedesired* time step   set in the constructor or through the   set_desired_next_step_size() function.    
*  [2.x.62]  If the simulation is at the end time, this method returns zero.  
* [0.x.10]*
   Return the step size of the previous step.    
*  [2.x.63]  If the simulation is at the start time, this method returns zero.  
* [0.x.11]*
   Return the number of times the simulation time has been incremented.   Return zero when the simulation is at the start time.  
* [0.x.12]*
   Set thedesired* value of the next time step size. By calling this   method, we are indicating the next time advance_time() is called, we   would like  [2.x.64]  to be used to advance the simulation time.   However, if the step is too large such that the next   simulation time exceeds the end time, the step size is truncated.   Additionally, if the step size is such that the next simulation time   approximates the end time (but falls just slightly short of it), the step   size is adjusted such that the next simulation time exactly matches the   end time.  
* [0.x.13]*
   Set theactual* value of the next time step size. By calling this   method, we are indicating the next time advance_time() is called,    [2.x.65]  is to be used to advance the simulation time.    
*  [2.x.66]  The difference between set_next_step_size() and   set_desired_next_step_size() is that the former uses the provided  [2.x.67]    exactly without any adjustment, but produces an   error (in debug mode) if  [2.x.68]  is not in the acceptable range.   Generally, set_desired_next_step_size() is the preferred method because   it can adjust the  [2.x.69]  intelligently, based on  [2.x.70] .    [2.x.71]   [2.x.72] .  
* [0.x.14]*
   Advance the current time based on the value of the current step.   If you want to adjust the next time step size, call the method   set_desired_next_step_size() before calling this method.   If you call this function repeatedly, the time   is increased with the same step size until it reaches the end   time. See the documentation of set_desired_next_step_size() for   explanation of the rules for automatic adjustment of the step size.      [2.x.73]  Current time must be smaller than the end time. The object cannot   advance time if it is already at the end time. This rule is created to   avoid the creation of an infinite loop when advance_time() is called   inside a loop.      [2.x.74]  The time step size must be nonzero. If the step size is currently   zero, change it by calling set_desired_next_step_size() before calling   advance_time().  
* [0.x.15]*
   Set the current time equal to start time and set the step size to the   initial step size.  
* [0.x.16]*
   The beginning of the time interval.  
* [0.x.17]*
  The end of the time interval.  
* [0.x.18]*
   The current time.  
* [0.x.19]*
   The time at the next step.    
*  [2.x.75]  Internally, the next simulation time is stored instead of the   current step size. For example, when the method   set_desired_next_step_size() is called, it computes the appropriate next   simulation time and stores it. When advance_time() is called, the   current_time is replaced by next_time. This choice for the internal state   allows for simpler code and ensures than when we call advance_time() at   the last step, the floating-point value of the time exactly matches the   end time.  
* [0.x.20]*
   The previous time.  
* [0.x.21]*
   The size of the first step.  
* [0.x.22]*
   The step number i.e. the number of times the simulation time ha been   incremented.  
* [0.x.23]