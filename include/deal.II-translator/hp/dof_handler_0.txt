[0.x.0]*
   Manage the distribution and numbering of the degrees of freedom for hp-   FEM algorithms. This class satisfies the    [2.x.0]  "MeshType concept"   requirements.     The purpose of this class is to allow for an enumeration of degrees of   freedom in the same way as the ::DoFHandler class, but it allows to use a   different finite element on every cell. To this end, one assigns an    [2.x.1]  to every cell that indicates which element   within a collection of finite elements (represented by an object of type    [2.x.2]  is the one that lives on this cell. The class then   enumerates the degree of freedom associated with these finite elements on   each cell of a triangulation and, if possible, identifies degrees of   freedom at the interfaces of cells if they match. If neighboring cells   have degrees of freedom along the common interface that do not immediate   match (for example, if you have  [2.x.3]  and  [2.x.4]  elements meeting at a   common face), then one needs to compute constraints to ensure that the   resulting finite element space on the mesh remains conforming.     The whole process of working with objects of this type is explained in    [2.x.5] . Many of the algorithms this class implements are described in   the    [2.x.6]  "hp-paper".       [1.x.0]     The typical workflow for using this class is to create a mesh, assign an   active FE index to every active cell, calls    [2.x.7]  and then assemble a linear system and   solve a problem on this finite element space. However, one can skip   assigning active FE indices upon mesh refinement in certain   circumstances. In particular, the following rules apply:
* 

* 
* 

* 
* 

* 
* 
*  - Upon mesh refinement, child cells inherit the active FE index of     the parent.
* 

* 
* 

* 
* 

* 
* 
*  - When coarsening cells, the (now active) parent cell will be assigned     an active FE index that is determined from its (no longer active)     children, following the FiniteElementDomination logic: Out of the set of     elements previously assigned to the former children, we choose the one     dominated by all children for the parent cell. If none was found, we pick     the most dominant element in the whole collection that is dominated by     all former children. See  [2.x.8]      for further information on this topic.    
*  [2.x.9]  Finite elements need to be assigned to each cell by either calling   set_fe() or distribute_dofs() first to make this functionality available.       [1.x.1]     When this class is used with either a  [2.x.10]    or a  [2.x.11]  you can only set active   FE indices on cells that are locally owned,   using a call such as  [2.x.12] .   On the other hand, setting the active FE index on ghost   or artificial cells is not allowed.     Ghost cells do acquire the information what element   is active on them, however: whenever   you call  [2.x.13]  all processors that   participate in the parallel mesh exchange information in such a way   that the active FE index on ghost cells equals the active FE index   that was set on that processor that owned that particular ghost cell.   Consequently, one can [1.x.2] the  [2.x.14]  on ghost   cells, just not set it by hand.     On artificial cells, no information is available about the    [2.x.15]  used there. That's because we don't even know   whether these cells exist at all, and even if they did, the   current processor does not know anything specific about them.   See    [2.x.16]  "the glossary entry on artificial cells"   for more information.     During refinement and coarsening, information about the  [2.x.17]    of each cell will be automatically transferred.     However, using a  [2.x.18]  with an    [2.x.19]  requires additional attention during serialization, since no   information on active FE indices will be automatically transferred. This   has to be done manually using the   prepare_for_serialization_of_active_fe_indices() and   deserialize_active_fe_indices() functions. The former has to be called   before  [2.x.20]  is invoked, and the   latter needs to be run after  [2.x.21]    If further data will be attached to the triangulation via the    [2.x.22]     [2.x.23]  or  [2.x.24]    classes, all corresponding preparation and deserialization function calls   need to happen in the same order. Consult the documentation of    [2.x.25]  for more information.      
*  [2.x.26]       [2.x.27]  The basic  [2.x.28]  is capable of hp-adaptation now.  
* [0.x.1]