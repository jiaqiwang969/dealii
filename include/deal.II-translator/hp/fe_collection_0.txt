[0.x.0]*
   This class acts as a collection of finite element objects used in the   DoFHandler.     It implements the concepts stated in the    [2.x.0]    module described in the doxygen documentation.     In addition to offering access to the elements of the collection, this   class provides access to the maximal number of degrees of freedom per   vertex, line, etc, to allow allocation of as much memory as is necessary   in the worst case when using the finite elements associated with the   cells of a triangulation.     This class has not yet been implemented for the use in the codimension   one case (<tt>spacedim != dim </tt>).    
*  [2.x.1]   
* [0.x.1]*
     Whenever p-adaptivity is considered in an hp-finite element program,     a hierarchy of finite elements needs to be established to determine     succeeding finite elements for refinement and preceding ones for     coarsening.         In this struct, we supply a hierarchy that is imposed on all FECollection     objects by default.    
* [0.x.2]*
       Return the index succeeding  [2.x.2]  in the  [2.x.3]              Once the last element of the  [2.x.4]  is reached, there is no element on a higher level in       the hierarchy and thus we return the last value.      
* [0.x.3]*
       Return the index preceding  [2.x.5]  in the  [2.x.6]              Once the first element of the  [2.x.7]  is reached, there is no element on a lower level in       the hierarchy and thus we return the first value.      
* [0.x.4]*
     Default constructor. Leads to an empty collection that can later be     filled using push_back(). Establishes a hierarchy of finite elements     corresponding to their index in the collection.    
* [0.x.5]*
     Conversion constructor. This constructor creates a FECollection from a     single finite element. More finite element objects can be added with     push_back(), if desired, though it would probably be clearer to add all     mappings the same way.    
* [0.x.6]*
     Constructor. This constructor creates a FECollection from one or     more finite element objects passed to the constructor. For this     call to be valid, all arguments need to be of types derived     from class FiniteElement<dim,spacedim>.    
* [0.x.7]*
     Constructor. Same as above but for any number of elements. Pointers to     the elements are passed in a vector to this constructor. As above, the     finite element objects pointed to by the argument are not actually used     other than to create copies internally. Consequently, you can delete     these pointers immediately again after calling this constructor.    
* [0.x.8]*
     Copy constructor.    
* [0.x.9]*
     Move constructor.        
*  [2.x.8]  The implementation of standard datatypes may change with different     libraries, so their move members may or may not be flagged non-throwing.     We need to explicitly set the noexcept specifier according to its     member variables to still get the performance benefits (and to satisfy     clang-tidy).    
* [0.x.10]*
     Move assignment operator.    
* [0.x.11]*
     Equality comparison operator. All stored FiniteElement objects are     compared in order.    
* [0.x.12]*
     Non-equality comparison operator. All stored FiniteElement objects are     compared in order.    
* [0.x.13]*
     Add a finite element. This function generates a copy of the given     element, i.e. you can do things like <tt>push_back(FE_Q<dim>(1));</tt>.     The internal copy is later destroyed by this object upon destruction of     the entire collection.         When a new element is added, it needs to have the same number of vector     components as all other elements already in the collection.    
* [0.x.14]*
     Return the number of vector components of the finite elements in this     collection.  This number must be the same for all elements in the     collection.         This function calls  [2.x.9]   See      [2.x.10]  "the glossary"     for more information.    
* [0.x.15]*
     Return the number of vector blocks of the finite elements in this     collection. While this class ensures that all elements stored in it     have the same number of vector components, there is no such guarantees     for the number of blocks each element is made up of (an element may     have fewer blocks than vector components; see      [2.x.11]  "the glossary"     for more information). For example, you may have an FECollection object     that stores one copy of an FESystem with  [2.x.12]  FE_Q objects     and one copy of an FE_RaviartThomas element. Both have  [2.x.13]      vector components but while the former has  [2.x.14]  blocks the     latter has only one. Consequently, this function will throw an     assertion if the number of blocks is not the same for all elements. If     they are the same, this function returns the result of      [2.x.15]     
* [0.x.16]*
     Return the maximum of values returned by  [2.x.16]      over all elements of this collection.    
* [0.x.17]*
     Return the maximal number of degrees of freedom per vertex over all     elements of this collection.    
* [0.x.18]*
     Return the maximal number of degrees of freedom per line over all     elements of this collection.    
* [0.x.19]*
     Return the maximal number of degrees of freedom per quad over all     elements of this collection.    
* [0.x.20]*
     Return the maximal number of degrees of freedom per hex over all     elements of this collection.    
* [0.x.21]*
     Return the maximal number of degrees of freedom per face over all     elements of this collection.    
* [0.x.22]*
     Return the maximal number of degrees of freedom per cell over all     elements of this collection.    
* [0.x.23]*
     Return whether all elements in this collection implement the hanging     node constraints in the new way, which has to be used to make elements     "hp-compatible". If this is not the case, the function returns false,     which implies, that at least one element in the FECollection does not     support the new face interface constraints. On the other hand, if this     method does return true, this does not imply that the hp-method will     work!         This behavior is related to the fact, that FiniteElement classes,     which provide the new style hanging node constraints might still not     provide them for all possible cases. If FE_Q and FE_RaviartThomas     elements are included in the FECollection and both properly implement     the get_face_interpolation_matrix method, this method will return true.     But the get_face_interpolation_matrix might still fail to find an     interpolation matrix between these two elements.    
* [0.x.24]*
     Return the indices of finite elements in this FECollection that dominate     all elements associated with the provided set of indices  [2.x.17]          You may find information about the domination behavior of finite elements     in their respective class documentation or in the implementation of their     inherited member function  [2.x.18]      Consider that a finite element may or may not dominate itself (e.g.     FE_Nothing elements).         For example, if a FECollection consists of     `{FE_Q(1),FE_Q(2),FE_Q(3),FE_Q(4)}` elements and we are looking for the     finite elements that dominate the middle elements of this     collection (i.e.,  [2.x.19]  is `{1,2}`), then the answer is `{FE_Q(1),FE_Q(2)`     and therefore this function will return their indices in the     FECollection, namely `{0,1}`.         The  [2.x.20]  parameter describes the codimension of the investigated     subspace and specifies that it is subject to this comparison. See      [2.x.21]  for more information.    
* [0.x.25]*
     Return the indices of finite elements in this FECollection that are     dominated by all elements associated with the provided set of indices  [2.x.22]          You may find information about the domination behavior of finite elements     in their respective class documentation or in the implementation of their     inherited member function  [2.x.23]      Consider that a finite element may or may not dominate itself (e.g.     FE_Nothing elements).         For example, if a FECollection consists of     `{FE_Q(1),FE_Q(2),FE_Q(3),FE_Q(4)}` elements and we are looking for the     finite elements that are dominated by the middle elements of this     collection (i.e.,  [2.x.24]  is `{1,2}`), then the answer is `{FE_Q(3),FE_Q(4)`     and therefore this function will return their indices in the     FECollection, namely `{2,3}`.         The  [2.x.25]  parameter describes the codimension of the investigated     subspace and specifies that it is subject to this comparison. See      [2.x.26]  for more information.    
* [0.x.26]*
     Return the index of a finite element from the provided set of indices  [2.x.27]      that dominates all other elements of this very set.         You may find information about the domination behavior of finite elements     in their respective class documentation or in the implementation of their     inherited member function  [2.x.28]      Consider that a finite element may or may not dominate itself (e.g.     FE_Nothing elements).         If this set consists of exactly one element, we consider it to be     the dominating one and return its corresponding index. Further, if the     function is not able to find a finite element at all, it returns      [2.x.29]          For example, if a FECollection consists of     `{FE_Q(1),FE_Q(2),FE_Q(3),FE_Q(4)}` elements and we are looking for the     dominating finite element among the middle elements of this     collection (i.e.,  [2.x.30]  is `{1,2}`), then the answer is FE_Q(2)     and therefore this function will return its index in the     FECollection, namely `1`.         It is of course possible that there is more than one element that     dominates all selected elements. For example, if the collection consists     of `{FE_Q(1),FE_Q(1),FE_Q(2),FE_Q(2)}` and `fes` covers all indices,     then one could return zero or one.  In that case, the function returns     either `0` or `1` since there is no tie-breaker between the two.         The  [2.x.31]  parameter describes the codimension of the investigated     subspace and specifies that it is subject to this comparison. See      [2.x.32]  for more information.    
* [0.x.27]*
     Return the index of a finite element from the provided set of indices  [2.x.33]      that is dominated by all other elements of this very set.         You may find information about the domination behavior of finite elements     in their respective class documentation or in the implementation of their     inherited member function  [2.x.34]      Consider that a finite element may or may not dominate itself (e.g.     FE_Nothing elements).         If this set consists of exactly one element, we consider it to be     the dominated one and return its corresponding index. Further, if the     function is not able to find a finite element at all, it returns      [2.x.35]          For example, if a FECollection consists of     `{FE_Q(1),FE_Q(2),FE_Q(3),FE_Q(4)}` elements and we are looking for the     dominated finite element among the middle elements of this     collection (i.e.,  [2.x.36]  is `{1,2}`), then the answer is FE_Q(3)     and therefore this function will return its index in the     FECollection, namely `2`.         It is of course possible that there is more than one element that is     dominated by all selected elements. For example, if the collection     consists of `{FE_Q(1),FE_Q(1),FE_Q(2),FE_Q(2)}` and `fes` covers all     indices, then one could return two or three.  In that case, the function     returns either `2` or `3` since there is no tie-breaker between the two.         The  [2.x.37]  parameter describes the codimension of the investigated     subspace and specifies that it is subject to this comparison. See      [2.x.38]  for more information.    
* [0.x.28]*
     Return the index of a finite element from the provided set of indices  [2.x.39]      that dominates all other elements of this very set. If we do not succeed,     we extend our search on the whole collection by picking the least     dominating one, which is the element that describes the largest finite     element space of which all of the finite elements of the     provided set  [2.x.40]  are part of.         You may find information about the domination behavior of finite elements     in their respective class documentation or in the implementation of their     inherited member function  [2.x.41]      Consider that a finite element may or may not dominate itself (e.g.     FE_Nothing elements).         If this set consists of exactly one element, we consider it to be     the dominated one and return its corresponding index. Further, if the     function is not able to find a finite element at all, it returns      [2.x.42]          The  [2.x.43]  parameter describes the codimension of the investigated     subspace and specifies that it is subject to this comparison. See      [2.x.44]  for more information.    
* [0.x.29]*
     Return the index of a finite element from the provided set of indices  [2.x.45]      that is dominated by all other elements of this very set. If we do not     succeed, we extend our search on the whole collection by picking the most     dominated one, which is the element that describes the smallest finite     element space which includes all finite elements of the provided set  [2.x.46]          You may find information about the domination behavior of finite elements     in their respective class documentation or in the implementation of their     inherited member function  [2.x.47]      Consider that a finite element may or may not dominate itself (e.g.     FE_Nothing elements).         If this set consists of exactly one element, we consider it to be     the dominating one and return its corresponding index. Further, if the     function is not able to find a finite element at all, it returns      [2.x.48]          The  [2.x.49]  parameter describes the codimension of the investigated     subspace and specifies that it is subject to this comparison. See      [2.x.50]  for more information.    
* [0.x.30]*
     Set functions determining the hierarchy of finite elements, i.e. a     function  [2.x.51]  that returns the index of the finite element following     the given one, and a function  [2.x.52]  returning the preceding one.         Both functions expect an  [2.x.53]  to be passed along with a     finite element index, on whose basis the new index will be found and     returned.        
*  [2.x.54]  Both passed and returned indices have to be valid within the index     range of this collection, i.e. within [0, size()).    
* [0.x.31]*
     Set the default hierarchy corresponding to the index of each finite     element in the collection.         This default hierarchy is established with functions      [2.x.55]  and  [2.x.56]     
* [0.x.32]*
     Returns a sequence of FE indices that corresponds to the registered     hierarchy in ascending order, i.e., FE indices are sorted from lowest to     highest level.         Multiple sequences of FE indices are possible with a single custom     hierarchy that can be registered with set_hierarchy(). This function     will return the sequence that contains the user-provided index      [2.x.57]  which could be located anywhere inside the sequence. The     default hierarchy set via set_default_hierarchy(), which corresponds to     FE indices in ascending order, consists of only one sequence.         This function can be used, for example, to verify that your provided     hierarchy covers all elements in the desired order.         Only one sequence of FE indices exists if the size of the returned     container equals the number of elements of this object, i.e.,      [2.x.58]     
* [0.x.33]*
     %Function returning the index of the finite element following the given      [2.x.59]  in hierarchy.         By default, the index succeeding  [2.x.60]  will be returned. If  [2.x.61]      already corresponds to the last index, the last index will be returned.     A custom hierarchy can be supplied via the member function     set_hierachy().    
* [0.x.34]*
     %Function returning the index of the finite element preceding the given      [2.x.62]  in hierarchy.         By default, the index preceding  [2.x.63]  will be returned. If  [2.x.64]      already corresponds to the first index, the first index will be returned.     A custom hierarchy can be supplied via the member function     set_hierachy().    
* [0.x.35]*
     Return a component mask with as many elements as this object has vector     components and of which exactly the one component is true that     corresponds to the given argument.        
*  [2.x.65]  This function is the equivalent of      [2.x.66]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.67]  scalar An object that represents a single scalar vector     component of this finite element.      [2.x.68]  A component mask that is false in all components except for the     one that corresponds to the argument.    
* [0.x.36]*
     Return a component mask with as many elements as this object has vector     components and of which exactly the  [2.x.69]  components are     true that correspond to the given argument.        
*  [2.x.70]  This function is the equivalent of      [2.x.71]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.72]  vector An object that represents dim vector components of this     finite element.      [2.x.73]  A component mask that is false in all components except for the     ones that corresponds to the argument.    
* [0.x.37]*
     Return a component mask with as many elements as this object has vector     components and of which exactly the  [2.x.74]      components are true that correspond to the given argument.        
*  [2.x.75]  This function is the equivalent of      [2.x.76]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.77]  sym_tensor An object that represents dim*(dim+1)/2 components of     this finite element that are jointly to be interpreted as forming a     symmetric tensor.      [2.x.78]  A component mask that is false in all components except for the     ones that corresponds to the argument.    
* [0.x.38]*
     Given a block mask (see      [2.x.79]  "this glossary entry"     ), produce a component mask (see      [2.x.80]  "this glossary entry"     ) that represents the components that correspond to the blocks selected     in the input argument. This is essentially a conversion operator from     BlockMask to ComponentMask.        
*  [2.x.81]  This function is the equivalent of      [2.x.82]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.83]  block_mask The mask that selects individual blocks of the finite     element      [2.x.84]  A mask that selects those components corresponding to the     selected blocks of the input argument.    
* [0.x.39]*
     Return a block mask with as many elements as this object has blocks and     of which exactly the one component is true that corresponds to the     given argument. See      [2.x.85]  "the glossary"     for more information.        
*  [2.x.86]  This function will only succeed if the scalar referenced by the     argument encompasses a complete block. In other words, if, for example,     you pass an extractor for the single  [2.x.87]  velocity and this object     represents an FE_RaviartThomas object, then the single scalar object     you selected is part of a larger block and consequently there is no     block mask that would represent it. The function will then produce an     exception.        
*  [2.x.88]  This function is the equivalent of      [2.x.89]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.90]  scalar An object that represents a single scalar vector     component of this finite element.      [2.x.91]  A component mask that is false in all components except for the     one that corresponds to the argument.    
* [0.x.40]*
     Return a component mask with as many elements as this object has vector     components and of which exactly the  [2.x.92]  components are     true that correspond to the given argument. See      [2.x.93]  "the glossary"     for more information.        
*  [2.x.94]  This function is the equivalent of      [2.x.95]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.        
*  [2.x.96]  The same caveat applies as to the version of the function above:     The extractor object passed as argument must be so that it corresponds     to full blocks and does not split blocks of this element.          [2.x.97]  vector An object that represents dim vector components of this     finite element.      [2.x.98]  A component mask that is false in all components except for the     ones that corresponds to the argument.    
* [0.x.41]*
     Return a component mask with as many elements as this object has vector     components and of which exactly the  [2.x.99]      components are true that correspond to the given argument. See      [2.x.100]  "the glossary"     for more information.        
*  [2.x.101]  The same caveat applies as to the version of the function above:     The extractor object passed as argument must be so that it corresponds     to full blocks and does not split blocks of this element.        
*  [2.x.102]  This function is the equivalent of      [2.x.103]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.104]  sym_tensor An object that represents dim*(dim+1)/2 components of     this finite element that are jointly to be interpreted as forming a     symmetric tensor.      [2.x.105]  A component mask that is false in all components except for the     ones that corresponds to the argument.    
* [0.x.42]*
     Given a component mask (see      [2.x.106]  "this glossary entry"     ), produce a block mask (see      [2.x.107]  "this glossary entry"     ) that represents the blocks that correspond to the components selected     in the input argument. This is essentially a conversion operator from     ComponentMask to BlockMask.        
*  [2.x.108]  This function will only succeed if the components referenced by     the argument encompasses complete blocks. In other words, if, for     example, you pass an component mask for the single  [2.x.109]  velocity and     this object represents an FE_RaviartThomas object, then the single     component you selected is part of a larger block and consequently there     is no block mask that would represent it. The function will then     produce an exception.        
*  [2.x.110]  This function is the equivalent of      [2.x.111]  with the same arguments. It verifies     that it gets the same result from every one of the elements that are     stored in this FECollection. If this is not the case, it throws an     exception.          [2.x.112]  component_mask The mask that selects individual components of     the finite element      [2.x.113]  A mask that selects those blocks corresponding to the selected     blocks of the input argument.    
* [0.x.43]*
      [2.x.114]  Exceptions      [2.x.115]     
* [0.x.44]*
     Exception        
*  [2.x.116]     
* [0.x.45]*
      [2.x.117]     
* [0.x.46]*
     %Function returning the index of the finite element following the given     one in hierarchy.    
* [0.x.47]*
     %Function returning the index of the finite element preceding the given     one in hierarchy.    
* [0.x.48]