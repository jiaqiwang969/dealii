[0.x.0]*


* 
*  [2.x.0]  global, multilevel and local computations.
*  Once a DoFHandler has been initialized with an FESystem, a data object of type BlockInfo (accessed by  [2.x.1]  ) is filled, which reflects the block structure of the degrees of freedom.
*  BlockInfo consists of several BlockIndices objects. The member global() reflects the block structure of the system on the active cell level, usually referred to as the global system. As soon as  [2.x.2]  has been called, the function  [2.x.3]  in global() will return the correct sizes of each block. After  [2.x.4]   [2.x.5]  will return the start index for each of the blocks.
*  When a DoFHandler with levels is used, the same structure is automatically generated for each level. The level blocks can be accessed through level().
*  Finally, there are local() BlockIndices, which describe the block structure on a single cell. This is used for instance by  [2.x.6]  The local indices are not filled automatically, since they change the behavior of the  [2.x.7]  classes relying on BlockInfo. They must be initialized by hand through initialize_local().
*  [1.x.0]
*  The most common usage for this object is initializing vectors as in the following code:
* 

* 
* [1.x.1]
* 
*  In this example, <tt>solution</tt> obtains the block structure needed to represent a finite element function on the DoFHandler. Similarly, all levels of <tt>mg_vector</tt> will have the block structure needed on that level.
*   [2.x.8]  Extend the functions local() and renumber() to allow for hp-capablilites.
* 

* 
*  [2.x.9] 

* 
* [0.x.1]*
  
*  [2.x.10]    DoFHandler.     By default, this function will attempt to initialize whatever is   possible. If active dofs have been assigned int the DoFHandler argument,   they BlockIndices for those will be generated. The same for level dofs.     This default behavior can be overridden by the two parameters, which can   switch off active dofs or level dofs.     This function will also clear the local() indices.  
* [0.x.2]*
  
*  [2.x.11]    between cell dofs and block cell dofs.  
* [0.x.3]*
   Access the BlockIndices structure of the global system.  
* [0.x.4]*
   Access BlockIndices for the local system on a cell.  
* [0.x.5]*
   Access the BlockIndices structure of a level in the multilevel hierarchy.  
* [0.x.6]*
   Return the index after local renumbering.     The input of this function is an index between zero and the number of   dofs per cell, numbered in local block ordering, that is first all   indices of the first system block, then all of the second block and so   forth. The function then outputs the index in the standard local   numbering of DoFAccessor.  
* [0.x.7]*
   The number of base elements.  
* [0.x.8]*
   Return the base element of this index.  
* [0.x.9]*
   Write a summary of the block structure to the stream.  
* [0.x.10]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.11]*
   Read or write the data of this object to or from a stream for the purpose   of serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.12]*
  
*  [2.x.12]   
* [0.x.13]*
  
*  [2.x.13]   
* [0.x.14]*
  
*  [2.x.14]   
* [0.x.15]*
   The base element associated with each block.  
* [0.x.16]*
   A vector containing the renumbering from the standard order of degrees of   freedom on a cell to a component wise ordering. Filled by initialize().  
* [0.x.17]