[0.x.0] MGTransferBase is defined in mg_base.h

* 
* [0.x.1]*
 Implementation of transfer between the global vectors and the multigrid levels for use in the derived class MGTransferPrebuilt and other classes.

* 
* [0.x.2]*
   Reset the object to the state it had right after the default constructor.  
* [0.x.3]*
   Transfer from a vector on the global grid to vectors defined on each of   the levels separately for the active degrees of freedom. In particular,   for a globally refined mesh only the finest level in  [2.x.0]  is filled as a   plain copy of  [2.x.1]  All the other level objects are left untouched.  
* [0.x.4]*
   Transfer from multi-level vector to normal vector.     Copies data from active portions of an MGVector into the respective   positions of a <tt>Vector<number></tt>. In order to keep the result   consistent, constrained degrees of freedom are set to zero.  
* [0.x.5]*
   Add a multi-level vector to a normal vector.     Works as the previous function, but probably not for continuous elements.  
* [0.x.6]*
   If this object operates on BlockVector objects, we need to describe how   the individual vector components are mapped to the blocks of a vector.   For example, for a Stokes system, we have dim+1 vector components for   velocity and pressure, but we may want to use block vectors with only two   blocks for all velocities in one block, and the pressure variables in the   other.     By default, if this function is not called, block vectors have as many   blocks as the finite element has vector components. However, this can be   changed by calling this function with an array that describes how vector   components are to be grouped into blocks. The meaning of the argument is   the same as the one given to the  [2.x.2]    function.  
* [0.x.7]*
   Memory used by this object.  
* [0.x.8]*
   Print the copy index fields for debugging purposes.  
* [0.x.9]*
   Internal function to  [2.x.3]  copy_indices*. Called by derived classes.  
* [0.x.10]*
   Sizes of the multi-level vectors.  
* [0.x.11]*
   Mapping for the copy_to_mg() and copy_from_mg() functions. Here only   index pairs locally owned     The data is organized as follows: one vector per level. Each element of   these vectors contains first the global index, then the level index.  
* [0.x.12]*
   Additional degrees of freedom for the copy_to_mg() function. These are   the ones where the global degree of freedom is locally owned and the   level degree of freedom is not.     Organization of the data is like for  [2.x.4]   
* [0.x.13]*
   Additional degrees of freedom for the copy_from_mg() function. These are   the ones where the level degree of freedom is locally owned and the   global degree of freedom is not.     Organization of the data is like for  [2.x.5]   
* [0.x.14]*
   This variable stores whether the copy operation from the global to the   level vector is actually a plain copy to the finest level. This means that   the grid has no adaptive refinement and the numbering on the finest   multigrid level is the same as in the global case.  
* [0.x.15]*
   The vector that stores what has been given to the   set_component_to_block_map() function.  
* [0.x.16]*
   The mg_constrained_dofs of the level systems.  
* [0.x.17]*
   This function is called to make sure that build() has been invoked.  
* [0.x.18]*
 Implementation of transfer between the global vectors and the multigrid levels for use in the derived class MGTransferPrebuilt and other classes. This class is a specialization for the case of  [2.x.6]  that requires a few different calling routines as compared to the %parallel vectors in the PETScWrappers and TrilinosWrappers namespaces.

* 
* [0.x.19]*
   Reset the object to the state it had right after the default constructor.  
* [0.x.20]*
   Transfer from a vector on the global grid to vectors defined on each of   the levels separately for the active degrees of freedom. In particular, for   a globally refined mesh only the finest level in  [2.x.7]  is filled as a   plain copy of  [2.x.8]  All the other level objects are left untouched.  
* [0.x.21]*
   Transfer from multi-level vector to normal vector.     Copies data from active portions of an MGVector into the respective   positions of a <tt>Vector<number></tt>. In order to keep the result   consistent, constrained degrees of freedom are set to zero.  
* [0.x.22]*
   Add a multi-level vector to a normal vector.     Works as the previous function, but probably not for continuous elements.  
* [0.x.23]*
   If this object operates on BlockVector objects, we need to describe how   the individual vector components are mapped to the blocks of a vector.   For example, for a Stokes system, we have dim+1 vector components for   velocity and pressure, but we may want to use block vectors with only two   blocks for all velocities in one block, and the pressure variables in the   other.     By default, if this function is not called, block vectors have as many   blocks as the finite element has vector components. However, this can be   changed by calling this function with an array that describes how vector   components are to be grouped into blocks. The meaning of the argument is   the same as the one given to the  [2.x.9]    function.  
* [0.x.24]*
   Memory used by this object.  
* [0.x.25]*
   Print the copy index fields for debugging purposes.  
* [0.x.26]*
   Internal function to perform transfer of residuals or solutions   basesd on the flag  [2.x.10]   
* [0.x.27]*
   Internal function to  [2.x.11]  copy_indices*. Called by derived classes.  
* [0.x.28]*
   Sizes of the multi-level vectors.  
* [0.x.29]*
   Mapping for the copy_to_mg() and copy_from_mg() functions. Here only   index pairs locally owned is stored.     The data is organized as follows: one table per level. This table has two   rows. The first row contains the global index, the second one the level   index.  
* [0.x.30]*
   Same as above, but used to transfer solution vectors.  
* [0.x.31]*
   Additional degrees of freedom for the copy_to_mg() function. These are   the ones where the global degree of freedom is locally owned and the   level degree of freedom is not.     Organization of the data is like for  [2.x.12]   
* [0.x.32]*
   Same as above, but used to transfer solution vectors.  
* [0.x.33]*
   Additional degrees of freedom for the copy_from_mg() function. These are   the ones where the level degree of freedom is locally owned and the   global degree of freedom is not.     Organization of the data is like for  [2.x.13]   
* [0.x.34]*
   Same as above, but used to transfer solution vectors.  
* [0.x.35]*
   This variable stores whether the copy operation from the global to the   level vector is actually a plain copy to the finest level. This means that   the grid has no adaptive refinement and the numbering on the finest   multigrid level is the same as in the global case.  
* [0.x.36]*
   This variable stores whether the copy operation from the global to the   level vector is actually a plain copy to the finest level except for a   renumbering within the finest level of the degrees of freedom. This means   that the grid has no adaptive refinement.  
* [0.x.37]*
   The vector that stores what has been given to the   set_component_to_block_map() function.  
* [0.x.38]*
   The mg_constrained_dofs of the level systems.  
* [0.x.39]*
   In the function copy_to_mg, we need to access ghosted entries of the   global vector for inserting into the level vectors. This vector is   populated with those entries.  
* [0.x.40]*
   Same as above but used when working with solution vectors.  
* [0.x.41]*
   In the function copy_from_mg, we access all level vectors with certain   ghost entries for inserting the result into a global vector.  
* [0.x.42]*
   Same as above but used when working with solution vectors.  
* [0.x.43]*
   This function is called to make sure that build() has been invoked.  
* [0.x.44]*
 Implementation of the MGTransferBase interface for which the transfer operations are prebuilt upon construction of the object of this class as matrices. This is the fast way, since it only needs to build the operation once by looping over all cells and storing the result in a matrix for each level, but requires additional memory.
*  See MGTransferBase to find out which of the transfer classes is best for your needs.

* 
* [0.x.45]*
   Constructor without constraint matrices. Use this constructor only with   discontinuous finite elements or with no local refinement.  
* [0.x.46]*
   Constructor with constraints. Equivalent to the default constructor   followed by initialize_constraints().  
* [0.x.47]*
   Destructor.  
* [0.x.48]*
   Initialize the constraints to be used in build().  
* [0.x.49]*
   Reset the object to the state it had right after the default constructor.  
* [0.x.50]*
   Actually build the information required for the transfer operations. Needs   to be called before prolongate() or restrict_and_add() can be used.  
* [0.x.51]*
   Prolongate a vector from level <tt>to_level-1</tt> to level   <tt>to_level</tt> using the embedding matrices of the underlying finite   element. The previous content of <tt>dst</tt> is overwritten.      [2.x.14]  src is a vector with as many elements as there are degrees of   freedom on the coarser level involved.      [2.x.15]  dst has as many elements as there are degrees of freedom on the   finer level.  
* [0.x.52]*
   Restrict a vector from level <tt>from_level</tt> to level   <tt>from_level-1</tt> using the transpose operation of the  [2.x.16]    method. If the region covered by cells on level <tt>from_level</tt> is   smaller than that of level <tt>from_level-1</tt> (local refinement), then   some degrees of freedom in <tt>dst</tt> are active and will not be   altered. For the other degrees of freedom, the result of the restriction   is added.      [2.x.17]  src is a vector with as many elements as there are degrees of   freedom on the finer level involved.      [2.x.18]  dst has as many elements as there are degrees of freedom on the   coarser level.  
* [0.x.53]*
   Finite element does not provide prolongation matrices.  
* [0.x.54]*
   You have to call build() before using this object.  
* [0.x.55]*
   Memory used by this object.  
* [0.x.56]*
   Print all the matrices for debugging purposes.  
* [0.x.57]*
   Sparsity patterns for transfer matrices.  
* [0.x.58]*
   The actual prolongation matrix.  column indices belong to the dof indices   of the mother cell, i.e. the coarse level.  while row indices belong to   the child cell, i.e. the fine level.  
* [0.x.59]*
   Degrees of freedom on the refinement edge excluding those on the   boundary.  
* [0.x.60]