[0.x.0] MGTransferBase is defined in mg_base.h

* 
* [0.x.1]*
 Implementation of matrix generation for MGTransferBlock.
*  This is the base class for MGTransfer objects for systems of equations where multigrid is applied only to one or some blocks, where a  [2.x.0]  comprises all degrees of freedom generated by one base element.

* 
* [0.x.2]*
   Constructor without constraint matrices. Use this constructor only with   discontinuous finite elements or with no local refinement.  
* [0.x.3]*
   Constructor with constraint matrices as well as mg_constrained_dofs.  
* [0.x.4]*
   Memory used by this object.  
* [0.x.5]*
   Actually build the prolongation matrices for each level.     This function is only called by derived classes. These can also set the   member variables #selected and others to restrict the transfer matrices   to certain blocks.  
* [0.x.6]*
   Flag of selected blocks.     The transfer operators only act on the blocks having a <tt>true</tt>   entry here.  
* [0.x.7]*
   Number of blocks of multigrid vector.  
* [0.x.8]*
   For each block of the whole block vector, list to what block of the   multigrid vector it is mapped. Since depending on #selected, there may be   fewer multilevel blocks than original blocks, some of the entries may be   illegal unsigned integers.  
* [0.x.9]*
   Sizes of the multi-level vectors.  
* [0.x.10]*
   Start index of each block.  
* [0.x.11]*
   Start index of each block on all levels.  
* [0.x.12]*
   Call build() function first.  
* [0.x.13]*
   The actual prolongation matrix. column indices belong to the dof indices   of the mother cell, i.e. the coarse level. while row indices belong to   the child cell, i.e. the fine level.  
* [0.x.14]*
   Mapping for the <tt>copy_to/from_mg</tt>-functions. The indices into this   vector are (in this order): global block number, level number. The data   is first the global index inside the block, then the level index inside   the block.  
* [0.x.15]*
   The mg_constrained_dofs of the level systems.  
* [0.x.16]*
 Implementation of the MGTransferBase interface for block matrices and block vectors.
*   [2.x.1]  This class is in an untested state. If you use it and you encounter problems, please contact Guido Kanschat.
*  In addition to the functionality of MGTransferPrebuilt, the operation may be restricted to certain blocks of the vector.
*  If the restricted mode is chosen, block vectors used in the transfer routines may only have as many blocks as there are  [2.x.2]  in the selected-field.
*  See MGTransferBase to find out which of the transfer classes is best for your needs.

* 
* [0.x.17]*
   Default constructor.  
* [0.x.18]*
   Destructor.  
* [0.x.19]*
   Initialize additional #factors and #memory if the restriction of the   blocks is to be weighted differently.  
* [0.x.20]*
   Build the prolongation matrices for each level.     This function is a front-end for the same function in   MGTransferBlockBase.  
* [0.x.21]*
   Transfer from a vector on the global grid to a multilevel vector for the   active degrees of freedom. In particular, for a globally refined mesh only   the finest level in  [2.x.3]  is filled  as a plain copy of  [2.x.4]  All the   other level objects are left untouched.     The action for discontinuous elements is as follows: on an active mesh   cell, the global vector entries are simply copied to the corresponding   entries of the level vector. Then, these values are restricted down to   the coarsest level.  
* [0.x.22]*
   Transfer from multi-level vector to normal vector.     Copies data from active portions of a multilevel vector into the   respective positions of a global vector.  
* [0.x.23]*
   Add a multi-level vector to a normal vector.     Works as the previous function, but probably not for continuous elements.  
* [0.x.24]*
   Optional multiplication factors for each block. Requires initialization   of #memory.  
* [0.x.25]*
   Memory pool required if additional multiplication using #factors is   desired.  
* [0.x.26]*
 Implementation of the MGTransferBase interface for block matrices and simple vectors. This class uses MGTransferBlockBase selecting a single block. The intergrid transfer operators are implemented for Vector objects, The copy functions between regular and multigrid vectors for Vector and BlockVector.
*  See MGTransferBase to find out which of the transfer classes is best for your needs.

* 
* [0.x.27]*
   Constructor without constraint matrices. Use this constructor only with   discontinuous finite elements or with no local refinement.  
* [0.x.28]*
   Constructor with constraint matrices as well as mg_constrained_dofs.  
* [0.x.29]*
   Destructor.  
* [0.x.30]*
   Actually build the prolongation matrices for grouped blocks.     This function is a front-end for the same function in   MGTransferBlockBase.      [2.x.5]  dof_handler The DoFHandler to use.    [2.x.6]  selected Number of the block for which the transfer matrices   should be built.  
* [0.x.31]*
   Change selected block. Handle with care!  
* [0.x.32]*
   Transfer a single block from a vector on the global grid to a multilevel   vector for the active degrees of freedom. In particular, for a globally   refined mesh only the finest level in  [2.x.7]  is filled as a plain copy of    [2.x.8]  All the other level objects are left untouched.  
* [0.x.33]*
   Transfer from multilevel vector to normal vector.     Copies data from active portions of an multilevel vector into the   respective positions of a Vector.  
* [0.x.34]*
   Add a multi-level vector to a normal vector.     Works as the previous function, but probably not for continuous elements.  
* [0.x.35]*
   Transfer a block from a vector on the global grid to multilevel vectors.   Only the values for the active degrees of freedom of the block selected are   transferred. In particular, for a globally refined mesh only the finest   level in  [2.x.9]  is filled as a plain copy of  [2.x.10]  All the other level   objects are left untouched.  
* [0.x.36]*
   Transfer from multilevel vector to normal vector.     Copies data from active portions of a multilevel vector into the   respective positions of a global BlockVector.  
* [0.x.37]*
   Add a multi-level vector to a normal vector.     Works as the previous function, but probably not for continuous elements.  
* [0.x.38]*
   Memory used by this object.  
* [0.x.39]*
   Implementation of the public function.  
* [0.x.40]*
   Implementation of the public function.  
* [0.x.41]*
   Actual implementation of copy_to_mg().  
* [0.x.42]*
   Selected block.  
* [0.x.43]