[0.x.0] This file contains some abstract base classes used by Multigrid.

* 
* [0.x.1]*
 Multilevel matrix base. This class sets up the interface needed by multilevel algorithms. It has no relation to the actual matrix type and takes the vector class as only template argument.
*  Usually, the derived class  [2.x.0]  which operates on an MGLevelObject of matrices, will be sufficient for applications.

* 
* [0.x.2]   Virtual destructor.  
* [0.x.3]*
   Matrix-vector-multiplication on a certain level.  
* [0.x.4]*
   Adding matrix-vector-multiplication on a certain level.  
* [0.x.5]*
   Transpose matrix-vector-multiplication on a certain level.  
* [0.x.6]*
   Adding transpose matrix-vector-multiplication on a certain level.  
* [0.x.7]*
   Return the minimal level for which matrices are stored.  
* [0.x.8]*
   Return the minimal level for which matrices are stored.  
* [0.x.9]*
 Base class for coarse grid solvers.  This defines the virtual parenthesis operator, being the interface used by multigrid methods. Any implementation will be done by derived classes.

* 
* [0.x.10]*
   Virtual destructor.  
* [0.x.11]*
   Solution operator.  
* [0.x.12]*
 Base class used to declare the operations needed by a concrete class implementing prolongation and restriction of vectors in the multigrid context. This class is abstract and has no implementation of these operations.
*  There are several derived classes, reflecting the fact that vector types and numbering of the fine-grid discretization and of the multi-level implementation are independent.
*  If you use multigrid for a single PDE or for your complete system of equations, you will use MGTransferPrebuilt together with Multigrid. The vector types used on the fine grid as well as for the multilevel operations may be Vector or BlockVector. In both cases, MGTransferPrebuilt will operate on all components of the solution.
* 

* 
*  [2.x.1]  For the following, it is important to realize the difference between a solution  [2.x.2]  "component" and a solution  [2.x.3]  "block". The distinction only applies if vector valued elements are used, but is quite important then. This is reflected in the fact that it is not possible right now to use transfer classes based on MGTransferComponentBase for genuine vector valued elements, but descendants of MGTransferBlockBase would have to be applied. In the following text, we will use the term  [2.x.4] block [2.x.5] , but remark that it might refer to components as well.
*   [2.x.6]  update the following documentation, since it does not reflect the latest changes in structure.
*  For mixed systems, it may be required to do multigrid only for a single component or for some components. The classes MGTransferSelect and MGTransferBlock handle these cases.
*  MGTransferSelect is used if you use multigrid (on Vector objects) for a single component, possibly grouped using <tt>mg_target_component</tt>.
*  The class MGTransferBlock handles the case where your multigrid method operates on BlockVector objects. These can contain all or a consecutive set of the blocks of the complete system. Since most smoothers cannot operate on block structures, it is not clear whether this case is really useful. Therefore, a tested implementation of this case will be supplied when needed.

* 
* [0.x.13]*
   Destructor. Does nothing here, but needs to be declared virtual anyway.  
* [0.x.14]*
   Prolongate a vector from level <tt>to_level-1</tt> to level   <tt>to_level</tt>. The previous content of <tt>dst</tt> is overwritten.      [2.x.7]  src is a vector with as many elements as there are degrees of   freedom on the coarser level involved.      [2.x.8]  dst has as many elements as there are degrees of freedom on the   finer level.  
* [0.x.15]*
   Prolongate a vector from level <tt>to_level-1</tt> to level   <tt>to_level</tt>, summing into the previous content of <tt>dst</tt>.      [2.x.9]  src is a vector with as many elements as there are degrees of   freedom on the coarser level involved.      [2.x.10]  dst has as many elements as there are degrees of freedom on the   finer level.  
* [0.x.16]*
   Restrict a vector from level <tt>from_level</tt> to level   <tt>from_level-1</tt> and add this restriction to <tt>dst</tt>. If the   region covered by cells on level <tt>from_level</tt> is smaller than that   of level <tt>from_level-1</tt> (local refinement), then some degrees of   freedom in <tt>dst</tt> are active and will not be altered. For the other   degrees of freedom, the result of the restriction is added.      [2.x.11]  src is a vector with as many elements as there are degrees of   freedom on the finer level      [2.x.12]  dst has as many elements as there are degrees of freedom on the   coarser level.  
* [0.x.17]*
 Base class for multigrid smoothers. Does nothing but defining the interface used by multigrid methods.
*  The smoother interface provides two methods, a smooth() method and an apply() method. The multigrid preconditioner interfaces distinguish between the two for efficiency reasons: Upon entry to the preconditioner operations, the vector  [2.x.13]  needs to be set to zero and smoothing starts by a simple application of the smoother on the  [2.x.14]  vector. This method is provided by the apply() method of this class. It is the same as first setting  [2.x.15]  to zero and then calling smooth(), but for many classes the separate apply() interface is more efficient because it can skip one matrix-vector product.
*  In the multigrid preconditioner interfaces, the apply() method is used for the pre-smoothing operation because the previous content in the solution vector needs to be overwritten for a new incoming residual. On the other hand, all subsequent operations need to smooth the content already present in the vector  [2.x.16]  given the right hand side, which is done by smooth().

* 
* [0.x.18]*
   Virtual destructor.  
* [0.x.19]*
   Release matrices.  
* [0.x.20]*
   Smoothing function that smooths the content in  [2.x.17]  given the right hand   side vector  [2.x.18]  This is the function used in multigrid methods.  
* [0.x.21]*
   As opposed to the smooth() function, this function applies the action of   the smoothing, overwriting the previous content in the vector u. This   function must be equivalent to the following code  
* [1.x.0]
*    but can usually be implemented more efficiently than the former. If a   particular smoother does not override the apply() method, the default   implementation as described here is used.     In the multigrid preconditioner interfaces, the apply() method is used for   the pre-smoothing operation because the previous content in the solution   vector needs to be overwritten for a new incoming residual. On the other   hand, all subsequent operations need to smooth the content already present   in the vector  [2.x.19]  given the right hand side, which is done by smooth().  
* [0.x.22]