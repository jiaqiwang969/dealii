[0.x.0]*
 A namespace solely for the purpose of defining the Domination enum as well as associated operators.

* 
* [0.x.1]*
   An enum that describes the outcome of comparing two elements for mutual   domination. If one element dominates another, then the restriction of the   space described by the dominated element to a face of the cell is   strictly larger than that of the dominating element. For example, in 2-d   Q(2) elements dominate Q(4) elements, because the traces of Q(4) elements   are quartic polynomials which is a space strictly larger than the   quadratic polynomials (the restriction of the Q(2) element). Similar   reasonings apply for vertices and cells as well. In general, Q(k) dominates   Q(k') if  [2.x.0] .     This enum is used in the  [2.x.1]  function   that is used in the context of hp-finite element methods when determining   what to do at faces where two different finite elements meet (see the    [2.x.2]  "hp-paper"   for a more detailed description of the following). In that case, the   degrees of freedom of one side need to be constrained to those on the   other side. The determination which side is which is based on the outcome   of a comparison for mutual domination: the dominated side is constrained   to the dominating one.     Note that there are situations where neither side dominates. The    [2.x.3]  "hp-paper"   lists two case, with the simpler one being that a  [2.x.4]  vector-   valued element (i.e. a  [2.x.5] ) meets   a  [2.x.6]  element: here, for each of the two vector-components,   we can define a domination relationship, but it is different for the two   components.     It is clear that the concept of domination doesn't matter for   discontinuous elements. However, discontinuous elements may be part of   vector-valued elements and may therefore be compared against each other   for domination. They should return    [2.x.7]  in that case. Likewise, when   comparing two identical finite elements, they should return this code;   the reason is that we can not decide which element will dominate at the   time we look at the first component of, for example, two  [2.x.8]    and  [2.x.9]  elements, and have to keep our options open until we   get to the second base element.     Finally, the code no_requirements exists for cases where elements impose   no continuity requirements. The case is primarily meant for FE_Nothing   which is an element that has no degrees of freedom in a subdomain. It   could also be used by discontinuous elements, for example.     More details on domination can be found in the    [2.x.10]  "hp-paper".  
* [0.x.2]*
     The current element dominates.    
* [0.x.3]*
     The other element dominates.    
* [0.x.4]*
     Neither element dominates.    
* [0.x.5]*
     Either element may dominate.    
* [0.x.6]*
     There are no requirements.    
* [0.x.7]*
   A generalization of the binary  [2.x.11]  operator to a comparison   relationship. The way this works is pretty much as when you would want to   define a comparison relationship for vectors: either all elements of the   first vector are smaller, equal, or larger than those of the second   vector, or some are and some are not.     This operator is pretty much the same: if both arguments are    [2.x.12]  or    [2.x.13] , then the returned value is that   value. On the other hand, if one of the values is    [2.x.14] , then the returned value is that   of the other argument. If either argument is    [2.x.15] , or if the two arguments are    [2.x.16]  and    [2.x.17] , then the returned value is    [2.x.18] .  
* [0.x.8]*
   Internal data structure for setting up FiniteElementData. It stores for   each object the (inclusive/exclusive) number of degrees of freedoms, as   well as, the index of its first degree of freedom within a cell and the   index of the first d-dimensional object within each face.     The information is saved as a vector of vectors. One can query the   inclusive number of dofs of the i-th d-dimensional object via:   dofs_per_object_inclusive[d][i].     As an example, the data is shown for a quadratic wedge. Which consists of   6 vertices, 9 lines, and 5 faces (two triangles and three quadrilaterals).  
* [1.x.0]
*      Since the above table looks as follows for:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - a triangle:  
* [1.x.1]
* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - quadrilateral:  
* [1.x.2]
*      The index of the first d-dimensional object within each face results as:  
* [1.x.3]
*     
* [0.x.9]*
     Exclusive number of degrees of freedom per object.    
* [0.x.10]*
     Inclusive number of degrees of freedom per object.    
* [0.x.11]*
     First index of an object.    
* [0.x.12]*
     First index of an object within a face.    
* [0.x.13]*
 A class that declares a number of scalar constant variables that describe basic properties of a finite element implementation. This includes, for example, the number of degrees of freedom per vertex, line, or cell; the number of vector components; etc.
*  The kind of information stored here is computed during initialization of a finite element object and is passed down to this class via its constructor. The data stored by this class is part of the public interface of the FiniteElement class (which derives from the current class). See there for more information.
* 

* 
*  [2.x.19] 

* 
* [0.x.14]*
   Enumerator for the different types of continuity a finite element may   have. Continuity is measured by the Sobolev space containing the   constructed finite element space and is also called this way.     Note that certain continuities may imply others. For instance, a function   in [1.x.4] is in [1.x.5] and   [1.x.6] as well.     If you are interested in continuity in the classical sense, then the   following relations hold:      [2.x.20]       [2.x.21]  [1.x.7] implies that the function is continuous over   cell boundaries.      [2.x.22]  [1.x.8] implies that the function is continuously   differentiable over cell boundaries.      [2.x.23]  [1.x.9] indicates that the element is discontinuous.   Since discontinuous elements have no topological couplings between grid   cells and code may actually depend on this property, [1.x.10]   conformity is handled in a special way in the sense that it is [1.x.11]   implied by any higher conformity.    [2.x.24]      In order to test if a finite element conforms to a certain space, use    [2.x.25]   
* [0.x.15]*
     Indicates incompatible continuities of a system.    
* [0.x.16]*
     Discontinuous elements. See above!    
* [0.x.17]*
     Conformity with the space [1.x.12] (continuous     tangential component of a vector field)    
* [0.x.18]*
     Conformity with the space [1.x.13] (continuous normal     component of a vector field)    
* [0.x.19]*
     Conformity with the space [1.x.14] (continuous)    
* [0.x.20]*
     Conformity with the space [1.x.15] (continuously     differentiable)    
* [0.x.21]*
   The dimension of the finite element, which is the template parameter   <tt>dim</tt>  
* [0.x.22]*
   Reference cell type.  
* [0.x.23]*
   Number of unique quads. If all quads have the same type, the value is   one; else it equals the number of quads.  
* [0.x.24]*
   Number of unique faces. If all faces have the same type, the value is   one; else it equals the number of faces.  
* [0.x.25]*
   Number of degrees of freedom on a vertex.  
* [0.x.26]*
   Number of degrees of freedom in a line; not including the degrees of   freedom on the vertices of the line.  
* [0.x.27]*
   Number of degrees of freedom on quads. If all quads have the same   number of degrees freedoms the values equal dofs_per_quad.  
* [0.x.28]*
   Number of degrees of freedom in a quadrilateral; not including the   degrees of freedom on the lines and vertices of the quadrilateral.  
* [0.x.29]*
   Maximum number of degrees of freedom on any quad.  
* [0.x.30]*
   Number of degrees of freedom in a hexahedron; not including the degrees   of freedom on the quadrilaterals, lines and vertices of the hexahedron.  
* [0.x.31]*
   First index of dof on a line.  
* [0.x.32]*
   First index of a quad. If all quads have the same number of degrees of   freedom, only the first index of the first quad is stored since the   indices of the others can be simply recomputed.  
* [0.x.33]*
   First index of dof on a quad.  
* [0.x.34]*
   First index of dof on a hexahedron.  
* [0.x.35]*
   Index of the first line of all faces.  
* [0.x.36]*
   First index of dof on a line for face data.  
* [0.x.37]*
   Index of the first quad of all faces.  
* [0.x.38]*
   First index of dof on a quad for face data.  
* [0.x.39]*
   Number of degrees of freedom on faces. If all faces have the same   number of degrees freedoms the values equal dofs_per_quad.  
* [0.x.40]*
   Number of degrees of freedom on a face. This is the accumulated number of   degrees of freedom on all the objects of dimension up to <tt>dim-1</tt>   constituting a face.  
* [0.x.41]*
   Maximum number of degrees of freedom on any face.  
* [0.x.42]*
   Total number of degrees of freedom on a cell. This is the accumulated   number of degrees of freedom on all the objects of dimension up to   <tt>dim</tt> constituting a cell.  
* [0.x.43]*
   Number of vector components of this finite element, and dimension of the   image space. For vector-valued finite elements (i.e. when this number is   greater than one), the number of vector components is in many cases equal   to the number of base elements glued together with the help of the   FESystem class. However, for elements like the Nedelec element, the   number is greater than one even though we only have one base element.  
* [0.x.44]*
   Maximal polynomial degree of a shape function in a single coordinate   direction.  
* [0.x.45]*
   Indicate the space this element conforms to.  
* [0.x.46]*
   Storage for an object describing the sizes of each block of a compound   element. For an element which is not an FESystem, this contains only a   single block with length #dofs_per_cell.  
* [0.x.47]*
   Constructor, computing all necessary values from the distribution of dofs   to geometrical objects.      [2.x.26]  dofs_per_object A vector that describes the number of degrees   of freedom on geometrical objects for each dimension. This vector must   have size dim+1, and entry 0 describes the number of degrees of freedom   per vertex, entry 1 the number of degrees of freedom per line, etc. As an   example, for the common  [2.x.27]  Lagrange element in 2d, this vector would   have elements  [2.x.28] . On the other hand, for a  [2.x.29]    element in 3d, it would have entries  [2.x.30] .      [2.x.31]  n_components Number of vector components of the element.      [2.x.32]  degree The maximal polynomial degree of any of the shape   functions of this element in any variable on the reference element. For   example, for the  [2.x.33]  element (in any space dimension), this would be   one; this is so despite the fact that the element has a shape function of   the form  [2.x.34]  (in 2d) and  [2.x.35]  (in 3d), which,   although quadratic and cubic polynomials, are still only linear in each   reference variable separately. The information provided by this variable   is typically used in determining what an appropriate quadrature formula   is.      [2.x.36]  conformity A variable describing which Sobolev space this   element conforms to. For example, the  [2.x.37]  Lagrange elements   (implemented by the FE_Q class) are  [2.x.38]  conforming, whereas the   Raviart-Thomas element (implemented by the FE_RaviartThomas class) is    [2.x.39]  conforming; finally, completely discontinuous elements   (implemented by the FE_DGQ class) are only  [2.x.40]  conforming.      [2.x.41]  block_indices An argument that describes how the base elements   of a finite element are grouped. The default value constructs a single   block that consists of all  [2.x.42]  degrees of freedom. This is   appropriate for all "atomic" elements (including non-primitive ones) and   these can therefore omit this argument. On the other hand, composed   elements such as FESystem will want to pass a different value here.  
* [0.x.48]*
   The same as above but with the difference that also the type of the   underlying geometric entity can be specified.  
* [0.x.49]*
   The same as above but instead of passing a vector containing the degrees   of freedoms per object a struct of type GenericDoFsPerObject. This allows   that 2D objects might have different number of degrees of freedoms, which   is particular useful for cells with triangles and quadrilaterals as faces.  
* [0.x.50]*
   Return the kind of reference cell this element is defined on: For   example, whether the element's reference cell is a square or   triangle, or similar choices in higher dimensions.  
* [0.x.51]*
   Number of unique quads. If all quads have the same type, the value is   one; else it equals the number of quads.  
* [0.x.52]*
   Number of unique faces. If all faces have the same type, the value is   one; else it equals the number of faces.  
* [0.x.53]*
   Number of dofs per vertex.  
* [0.x.54]*
   Number of dofs per line. Not including dofs on lower dimensional objects.  
* [0.x.55]*
   Number of dofs per quad. Not including dofs on lower dimensional objects.  
* [0.x.56]*
   Maximum number of dofs per quad. Not including dofs on lower dimensional   objects.  
* [0.x.57]*
   Number of dofs per hex. Not including dofs on lower dimensional objects.  
* [0.x.58]*
   Number of dofs per face, accumulating degrees of freedom of all lower   dimensional objects.  
* [0.x.59]*
   Maximum number of dofs per face, accumulating degrees of freedom of all   lower dimensional objects.  
* [0.x.60]*
   Number of dofs per cell, accumulating degrees of freedom of all lower   dimensional objects.  
* [0.x.61]*
   Return the number of degrees per structdim-dimensional object. For   structdim==0, the function therefore returns dofs_per_vertex, for   structdim==1 dofs_per_line, etc. This function is mostly used to allow   some template trickery for functions that should work on all sorts of   objects without wanting to use the different names (vertex, line, ...)   associated with these objects.  
* [0.x.62]*
   Number of components. See    [2.x.43]  "the glossary"   for more information.  
* [0.x.63]*
   Number of blocks. See    [2.x.44]  "the glossary"   for more information.  
* [0.x.64]*
   Detailed information on block sizes.  
* [0.x.65]*
   Maximal polynomial degree of a shape function in a single coordinate   direction.     This function can be used to determine the optimal quadrature rule.  
* [0.x.66]*
   Test whether a finite element space conforms to a certain Sobolev space.    
*  [2.x.45]  This function will return a true value even if the finite element   space has higher regularity than asked for.  
* [0.x.67]*
   Comparison operator.  
* [0.x.68]*
   Return first index of dof on a line.  
* [0.x.69]*
   Return first index of dof on a quad.  
* [0.x.70]*
   Return first index of dof on a hexahedron.  
* [0.x.71]*
   Return first index of dof on a line for face data.  
* [0.x.72]*
   Return first index of dof on a quad for face data.  
* [0.x.73]*
   Utility function to convert "dofs per object" information   of a  [2.x.46]  dimensional reference cell  [2.x.47]   
* [0.x.74]