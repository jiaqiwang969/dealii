[0.x.0]*
 This class represents a mask that can be used to select individual vector blocks of a finite element (see also  [2.x.0]  "this glossary entry"). It will typically have as many elements as the finite element has blocks, and one can use  [2.x.1]  to query whether a particular block has been selected.
*  The semantics of this class are the same as the related ComponentMask class, i.e., a default constructed mask represents all possible blocks. See there for more information about these semantics.
*  Objects of this kind are used in many places where one wants to restrict operations to a certain subset of blocks, e.g. in  [2.x.2]  These objects can either be created by hand, or, simpler, by asking the finite element to generate a block mask from certain selected blocks using code such as this where we create a mask that only denotes the velocity block of a Stokes element (see  [2.x.3] ):

* 
* [1.x.0]
*  Note that by wrapping the velocity elements into a single FESystem object we make sure that the overall element has only 2 blocks. The result is a block mask that, in both 2d and 3d, would have values <code>[false, true]</code>. (Compare this to the corresponding component mask discussed in the ComponentMask documentation.) Similarly, using

* 
* [1.x.1]
*  would result in a mask  [2.x.4]  in both 2d and 3d.
* 

* 
*  [2.x.5] 

* 
*  [2.x.6] 

* 
* [0.x.1]*
   Initialize a block mask. The default is that a block mask represents a   set of blocks that are [1.x.2] selected, i.e., calling this   constructor results in a block mask that always returns  [2.x.7]    whenever asked whether a block is selected.  
* [0.x.2]*
   Initialize an object of this type with a set of selected blocks specified   by the argument.      [2.x.8]  block_mask A vector of  [2.x.9]  entries that   determine which blocks of a finite element are selected. If the length of   the given vector is zero, then this interpreted as the case where   [1.x.3] block is selected.  
* [0.x.3]*
   Initialize the block mask with a number of elements that are either all   true or false.      [2.x.10]  n_blocks The number of elements of this mask    [2.x.11]  initializer The value each of these elements is supposed to have:   either true or false.  
* [0.x.4]*
   If this block mask has been initialized with a mask of size greater than   zero, then return the size of the mask represented by this object. On the   other hand, if this mask has been initialized as an empty object that   represents a mask that is true for every element (i.e., if this object   would return true when calling represents_the_all_selected_mask()) then   return zero since no definite size is known.  
* [0.x.5]*
   Return whether a particular block is selected by this mask. If this mask   represents the case of an object that selects [1.x.4] (e.g. if   it is created using the default constructor or is converted from an empty   vector of type bool) then this function returns true regardless of the   given argument.      [2.x.12]  block_index The index for which the function should return whether   the block is selected. If this object represents a mask in which all   blocks are always selected then any index is allowed here. Otherwise, the   given index needs to be between zero and the number of blocks that this   mask represents.  
* [0.x.6]*
   Return whether this block mask represents a mask with exactly    [2.x.13]  blocks. This is true if either it was initialized with a   vector with exactly  [2.x.14]  (in   this case,  [2.x.15]  must equal the result of size()) or if it was initialized   with an empty vector (or using the default constructor) in which case it   can represent a mask with an arbitrary number of blocks and will always   say that a block is selected.  
* [0.x.7]*
   Return the number of blocks that are selected by this mask.     Since empty block masks represent a block mask that would return    [2.x.16]  for every block, this function may not know the true   size of the block mask and it therefore requires an argument that denotes   the overall number of blocks.     If the object has been initialized with a non-empty mask (i.e., if the   size() function returns something greater than zero, or equivalently if   represents_the_all_selected_mask() returns false) then the argument can   be omitted and the result of size() is taken.  
* [0.x.8]*
   Return the index of the first selected block. The argument is there for   the same reason it exists with the n_selected_blocks() function.     The function throws an exception if no block is selected at all.  
* [0.x.9]*
   Return true if this mask represents a default constructed mask that   corresponds to one in which all blocks are selected. If true, then the   size() function will return zero.  
* [0.x.10]*
   Return a block mask that contains the union of the blocks selected by the   current object and the one passed as an argument.  
* [0.x.11]*
   Return a block mask that has only those elements set that are set both in   the current object as well as the one passed as an argument.  
* [0.x.12]*
   Return whether this object and the argument are identical.  
* [0.x.13]*
   Return whether this object and the argument are not identical.  
* [0.x.14]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.15]*
   The actual block mask.  
* [0.x.16]*
 Write a block mask to an output stream. If the block mask represents one where all blocks are selected without specifying a particular size of the mask, then it writes the string  [2.x.17]  to the stream. Otherwise, it prints the block mask in a form like  [2.x.18] .
*   [2.x.19]  out The stream to write to.  [2.x.20]  mask The mask to write.  [2.x.21]  A reference to the first argument.

* 
* [0.x.17]