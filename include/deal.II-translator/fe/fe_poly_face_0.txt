[0.x.0]*
  [2.x.0]  This class is not sufficiently tested yet!
*  This class gives a unified framework for the implementation of FiniteElement classes only located on faces of the mesh. They are based on polynomial spaces like the TensorProductPolynomials or a PolynomialSpace classes.
*  Every class that implements the following functions can be used as template parameter PolynomialType.
* 

* 
* [1.x.0]
*  Example classes are TensorProductPolynomials, PolynomialSpace or PolynomialsP.
*  This class is not a fully implemented FiniteElement class. Instead there are several pure virtual functions declared in the FiniteElement class which cannot be implemented by this class but are left for implementation in derived classes.

* 
* [0.x.1]*
   Constructor.  
* [0.x.2]*
   Return the polynomial degree of this finite element, i.e. the value   passed to the constructor.  
* [0.x.3]   NOTE: The following functions have their definitions inlined into the class   declaration because we otherwise run into a compiler error with MS Visual   Studio.  
* [0.x.4]*
   Fields of cell-independent data.     For information about the general purpose of this class, see the   documentation of the base class.  
* [0.x.5]*
     Array with shape function values in quadrature points on one face.     There is one row for each shape function, containing values for each     quadrature point.         In this array, we store the values of the shape function in the     quadrature points on one face of the unit cell. Since these values do     not change under transformation to the real cell, we only need to copy     them over when visiting a concrete cell.         In particular, we can simply copy the same set of values to each of the     faces.    
* [0.x.6]*
   The polynomial space. Its type is given by the template parameter   PolynomialType.  
* [0.x.7]