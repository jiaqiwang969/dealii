[0.x.0]*
 This class provides a mapping that adds to the location of each cell a  [2.x.0] -linear displacement field. (The generalization to higher order polynomials is provided in the MappingQEulerian class.) Each cell is thus shifted in space by values given to the mapping through a finite element field.
*  [1.x.0]
*  The constructor of this class takes two arguments: a reference to the vector that defines the mapping from the reference configuration to the current configuration and a reference to the DoFHandler. The vector should then represent a (flattened out version of a) vector valued field defined at nodes defined by the DoFHandler, where the number of components of the vector field equals the number of space dimensions. Thus, the DoFHandler shall operate on a finite element that has as many components as space dimensions. As an additional requirement, we impose that it have as many degree of freedom per vertex as there are space dimensions; since this object only evaluates the finite element field at the vertices, the values of all other degrees of freedom (not associated to vertices) are ignored. These requirements are met if the finite element which the given DoFHandler operates on is constructed as a system element (FESystem) from  [2.x.1]  continuous FE_Q() objects.
*  In many cases, the shift vector will also be the solution vector of the problem under investigation. If this is not the case (i.e. the number of components of the solution variable is not equal to the space dimension, e.g. for scalar problems in <tt>dim>1</tt> where the Eulerian coordinates only give a background field) or for coupled problems where more variables are computed than just the flow field), then a different DoFHandler has to be set up on the given triangulation, and the shift vector has then to be associated to it.
*  An example is shown below:

* 
* [1.x.1]
* 
*  Note that since the vector of shift values and the dof handler are only associated to this object at construction time, you have to make sure that whenever you use this object, the given objects still represent valid data.
*  To enable the use of the MappingQ1Eulerian class also in the context of parallel codes using the PETSc or Trilinos wrapper classes, the type of the vector can be specified as template parameter <tt>VectorType</tt>.
*  For more information about the <tt>spacedim</tt> template parameter check the documentation of FiniteElement or the one of Triangulation.

* 
* [0.x.1]*
   Constructor.      [2.x.2]  euler_dof_handler A DoFHandler object that defines a finite   element space. This space needs to have exactly dim components   and these will be considered displacements   relative to the original positions of the cells of the triangulation.   This DoFHandler must be based on a  [2.x.3]    finite element.    [2.x.4]  euler_vector A finite element function in the space defined by   the first argument. The dim components of this function will be   interpreted as the displacement we use in defining the mapping, relative   to the location of cells of the underlying triangulation.  
* [0.x.2]*
   Return the mapped vertices of the cell. For the current class, this   function does not use the support points from the geometry of the current   cell but instead evaluates an externally given displacement field in   addition to the geometry of the cell.  
* [0.x.3]*
   Return a pointer to a copy of the present object. The caller of this copy   then assumes ownership of it.  
* [0.x.4]*
   Always returns  [2.x.5]  because MappingQ1Eulerian does not in general   preserve vertex locations (unless the translation vector happens to   provide for zero displacements at vertex locations).  
* [0.x.5]*
   Exception.  
* [0.x.6]*
   Compute mapping-related information for a cell. See the documentation of    [2.x.6]  for a discussion of purpose, arguments, and   return value of this function.     This function overrides the function in the base class since we cannot   use any cell similarity for this class.  
* [0.x.7]*
   Compute the support points of the mapping. For the current class, these   are the vertices, as obtained by calling  [2.x.7]  See the   documentation of  [2.x.8]  for   more information.  
* [0.x.8]*
   Reference to the vector of shifts.  
* [0.x.9]*
   Pointer to the DoFHandler to which the mapping vector is associated.  
* [0.x.10]