[0.x.0]*
 Definition of a finite element space with zero degrees of freedom and that, consequently, can only represent a single function: the zero function.
*  This class is useful (in the context of an hp-method) to represent empty cells in the triangulation on which no degrees of freedom should be allocated, or to describe a field that is extended by zero to a part of the domain where we don't need it. Thus a triangulation may be divided into two regions: an active region where normal elements are used, and an inactive region where FE_Nothing elements are used. The DoFHandler will therefore assign no degrees of freedom to the FE_Nothing cells, and this subregion is therefore implicitly deleted from the computation.  [2.x.0]  and  [2.x.1]  show use cases for this element. An interesting application for this element is also presented in the paper  [2.x.2] .
* 

*  [1.x.0]
*  Finite elements are often best interpreted as forming a [function space](https://en.wikipedia.org/wiki/Function_space), i.e., a set of functions that form a [vector space](https://en.wikipedia.org/wiki/Vector_space). One can indeed interpret FE_Nothing in this light: It corresponds to the function space  [2.x.3] , i.e., the set of functions that are zero everywhere. (The constructor can take an argument that, if greater than one, extends the space to one of vector-valued functions with more than one component, with all components equal to zero everywhere.) Indeed, this is a vector space since every linear combination of elements in the vector space is also an element in the vector space, as is every multiple of the single element zero. It is obvious that the function space has no degrees of freedom, thus the name of the class.
* 

*  [1.x.1]
*  In situations such as those of  [2.x.4] , one uses FE_Nothing on cells where one is not interested in a solution variable. For example, in fluid structure interaction problems, the fluid velocity is only defined on cells inside the fluid part of the domain. One then uses FE_Nothing on cells in the solid part of the domain to describe the finite element space for the velocity. In other words, the velocity lives everywhere conceptually, but it is identically zero in those parts of the domain where it is not of interest and doesn't use up any degrees of freedom there.
*  The question is what happens at the interface between areas where one is interested in the solution (and uses a "normal" finite element) and where one is not interested (and uses FE_Nothing): Should the solution at that interface be zero
* 
*  -  i.e., we consider a "continuous" finite element field that happens to be zero in that area where FE_Nothing is used
* 
*  -  or is there no requirement for continuity at the interface. In the deal.II language, this is encoded by what the function  [2.x.5]  returns: If the FE_Nothing "dominates", then the solution must be zero at the interface; if it does not, then there is no requirement and one can think of FE_Nothing as a function space that is in general discontinuous (i.e., there is no requirement for any kind of continuity at cell interfaces) but on every cell equal to zero.
*  A constructor argument denotes whether the element should be considered dominating or not. The default is for it not to dominate, i.e., FE_Nothing is treated as a discontinuous element.
* 

*  [1.x.2]
*  Note that some care must be taken that the resulting mesh topology continues to make sense when FE_Nothing elements are introduced. This is particularly true when dealing with hanging node constraints, because the library makes some basic assumptions about the nature of those constraints. The following geometries are acceptable:

* 
* [1.x.3]
* 

* 
* [1.x.4]
*  Here, 0 denotes an FE_Nothing cell, and 1 denotes some other element type. The library has no difficulty computing the necessary hanging node constraints in these cases (i.e. no constraint). However, the following geometry is NOT acceptable (at least in the current implementation):

* 
* [1.x.5]
*  The distinction lies in the mixed nature of the child faces, a case we have not implemented as of yet.

* 
* [0.x.1]*
   Constructor.      [2.x.6]  type Specifies the reference-cell type.      [2.x.7]  n_components Denotes the number of   vector components to give this finite element. The default is one.      [2.x.8]  dominate Decides whether FE_Nothing will dominate   any other FE in compare_for_domination() (with the default being `false`).   Therefore at interfaces where, for example, a  [2.x.9]  meets an FE_Nothing, we   will force the traces of the two functions to be the same. Because the   FE_Nothing encodes a space that is zero everywhere, this means that the    [2.x.10]  field will be forced to become zero at this interface. See also the   discussion in the general documentation of this class.  
* [0.x.2]*
   Same as above but for a hypercube reference-cell type.  
* [0.x.3]*
   Return a string that uniquely identifies a finite element. The name is   <tt>FE_Nothing [2.x.11]  n_components, dominating)</tt> where   <tt>dim</tt>, <tt>spacedim</tt>, <tt>type</tt>, and <tt>n_components</tt>   are all specified by the constructor or type signature with the following   exceptions:    [2.x.12]       [2.x.13] If <tt>spacedim == dim</tt> then that field is not printed. [2.x.14]       [2.x.15] If <tt>type</tt> is a hypercube then that field is not printed. [2.x.16]       [2.x.17] If <tt>n_components == 1</tt> then that field is not printed. [2.x.18]       [2.x.19] If <tt>dominate == false</tt> then that field is not printed. [2.x.20]     [2.x.21]   
* [0.x.4]*
   Return the value of the  [2.x.22]  shape function at the point  [2.x.23]   [2.x.24]  is   a point on the reference element. Because the current element has no   degrees of freedom, this function should obviously not be called in   practice.  All this function really does, therefore, is trigger an   exception.  
* [0.x.5]*
   Prepare internal data structures and fill in values independent of the   cell. Returns a pointer to an object of which the caller of this function   then has to assume ownership (which includes destruction when it is no   more needed).     In the current case, this function just returns a default pointer, since   no meaningful data exists for this element.  
* [0.x.6]*
    [2.x.25]   [2.x.26]      In the current case, this element is assumed to dominate if the second   argument in the constructor  [2.x.27]  is true. When this argument is   false and  [2.x.28]  is also of type FE_Nothing(), either element can   dominate. Otherwise there are no_requirements.     See also the discussion in the general documentation of this class.  
* [0.x.7]*
   Return the matrix interpolating from the given finite element to the   present one. Since the current finite element has no degrees of freedom,   the interpolation matrix is necessarily empty.  
* [0.x.8]*
   Return the matrix interpolating from a face of one element to the face   of the neighboring element. The size of the matrix is then   <tt>source.#dofs_per_face</tt> times <tt>this->#dofs_per_face</tt>.     Since the current finite element has no degrees of freedom, the   interpolation matrix is necessarily empty.  
* [0.x.9]*
   Return the matrix interpolating from a face of one element to the   subface of the neighboring element. The size of the matrix is then   <tt>source.#dofs_per_face</tt> times <tt>this->#dofs_per_face</tt>.     Since the current finite element has no degrees of freedom, the   interpolation matrix is necessarily empty.  
* [0.x.10]*
    [2.x.29]  true if the FE dominates any other.  
* [0.x.11]*
   If true, this element will dominate any other apart from itself in   compare_for_domination(). This is because a space that only contains the   zero function is definitely smaller (and consequently dominant) when   compared to any other finite element space.  
* [0.x.12]