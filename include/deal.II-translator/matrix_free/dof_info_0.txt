[0.x.0]*
     A struct that takes entries describing a constraint and puts them into     a sorted list where duplicates are filtered out    
* [0.x.1]*
       This function inserts some constrained entries to the collection of       all values. It stores the (reordered) numbering of the dofs       (according to the ordering that matches with the function) in       new_indices, and returns the storage position the double array for       access later on.      
* [0.x.2]*
     The class that stores the indices of the degrees of freedom for all the     cells. Essentially, this is a smart number cache in the style of a     DoFHandler that also embeds the description of constraints directly on     the cell level without the need to refer to the external     AffineConstraints object.         This class only stores index relations. The weights for hanging node     constraints are stored in a different field. This is because a     different field allows for the same compressed weight data on different     DoFHandlers for vector-valued problems. There, the indices might be     constrained differently on different components (e.g. Dirichlet     conditions only on selected components), whereas the weights from     hanging nodes are the same and need to be stored only once. The     combination will be handled in the MatrixFree class.        
*  [2.x.0]     
* [0.x.3]*
       This value is used to define subranges in the vectors which we can       zero inside the  [2.x.1]  call. The goal is to only clear a       part of the vector at a time to keep the values that are zeroed in       caches, saving one global vector access for the case where this is       applied rather than `vector = 0.;`.             We set the granularity to 64
* 
*  - that is a number sufficiently large       to minimize loop peel overhead within the work (and compatible with       vectorization lengths of up to 16) and small enough to not waste on       the size of the individual chunks.      
* [0.x.4]*
       Default empty constructor.      
* [0.x.5]*
       Copy constructor.      
* [0.x.6]*
       Move constructor.      
* [0.x.7]*
       Destructor.      
* [0.x.8]*
       Copy assignment operator.      
* [0.x.9]*
       Move assignment operator.      
* [0.x.10]*
       Clear all data fields in this class.      
* [0.x.11]*
       Return the FE index for a given finite element degree. If not in hp-       mode, this function always returns index 0. If an index is not found       in hp-mode, it returns  [2.x.2]       
* [0.x.12]*
       Populate the vector  [2.x.3]  with locally owned degrees of freedom       stored on the cell block  [2.x.4]        If  [2.x.5]  is `true`, then the returned vector will contain indices       required to resolve constraints.             The image below illustrates the output of this function for cell blocks       zero and one with zero Dirichlet boundary conditions at the bottom of       the domain. Note that due to the presence of constraints, the DoFs       returned by this function for the case `with_constraints = true` are       not a simple union       of per cell DoFs on the cell block  [2.x.6]               [2.x.7]             
*  [2.x.8]  The returned indices may contain duplicates. The unique set can be       obtain using  [2.x.9]  followed by  [2.x.10]  and        [2.x.11]       
* [0.x.13]*
       This internal method takes the local indices on a cell and fills them       into this class. It resolves the constraints and distributes the       results. Ghost indices, i.e., indices that are located on another       processor, get a temporary number by this function, and will later be       assigned the correct index after all the ghost indices have been       collected by the call to  [2.x.12]       
* [0.x.14]*
       This method assigns the correct indices to ghost indices from the       temporary numbering employed by the  [2.x.13]  function. The       numbers are localized with respect to the MPI process, and ghosts       start at the end of the locally owned range. This way, we get direct       access to all vector entries.      
* [0.x.15]*
       This method reorders the way cells are gone through based on a given       renumbering of the cells. It also takes  [2.x.14]  cells       together and interprets them as one cell only, as is needed for       vectorization.      
* [0.x.16]*
       Finds possible compression for the cell indices that we can apply for       increased efficiency. Run at the end of reorder_cells.      
* [0.x.17]*
       Finds possible compression for the face indices that we can apply for       increased efficiency. Run at the end of reorder_cells.      
* [0.x.18]*
       This function computes the connectivity of the currently stored       indices in terms of connections between the individual cells and       fills the structure into a sparsity pattern.      
* [0.x.19]*
       In case face integrals are enabled, find out whether certain loops       over the unknowns only access a subset of all the ghost dofs we keep       in the main partitioner.      
* [0.x.20]*
       Given  [2.x.15]  containing the local index of       cells of macro faces (inner/outer) and macro faces compute       dof_indices_contiguous_sm.      
* [0.x.21]*
       Compute a renumbering of the degrees of freedom to improve the data       access patterns for this class that can be utilized by the categories       in the IndexStorageVariants enum. For example, the index ordering can       be improved for typical DG elements by interleaving the degrees of       freedom from batches of cells, which avoids the explicit data       transposition in  [2.x.16]  Currently, these       more advanced features are not implemented, so there is only limited       value of this function.      
* [0.x.22]*
       Fills the array that defines how to zero selected ranges in the result       vector within the cell loop, filling the two member variables  [2.x.17]        vector_zero_range_list_index and  [2.x.18]              The intent of this pattern is to zero the vector entries in close       temporal proximity to the first access and thus keeping the vector       entries in cache.      
* [0.x.23]*
       Return the memory consumption in bytes of this class.      
* [0.x.24]*
       Prints a detailed summary of memory consumption in the different       structures of this class to the given output stream.      
* [0.x.25]*
       Prints a representation of the indices in the class to the given       output stream.      
* [0.x.26]*
       Enum for various storage variants of the indices. This storage format       is used to implement more efficient indexing schemes in case the       underlying data structures allow for them, and to inform the access       functions in  [2.x.19]  on which array       to get the data from. One example of more efficient storage is the       enum value  [2.x.20]  which means that one can       get the indices to all degrees of freedom of a cell by reading only       the first index for each cell, whereas all subsequent indices are       merely an offset from the first index.      
* [0.x.27]*
         This value indicates that no index compression was found and the         only valid storage is to access all indices present on the cell,         possibly including constraints. For a cell/face of this index type,         the data access in FEEvaluationBase is directed to the array  [2.x.21]          dof_indices with the index         `row_starts[cell_index*n_vectorization*n_components].first`.        
* [0.x.28]*
         This value indicates that the indices are interleaved for access         with vectorized gather and scatter operation. This storage variant         is possible in case there are no constraints on the cell and the         indices in the batch of cells are not pointing to the same global         index in different slots of a vectorized array (in order to support         scatter operations). For a cell/face of this index type, the data         access in FEEvaluationBase is directed to the array         `dof_indices_interleaved` with the index         `row_starts[cell_index*n_vectorization*n_components].first`.        
* [0.x.29]*
         This value indicates that the indices within a cell are all         contiguous, and one can get the index to the cell by reading that         single value for each of the cells in the cell batch. For a         cell/face of this index type, the data access in FEEvaluationBase         is directed to the array `dof_indices_contiguous` with the index         `cell_index*n_vectorization*n_components`.        
* [0.x.30]*
         This value indicates that the indices with a cell are contiguous and         interleaved for vectorization, i.e., the first DoF index on a cell         to the four or eight cells in the vectorization batch come first,         than the second DoF index, and so on. Furthermore, the interleaving         between cells implies that only the batches for vectorization can be         accessed efficiently, whereas there is a strided access for getting         only some of the entries.                 The two additional categories `interleaved_contiguous_strided` and         `interleaved_contiguous_mixed_strides` are a consequence of this         storage type. The former is for faces where at least one of the two         adjacent sides will break with the interleaved storage. We then have         to make a strided access as described in the next category. The last         category `interleaved_contiguous_mixed_strides` appears in the ghost         layer, see the more detailed description of that category below.         Again, this is something that cannot be avoided in general once we         interleave the indices between cells.                 For a cell/face of this index type, the data access in         FEEvaluationBase is directed to the array `dof_indices_contiguous`         with the index `cell_index*n_vectorization*n_components`.        
* [0.x.31]*
         Similar to interleaved_contiguous storage, but for the case when the         interleaved indices are only contiguous within the degrees of         freedom, but not also over the components of a vectorized array.         This happens typically on faces with DG where the cells have         `interleaved_contiguous` storage but the faces' numbering is not the         same as the cell's numbering. For a         cell/face of this index type, the data access in FEEvaluationBase         is directed to the array `dof_indices_contiguous` with the index         `cell_index*n_vectorization*n_components`.        
* [0.x.32]*
         Similar to interleaved_contiguous_separate storage, but for the case         when the interleaved indices are not `n_vectorization apart`. This         happens typically within the ghost layer of DG where the remote         owner has applied an interleaved storage and the current processor         only sees some of the cells. For a         cell/face of this index type, the data access in FEEvaluationBase         is directed to the array `dof_indices_contiguous` with the index         `cell_index*n_vectorization*n_components`, including the array         `dof_indices_interleave_strides` for the information about the         actual stride.        
* [0.x.33]*
       Enum used to distinguish the data arrays for the vectorization type       in cells and faces.      
* [0.x.34]*
         The data index for the faces designated as interior        
* [0.x.35]*
         The data index for the faces designated as exterior        
* [0.x.36]*
         The data index for the cells        
* [0.x.37]*
       Stores the dimension of the underlying DoFHandler. Since the indices       are not templated, this is the variable that makes the dimension       accessible in the (rare) cases it is needed inside this class.      
* [0.x.38]*
       For efficiency reasons, always keep a fixed number of cells with       similar properties together. This variable controls the number of       cells batched together. As opposed to the other classes which are       templated on the number type, this class as a pure index container is       not templated, so we need to keep the information otherwise contained       in  [2.x.22]       
* [0.x.39]*
       Stores the index storage variant of all cell and face batches.             The three arrays given here address the types for the faces decorated       as interior (0), the faces decorated with as exterior (1), and the       cells (2) according to CellOrFaceAccess.      
* [0.x.40]*
       Stores the rowstart indices of the compressed row storage in the  [2.x.23]        dof_indices and  [2.x.24]  fields. These two fields are       always accessed together, so it is simpler to keep just one variable       for them. This also obviates keeping two rowstart vectors in sync.      
* [0.x.41]*
       Stores the indices of the degrees of freedom for each cell. These       indices are computed in MPI-local index space, i.e., each processor       stores the locally owned indices as numbers between <tt>0</tt> and       <tt>n_locally_owned_dofs-1</tt> and ghost indices in the range       <tt>n_locally_owned_dofs</tt> to       <tt>n_locally_owned_dofs+n_ghost_dofs</tt>. The translation between       this MPI-local index space and the global numbering of degrees of       freedom is stored in the  [2.x.25]  data structure.  This       array also includes the indirect contributions from constraints,       which are described by the  [2.x.26]  field. Because of       variable lengths of rows, this would be a vector of a vector.       However, we use one contiguous memory region and store the rowstart       in the variable  [2.x.27]       
* [0.x.42]*
       This variable describes the position of constraints in terms of the       local numbering of degrees of freedom on a cell. The first number       stores the distance from one constrained degree of freedom to the       next. This allows to identify the position of constrained DoFs as we       loop through the local degrees of freedom of the cell when reading       from or writing to a vector. The second number stores the index of       the constraint weights, stored in the variable constraint_pool_data.      
* [0.x.43]*
       Reordered index storage for  [2.x.28]       
* [0.x.44]*
       Compressed index storage for faster access than through  [2.x.29]        dof_indices used according to the description in IndexStorageVariants.             The three arrays given here address the types for the faces decorated       as interior (0), the faces decorated with as exterior (1), and the       cells (2) according to CellOrFaceAccess.      
* [0.x.45]*
       The same as above but for shared-memory usage. The first value of the       pair is identifying the owning process and the second the index       within that locally-owned data of that process.            
*  [2.x.30]  This data structure is only set up if all entries in         index_storage_variants[2] are  [2.x.31]       
* [0.x.46]*
       Compressed index storage for faster access than through  [2.x.32]        dof_indices used according to the description in IndexStorageVariants.             The three arrays given here address the types for the faces decorated       as minus (0), the faces decorated with as plus (1), and the cells       (2).      
* [0.x.47]*
       Caches the number of indices filled when vectorizing. This       information can implicitly deduced from the row_starts data fields,       but this field allows for faster access.             The three arrays given here address the types for the faces decorated       as interior (0), the faces decorated with as exterior (1), and the       cells (2) according to CellOrFaceAccess.      
* [0.x.48]*
       This stores the parallel partitioning that can be used to set up       vectors. The partitioner includes the description of the local range       in the vector, and also includes how the ghosts look like. This       enables initialization of vectors based on the DoFInfo field.      
* [0.x.49]*
       Vector exchanger compatible with vector_partitioner.      
* [0.x.50]*
       Vector exchanger compatible with partitioners that select a subset of       ghost indices to the full       vector partitioner stored in  [2.x.33]  These       partitioners are used in specialized loops that only import parts of       the ghosted region for reducing the amount of communication. There       are five variants of the partitioner initialized:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - one that queries only the cell values,
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - one that additionally describes the indices for         evaluating the function values on relevant faces,
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - one that describes the indices for evaluation both the function         values and the gradients on relevant faces adjacent to the locally         owned cells,
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - one that additionally describes the indices for         evaluating the function values on all faces, and
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - one that describes the indices for evaluation both the function         values and the gradients on all faces adjacent to the locally owned         cells.      
* [0.x.51]*
       This stores a (sorted) list of all locally owned degrees of freedom       that are constrained.      
* [0.x.52]*
       Stores the rowstart indices of the compressed row storage in the  [2.x.34]        plain_dof_indices fields.      
* [0.x.53]*
       Stores the indices of the degrees of freedom for each cell. This       array does not include the indirect contributions from constraints,       which are included in  [2.x.35]  Because of variable lengths of       rows, this would be a vector of a vector. However, we use one       contiguous memory region and store the rowstart in the variable  [2.x.36]        row_starts_plain_indices.      
* [0.x.54]*
       Stores the offset in terms of the number of base elements over all       DoFInfo objects.      
* [0.x.55]*
       Stores the number of base elements in the DoFHandler where the       indices have been read from.      
* [0.x.56]*
       Stores the number of components of each base element in the finite       element where the indices have been read from.      
* [0.x.57]*
       The ith entry of this vector stores the component number of the given       base element.      
* [0.x.58]*
       For a given component in an FESystem, this variable tells which base       element the index belongs to.      
* [0.x.59]*
       For a vector-valued element, this gives the constant offset in the       number of degrees of freedom starting at the given component, as the       degrees are numbered by degrees of freedom. This data structure does       not take possible constraints and thus, shorter or longer lists, into       account. This information is encoded in the row_starts variables       directly.             The outer vector goes through the various FE indices in the hp-case,       similarly to the  [2.x.37]  variable.      
* [0.x.60]*
       Stores the number of degrees of freedom per cell.      
* [0.x.61]*
       Stores the number of degrees of freedom per face.      
* [0.x.62]*
       Informs on whether plain indices are cached.      
* [0.x.63]*
       Stores the index of the active finite element in the hp-case.      
* [0.x.64]*
       Stores the maximum degree of different finite elements for the hp-       case.      
* [0.x.65]*
       To each of the slots in an hp-adaptive case, the inner vector stores       the corresponding element degree. This is used by the constructor of       FEEvaluationBase to identify the correct data slot in the hp-case.      
* [0.x.66]*
       Temporarily stores the numbers of ghosts during setup. Cleared when       calling  [2.x.38]  Then, all information is collected by the       partitioner.      
* [0.x.67]*
       Stores an integer to each partition in TaskInfo that indicates       whether to clear certain parts in the result vector if the user       requested it with the respective argument in the  [2.x.39]       
* [0.x.68]*
       Stores the actual ranges in the vector to be cleared.      
* [0.x.69]*
       Stores an integer to each partition in TaskInfo that indicates when       to schedule operations that will be done before any access to vector       entries.      
* [0.x.70]*
       Stores the actual ranges of the operation before any access to vector       entries.      
* [0.x.71]*
       Stores an integer to each partition in TaskInfo that indicates when       to schedule operations that will be done after all access to vector       entries.      
* [0.x.72]*
       Stores the actual ranges of the operation after all access to vector       entries.      
* [0.x.73]