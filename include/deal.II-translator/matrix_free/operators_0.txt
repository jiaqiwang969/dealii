[0.x.0]*
   Abstract base class for matrix-free operators which can be used both at   the finest mesh or at a certain level in geometric multigrid.     A derived class has to implement apply_add() method as well as   compute_diagonal() to initialize the protected member   inverse_diagonal_entries and/or diagonal_entries. In case of a   non-symmetric operator, Tapply_add() should be additionally implemented.     Currently, the only supported vectors are    [2.x.0]  and    [2.x.1]      [1.x.0]     MatrixFree allows to use several DoFHandler/AffineConstraints combinations   by passing a  [2.x.2]  with pointers to the respective objects into   the  [2.x.3]  function. This class supports to select only some   of the blocks in the underlying MatrixFree object by optional integer   lists that specify the chosen blocks.     One application of constructing a matrix-free operator only on selected   blocks would be the setting of the  [2.x.4]  tutorial program: This   problem has three [1.x.1], one for the velocity, one for the   pressure, and one for temperature. The time lag scheme used for temporal   evolution splits the temperature equation away from the Stokes system in   velocity and pressure. However, there are cross terms like the velocity   that enters the temperature advection-diffusion equation or the   temperature that enters the right hand side of the velocity. In order to   be sure that MatrixFree uses the same integer indexing to the different   blocks, one needs to put all the three blocks into the same MatrixFree   object. However, when solving a linear system the operators involved   either address the first two in the Stokes solver, or the last one for   the temperature solver. In the former case, a BlockVector of two   components would be selected with a vector selecting the blocks {0, 1} in   MatrixFree, whereas in the latter, a non-block vector selecting the block   {2} would be used.     A second application of selection is in problems with a Newton-type   iteration or problems with inhomogeneous boundary conditions. In such a   case, one has to deal with two different sets of constraints: One set of   constraints applies to the solution vector which might include hanging   node constraints or periodicity constraints but no constraints on   inhomogeneous Dirichlet boundaries. Before the nonlinear iteration, the   boundary values are set to the expected value in the vector, representing   the initial guess. In each iteration of the Newton method, a linear   system subject to zero Dirichlet boundary conditions is solved that is   then added to the initial guess. This setup can be realized by using a   vector of two pointers pointing to the same DoFHandler object and a   vector of two pointers to the two AffineConstraints objects. If the first   AffineConstraints object is the one including the zero Dirichlet   constraints, one would give a  [2.x.5]  int>(1, 0) to the   initialize() function, i.e., a vector of length 1 that selects exactly the   first AffineConstraints object with index 0.     For systems of PDEs where the different blocks of MatrixFree are   associated with different physical components of the equations, adding   another block with a different AffineConstraints argument solely for the   purpose of boundary conditions might lead to cumbersome index   handling. Instead, one could set up a second MatrixFree instance with the   different AffineConstraints object but the same interpretation of blocks,   and use that for interpolating inhomogeneous boundary conditions (see also   the discussion in the results section of the  [2.x.6]  tutorial program):    
* [1.x.2]
*   
* [0.x.1]*
     Number alias.    
* [0.x.2]*
     size_type needed for preconditioner classes.    
* [0.x.3]*
     Default constructor.    
* [0.x.4]*
     Virtual destructor.    
* [0.x.5]*
     Release all memory and return to a state just like after having called     the default constructor.    
* [0.x.6]*
     Initialize operator on fine scale.         The optional selection vector allows to choose only some components     from the underlying MatrixFree object, e.g. just a single one. The     entry  [2.x.7]  in the vector chooses the DoFHandler     and AffineConstraints object that was given as the      [2.x.8]  argument to the  [2.x.9]  call.     Different arguments for rows and columns also make it possible to     select non-diagonal blocks or rectangular blocks. If the row vector is     empty, all components are selected, otherwise its size must be smaller     or equal to  [2.x.10]  and all indices need to be     unique and within the range of 0 and  [2.x.11]  If the     column selection vector is empty, it is taken the same as the row     selection, defining a diagonal block.    
* [0.x.7]*
     Initialize operator on a level  [2.x.12]  for a single FiniteElement.         The optional selection vector allows to choose only some components     from the underlying MatrixFree object, e.g. just a single one. The     entry  [2.x.13]  in the vector chooses the DoFHandler     and AffineConstraints object that was given as the      [2.x.14]  argument to the  [2.x.15]  call.     Since a multigrid operator is always associated to inverting a matrix     and thus represents a diagonal block, the same vector for rows and     columns is used as opposed to the non-level initialization function. If     empty, all components are selected.    
* [0.x.8]*
     Initialize operator on a level  [2.x.16]  for multiple FiniteElement     objects.         The optional selection vector allows to choose only some components     from the underlying MatrixFree object, e.g. just a single one. The     entry  [2.x.17]  in the vector chooses the DoFHandler     and AffineConstraints object that was given as the      [2.x.18]  argument to the  [2.x.19]  call.     Since a multigrid operator is always associated to inverting a matrix     and thus represents a diagonal block, the same vector for rows and     columns is used as opposed to the non-level initialization function. If     empty, all components are selected.    
* [0.x.9]*
     Return the dimension of the codomain (or range) space.    
* [0.x.10]*
     Return the dimension of the domain space.    
* [0.x.11]*
     vmult operator for interface.    
* [0.x.12]*
     vmult operator for interface.    
* [0.x.13]*
     Matrix-vector multiplication.    
* [0.x.14]*
     Transpose matrix-vector multiplication.    
* [0.x.15]*
     Adding Matrix-vector multiplication.    
* [0.x.16]*
     Adding transpose matrix-vector multiplication.    
* [0.x.17]*
     Return the value of the matrix entry (row,col). In matrix-free context     this function is valid only for row==col when diagonal is initialized.    
* [0.x.18]*
     Determine an estimate for the memory consumption (in bytes) of this     object.    
* [0.x.19]*
     A wrapper for initialize_dof_vector() of MatrixFree object.    
* [0.x.20]*
     Compute diagonal of this operator.         A derived class needs to implement this function and resize and fill     the protected member inverse_diagonal_entries and/or diagonal_entries     accordingly.    
* [0.x.21]*
     Get read access to the MatrixFree object stored with this operator.    
* [0.x.22]*
     Get read access to the inverse diagonal of this operator.    
* [0.x.23]*
     Get read access to the diagonal of this operator.    
* [0.x.24]*
     Apply the Jacobi preconditioner, which multiplies every element of the     <tt>src</tt> vector by the inverse of the respective diagonal element and     multiplies the result with the relaxation factor <tt>omega</tt>.    
* [0.x.25]*
     Perform necessary operations related to constraints before calling     apply_add() or Tapply_add() inside mult_add().    
* [0.x.26]*
     Perform necessary operations related to constraints after calling     apply_add() or Tapply_add() inside mult_add().    
* [0.x.27]*
     Set constrained entries (both from hanging nodes and edge constraints)     of  [2.x.20]  to one.    
* [0.x.28]*
     Apply operator to  [2.x.21]  and add result in  [2.x.22]     
* [0.x.29]*
     Apply transpose operator to  [2.x.23]  and add result in  [2.x.24]          Default implementation is to call apply_add().    
* [0.x.30]*
     MatrixFree object to be used with this operator.    
* [0.x.31]*
     A shared pointer to a diagonal matrix that stores the     diagonal elements as a vector.    
* [0.x.32]*
     A shared pointer to a diagonal matrix that stores the inverse of     diagonal elements as a vector.    
* [0.x.33]*
     A vector which defines the selection of sub-components of MatrixFree     for the rows of the matrix representation.    
* [0.x.34]*
     A vector which defines the selection of sub-components of MatrixFree     for the columns of the matrix representation.    
* [0.x.35]*
     Indices of DoFs on edge in case the operator is used in GMG context.    
* [0.x.36]*
     Auxiliary vector.    
* [0.x.37]*
     A flag which determines whether or not this operator has interface     matrices in GMG context.    
* [0.x.38]*
     %Function which implements vmult_add ( [2.x.25]  = false) and     Tvmult_add ( [2.x.26]  = true).    
* [0.x.39]*
     Adjust the ghost range of the vectors to the storage requirements of     the underlying MatrixFree class. This is used inside the mult_add() as     well as vmult_interface_up() and vmult_interface_down() methods in     order to ensure that the cell loops will be able to access the ghost     indices with the correct local indices.    
* [0.x.40]*
   Auxiliary class to provide interface vmult/Tvmult methods required in   adaptive geometric multgrids.  [2.x.27]  class should be derived   from  [2.x.28]  class.     The adaptive multigrid realization in deal.II implements an approach   called local smoothing. This means that the smoothing on the finest level   only covers the local part of the mesh defined by the fixed (finest) grid   level and ignores parts of the computational domain where the terminal   cells are coarser than this level. As the method progresses to coarser   levels, more and more of the global mesh will be covered. At some coarser   level, the whole mesh will be covered. Since all level matrices in the   multigrid method cover a single level in the mesh, no hanging nodes   appear on the level matrices. At the interface between multigrid levels,   homogeneous Dirichlet boundary conditions are set while smoothing. When   the residual is transferred to the next coarser level, however, the   coupling over the multigrid interface needs to be taken into account.   This is done by the so-called interface (or edge) matrices that compute   the part of the residual that is missed by the level matrix with   homogeneous Dirichlet conditions. We refer to the    [2.x.29]  "Multigrid paper by Janssen and Kanschat"   for more details.     For the implementation of those interface matrices, most infrastructure   is already in place and provided by  [2.x.30]  through the   two multiplication routines vmult_interface_down() and   vmult_interface_up(). The only thing MGInterfaceOperator does is   wrapping those operations and make them accessible via    [2.x.31]  and  [2.x.32]  interface as expected by the multigrid routines   (that were originally written for matrices, hence expecting those names).   Note that the vmult_interface_down is used during the restriction phase of   the multigrid V-cycle, whereas vmult_interface_up is used during the   prolongation phase.  
* [0.x.41]*
     Number alias.    
* [0.x.42]*
     Size type.    
* [0.x.43]*
     Default constructor.    
* [0.x.44]*
     Clear the pointer to the OperatorType object.    
* [0.x.45]*
     Initialize this class with an operator  [2.x.33]     
* [0.x.46]*
     vmult operator, see class description for more info.    
* [0.x.47]*
     Tvmult operator, see class description for more info.    
* [0.x.48]*
     A wrapper for initialize_dof_vector() of OperatorType object.    
* [0.x.49]*
     Const pointer to the operator class.    
* [0.x.50]*
   This class implements the operation of the action of the inverse of a   mass matrix on an element for the special case of an evaluation object   with as many quadrature points as there are cell degrees of freedom. It   uses algorithms from FEEvaluation and produces the exact mass matrix for   DGQ elements. This algorithm uses tensor products of inverse 1D shape   matrices over quadrature points, so the inverse operation is exactly as   expensive as applying the forward operator on each cell. Of course, for   continuous finite elements this operation does not produce the inverse of   a mass operation as the coupling between the elements cannot be   considered by this operation.     The equation may contain variable coefficients, so the user is required   to provide an array for the inverse of the local coefficient (this class   provide a helper method 'fill_inverse_JxW_values' to get the inverse of a   constant-coefficient operator).  
* [0.x.51]*
     Constructor. Initializes the shape information from the ShapeInfo field     in the class FEEval.    
* [0.x.52]*
     Applies the inverse mass matrix operation on an input array. It is     assumed that the passed input and output arrays are of correct size,     namely  [2.x.34]  long. The inverse of the     local coefficient (also containing the inverse JxW values) must be     passed as first argument. Passing more than one component in the     coefficient is allowed.    
* [0.x.53]*
     Applies the inverse mass matrix operation on an input array, using the     inverse of the JxW values provided by the `fe_eval` argument passed to     the constructor of this class. Note that the user code must call      [2.x.35]  on the underlying evaluator to make the      [2.x.36]  method return the information of the correct     cell. It is assumed that the pointers of the input and output arrays     are valid over the length  [2.x.37]  which is the     number of entries processed by this function. The `in_array` and     `out_array` arguments may point to the same memory position.    
* [0.x.54]*
     This operation performs a projection from the data given in quadrature     points to the actual basis underlying this object. This projection can     also be interpreted as a change of the basis from the Lagrange     interpolation polynomials in the quadrature points to the     basis underlying the current `fe_eval` object.         Calling this function on an array as    
* [1.x.3]
*      is equivalent to    
* [1.x.4]
*      provided that  [2.x.38]  holds the inverse of the quadrature     weights and no additional coefficients. This setup highlights the     underlying projection, testing a right hand side and applying an     inverse mass matrix. This function works both for the scalar case as     described in the example or for multiple components that are laid out     component by component.         Compared to the more verbose alternative, the given procedure is     considerably faster because it can bypass the  [2.x.39]  step     and the first half of the transformation to the quadrature points,     reducing the number of tensor product calls from 3*dim*n_components to     dim*n_components.    
* [0.x.55]*
     Fills the given array with the inverse of the JxW values, i.e., a mass     matrix with coefficient 1. Non-unit coefficients must be multiplied (in     inverse form) to this array.    
* [0.x.56]*
     A reference to the FEEvaluation object for getting the JxW_values.    
* [0.x.57]*
   This class implements the operation of the action of a mass matrix.     Note that this class only supports the non-blocked vector variant of the   Base operator because only a single FEEvaluation object is used in the   apply function.  
* [0.x.58]*
     Number alias.    
* [0.x.59]*
     size_type needed for preconditioner classes.    
* [0.x.60]*
     Constructor.    
* [0.x.61]*
     For preconditioning, we store a lumped mass matrix at the diagonal     entries.    
* [0.x.62]*
     Applies the mass matrix operation on an input vector. It is     assumed that the passed input and output vector are correctly initialized     using initialize_dof_vector().    
* [0.x.63]*
     For this operator, there is just a cell contribution.    
* [0.x.64]*
   This class implements the operation of the action of a Laplace matrix,   namely  [2.x.40] , where  [2.x.41]  is   the scalar heterogeneity coefficient.     Note that this class only supports the non-blocked vector variant of the   Base operator because only a single FEEvaluation object is used in the   apply function.  
* [0.x.65]*
     Number alias.    
* [0.x.66]*
     size_type needed for preconditioner classes.    
* [0.x.67]*
     Constructor.    
* [0.x.68]*
     The diagonal is approximated by computing a local diagonal matrix per     element and distributing it to the global diagonal. This will lead to     wrong results on element with hanging nodes but is still an acceptable     approximation to be used in preconditioners.    
* [0.x.69]*
     Set the heterogeneous scalar coefficient  [2.x.42]  to be     used at the quadrature points. The Table needs to have as many rows as     there are cell batches in the underlying MatrixFree object,      [2.x.43]  The number of batches is related to the     fact that the matrix-free operators do not work on individual cells,     but instead of batches of cells at once due to vectorization. The Table     can take two different numbers of columns.  One case is to select it     equal to the total number of quadrature points in `dim` dimensions,     which is the `dim`th power of the `n_q_points_1d` template     parameter. Here, `(*scalar_coefficient)(cell,q)` corresponds to the     value of the coefficient on cell batch `cell` and quadrature point     index `q`. The second supported variant is a Table with a single     column, in which case the same variable coefficient value is used at     all quadrature points of a cell.         Such tables can be initialized by    
* [1.x.5]
*      where  [2.x.44]  is a MatrixFree object and      [2.x.45]  is a function which provides the following method     <code>VectorizedArray<double> value(const Point<dim,     VectorizedArray<double> > &p_vec)</code>.         If this function is not called, the coefficient is assumed to be unity.         The argument to this function is a shared pointer to such a table. The     class stores the shared pointer to this table, not a deep copy     and uses it to form the Laplace matrix. Consequently, you can update the     table and re-use the current object to obtain the action of a Laplace     matrix with this updated coefficient. Alternatively, if the table values     are only to be filled once, the original shared pointer can also go out     of scope in user code and the clear() command or destructor of this class     will delete the table.    
* [0.x.70]*
     Resets all data structures back to the same state as for a newly     constructed object.    
* [0.x.71]*
     Read/Write access to coefficients to be used in Laplace operator.         The function will throw an error if coefficients are not previously set     by set_coefficient() function.    
* [0.x.72]*
     Applies the laplace matrix operation on an input vector. It is     assumed that the passed input and output vector are correctly initialized     using initialize_dof_vector().    
* [0.x.73]*
     Applies the Laplace operator on a cell.    
* [0.x.74]*
     Apply diagonal part of the Laplace operator on a cell.    
* [0.x.75]*
     Apply Laplace operator on a cell  [2.x.46]     
* [0.x.76]*
     User-provided heterogeneity coefficient.    
* [0.x.77]