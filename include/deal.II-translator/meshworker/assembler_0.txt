[0.x.0]*
   The namespace containing objects that can be used to assemble data   computed on cells and faces into global objects. This can reach from   collecting the total error estimate from cell and face contributions to   assembling matrices and multilevel matrices.     [1.x.0]     The class chosen from this namespace determines which data model is used.   For the local as well as the global objects, we have the choice between   two models:     [1.x.1]     This is the structure set up by the FESystem class. Globally, this means,   data is assembled into one residual vector and into one matrix. These   objects may be block vectors and block matrices, but the process of   assembling ignores this fact.     Similarly, there is only a single cell vector and cell matrix,   respectively, which is indexed by all degrees of freedom of the FESystem.   When building the cell matrix, it is necessary to distinguish between the   different components of the system and select the right operator for each   pair.     [1.x.2]     Here, all the blocks are treated separately (in spite of using FESystem   for its convenience in other places). For instance, no block matrix is   assembled, but a list of blocks, which can be combined later by   BlockMatrixArray. Locally, this means, that each matrix block of a system   is generated separately and assembled into the corresponding global   block.     This approach is advantageous, if the number of matrices for each block   position in the global system is different. For instance, block   preconditioners for the Oseen problem require 3 pressure matrices, but   only one divergence and one advection-diffusion operator for velocities.     Additionally, this approach enables the construction of a system of   equations from building blocks for each equation and coupling operator.     Nevertheless, since a separate FEValues object must be created for each   base element, it is not quite clear a priori, which data model is more   efficient.    
*  [2.x.0]   
* [0.x.1]*
     Assemble local residuals into global residuals.         The global residuals are expected as an FEVectors object. The local     residuals are block vectors.         Depending on whether the BlockInfo object was initialize with      [2.x.1]  the comprehensive or block data model is     used locally.         In the block model, each of the blocks of the local vectors corresponds     to the restriction of a single block of the system to this cell (see      [2.x.2] ).     Thus, the size of this local block is the number of degrees of freedom     of the corresponding base element of the FESystem.          [2.x.3]  Comprehensive model currently not implemented.        
*  [2.x.4]     
* [0.x.2]*
       Copy the BlockInfo and the matrix pointers into local variables.      
* [0.x.3]*
       Initialize the constraints.      
* [0.x.4]*
       Initialize the local data in the DoFInfo object used later for       assembling.             The  [2.x.5]  object refers to a cell if  [2.x.6] , or else to an       interior or boundary face.      
* [0.x.5]*
       Assemble the local residuals into the global residuals.      
* [0.x.6]*
       Assemble both local residuals into the global residuals.      
* [0.x.7]*
       Assemble a single local residual into the global.      
* [0.x.8]*
       The global vectors, stored as an AnyData container of pointers.      
* [0.x.9]*
       A pointer to the object containing the block structure.      
* [0.x.10]*
       A pointer to the object containing constraints.      
* [0.x.11]*
     A helper class assembling local matrices into global matrices.         The global matrices are expected as a vector of MatrixBlock objects,     each containing a matrix object with a function corresponding to      [2.x.7]  and information on the block row and column this     matrix represents in a block system.         The local matrices are expected as a similar vector of MatrixBlock     objects, but containing a FullMatrix.         Like with ResidualLocalBlocksToGlobalBlocks, the initialization of the     BlockInfo object decides whether the comprehensive data model or the     block model is used.         In the comprehensive model, each of the LocalMatrixBlocks has     coordinates (0,0) and dimensions equal to the number of degrees of     freedom of the FESystem.         In the comprehensive model, each block has its own block coordinates     and the size depends on the associated  [2.x.8]  These     blocks can be generated separately and will be assembled into the     correct matrix block by this object.        
*  [2.x.9]     
* [0.x.12]*
       Constructor, initializing the #threshold, which limits how small       numbers may be to be entered into the matrix.      
* [0.x.13]*
       Copy the BlockInfo and the matrix pointers into local variables and       initialize cell matrix vectors.      
* [0.x.14]*
       Initialize the constraints.      
* [0.x.15]*
       Initialize the local data in the DoFInfo object used later for       assembling.             The  [2.x.10]  object refers to a cell if  [2.x.11] , or else to an       interior or boundary face.      
* [0.x.16]*
       Assemble the local matrices into the global matrices.      
* [0.x.17]*
       Assemble all local matrices into the global matrices.      
* [0.x.18]*
       Assemble a single local matrix into a global one.      
* [0.x.19]*
       The global matrices, stored as a vector of pointers.      
* [0.x.20]*
       A pointer to the object containing the block structure.      
* [0.x.21]*
       A pointer to the object containing constraints.      
* [0.x.22]*
       The smallest positive number that will be entered into the global       matrix. All smaller absolute values will be treated as zero and will       not be assembled.      
* [0.x.23]*
     A helper class assembling local matrices into global multilevel     matrices. This class is the multilevel equivalent of     MatrixLocalBlocksToGlobalBlocks and documentation of that class applies     here to a large extend.         The global matrices are expected as a vector of pointers to MatrixBlock     objects, each containing a MGLevelObject with matrices with a function     corresponding to  [2.x.12]  and information on the block row     and column this matrix represents in a block system.         The local matrices are a similar vector of MatrixBlock objects, but     containing a FullMatrix.         If local refinement occurs, the Multigrid method needs more matrices,     two for continuous elements and another two if numerical fluxes are     computed on interfaces. The second set can be added using     initialize_edge_flux(). Once added, the contributions in all     participating matrices will be assembled from the cell and face     matrices automatically.        
*  [2.x.13]     
* [0.x.24]*
       Constructor, initializing the #threshold, which limits how small       numbers may be to be entered into the matrix.      
* [0.x.25]*
       Copy the BlockInfo and the matrix pointers into local variables and       initialize cell matrix vectors.      
* [0.x.26]*
       Initialize the multilevel constraints.      
* [0.x.27]*
       Multigrid methods on locally refined meshes need additional matrices.       For discontinuous Galerkin methods, these are two flux matrices       across the refinement edge, which are set by this method.      
* [0.x.28]*
       Multigrid methods on locally refined meshes need additional matrices.       For discontinuous Galerkin methods, these are two flux matrices       across the refinement edge, which are set by this method.      
* [0.x.29]*
       Initialize the local data in the DoFInfo object used later for       assembling.             The  [2.x.14]  object refers to a cell if  [2.x.15] , or else to an       interior or boundary face.      
* [0.x.30]*
       Assemble the local matrices into the global matrices.      
* [0.x.31]*
       Assemble all local matrices into the global matrices.      
* [0.x.32]*
       Assemble a single local matrix into a global one.      
* [0.x.33]*
       Assemble a single local matrix into a global one.      
* [0.x.34]*
       Assemble a single local matrix into a global one.      
* [0.x.35]*
       Assemble a single local matrix into a global one.      
* [0.x.36]*
       Assemble a single local matrix into a global one.      
* [0.x.37]*
       Assemble a single local matrix into a global one.      
* [0.x.38]*
       The level matrices, stored as a vector of pointers.      
* [0.x.39]*
       The flux matrix between the fine and the coarse level at refinement       edges.      
* [0.x.40]*
       The flux matrix between the coarse and the fine level at refinement       edges.      
* [0.x.41]*
       The interface matrix between the fine and the coarse level at       refinement edges.      
* [0.x.42]*
       The interface matrix between the coarse and the fine level at       refinement edges.      
* [0.x.43]*
       A pointer to the object containing the block structure.      
* [0.x.44]*
       A pointer to the object containing constraints.      
* [0.x.45]*
       The smallest positive number that will be entered into the global       matrix. All smaller absolute values will be treated as zero and will       not be assembled.      
* [0.x.46]