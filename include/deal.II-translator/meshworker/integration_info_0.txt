[0.x.0]*
   Class for objects handed to local integration functions.     Objects of this class contain one or more objects of type FEValues,   FEFaceValues or FESubfaceValues to be used in local integration. They are   stored in an array of pointers to the base classes FEValuesBase. The   template parameter VectorType allows the use of different data types for   the global system.     Additionally, this function contains space to store the values of finite   element functions stored in #global_data in the quadrature points. These   vectors are initialized automatically on each cell or face. In order to   avoid initializing unused vectors, you can use initialize_selector() to   select the vectors by name that you actually want to use.     [1.x.0]     This class supports two local integration models, corresponding to the   data models in the documentation of the Assembler namespace. One is the   standard model suggested by the use of FESystem. Namely, there is one   FEValuesBase object in this class, containing all shape functions of the   whole system, and having as many components as the system. Using this   model involves loops over all system shape functions. It requires to   identify the system components for each shape function and to select the   correct bilinear form, usually in an  [2.x.0]  or  [2.x.1]  statement.     The second integration model builds one FEValuesBase object per base   element of the system. The degrees of freedom on each cell are renumbered   by block, such that they represent the same block structure as the global   system. Objects performing the integration can then process each block   separately, which improves reusability of code considerably.    
*  [2.x.2]  As described in DoFInfo, the use of the local block model is   triggered by calling  [2.x.3]  before using   initialize() in this class.    
*  [2.x.4]   
* [0.x.1]*
     Constructor.    
* [0.x.2]*
     Copy constructor, creating a clone to be used by  [2.x.5]     
* [0.x.3]*
     Build all internal structures, in particular the FEValuesBase objects     and allocate space for data vectors.          [2.x.6]  el is the finite element of the DoFHandler.          [2.x.7]  mapping is the Mapping object used to map the mesh cells.          [2.x.8]  quadrature is a Quadrature formula used in the constructor of     the FEVALUES objects.          [2.x.9]  flags are the UpdateFlags used in the constructor of the     FEVALUES objects.          [2.x.10]  local_block_info is an optional parameter for systems of PDE. If     it is provided with reasonable data, then the degrees of freedom on the     cells will be re-ordered to reflect the block structure of the system.    
* [0.x.4]*
     Initialize the data vector and cache the selector.    
* [0.x.5]*
     Delete the data created by initialize().    
* [0.x.6]*
     Return a reference to the FiniteElement that was used to initialize     this object.    
* [0.x.7]*
     This is the access function being used, if initialize() for a single     element was used (without the BlockInfo argument). It throws an     exception, if applied to a vector of elements.    
* [0.x.8]*
     This access function must be used if the initialize() for a group of     elements was used (with a valid BlockInfo object).    
* [0.x.9]*
     The vector containing the values of finite element functions in the     quadrature points.         There is one vector per selected finite element function, containing     one vector for each component, containing vectors with values for each     quadrature point.    
* [0.x.10]*
     The vector containing the derivatives of finite element functions in     the quadrature points.         There is one vector per selected finite element function, containing     one vector for each component, containing vectors with values for each     quadrature point.    
* [0.x.11]*
     The vector containing the second derivatives of finite element     functions in the quadrature points.         There is one vector per selected finite element function, containing     one vector for each component, containing vectors with values for each     quadrature point.    
* [0.x.12]*
     Reinitialize internal data structures for use on a cell.    
* [0.x.13]*
     Use the finite element functions in #global_data and fill the vectors     #values, #gradients and #hessians.    
* [0.x.14]*
     The global data vector used to compute function values in quadrature     points.    
* [0.x.15]*
     The memory used by this object.    
* [0.x.16]*
     The pointer to the (system) element used for initialization.    
* [0.x.17]*
     Use the finite element functions in #global_data and fill the vectors     #values, #gradients and #hessians with values according to the     selector.    
* [0.x.18]*
     Cache the number of components of the system element.    
* [0.x.19]*
   The object holding the scratch data for integrating over cells and faces.   IntegrationInfoBox serves three main purposes:      [2.x.11]     [2.x.12]  It provides the interface needed by  [2.x.13]  namely the   two functions post_cell() and post_faces(), as well as the data members   #cell, #boundary, #face, #subface, and #neighbor.      [2.x.14]  It contains all information needed to initialize the FEValues and   FEFaceValues objects in the IntegrationInfo data members.      [2.x.15]  It stores information on finite element vectors and whether their   data should be used to compute values or derivatives of functions at   quadrature points.      [2.x.16]  It makes educated guesses on quadrature rules and update flags, so   that minimal code has to be written when default parameters are   sufficient.    [2.x.17]      In order to allow for sufficient generality, a few steps have to be   undertaken to use this class.     First, you should consider if you need values from any vectors in a   AnyData object. If so, fill the VectorSelector objects #cell_selector,   #boundary_selector and #face_selector with their names and the data type   (value, gradient, Hessian) to be extracted.     Afterwards, you will need to consider UpdateFlags for FEValues objects. A   good start is initialize_update_flags(), which looks at the selectors   filled before and adds all the flags needed to get the selection.   Additional flags can be set with add_update_flags().     Finally, we need to choose quadrature formulas. In the simplest case, you   might be happy with the default settings, which are [1.x.1]-point Gauss   formulas. If only derivatives of the shape functions are used   (#update_values is not set) [1.x.2] equals the highest polynomial degree   in the FiniteElement, if #update_values is set, [1.x.3] is one higher   than this degree.  If you choose to use Gauss formulas of other size, use   initialize_gauss_quadrature() with appropriate values. Otherwise, you can   fill the variables #cell_quadrature, #boundary_quadrature and   #face_quadrature directly.     In order to save time, you can set the variables boundary_fluxes and   interior_fluxes of the base class to false, thus telling the    [2.x.18]  not to loop over those faces.     All the information in here is used to set up IntegrationInfo objects   correctly, typically in an IntegrationInfoBox.    
*  [2.x.19]   
* [0.x.20]*
     The type of the  [2.x.20]  object for cells.    
* [0.x.21]*
     Default constructor.    
* [0.x.22]*
     Initialize the IntegrationInfo objects contained.         Before doing so, add update flags necessary to produce the data needed     and also set uninitialized quadrature rules to Gauss formulas, which     integrate polynomial bilinear forms exactly.    
* [0.x.23]*
     Initialize the IntegrationInfo objects contained.         Before doing so, add update flags necessary to produce the data needed     and also set uninitialized quadrature rules to Gauss formulas, which     integrate polynomial bilinear forms exactly.    
* [0.x.24]*
     Initialize the IntegrationInfo objects contained.         Before doing so, add update flags necessary to produce the data needed     and also set uninitialized quadrature rules to Gauss formulas, which     integrate polynomial bilinear forms exactly.    
* [0.x.25]*
      [2.x.21]  FEValues setup    
* [0.x.26]*
     Call this function before initialize() in order to guess the update     flags needed, based on the data selected.         When computing face fluxes, we normally can use the geometry     (integration weights and normal vectors) from the original cell and     thus can avoid updating these values on the neighboring cell. Set     <tt>neighbor_geometry</tt> to true in order to initialize these values     as well.    
* [0.x.27]*
     Add FEValues UpdateFlags for integration on all objects (cells,     boundary faces and all interior faces).    
* [0.x.28]*
     Add FEValues UpdateFlags for integration on cells.    
* [0.x.29]*
     Add FEValues UpdateFlags for integration on boundary faces.    
* [0.x.30]*
     Add FEValues UpdateFlags for integration on interior faces.    
* [0.x.31]*
     Add additional update flags to the ones already set in this program.     The four boolean flags indicate whether the additional flags should be     set for cell, boundary, interelement face for the cell itself or     neighbor cell, or any combination thereof.    
* [0.x.32]*
     Assign n-point Gauss quadratures to each of the quadrature rules. Here,     a size of zero points means that no loop over these grid entities     should be performed.         If the parameter <tt>force</tt> is true, then all quadrature sets are     filled with new quadrature rules. If it is false, then only empty rules     are changed.    
* [0.x.33]*
     The memory used by this object.    
* [0.x.34]*
     The set of update flags for boundary cell integration.         Defaults to #update_JxW_values.    
* [0.x.35]*
     The set of update flags for boundary face integration.         Defaults to #update_JxW_values and #update_normal_vectors.    
* [0.x.36]*
     The set of update flags for interior face integration.         Defaults to #update_JxW_values and #update_normal_vectors.    
* [0.x.37]*
     The set of update flags for interior face integration.         Defaults to #update_default, since quadrature weights are taken from     the other cell.    
* [0.x.38]*
     The quadrature rule used on cells.    
* [0.x.39]*
     The quadrature rule used on boundary faces.    
* [0.x.40]*
     The quadrature rule used on interior faces.    
* [0.x.41]*
      [2.x.22]  Data vectors    
* [0.x.42]*
     Initialize the VectorSelector objects #cell_selector,     #boundary_selector and #face_selector in order to save computational     effort. If no selectors are used, then values for all named vectors in      [2.x.23]  will be computed in all quadrature points.         This function will also add UpdateFlags to the flags stored in this     class.    
* [0.x.43]*
     Select the vectors from  [2.x.24]  that should be computed in     the quadrature points on cells.    
* [0.x.44]*
     Select the vectors from  [2.x.25]  that should be computed in     the quadrature points on boundary faces.    
* [0.x.45]*
     Select the vectors from  [2.x.26]  that should be computed in     the quadrature points on interior faces.    
* [0.x.46]*
      [2.x.27]  Interface for  [2.x.28]     
* [0.x.47]*
     A callback function which is called in the loop over all cells, after     the action on a cell has been performed and before the faces are dealt     with.         In order for this function to have this effect, at least either of the     arguments <tt>boundary_worker</tt> or <tt>face_worker</tt> arguments of     loop() should be nonzero. Additionally, <tt>cells_first</tt> should be     true. If <tt>cells_first</tt> is false, this function is called before     any action on a cell is taken.         And empty function in this class, but can be replaced in other classes     given to loop() instead.         See loop() and cell_action() for more details of how this function can     be used.    
* [0.x.48]*
     A callback function which is called in the loop over all cells, after     the action on the faces of a cell has been performed and before the     cell itself is dealt with (assumes <tt>cells_first</tt> is false).         In order for this function to have a reasonable effect, at least either     of the arguments <tt>boundary_worker</tt> or <tt>face_worker</tt>     arguments of loop() should be nonzero. Additionally,     <tt>cells_first</tt> should be false.         And empty function in this class, but can be replaced in other classes     given to loop() instead.         See loop() and cell_action() for more details of how this function can     be used.    
* [0.x.49]*
     The  [2.x.29]  object for a cell.    
* [0.x.50]*
     The  [2.x.30]  object for a boundary face.    
* [0.x.51]*
     The  [2.x.31]  object for a regular interior face, seen from the first cell.    
* [0.x.52]*
     The  [2.x.32]  object for the refined side of an interior face seen from the     first cell.    
* [0.x.53]*
     The  [2.x.33]  object for an interior face, seen from the other cell.    
* [0.x.54]