[0.x.0]*
     A helper class to provide a type definition for the underlying cell     iterator type.    
* [0.x.1]*
       Type definition for the cell iterator type.      
* [0.x.2]*
     A helper class to provide a type definition for the underlying cell     iterator type.         This specialization is for IteratorRange, which may have either a     TriaActiveIterator or a FilteredIterator as its base type.    
* [0.x.3]*
       Type definition for the cell iterator type.      
* [0.x.4]*
     A helper class to provide a type definition for the underlying cell     iterator type.         This specialization is for FilteredIterator, which may have either a     TriaActiveIterator as its base type, or may be nested with another     FilteredIterator as the type to iterate over.    
* [0.x.5]*
       Type definition for the cell iterator type.      
* [0.x.6]*
   This alias introduces a friendly and short name for the function type   for the cell worker used in mesh_loop().  
* [0.x.7]*
   This alias introduces a friendly and short name for the function type   for the cell worker used in mesh_loop().  
* [0.x.8]*
   This alias introduces a friendly and short name for the function type   for the boundary worker used in mesh_loop().  
* [0.x.9]*
   This alias introduces a friendly and short name for the function type   for the face worker used in mesh_loop().  
* [0.x.10]*
   This function extends the WorkStream concept to work on meshes   (cells and/or faces) and handles the complicated logic for   work on adaptively refined faces   and parallel computation (work on faces to ghost neighbors for example).   The  [2.x.0]  can be used to simplify operations on cells (for example   assembly), on boundaries (Neumann type boundary conditions), or on   interior faces (for example in discontinuous Galerkin methods). The   function is used in a number of tutorials, including  [2.x.1] ,  [2.x.2] ,   and  [2.x.3] , to name just a few.     For uniformly refined meshes, it would be relatively easy to use    [2.x.4]  with a  [2.x.5]  that also loops over faces, and   takes care of assembling face terms depending on the current and neighbor   cell. All user codes that do these loops would then need to insert   manually the logic that identifies, for every face of the current cell,   the neighboring cell, and the face index on the neighboring cell that   corresponds to the current face.     This is more complicated if local refinement is enabled and the current or   neighbor cells have hanging nodes. In this case it is also necessary to   identify the corresponding subface on either the current or the neighbor   faces.     This method externalizes that logic (which is independent from user codes)   and separates the assembly of face terms (internal faces, boundary faces,   or faces between different subdomain ids on parallel computations) from   the assembling on cells, allowing the user to specify two additional   workers (a  [2.x.6]  a  [2.x.7]  and a  [2.x.8]  that   are called automatically in each  [2.x.9]  according to the specific   AssembleFlags  [2.x.10]  that are passed. The  [2.x.11]  is passed the   cell identifier, a ScratchData object, and a CopyData object, following   the same principles of  [2.x.12]  Internally the function passes to    [2.x.13]  in addition to the above, also a  [2.x.14]  parameter   that identifies the face on which the integration should be performed. The    [2.x.15]  instead needs to identify the current face unambiguously   both on the cell and on the neighboring cell, and it is therefore called   with six arguments (three for each cell: the actual cell, the face index,   and the subface_index. If no subface integration is needed, then the   subface_index is  [2.x.16]  in addition to the usual   ScratchData and CopyData objects.     If the flag  [2.x.17]  is passed, then the default   behavior is to first loop over faces and do the work there, and then   compute the actual work on the cell. It is possible to perform the   integration on the cells after working on faces, by adding the flag    [2.x.18]      If the flag  [2.x.19]  is specified,   then each interior face is visited only once, and the  [2.x.20]  is   assumed to integrate all face terms at once (and add contributions to both   sides of the face in a discontinuous Galerkin setting).     This method is equivalent to the  [2.x.21]  method when   AssembleFlags contains only  [2.x.22]  and can be used as a   drop-in replacement for that method.     The two data types ScratchData and CopyData need to have a working copy   constructor. ScratchData is only used in the worker function, while   CopyData is the object passed from the worker to the copier. The CopyData   object is reset to the value provided to this function every time this   function visits a new cell (where it then calls the cell and face   workers). In other words, no state carries over between calling the   `copier` on one cell and the `cell_worker`/`face_worker`/`boundary_worker`   functions on the next cell, and user code needs not reset the copy   object either at the beginning of the cell integration or end of the   copy operation. Resetting the state of the `copier ` inside of a   `face_worker` or `boundary_worker` constitutes a bug, and may lead to   some unexpected results. The following example shows what is not   permissible, as the copier is potentially shared among numerous faces   on a cell:  
* [1.x.0]
*      The queue_length argument indicates the number of items that can be live at   any given time. Each item consists of chunk_size elements of the input   stream that will be worked on by the worker and copier functions one after   the other on the same thread.     If your data objects are large, or their constructors are expensive, it is   helpful to keep in mind that queue_length copies of the ScratchData object   and `queue_length*chunk_size` copies of the CopyData object are generated.    
*  [2.x.23]  The types of the function arguments and the default values (empty worker functions)   displayed in the Doxygen documentation here are slightly simplified   compared to the real types.    
*  [2.x.24]  More information about requirements on template types and meaning   of  [2.x.25]  and  [2.x.26]  can be found in the documentation of the   WorkStream namespace and its members.    
*  [2.x.27]   
* [0.x.11]*
   Same as the function above, but for iterator ranges (and, therefore,   filtered iterators).     An example usage of the function for the serial case is given by  
* [1.x.1]
*      and an example usage of the function for the parallel distributed case,   where the copier is only to be called on locally owned cells, is given by  
* [1.x.2]
*     
*  [2.x.28]   
* [0.x.12]*
   This is a variant of the mesh_loop() function that can be used for worker   and copier functions that are member functions of a class.     The argument passed as  [2.x.29]  must be convertible to the same type as  [2.x.30]    begin, but doesn't have to be of the same type itself. This allows to   write code like <code>mesh_loop(dof_handler.begin_active(),   dof_handler.end(), ...)</code> where the first is of type    [2.x.31]  whereas the second is of type    [2.x.32]      The  [2.x.33]  argument indicates the number of items that can be   live at any given time. Each item consists of  [2.x.34]  elements of   the input stream that will be worked on by the worker and copier   functions one after the other on the same thread.    
*  [2.x.35]  If your data objects are large, or their constructors are   expensive, it is helpful to keep in mind that <tt>queue_length</tt>   copies of the <tt>ScratchData</tt> object and   <tt>queue_length*chunk_size</tt> copies of the <tt>CopyData</tt> object   are generated.     An example usage of the function is given by  
* [1.x.3]
*     
*  [2.x.36]   
* [0.x.13]*
   Same as the function above, but for iterator ranges (and, therefore,   filtered iterators).     An example usage of the function for the serial case is given by  
* [1.x.4]
*      and an example usage of the function for the parallel distributed case,   where the copier is only to be called on locally owned cells, is given by  
* [1.x.5]
*     
*  [2.x.37]   
* [0.x.14]