[0.x.0]*
 This namespace contains wrappers for the ArborX library.

* 
* [0.x.1]*
   This class implements a wrapper around  [2.x.0]  BVH stands for Bounding   Volume Hierarchy.     From [Wikipedia](https://en.wikipedia.org/wiki/Bounding_Volume_Hierarchy):   <blockquote>   A bounding volume hierarchy (BVH) is a tree structure on a set of geometric   objects. All geometric objects are wrapped in bounding volumes that form   the leaf nodes of the tree. These nodes are then grouped as small sets and   enclosed within larger bounding volumes. These, in turn, are also grouped   and enclosed within other larger bounding volumes in a recursive fashion,   eventually resulting in a tree structure with a single bounding volume at   the top of the tree. Bounding volume hierarchies are used to support   several operations on sets of geometric objects efficiently, such as in   collision detection and ray tracing.   </blockquote>     Because ArborX uses Kokkos, Kokkos needs to be initialized and finalized   before using this class.  
* [0.x.2]*
     Constructor. Use a vector of BoundingBox  [2.x.1]  as primitives.    
* [0.x.3]*
     Constructor. Use a vector of  [2.x.2]  as primitives.    
* [0.x.4]*
     Return the indices of those BoundingBox objects that satisfy the  [2.x.3]      Because  [2.x.4]  can contain multiple queries, the function returns a pair     of indices and offsets.         Below is an example piece of code that does the following: Let us assume     that we have a set of bounding boxes for objects
* 
*  -  say, the bounding     boxes of each of the cells in a triangulation, or the bounding boxes for     each of the parts of a triangulation in a parallel triangulation. We will     store those in the `bvh_bounding_boxes` array below.         Let us then also assume that we have a set of other bounding boxes, let's     say for small objects that are moving around in our domain. We will put     these bounding boxes into the `bb_intersect` array. The question we would     then like to answer is the following: with which of the BVH bounding     box(es) do each of the bb_intersect bounding boxes intersect? In other     words, in which cell(s) or partition(s) are the particles?         This query is answered by the following piece of code:        
* [1.x.0]
*          The elements of `bvh_bounding_boxes` that intersect the `j`th BoundingBox     of `query_bounding_boxes` are given by:        
* [1.x.1]
*          In many other applications, we are interested not only in finding which     bounding boxes another bounding box lies in, but in fact which bounding     boxes individual points lie in
* 
*  -  say, if instead of objects we have     point-like particles moving around. In that case, we would need to answer     a query for points, and this can be done as follows:        
* [1.x.2]
*          As a final example, we want to show how to find the five nearest points     of a given set of points. This can done as follows:        
* [1.x.3]
*     
* [0.x.5]*
     Underlying ArborX object.    
* [0.x.6]