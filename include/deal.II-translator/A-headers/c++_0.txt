[0.x.0]*


* 
*  [2.x.0] 
*  Since version 9.0, deal.II requires a compiler that supports at least [1.x.0]. As part of this, many places in the internal implementation of deal.II are now using features that were only introduced in C++11. That said, deal.II also has functions and classes that make using it with C++11 features easier.
*  One example is support for C++11 [1.x.1]. deal.II-based codes often have many loops of the kind

* 
* [1.x.2]
*  Using C++11's range-based for loops, you can now write this as follows:

* 
* [1.x.3]
*  This relies on functions such as  [2.x.1]  and equivalents in the DoF handler classes,  [2.x.2]   [2.x.3]  There are variants of these functions that provide iterator ranges for all cells (not just the active ones) and for cells on individual levels.
*  There are numerous other functions in the library that allow for the idiomatic use of range-based for loops. Examples are  [2.x.4]   [2.x.5]   [2.x.6]  among many others.
*  C++11 also introduces the concept of [constexpr](https://en.cppreference.com/w/cpp/language/constexpr) variables and function. The variables defined as `constexpr` are constant values that are computed during the compilation of the program and therefore have zero runtime cost associated with their initialization. Additionally, `constexpr` constants have properly defined lifetimes which prevent the so-called "static initialization order fiasco" completely. %Functions can be marked as `constexpr`, indicating that they can produce compile-time constant return values if their input arguments are constant expressions. Additionally, classes with at least one `constexpr` constructor can be initialized as `constexpr`.
*  As an example, since the constructor  [2.x.7]  array_type &) is `constexpr`, we can initialize a tensor with an array during compile time as:

* 
* [1.x.4]
*  Here, the contents of A are not stored on the stack. Rather, they are initialized during compile time and inserted into the `.data` portion of the executable program. The program can use these values at runtime without spending time for initialization. Initializing tensors can be simplified in one line.

* 
* [1.x.5]
*  Some functions such as determinant() are specified as `constexpr` but they require a compiler with C++14 capability. As such, this function is internally declared as:

* 
* [1.x.6]
*  The macro  [2.x.8]  simplifies to `constexpr` if a C++14-capable compiler is available. Otherwise, for old compilers, it ignores DEAL_II_CONSTEXPR altogether. Therefore, with newer compilers, the user can write

* 
* [1.x.7]
*  assuming `A` is declared with the `constexpr` specifier. This example shows the performance gains of using `constexpr` because here we performed an operation with  [2.x.9]  complexity during compile time, avoiding any runtime cost.

* 
* [0.x.1]*
 deal.II currently only requires a C++11-conforming compiler, but there are a number of functions and classes from the C++14 standard that are easy to provide also in case the compiler only supports C++11. These are collected in the current namespace.
*  The most notable example is the [1.x.8] function which is arguably an oversight for not having been included in C++11 (given that there is [1.x.9] in C++11).
*  There are other small additions in this namespace that allow us to use C++14 features at this point already, even though we don't require a C++14-compliant compiler.
* 

* 
*  [2.x.10]  If the compiler in use actually does support C++14, then the   contents of this namespace are simply imported classes and   functions from namespace `std`. That is, we fall back to what the   compiler provides, rather than our own implementations.

* 
* [0.x.2]*
 deal.II currently only requires a C++11-conforming compiler, but there are a number of functions and classes from the C++17 standard that are easy to provide also in case the compiler only supports C++11. These are collected in the current namespace.
*  The most notable example is the [1.x.10] class that was introduced to C++ starting with the C++17 standard.
*  There are other small additions in this namespace that allow us to use C++17 features at this point already, even though we don't require a C++17-compliant compiler.
* 

* 
*  [2.x.11]  If the compiler in use actually does support C++17, then the   contents of this namespace are simply imported classes and   functions from namespace `std`. That is, we fall back to what the   compiler provides, rather than our own implementations.

* 
* [0.x.3]*
 deal.II currently only requires a C++11-conforming compiler, but there are a number of functions and classes from the C++20 standard that are easy to provide also in case the compiler only supports C++11. These are collected in the current namespace.
*  One example is the [1.x.11] class that was introduced to C++ starting with the C++20 standard. It is used as the return type for the  [2.x.12]   [2.x.13]  and  [2.x.14]  functions, among others, to support range-based for loops (see  [2.x.15]  for examples of range-based for loops, as well as the documentation of the functions mentioned above).
*  There are other small additions in this namespace that allow us to use C++20 features at this point already, even though we don't require a C++20-compliant compiler.
* 

* 
*  [2.x.16]  If the compiler in use actually does support C++20, then the   contents of this namespace are simply imported classes and   functions from namespace `std`. That is, we fall back to what the   compiler provides, rather than our own implementations.

* 
* [0.x.4]