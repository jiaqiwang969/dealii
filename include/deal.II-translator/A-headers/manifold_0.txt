[0.x.0]*


* 
*  [2.x.0] 
*  [1.x.0]
*  The classes in this module are concerned with the description of the manifold in which the domain that a Triangulation describes lives. This manifold description is necessary in several contexts:
*   [2.x.1] 
*     [2.x.2]  Mesh refinement: Whenever a cell is refined, it is necessary   to introduce new vertices in the Triangulation. In the   simplest case, one assumes that the objects that make up the   Triangulation are straight line segments, a bi-linear surface or   a tri-linear volume. The next vertex is then simply put into the   middle of the old ones (where "middle" means a suitable average of the   locations of the pre-existing vertices). This is the default behavior of   the Triangulation class, and is described by the FlatManifold class.
*    On the other hand, if one deals with curved geometries, or geometries which   require a denser refinement in some direction, this is not the appropriate   thing to do. The classes derived from the Manifold base class therefore   describe the geometry of a domain. One can then attach an object of a class   derived from this base class to the Triangulation object using the    [2.x.3]  function associating it with a manifold_id   (see  [2.x.4]  use this manifold_id on the cells, faces or edges   of the triangulation that should be described by this manifold using the    [2.x.5]  function, and then the Triangulation will   ask the manifold object where a new vertex to be located on a cell, face or   edge so attributed should be located upon mesh refinement. Several classes   already exist to support the most common geometries, e.g.,   CylindricalManifold, or PolarManifold, which represent respectively the   geometry obtained when describing your space in cylindrical coordinates or   in polar coordinates. By default, all curved geometries generated using   functions in the GridGenerator namespace attach the correct Manifold object   to the curved parts of the domain.
*     [2.x.6]  Integration: When using higher order finite element methods, it is   often necessary to compute cell terms (like cell contributions to the   matrix and right hand side of the linear system) using curved   approximations of the boundary, rather than the straight line   approximation. The actual implementation of such curved elements happens   in the Mapping class (see the  [2.x.7]  module), which however obtains   its information about the boundary of the domain from the classes   described here. The same is, of course, true when integrating boundary   terms (e.g., inhomogeneous Neumann boundary conditions).
*     [2.x.8]  Domains with nonzero codimension: In cases where a Triangulation is   embedded into a higher dimensional space, i.e., whenever the second   template argument of the Triangulation class is explicitly specified and   larger than the first (for an example, see  [2.x.9] ), the manifold   description objects serve as a tool to describe the geometry not only of   the boundary of the domain but of the domain itself, in case the domain   is a manifold that is in fact curved. In these cases, one can use the    [2.x.10]  function to indicate what manifold   description to use when refining the curve, or when computing integrals   using high order mappings.
*   [2.x.11]  Many other examples, as well as much theoretical underpinning for the implementation in deal.II, is provided in the  [2.x.12]  "geometry paper".
*  In deal.II, a Manifold is seen as a collection of points, together with a notion of distance between points (on the manifold). New points are typically obtained by providing a local coordinate system on the manifold, identifying existing points in the local coordinate system (pulling them back using the local map to obtain their local coordinates), find the new point in the local coordinate system by weighted sums of the existing points, and transforming back the point in the real space (pushing it forward using the local map). The main class that implements this mechanism is the ChartManifold class, and this is the class that users will likely overload for complex geometries.
*  While this process is non trivial in most cases of interest, for most of the trivial geometries, like cylinders, spheres or shells, deal.II provides reasonable implementations. More complicated examples can be described using the techniques shown in  [2.x.13]  and  [2.x.14] .
*  In the grand scheme of things, the classes of this module interact with a variety of other parts of the library:

* 
* [1.x.1]
* 

*  [1.x.2]
*  A simple example why dealing with curved geometries is already provided by  [2.x.15] , though it is not elaborated there. By default, the functions in GridGenerator will attach manifolds to meshes when needed. In each code snippet below we call  [2.x.16]  to remove these manifolds and handle all Manifold attachment in the example itself to make the impact of the choice of Manifold clear.
*  Consider this small variation of the  [2.x.17]  function shown there, where we simply refine [1.x.3] cell several times:

* 
* [1.x.4]
*  This code leads to a mesh that looks like this:
*   [2.x.18] 
*  Our intention was to get a mesh that resembles a ring. However, since we did not describe this to the triangulation, what happens is that we start with the 10 coarse cells in circumferential direction we told  [2.x.19]  to create, and each of these is then 3 times globally refined. Each time refinement requires a new vertex, it is placed in the middle of the existing ones, regardless of what we may have intended (but omitted to describe in code).
*  This is easily remedied. Consider this code:

* 
* [1.x.5]
*  This code is better, producing the following mesh:
*   [2.x.20] 
*  The mesh looks better in that it faithfully reproduces the circular inner and outer boundaries of the domain. However, it is still possible to identify 20 kinks in the tangential lines. They result from the fact that every time a cell is refined, new vertices on interior lines are just placed into the middle of the existing line (the boundary lines are handled differently because we have attached a manifold object). In the first refinement with 10 cells, we got improved points because both outer boundaries have provided a curved description according to the description on blending different manifolds below. In other words, the new points after the first refinement end up in places that may be in the geometric middle of a straight line, but not on a circle around the center.
*  This can be remedied by assigning a manifold description not only to the lines along the boundary, but also to the radial lines and cells (which, in turn, will inherit it to the new lines that are created upon mesh refinement). This is exactly what  [2.x.21]  does by default. For demonstration purposes, we disable the default Manifold behavior and then duplicate it manually:

* 
* [1.x.6]
*  This leads to the following mesh:
*   [2.x.22] 
*  So why does this matter? After all, the last two meshes describe the exact same domain and we know that upon mesh refinement we obtain the correct solution regardless of the choice of cells, as long as the diameter of the largest cell goes to zero.
*  There are two answers to this question. First, the numerical effort of solving a partial differential equation to a certain accuracy typically depends on the [1.x.7] of cells since the constant  [2.x.23]  in error estimates of the form  [2.x.24]  depends on factors such as the maximal ratio of radii of the smallest circumscribed to largest inscribed circle over all cells (for triangles; or a suitable generalization for other types of cells). Thus, it is worthwhile creating meshes with cells that are as well-formed as possible. This is arguably not so much of an issue for the meshes shown above, but is sometimes an issue. Consider, for example, the following code and mesh:

* 
* [1.x.8]
* 
*   [2.x.25] 
*  Here, we create only three circumferential cells in the beginning, and refining them leads to the mesh shown. Clearly, we have cells with bad aspect ratios, despite the first refinement that puts the new point into the middle.
*  If we drive this further and start with a coarse mesh of a much thinner rim between the radii 0.8 and 1.0 and only three cells (which may be inappropriate here, since we know that it is not sufficient, but may also be impossible to avoid for complex geometries generated in mesh generators), we observe the following:
* 

* 
* [1.x.9]
* 
*   [2.x.26] 
*  This mesh neither has the correct geometry after refinement, nor do all cells have positive area as is necessary for the finite element method to work. However, even when starting with such an inopportune mesh, we can make things work by attaching a suitable geometry description not only to the boundary but also to interior cells and edges, using the same code as above:

* 
* [1.x.10]
* 
*   [2.x.27] 
*  In this last example we finally let GridGenerator do its job and we keep the default manifold configuration, which is a SphericalManifold on every cell and face.
*  Here, even starting with an initial, inappropriately chosen mesh retains our ability to adequately refine the mesh into one that will serve us well. This example may be manufactured here, but it is relevant, for example in the context of what  [2.x.28]  produces in 3d (see the documentation of this function). It is also germane to the cases discussed in the  [2.x.29]  "glossary entry on distorted cells".
*   [2.x.30]   [2.x.31]  "Glossary entry on manifold indicators"
*  [1.x.11]
*  In a realistic application, it happens regularly that different manifold descriptions need to be combined. The simplest case is when a curved description is only available for the boundary but not for the interior of the computational domain. The manifold description for a ball also falls into this category, as it needs to combine a spherical manifold at the circular part with a straight-sided description in the center of the domain where the spherical manifold is not valid.
*  In general, the process of blending different manifold descriptions in deal.II is achieved by the so-called transfinite interpolation. Its formula in 2D is, for example, described on [1.x.12]. Given a point  [2.x.32]  on a chart, the image of this point in real space is given by

* 
* [1.x.13]
*  where  [2.x.33]  denote the four vertices bounding the image space and  [2.x.34]  are the four curves describing the lines of the cell.
*  If we want to find the center of the cell according to the manifold (that is also used when the grid is refined), the chart is the unit cell  [2.x.35]  and we want to evaluate this formula in the point  [2.x.36] . In that case,  [2.x.37]  is the position of the midpoint of the lower face (indexed by 2 in deal.II's ordering) that is derived from its own manifold,  [2.x.38]  is the position of the midpoint of the upper face (indexed by 3 in deal.II),  [2.x.39]  is the midpoint of the face on the left (indexed by 0), and  [2.x.40]  is the midpoint of the right face. In this formula, the weights equate to  [2.x.41]  for the four midpoints in the faces and to  [2.x.42]  for the four vertices. These weights look weird at first sight because the vertices enter with negative weight but the mechanism does what we want: In case of a cell with curved description on two opposite faces but straight lines on the other two faces, the negative weights of  [2.x.43]  in the vertices balance with the center of the two straight lines in radial direction that get weight  [2.x.44] . Thus, the average is taken over the two center points in curved direction, exactly placing the new point in the middle.
*  In three spatial dimensions, the weights are  [2.x.45]  for the face midpoints,  [2.x.46]  for the line mid points, and  [2.x.47]  for the vertices, again balancing the different entities. In case all the surrounding of a cell is straight, the formula reduces to the obvious weight  [2.x.48]  on each of the eight vertices.
*  In the MappingQGeneric class, a generalization of this concept to the support points of a polynomial representation of curved cells, the nodes of the Gauss-Lobatto quadrature, is implemented by evaluating the boundary curves in the respective Gauss-Lobatto points  [2.x.49]  and combining them with the above formula. The weights have been verified to yield optimal convergence rates  [2.x.50]  also for very high polynomial degrees, say  [2.x.51] .
*  In the literature, other boundary descriptions are also used. Before version 9.0 deal.II used something called Laplace smoothing where the weights that are applied to the nodes on the circumference to get the position of the interior nodes are determined by solving a Laplace equation on the unit element. However, this led to boundary layers close to the curved description, i.e., singularities in the higher derivatives of the mapping from unit to real cell.
*  If the transition from a curved boundary description to a straight description in the interior is done wrong, it is typically impossible to achieve high order convergence rates. For example, the Laplace smoothing inside a single cell leads to a singularity in the fourth derivative of the mapping from the reference to the real cell, limiting the convergence rate to 3 in the cells at the boundary (and 3.5 if global L2 errors were measured in 2D). Other more crude strategies, like completely ignoring the presence of two different manifolds and simply computing the additional points of a high-order mapping in a straight coordinate system, could lead to even worse convergence rates. The current implementation in deal.II, on the other hand, has been extensively verified in this respect and should behave optimally.
*  A bad strategy for blending a curved boundary representation with flat interior representations obviously also reflects mesh quality. For example, the above case with only 3 circumferential cells leads to the following mesh with Laplace manifold smoothing rather than the interpolation from the boundary as is implemented in deal.II:
*   [2.x.52] 
*  To use a more practical example, consider the refinement of a ball with a SphericalManifold attached to the spherical surface. The Laplace-type smoothing gives the following rather poor mesh:
*   [2.x.53] 
*  If we, instead, use the weights derived from transfinite interpolation, the situation is considerably improved:
*   [2.x.54] 
*  Of course, one could get even better meshes by applying the TransfiniteInterpolationManifold to the whole domain except the boundary where SphericalManifold is attached, as shown by the figures in that class, but in principle, the mesh smoothing implemented in deal.II is as good as it can get from a boundary description alone.
* 

* 
*  [2.x.55]   [2.x.56]  Luca Heltai, 2013, Martin Kronbichler, 2017

* 
* [0.x.1]