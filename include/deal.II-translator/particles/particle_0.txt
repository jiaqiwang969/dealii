[0.x.0]*
 A namespace that contains all classes that are related to the particle implementation, in particular the fundamental Particle class.

* 
* [0.x.1]*
     Internal alias of cell level/index pair.    
* [0.x.2]*
   A class that represents a particle in a domain that is meshed by   a triangulation of some kind. The data this class stores is the   position of the particle in the overall space, the position of   the particle in the reference coordinate system of the cell it is   currently in, an ID number that is unique among all particles,   and a variable number of "properties".     The "properties" attached to each object of this class are   stored by a PropertyPool object. These properties are   stored as an array of `double` variables that can be accessed   via an ArrayView object. For example, if one wanted to equip   each particle with a "temperature" and "chemical composition"   property that is advected along with the particle (and may change   from time step to time step based on some differential equation,   for example), then one would allocate two properties per particle   in the PropertyPool object.     In practice, however, one often wants to associate properties   with particles that are not just independent numbers as in the   situation above. An example would be if one wanted to track the   stress or strain that a particle is subjected to
* 
*  -  a tensor-valued   quantity. In these cases, one would [1.x.0] these scalar   properties as the [1.x.1]. In   other words, one would first tell the PropertyPool to allocate   as many properties per particle as there are components in the   tensor one wants to track, and then write small conversion functions that   take the ArrayView of scalar properties returned by the   get_properties() function and convert it to a tensor of the   appropriate type. This can then be evaluated and evolved in each   time step. A second conversion function would convert back from a   tensor to an ArrayView object to store the updated data back in the   particle via the set_properties() function.     There are of course cases where the properties one cares about are   not real (or, in computers, floating point) numbers but rather   categorical: For example, one may want to mark some particles   as "red", "blue", or "green". The property might then either be   represented as an integer, or as an element of an `enum`. In these   cases, one would need to come up with a way to [1.x.2]   these sorts of categorical fields in terms of floating point   numbers. For example, one could map "red" to the floating point number   1.0, "blue" to 2.0, and "green" to 3.0. The conversion functions   to translate between these two representations should then not be very   difficult to write either.    
*  [2.x.0]   
* [0.x.3]*
     Empty constructor for Particle, creates a particle at the     origin.    
* [0.x.4]*
     Constructor for Particle. This function creates a particle with the     specified ID at the specified location. Note that there is no check for     duplicate particle IDs so the user must make sure the IDs are unique over     all processes. Data is stored in a global PropertyPool object     (corresponding to the global "heap") but can later be transferred to     another property pool by calling set_property_pool().          [2.x.1]  location Initial location of particle.      [2.x.2]  reference_location Initial location of the particle     in the coordinate system of the reference cell.      [2.x.3]  id Globally unique ID number of particle.    
* [0.x.5]*
     Copy-constructor for Particle. This function creates a particle with     exactly the state of the input argument. The copied data is stored in a     global PropertyPool object (corresponding to the global "heap") but can     later be transferred to another property pool by calling     set_property_pool().    
* [0.x.6]*
     Constructor for Particle. This function creates a particle from a data     vector. Data is stored in a global PropertyPool object (corresponding to     the global "heap") but can later be transferred to another property pool     by calling set_property_pool(). This constructor is usually called after     serializing a particle by calling the write_data() function.          [2.x.4]  begin_data A pointer to a memory location from which     to read the information that completely describes a particle. This     class then de-serializes its data from this memory location and     advances the pointer beyond the data that has been read to initialize     the particle information.          [2.x.5]  property_pool An optional pointer to a property pool     that is used to manage the property data used by this particle. If this     argument is not provided, then a global property pool is used; on the     other hand,     if a non-null pointer is provided, this constructor assumes  [2.x.6]      contains serialized data of the same length and type that is allocated     by  [2.x.7]  If the data pointer provided here corresponds     to data for a particle that has properties, then this function will only     succeed if a property pool is provided as second argument that is able to     store the correct number of properties per particle.    
* [0.x.7]*
     Move constructor for Particle, creates a particle from an existing     one by stealing its state.    
* [0.x.8]*
     Copy assignment operator.    
* [0.x.9]*
     Move assignment operator.    
* [0.x.10]*
     Destructor. Releases the property handle if it is valid, and     therefore frees that memory space for other particles. (Note:     the memory is managed by the property pool, and the pool is responsible     for what happens to the memory.    
* [0.x.11]*
     Write particle data into a data array. The array is expected     to be large enough to take the data, and the void pointer should     point to the first entry of the array to which the data should be     written. This function is meant for serializing all particle properties     and later de-serializing the properties by calling the appropriate     constructor Particle(void&data, PropertyPoolproperty_pool = nullptr);          [2.x.8]  [in] data The memory location to write particle data       into.          [2.x.9]  A pointer to the next byte after the array to which data has       been written.    
* [0.x.12]*
     Update all of the data associated with a particle: id,     location, reference location and, if any, properties by using a     data array. The array is expected to be large enough to take the data,     and the void pointer should point to the first entry of the array to     which the data should be written. This function is meant for     de-serializing the particle data without requiring that a new Particle     class be built. This is used in the ParticleHandler to update the     ghost particles without de-allocating and re-allocating memory.          [2.x.10]  data A pointer to a memory location from which     to read the information that completely describes a particle. This     class then de-serializes its data from this memory location.          [2.x.11]  A pointer to the next byte after the array from which data has       been read.    
* [0.x.13]*
     Set the location of this particle. Note that this does not check     whether this is a valid location in the simulation domain.          [2.x.12]  [in] new_location The new location for this particle.        
*  [2.x.13]  In parallel programs, the ParticleHandler class stores particles       on both the locally owned cells, as well as on ghost cells. The       particles on the latter arecopies* of particles owned on other       processors, and should therefore be treated in the same way as       ghost entries in  [2.x.14]  "vectors with ghost elements"       or  [2.x.15]  "ghost cells": In both cases, one should       treat the ghost elements or cells as `const` objects that shouldn't       be modified even if the objects allow for calls that modify       properties. Rather, properties should only be modified on processors       that actuallyown* the particle.    
* [0.x.14]*
     Get the location of this particle.          [2.x.16]  The location of this particle.    
* [0.x.15]*
     Set the reference location of this particle.          [2.x.17]  [in] new_reference_location The new reference location for     this particle.        
*  [2.x.18]  In parallel programs, the ParticleHandler class stores particles       on both the locally owned cells, as well as on ghost cells. The       particles on the latter arecopies* of particles owned on other       processors, and should therefore be treated in the same way as       ghost entries in  [2.x.19]  "vectors with ghost elements"       or  [2.x.20]  "ghost cells": In both cases, one should       treat the ghost elements or cells as `const` objects that shouldn't       be modified even if the objects allow for calls that modify       properties. Rather, properties should only be modified on processors       that actuallyown* the particle.    
* [0.x.16]*
     Return the reference location of this particle in its current cell.    
* [0.x.17]*
     Return the ID number of this particle. The ID of a particle is intended     to be a property that is globally unique even in parallel computations     and is transferred along with other properties of a particle if it     moves from a cell owned by the current processor to a cell owned by     a different processor, or if ownership of the cell it is on is     transferred to a different processor.    
* [0.x.18]*
     Set the ID number of this particle. The ID of a particle is intended     to be a property that is globally unique even in parallel computations     and is transferred along with other properties of a particle if it     moves from a cell owned by the current processor to a cell owned by     a different processor, or if ownership of the cell it is on is     transferred to a different processor. As a consequence, when setting     the ID of a particle, care needs to be taken to ensure that particles     have globally unique IDs. (The ParticleHandler does not itself check     whether particle IDs so set are globally unique in a parallel setting     since this would be a very expensive operation.)          [2.x.21]  new_id The new ID number for this particle.        
*  [2.x.22]  In parallel programs, the ParticleHandler class stores particles       on both the locally owned cells, as well as on ghost cells. The       particles on the latter arecopies* of particles owned on other       processors, and should therefore be treated in the same way as       ghost entries in  [2.x.23]  "vectors with ghost elements"       or  [2.x.24]  "ghost cells": In both cases, one should       treat the ghost elements or cells as `const` objects that shouldn't       be modified even if the objects allow for calls that modify       properties. Rather, properties should only be modified on processors       that actuallyown* the particle.    
* [0.x.19]*
     Tell the particle where to store its properties (even if it does not     own properties). Usually this is only done once per particle, but     since the particle does not know about the properties,     we want to do it not at construction time. Another use for this     function is after particle transfer to a new process.         If a particle already stores properties in a property pool, then     their values are saved, the memory is released in the previous     property pool, and a copy of the particle's properties will be     allocated in the new property pool.    
* [0.x.20]*
     Return whether this particle has a valid property pool and a valid     handle to properties.    
* [0.x.21]*
     Set the properties of this particle.          [2.x.25]  [in] new_properties An ArrayView containing the     new properties for this particle.        
*  [2.x.26]  In parallel programs, the ParticleHandler class stores particles       on both the locally owned cells, as well as on ghost cells. The       particles on the latter arecopies* of particles owned on other       processors, and should therefore be treated in the same way as       ghost entries in  [2.x.27]  "vectors with ghost elements"       or  [2.x.28]  "ghost cells": In both cases, one should       treat the ghost elements or cells as `const` objects that shouldn't       be modified even if the objects allow for calls that modify       properties. Rather, properties should only be modified on processors       that actuallyown* the particle.    
* [0.x.22]*
     Get write-access to properties of this particle. If the     particle has no properties yet, but has access to a     PropertyPool object it will allocate properties to     allow writing into them. If it has no properties and     has no access to a PropertyPool this function will     throw an exception.          [2.x.29]  An ArrayView of the properties of this particle.    
* [0.x.23]*
     Get read-access to properties of this particle. If the particle     has no properties this function throws an exception.          [2.x.30]  An ArrayView of the properties of this particle.    
* [0.x.24]*
     Return the size in bytes this particle occupies if all of its data is     serialized (i.e. the number of bytes that is written by the write_data     function of this class).    
* [0.x.25]*
     Write the data of this object to a stream for the purpose of     serialization using the [BOOST serialization     library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).    
* [0.x.26]*
     Read the data of this object from a stream for the purpose of     serialization using the [BOOST serialization     library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).     Note that in order to store the properties correctly, the property pool     of this particle has to be known at the time of reading, i.e.     set_property_pool() has to have been called, before this function is     called.    
* [0.x.27]*
     Free the memory of the property pool    
* [0.x.28]*
     Write and read the data of this object from a stream for the purpose     of serialization using the [BOOST serialization     library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).    
* [0.x.29]*
     A global property pool used when a particle is not associated with     a property pool that belongs to, for example, a ParticleHandler.    
* [0.x.30]*
     A pointer to the property pool. Necessary to translate from the     handle to the actual memory locations.    
* [0.x.31]*
     A handle to all particle properties    
* [0.x.32]*
       Make sure we can construct an RTree of  [2.x.31]  objects.      
* [0.x.33]*
          [2.x.32]  expects a const reference to an indexable object. For         a  [2.x.33]  object, this is its reference location.        
* [0.x.34]