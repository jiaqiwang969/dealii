[0.x.0]*
 A namespace for data structures that are going to be passed from DataOut to the member functions of DataPostprocessor.

* 
* [0.x.1]*
   A base class containing common elements for the Scalar and Vector classes   that are passed as arguments to    [2.x.0]  and    [2.x.1]  This common base class   provides access to the points at which the solution is being evaluated,   and a few other fields, as described in the following.     [1.x.0]     If appropriate, i.e., if the object that is currently being processed   is a face of a cell and the DataPostprocessor object is called from   DataOutFaces or a similar class, then the current object also   stores the normal vectors to the geometry on which output   is generated, at these evaluation points.     On the other hand, if the solution is being evaluated on a cell,   then the  [2.x.2]  member variable does not contain anything   useful.     [1.x.1]     DataPostprocessor is typically called from classes such as DataOut   or DataOutFaces that evaluate solution fields on a cell-by-cell   basis. As a consequence, classes derived from DataPostprocessor   (or DataPostprocessorScalar, DataPostprocessorVector, or   DataPostprocessorTensor) sometimes   need to use which cell is currently under investigation. Consequently,   DataOut and similar classes pass the cell they are currently working   on to DataPostprocessor via the classes in this namespace (and   specifically the current base class).     However, the situation is not so simple. This is because the current   class (and those derived from it) only knows the space dimension in   which the output lives. But this can come from many sources. For example,   if we are in 3d, this may be because we are working on a DoFHandler<3> or   a DoFHandler<2,3> (i.e., either a 3d mesh, or a 2d meshes of a 2d surface   embedded in 3d space). Another case is classes like DataOutRotation or   DataOutStack, then  [2.x.3]  being equal to 3 might mean that we are   actually working on a DoFHandler<2>.     In other words, just because we know the value of the  [2.x.4]    template argument of the current class does not mean that the   data type of the cell iterator that is currently being worked on   is obvious.     To make the cell iterator accessible nevertheless, this class uses   an object of type  [2.x.5]  to store the cell iterator. You can   think of this as being a void pointer that can point to anything.   To use what is being used therefore requires the user to know the   data type of the thing being pointed to.     To make this work, the DataOut and related classes store in objects   of the current type a representation of the cell. To get it back out,   you would use the get_cell() function that requires you to say,   as a template parameter, the dimension of the cell that is currently   being processed. This is knowledge you typically have in an   application: for example, if your application runs in  [2.x.6]  space   dimensions and you are currently using the DataOut class, then the cells   that are worked on have data type  [2.x.7] .   Consequently, in a postprocessor, you can call <code>inputs.get_cell [2.x.8]    </code>. For technical reasons, however, C++ will typically require you to   write this as  [2.x.9]  because the   member function we call here requires that we explicitly provide the   template argument.     Let us consider a complete example of a postprocessor that computes   the fluid norm of the stress  [2.x.10]  from the   viscosity  [2.x.11]  and the gradient of the fluid velocity,  [2.x.12] ,   assuming that the viscosity is something that depends on the cell's   material id. This can be done using a class we derive from   DataPostprocessorScalar where we overload the    [2.x.13]  function that receives the   values and gradients of the velocity (plus of other solution variables such   as the pressure, but let's ignore those for the moment). Then we could use   code such as this:  
* [1.x.2]
*   
* [0.x.2]*
     An array of vectors normal to the faces of cells, evaluated at the points     at which we are generating graphical output. This array is only used by     the DataOutFaces class, and is left empty by all other classes for     which the DataPostprocessor framework can be used. In the case of     DataOutFaces, the array contains the outward normal vectors to the     face, seen from the interior of the cell.         This array is only filled if a user-derived class overloads the      [2.x.14]  and the function     returns (possibly among other flags)      [2.x.15]   Alternatively, a class     derived from DataPostprocessorScalar, DataPostprocessorVector,     or DataPostprocessorTensor may pass this flag to the constructor of     these three classes.    
* [0.x.3]*
     An array of coordinates corresponding to the locations at which     we are generating graphical output on one cell.         This array is only filled if a user-derived class overloads the      [2.x.16]  and the function     returns (possibly among other flags)      [2.x.17]   Alternatively, a class     derived from DataPostprocessorScalar, DataPostprocessorVector,     or DataPostprocessorTensor may pass this flag to the constructor of     these three classes.    
* [0.x.4]*
     Set the cell that is currently being used in evaluating the data     for which the DataPostprocessor object is being called.         This function is not usually called from user space, but is instead     called by DataOut and similar classes when creating the object that     is then passed to DataPostprocessor.    
* [0.x.5]*
     Set the cell that is currently being used in evaluating the data     for which the DataPostprocessor object is being called.         This function is not usually called from user space, but is instead     called by DataOut and similar classes when creating the object that     is then passed to DataPostprocessor.          [2.x.18]  Use the equivalent function with the dim template parameter     instead.    
* [0.x.6]*
     Query the cell on which we currently produce graphical output.     See the documentation of the current class for an example on how     to use this function.    
* [0.x.7]*
     Query the cell on which we currently produce graphical output.     See the documentation of the current class for an example on how     to use this function.          [2.x.19]  Use the equivalent function with the dim template parameter     instead.    
* [0.x.8]*
     The place where set_cell() stores the cell. Since the actual data     type of the cell iterator can be many different things, the     interface uses  [2.x.20]  here. This makes assignment in set_cell()     simple, but requires knowing the data type of the stored object in     get_cell().    
* [0.x.9]*
   A structure that is used to pass information to    [2.x.21]  It contains   the values and (if requested) derivatives of a scalar solution   variable at the evaluation points on a cell or face. (This class   is not used if a scalar solution is complex-valued, however,   since in that case the real and imaginary parts are treated   separately
* 
*  -  resulting in vector-valued inputs to data   postprocessors, which are then passed to    [2.x.22]  instead.)     Through the fields in the CommonInputs base class, this class also   makes available access to the locations of evaluations points,   normal vectors (if appropriate), and which cell data is currently   being evaluated on (also if appropriate).  
* [0.x.10]*
     An array of values of the (scalar) solution at each of the evaluation     points used to create graphical output from one cell, face, or other     object.    
* [0.x.11]*
     An array of gradients of the (scalar) solution at each of the evaluation     points used to create graphical output from one cell, face, or other     object.         This array is only filled if a user-derived class overloads the      [2.x.23]  and the function     returns (possibly among other flags)      [2.x.24]   Alternatively, a class     derived from DataPostprocessorScalar, DataPostprocessorVector,     or DataPostprocessorTensor may pass this flag to the constructor of     these three classes.    
* [0.x.12]*
     An array of second derivatives of the (scalar) solution at each of the     evaluation points used to create graphical output from one cell, face, or     other object.         This array is only filled if a user-derived class overloads the      [2.x.25]  and the function     returns (possibly among other flags)      [2.x.26]   Alternatively, a class     derived from DataPostprocessorScalar, DataPostprocessorVector,     or DataPostprocessorTensor may pass this flag to the constructor of     these three classes.    
* [0.x.13]*
   A structure that is used to pass information to    [2.x.27]  It contains   the values and (if requested) derivatives of a vector-valued solution   variable at the evaluation points on a cell or face.     This class is also used if the solution vector is complex-valued   (whether it is scalar- or vector-valued is immaterial in that case)   since in that case, the DataOut and related classes take apart the real   and imaginary parts of a solution vector. In practice, that means that   if a solution vector has  [2.x.28]  vector components (i.e., there are    [2.x.29]  functions that form the solution of the PDE you are dealing with;    [2.x.30]  is not the size of the solution vector), then if the solution is   real-valued the `solution_values` variable below will be an array   with as many entries as there are evaluation points on a cell,   and each entry is a vector of length  [2.x.31]  representing the  [2.x.32]    solution functions evaluated at a point. On the other hand, if   the solution is complex-valued (i.e., the vector passed to    [2.x.33]  has complex-valued entries), then the   `solution_values` member variable of this class will have  [2.x.34]    entries for each evaluation point. The first  [2.x.35]  of these entries   represent the real parts of the solution, and the second  [2.x.36]  entries   correspond to the imaginary parts of the solution evaluated at the   evaluation point. The same layout is used for the `solution_gradients`   and `solution_hessians` fields: First the gradients/Hessians of   the real components, then all the gradients/Hessians of the   imaginary components. There is more information about the subject in the   documentation of the DataPostprocessor class itself.  [2.x.37]  provides an   example of how this class is used in a complex-valued situation.     Through the fields in the CommonInputs base class, this class also   makes available access to the locations of evaluations points,   normal vectors (if appropriate), and which cell data is currently   being evaluated on (also if appropriate).  
* [0.x.14]*
     An array of values of a vector-valued solution at each of the evaluation     points used to create graphical output from one cell, face, or other     object.         The outer vector runs over the evaluation points, whereas the inner     vector runs over the components of the finite element field for which     output will be generated.    
* [0.x.15]*
     An array of gradients of a vector-valued solution at each of the     evaluation points used to create graphical output from one cell, face, or     other object.         The outer vector runs over the evaluation points, whereas the inner     vector runs over the components of the finite element field for which     output will be generated.         This array is only filled if a user-derived class overloads the      [2.x.38]  and the function     returns (possibly among other flags)      [2.x.39]   Alternatively, a class     derived from DataPostprocessorScalar, DataPostprocessorVector,     or DataPostprocessorTensor may pass this flag to the constructor of     these three classes.    
* [0.x.16]*
     An array of second derivatives of a vector-valued solution at each of the     evaluation points used to create graphical output from one cell, face, or     other object.         The outer vector runs over the evaluation points, whereas the inner     vector runs over the components of the finite element field for which     output will be generated.         This array is only filled if a user-derived class overloads the      [2.x.40]  and the function     returns (possibly among other flags)      [2.x.41]   Alternatively, a class     derived from DataPostprocessorScalar, DataPostprocessorVector,     or DataPostprocessorTensor may pass this flag to the constructor of     these three classes.    
* [0.x.17]*
 This class provides an interface to compute derived quantities from a solution that can then be output in graphical formats for visualization, using facilities such as the DataOut class.
*  For the (graphical) output of a FE solution one frequently wants to include derived quantities, which are calculated from the values of the solution and possibly the first and second derivatives of the solution. Examples are the calculation of Mach numbers from velocity and density in supersonic flow computations, or the computation of the magnitude of a complex-valued solution as demonstrated in  [2.x.42]  and  [2.x.43]  (where it is actually thesquare* of the magnitude). Other uses are shown in  [2.x.44]  and  [2.x.45] . This class offers the interface to perform such postprocessing. Given the values and derivatives of the solution at those points where we want to generated output, the functions of this class can be overloaded to compute new quantities.
*  A data vector and an object of a class derived from the current one can be given to the  [2.x.46]  function (and similarly for DataOutRotation and DataOutFaces). This will cause  [2.x.47]  to compute the derived quantities instead of using the data provided by the data vector (typically the solution vector). Note that the DataPostprocessor object (i.e., in reality the object of your derived class) has to live until the DataOut object is destroyed as the latter keeps a pointer to the former and will complain if the object pointed to is destroyed while the latter still has a pointer to it. If both the data postprocessor and DataOut objects are local variables of a function (as they are, for example, in  [2.x.48] ), then you can avoid this error by declaring the data postprocessor variable before the DataOut variable as objects are destroyed in reverse order of declaration.
*  In order not to perform needless calculations, DataPostprocessor has to provide information which input data is needed for the calculation of the derived quantities, i.e. whether it needs the values, the first derivative and/or the second derivative of the provided data. DataPostprocessor objects which are used in combination with a DataOutFaces object can also ask for the normal vectors at each point. The information which data is needed has to be provided via the UpdateFlags returned by the virtual function get_needed_update_flags(). It is your responsibility to use only those values which were updated in the calculation of derived quantities. The DataOut object will provide references to the requested data in the call to evaluate_scalar_field() or evaluate_vector_field() (DataOut decides which of the two functions to call depending on whether the finite element in use has only a single, or multiple vector components; note that this is only determined by the number of components in the finite element in use, and not by whether the data computed by a class derived from the current one is scalar or vector valued).
*  Furthermore, derived classes have to implement the get_names() function, where the number of output variables returned by the latter function has to match the size of the vector returned by the former. Furthermore, this number has to match the number of computed quantities, of course.
* 

*  [1.x.3]
*  Deriving from the current class allows to implement very general postprocessors. For example, in the  [2.x.49]  program, we implement a postprocessor that takes a solution that consists of velocity, pressure and temperature (dim+2 components) and computes a variety of output quantities, some of which are vector valued and some of which are scalar. On the other hand, in  [2.x.50]  we implement a postprocessor that only computes the magnitude of a complex number given by a two-component finite element. It seems silly to have to implement four virtual functions for this (evaluate_scalar_field() or evaluate_vector_field(), get_names(), get_update_flags() and get_data_component_interpretation()).
*  To this end there are three classes DataPostprocessorScalar, DataPostprocessorVector, and DataPostprocessorTensor that are meant to be used if the output quantity is either a single scalar, a single vector (here used meaning to have exactly  [2.x.51]  components), or a single tensor (here used meaning to have exactly  [2.x.52]  components). When using these classes, one only has to write a constructor that passes the name of the output variable and the update flags to the constructor of the base class and overload the function that actually computes the results.
*  The DataPostprocessorVector and DataPostprocessorTensor class documentations also contains a extensive examples of how they can be used. The  [2.x.53]  tutorial program contains an example of using the DataPostprocessorScalar class.
* 

*  [1.x.4]
*  There are PDEs whose solutions are complex-valued. For example,  [2.x.54]  and  [2.x.55]  solve problems whose solutions at each point consists of a complex number represented by a  [2.x.56]  variable. ( [2.x.57]  also solves such a problem, but there we choose to represent the solution by two real-valued fields.) In such cases, the vector that is handed to  [2.x.58]  is of type  [2.x.59]  or something essentially equivalent to this. The issue with this, as also discussed in the documentation of DataOut itself, is that the most widely used file formats for visualization (notably, the VTK and VTU formats) can not actually represent complex quantities. The only thing that can be stored in these data files are real-valued quantities.
*  As a consequence, DataOut is forced to take things apart into their real and imaginary parts, and both are output as separate quantities. This is the case for data that is written directly to a file by DataOut, but it is also the case for data that is first routed through DataPostprocessor objects (or objects of their derived classes): All these objects see is a collection of real values, even if the underlying solution vector was complex-valued.
*  All of this has two implications:
* 

* 
* 
*  - If a solution vector is complex-valued, then this results in at least   two input components at each evaluation point. As a consequence, the    [2.x.60]  function is never called,   even if the underlying finite element had only a single solution   component. Instead, DataOut willalways* call    [2.x.61] 
* 

* 
* 
*  - Implementations of the  [2.x.62]  in   derived classes must understand how the solution values are arranged   in the  [2.x.63]  objects they receive as input.   The rule here is: If the finite element has  [2.x.64]  vector components   (including the case  [2.x.65] , i.e., a scalar element), then the inputs   for complex-valued solution vectors will have  [2.x.66]  components. These   first contain the values (or gradients, or Hessians) of the real   parts of all solution components, and then the values (or gradients,   or Hessians) of the imaginary parts of all solution components.
*   [2.x.67]  provides an example of how this class (or, rather, the derived DataPostprocessorScalar class) is used in a complex-valued situation.
* 

* 
*  [2.x.68] 

* 
* [0.x.18]*
   Destructor. This function doesn't actually do anything but is marked as   virtual to ensure that data postprocessors can be destroyed through   pointers to the base class.  
* [0.x.19]*
   This is the main function which actually performs the postprocessing. The   second argument is a reference to the postprocessed data which already has   correct size and must be filled by this function.     The function takes the values, gradients, and higher derivatives of the   solution at all evaluation points, as well as other data such as the   cell, via the first argument. Not all of the member vectors of this   argument will be filled with data
* 
*  -  in fact, derivatives and other   quantities will only be contain valid data if the corresponding flags   are returned by an overridden version of the get_needed_update_flags()   function (implemented in a user's derived class).   Otherwise those vectors will be in an unspecified state.     This function is called when the finite element field that is being   converted into graphical data by DataOut or similar classes represents   scalar data, i.e., if the finite element in use has only a single   real-valued vector component.  
* [0.x.20]*
   Same as the evaluate_scalar_field() function, but this   function is called when the original data vector represents vector data,   i.e., the finite element in use has multiple vector components. This   function is also called if the finite element is scalar but the solution   vector is complex-valued. If the solution vector to be visualized   is complex-valued (whether scalar or not), then the input data contains   first all real parts of the solution vector at each evaluation point, and   then all imaginary parts.  
* [0.x.21]*
   Return the vector of strings describing the names of the computed   quantities.  
* [0.x.22]*
   This function returns information about how the individual components of   output files that consist of more than one data set are to be   interpreted.     For example, if one has a finite element for the Stokes equations in 2d,   representing components (u,v,p), one would like to indicate that the   first two, u and v, represent a logical vector so that later on when we   generate graphical output we can hand them off to a visualization program   that will automatically know to render them as a vector field, rather   than as two separate and independent scalar fields.     The default implementation of this function returns a vector of values    [2.x.69]  indicating that all   output components are independent scalar fields. However, if a derived   class produces data that represents vectors, it may return a vector that   contains values  [2.x.70]    In the example above, one would return a vector with components    [2.x.71]     [2.x.72]     [2.x.73]  for (u,v,p).  
* [0.x.23]*
   Return, which data has to be provided to compute the derived quantities.   This has to be a combination of  [2.x.74]   [2.x.75]     [2.x.76]  and  [2.x.77]  Note that the flag    [2.x.78]  updates    [2.x.79]  If the   DataPostprocessor is to be used in combination with DataOutFaces, you may   also ask for a update of normals via the  [2.x.80]  flag.   The description of the flags can be found at  [2.x.81]   
* [0.x.24]*
 This class provides a simpler interface to the functionality offered by the DataPostprocessor class in case one wants to compute only a single scalar quantity from the finite element field passed to the DataOut class. For this particular case, it is clear what the returned value of  [2.x.82]  should be and we pass the values returned by get_names() and get_needed_update_flags() to the constructor so that derived classes do not have to implement these functions by hand.
*  All derived classes have to do is implement a constructor and overload either  [2.x.83]  or  [2.x.84]  as discussed in the DataPostprocessor class's documentation.
*  An example of how this class can be used can be found in  [2.x.85]  for the case where we are interested in computing the magnitude (a scalar) of a complex-valued solution. While in  [2.x.86] , the solution vector consists of separate real and imaginary parts of the solution,  [2.x.87]  computes the solution vector as a vector with complex entries and the DataPostprocessorScalar class is used there to compute the magnitude and phase of the solution in a different way there.
*  An example of how the closely related DataPostprocessorVector class can be used is found in the documentation of that class. The same is true for the DataPostprocessorTensor class.
* 

* 
*  [2.x.88] 

* 
* [0.x.25]*
   Constructor. Take the name of the single scalar variable computed by   classes derived from the current one, as well as the update flags   necessary to compute this quantity.      [2.x.89]  name The name by which the scalar variable computed by this class   should be made available in graphical output files.    [2.x.90]  update_flags This has to be a combination of  [2.x.91]     [2.x.92]   [2.x.93]  and  [2.x.94]    Note that the flag  [2.x.95]  updates    [2.x.96]  If the   DataPostprocessor is to be used in combination with DataOutFaces, you may   also ask for a update of normals via the  [2.x.97]  flag.   The description of the flags can be found at  [2.x.98]   
* [0.x.26]*
   Return the vector of strings describing the names of the computed   quantities. Given the purpose of this class, this is a vector with a   single entry equal to the name given to the constructor.  
* [0.x.27]*
   This function returns information about how the individual components of   output files that consist of more than one data set are to be   interpreted. Since the current class is meant to be used for a single   scalar result variable, the returned value is obviously    [2.x.99]   
* [0.x.28]*
   Return, which data has to be provided to compute the derived quantities.   The flags returned here are the ones passed to the constructor of this   class.  
* [0.x.29]*
   Copies of the two arguments given to the constructor of this class.  
* [0.x.30]*
 This class provides a simpler interface to the functionality offered by the DataPostprocessor class in case one wants to compute only a single vector quantity (defined as having exactly  [2.x.100]  components) from the finite element field passed to the DataOut class. For this particular case, it is clear what the returned value of  [2.x.101]  should be and we pass the values returned by get_names() and get_needed_update_flags() to the constructor so that derived classes do not have to implement these functions by hand.
*  All derived classes have to do is implement a constructor and overload either  [2.x.102]  or  [2.x.103]  as discussed in the DataPostprocessor class's documentation.
*  An example of how the closely related class DataPostprocessorScalar is used can be found in  [2.x.104] . An example of how the DataPostprocessorTensor class can be used is found in the documentation of that class.
* 

*  [1.x.5]
*  A common example of what one wants to do with postprocessors is to visualize not just the value of the solution, but the gradient. This is, in fact, precisely what  [2.x.105]  needs, and it consequently uses the code below almost verbatim. Let's, for simplicity, assume that you have only a scalar solution. In fact, because it's readily available, let us simply take the  [2.x.106]  solver to produce such a scalar solution. The gradient is a vector (with exactly  [2.x.107]  components), so the current class fits the bill to produce the gradient through postprocessing. Then, the following code snippet implements everything you need to have to visualize the gradient:

* 
* [1.x.6]
*  The only thing that is necessary is to add another output to the call of  [2.x.108]  in the  [2.x.109]  function of the  [2.x.110]  class of that example program. The corresponding code snippet would then look like this (where we also use VTU as the file format to output the data):

* 
* [1.x.7]
* 
*  This leads to the following output for the solution and the gradients (you may want to compare with the solution shown in the results section of  [2.x.111] ; the current data is generated on a coarser mesh for simplicity):
*   [2.x.112]   [2.x.113] 
*  In the second image, the background color corresponds to the magnitude of the gradient vector and the vector glyphs to the gradient itself. It may be surprising at first to see that from each vertex, multiple vectors originate, going in different directions. But that is because the solution is only continuous: in general, the gradient is discontinuous across edges, and so the multiple vectors originating from each vertex simply represent the differing gradients of the solution at each adjacent cell.
*  The output above
* 
*  -  namely, the gradient  [2.x.114]  of the solution
* 
*  -  corresponds to the temperature gradient if one interpreted  [2.x.115]  as solving a steady-state heat transfer problem. It is very small in the central part of the domain because in  [2.x.116]  we are solving an equation that has a coefficient  [2.x.117]  that is large in the central part and small on the outside. This can be thought as a material that conducts heat well, and consequently the temperature gradient is small. On the other hand, the "heat flux" corresponds to the quantity  [2.x.118] . For the solution of that equation, the flux should be continuous across the interface. This is easily verified by the following modification of the postprocessor:

* 
* [1.x.8]
*  With this postprocessor, we get the following picture of the heat flux:
*   [2.x.119] 
*  As the background color shows, the gradient times the coefficient is now a continuous function. There are (large) vectors around the interface where the coefficient jumps (at half the distance between the center of the disk to the perimeter) that seem to point in the wrong direction; this is an artifact of the fact that the solution has a discontinuous gradient at these points and that the numerical solution on the current grid does not adequately resolve this interface. This, however, is not important to the current discussion.
* 

*  [1.x.9]
*  The example above uses a scalar solution and its gradient as an example. On the other hand, one may want to do something similar for the gradient of a vector-valued displacement field (such as the strain or stress of a displacement field, like those computed in  [2.x.120] ,  [2.x.121] ,  [2.x.122] , or  [2.x.123] ). In that case, the solution is already vector valued and the stress is a (symmetric) tensor.
*  deal.II does not currently support outputting tensor-valued quantities, but they can of course be output as a collection of scalar-valued components of the tensor. This can be facilitated using the DataPostprocessorTensor class. The documentation of that class contains an example.
* 

* 

* 
*  [2.x.124] 

* 
* [0.x.31]*
   Constructor. Take the name of the single vector variable computed by   classes derived from the current one, as well as the update flags   necessary to compute this quantity.      [2.x.125]  name The name by which the vector variable computed by this class   should be made available in graphical output files.    [2.x.126]  update_flags This has to be a combination of  [2.x.127]     [2.x.128]   [2.x.129]  and  [2.x.130]    Note that the flag  [2.x.131]  updates    [2.x.132]  If the   DataPostprocessor is to be used in combination with DataOutFaces, you may   also ask for a update of normals via the  [2.x.133]  flag.   The description of the flags can be found at  [2.x.134]   
* [0.x.32]*
   Return the vector of strings describing the names of the computed   quantities. Given the purpose of this class, this is a vector with dim   entries all equal to the name given to the constructor.  
* [0.x.33]*
   This function returns information about how the individual components of   output files that consist of more than one data set are to be   interpreted. Since the current class is meant to be used for a single   vector result variable, the returned value is obviously    [2.x.135]  repeated dim times.  
* [0.x.34]*
   Return which data has to be provided to compute the derived quantities.   The flags returned here are the ones passed to the constructor of this   class.  
* [0.x.35]*
   Copies of the two arguments given to the constructor of this class.  
* [0.x.36]*
 This class provides a simpler interface to the functionality offered by the DataPostprocessor class in case one wants to compute only a single tensor quantity (defined as having exactly  [2.x.136]  components) from the finite element field passed to the DataOut class.
*  For this case, we would like to output all of these components as parts of a tensor-valued quantity. Unfortunately, the various backends that write DataOut data in graphical file formats (see the DataOutBase namespace for what formats can be written) do not support tensor data at the current time. In fact, neither does the DataComponentInterpretation namespace that provides semantic information how individual components of graphical data should be interpreted. Nevertheless, like DataPostprocessorScalar and DataPostprocessorVector, this class helps with setting up what the get_names() and get_needed_update_flags() functions required by the DataPostprocessor base class should return, and so the current class implements these based on information that the constructor of the current class receives from further derived classes.
*  (In order to visualize this collection of scalar fields that, together, are then supposed to be interpreted as a tensor, one has to (i) use a visualization program that can visualize tensors, and (ii) teach it how to re-combine the scalar fields into tensors. In the case of VisIt
* 
*  -  see https://wci.llnl.gov/simulation/computer-codes/visit/
* 
*  -  this is done by creating a new "Expression": in essence, one creates a variable, say "grad_u", that is tensor-valued and whose value is given by the expression <code>{{grad_u_xx,grad_u_xy}, {grad_u_yx, grad_u_yy}}</code>, where the referenced variables are the names of scalar fields that, here, are produced by the example below. VisIt is then able to visualize this "new" variable as a tensor.)
*  All derived classes have to do is implement a constructor and overload either  [2.x.137]  or  [2.x.138]  as discussed in the DataPostprocessor class's documentation.
*  An example of how the closely related class DataPostprocessorScalar is used can be found in  [2.x.139] . An example of how the DataPostprocessorVector class can be used is found in the documentation of that class.
* 

*  [1.x.10]
*  A common example of what one wants to do with postprocessors is to visualize not just the value of the solution, but the gradient. This class is meant for tensor-valued outputs, so we will start with a vector-valued solution: the displacement field of  [2.x.140] . The gradient is a rank-2 tensor (with exactly  [2.x.141]  components), so the current class fits the bill to produce the gradient through postprocessing. Then, the following code snippet implements everything you need to have to visualize the gradient:

* 
* [1.x.11]
*  The only tricky part in this piece of code is how to sort the  [2.x.142]  elements of the strain tensor into the one vector of computed output quantities
* 
*  -  in other words, how to [1.x.12] the elements of the tensor into the vector. This is facilitated by the  [2.x.143]  function that takes a pair of indices that specify a particular element of the tensor and returns a vector index that is then used in the code above to fill the  [2.x.144]  array.
*  The last thing that is necessary is to add another output to the call of  [2.x.145]  in the  [2.x.146]  function of the  [2.x.147]  class of that example program. The corresponding code snippet would then look like this:

* 
* [1.x.13]
* 
*  This leads to the following output for the displacement field (i.e., the solution) and the gradients (you may want to compare with the solution shown in the results section of  [2.x.148] ; the current data is generated on a uniform mesh for simplicity):
*   [2.x.149]   [2.x.150] 
*  These pictures show an ellipse representing the gradient tensor at, on average, every tenth mesh point. You may want to read through the documentation of the VisIt visualization program (see https://wci.llnl.gov/simulation/computer-codes/visit/) for an interpretation of how exactly tensors are visualizated.
*  In elasticity, one is often interested not in the gradient of the displacement, but in the "strain", i.e., the symmetrized version of the gradient  [2.x.151] . This is easily facilitated with the following minor modification:

* 
* [1.x.14]
* 
*  Using this class in  [2.x.152]  leads to the following visualization:
*   [2.x.153] 
*  Given how easy it is to output the strain, it would also not be very complicated to write a postprocessor that computes the [1.x.15] in the solution field as the stress is easily computed from the strain by multiplication with either the strain-stress tensor or, in simple cases, the Lam&eacute; constants.
* 

* 
*  [2.x.154] 

* 
* [0.x.37]*
   Constructor. Take the name of the single vector variable computed by   classes derived from the current one, as well as the update flags   necessary to compute this quantity.      [2.x.155]  name The name by which the vector variable computed by this class   should be made available in graphical output files.    [2.x.156]  update_flags This has to be a combination of  [2.x.157]     [2.x.158]   [2.x.159]  and  [2.x.160]    Note that the flag  [2.x.161]  updates    [2.x.162]  If the   DataPostprocessor is to be used in combination with DataOutFaces, you may   also ask for a update of normals via the  [2.x.163]  flag.   The description of the flags can be found at  [2.x.164]   
* [0.x.38]*
   Return the vector of strings describing the names of the computed   quantities. Given the purpose of this class, this is a vector with dim   entries all equal to the name given to the constructor.  
* [0.x.39]*
   This function returns information about how the individual components of   output files that consist of more than one data set are to be   interpreted. Since the current class is meant to be used for a single   vector result variable, the returned value is obviously    [2.x.165]  repeated dim times.  
* [0.x.40]*
   Return which data has to be provided to compute the derived quantities.   The flags returned here are the ones passed to the constructor of this   class.  
* [0.x.41]*
   Copies of the two arguments given to the constructor of this class.  
* [0.x.42]