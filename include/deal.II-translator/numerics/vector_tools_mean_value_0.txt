[0.x.0]*
   Mean value operations  
* [0.x.1]*
   Subtract the (algebraic) mean value from a vector.     This function is most frequently used as a mean-value filter for Stokes:   The pressure in Stokes' equations with only Dirichlet boundaries for the   velocities is only determined up to a constant. This function allows to   subtract the mean value of the pressure. It is usually called in a   preconditioner and generates updates with mean value zero. The mean value   is computed as the mean value of the degrees of freedom values as given   by the input vector; they are not weighted by the area of cells, i.e. the   mean is computed as  [2.x.0] , rather than as  [2.x.1] . The latter can be obtained from the    [2.x.2]  however.     Apart from the vector  [2.x.3]  to operate on, this function takes a boolean   mask  [2.x.4]  that has a true entry for every element of the vector   for which the mean value shall be computed and later subtracted. The   argument is used to denote which components of the solution vector   correspond to the pressure, and avoid touching all other components of   the vector, such as the velocity components. (Note, however, that the   mask is not a    [2.x.5]    operating on the vector components of the finite element the solution   vector  [2.x.6]  may be associated with; rather, it is a mask on the entire   vector, without reference to what the vector elements mean.)     The boolean mask  [2.x.7]  has an empty vector as default value, which   will be interpreted as selecting all vector elements, hence, subtracting   the algebraic mean value on the whole vector. This allows to call this   function without a boolean mask if the whole vector should be processed.    
*  [2.x.8]  In the context of using this function to filter out the kernel of   an operator (such as the null space of the Stokes operator that consists   of the constant pressures), this function only makes sense for finite   elements for which the null space indeed consists of the vector    [2.x.9] . This is the case for example for the usual Lagrange   elements where the sum of all shape functions equals the function that is   constant one. However, it is not true for some other functions: for   example, for the FE_DGP element (another valid choice for the pressure in   Stokes discretizations), the first shape function on each cell is   constant while further elements are  [2.x.10]  orthogonal to it (on the   reference cell); consequently, the sum of all shape functions is not   equal to one, and the vector that is associated with the constant mode is   not equal to  [2.x.11] . For such elements, a different procedure   has to be used when subtracting the mean value.      [2.x.12]  This function can only be used for distributed vector classes   provided the boolean mask is empty, i.e. selecting the whole vector.  
* [0.x.2]*
   Compute the mean value of one component of the solution.     This function integrates the chosen component over the whole domain and   returns the result, i.e. it computes  [2.x.13]  where  [2.x.14]  is the vector component and  [2.x.15]  is the   function representation of the nodal vector given as fourth argument. The   integral is evaluated numerically using the quadrature formula given as   third argument.     This function is used in the "Possibilities for extensions" part of the   results section of    [2.x.16]  " [2.x.17] ".    
*  [2.x.18]  The function is most often used when solving a problem whose   solution is only defined up to a constant, for example a pure Neumann   problem or the pressure in a Stokes or Navier-Stokes problem. In both   cases, subtracting the mean value as computed by the current function,   from the nodal vector does not generally yield the desired result of a   finite element function with mean value zero. In fact, it only works for   Lagrangian elements. For all other elements, you will need to compute the   mean value and subtract it right inside the evaluation routine.  
* [0.x.3]*
   Call the other compute_mean_value() function, see above, with   <tt>mapping=MappingQGeneric [2.x.19]   
* [0.x.4]