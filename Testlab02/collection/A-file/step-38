examples/step-38/doc/intro.dox
<br>

<i>This program was contributed by Andrea Bonito and M. Sebastian Pauletti,
with editing and writing by Wolfgang Bangerth.
<br>
This material is based upon work supported by the National Science
Foundation under Grant No. DMS-0914977. Any opinions, findings and conclusions
or recommendations expressed in this material are those of the author(s) and
do not necessarily reflect the views of the National Science Foundation
(NSF).
</i>

<a name="Intro"></a>

<h1>Introduction</h1>

In this example, we show how to solve a partial differential equation (PDE)
on a codimension one surface $\Gamma \subset \mathbb R^3$
made of quadrilaterals, i.e. on a surface in 3d or a line in 2d.
We focus on the following elliptic second order PDE
@f{align*}
-\Delta_\Gamma u &= f \qquad \text{on } \qquad \Gamma,\\
u  &= g \qquad \text{on} \qquad \partial \Gamma,
@f}
which generalized the Laplace equation we have previously solved in several of
the early tutorial programs. Our implementation is based on step-4. step-34
also solves problems on lower dimensional surfaces; however, there we only
consider integral equations that do not involve derivatives on the solution
variable, while here we actually have to investigate what it means to take
derivatives of a function only defined on a (possibly curved) surface.

In order to define the above operator, we start by introducing some notations.
Let $\mathbf x_S:\hat S \rightarrow S$ be a parameterization of
a surface $S$ from a reference element $\hat S \subset \mathbb R^2$,
i.e. each point $\hat{\mathbf x}\in\hat S$ induces a point ${\mathbf
  x}_S(\hat{\mathbf x}) \in S$. Then let
@f[
G_S\dealcoloneq (D \mathbf{x}_S)^T \ D \mathbf{x}_S
@f]
denotes the corresponding first fundamental form, where $D
\mathbf{x}_S=\left(\frac{\partial x_{S,i}(\hat{\mathbf x})}{\partial \hat x_j}\right)_{ij}$ is the
derivative (Jacobian) of the mapping.
In the following, $S$ will be either the entire surface $\Gamma$ or,
more convenient for the finite element method, any face $S \in
{\mathbb T}$, where ${\mathbb T}$ is a partition (triangulation) of $\Gamma$
constituted of quadrilaterals.
We are now in position to define the tangential gradient of a function $v : S \rightarrow \mathbb
R$ by
@f[
(\nabla_S v)\circ \mathbf x_S \dealcoloneq  D \mathbf x_S \ G_S^{-1} \ \nabla (v \circ \mathbf x_S).
@f]
The surface Laplacian (also called the Laplace-Beltrami operator) is then
defined as  $\Delta_S \dealcoloneq \nabla_S \cdot \nabla_S$.
Note that an alternate way to compute the surface gradient on smooth surfaces $\Gamma$ is
@f[
\nabla_S v = \nabla \tilde v - \mathbf n (\mathbf n \cdot \nabla \tilde v),
@f]
where $\tilde v$ is a "smooth" extension of $v$ in a tubular neighborhood of $\Gamma$ and
$\mathbf n$ is the normal of $\Gamma$.
Since $\Delta_S = \nabla_S \cdot \nabla_S$, we deduce
@f[
\Delta_S v = \Delta \tilde v - \mathbf n^T \ D^2 \tilde v \ \mathbf n - (\mathbf n \cdot \nabla \tilde v) (\nabla \cdot \mathbf n - \mathbf n^T \ D \mathbf n \ \mathbf n ).
@f]
Worth mentioning, the term $\nabla \cdot \mathbf n - \mathbf n \ D \mathbf n \ \mathbf n$ appearing in the above expression is the total curvature of the surface (sum of principal curvatures).

As usual, we are only interested in weak solutions for which we can use $C^0$
finite elements (rather than requiring $C^1$ continuity as for strong
solutions). We therefore resort to the weak formulation
@f[
\int_\Gamma \nabla_\Gamma u \cdot
\nabla_\Gamma v = \int_\Gamma f \ v  \qquad \forall v \in H^1_0(\Gamma)
@f]
and take advantage of the partition ${\mathbb T}$ to further write
@f[
\sum_{K\in  {\mathbb T}}\int_K \nabla_{K} u \cdot \nabla_{K} v = \sum_{K\in
  {\mathbb T}} \int_K f \ v  \qquad \forall v \in H^1_0(\Gamma).
@f]
Moreover, each integral in the above expression is computed in the reference
element $\hat K \dealcoloneq [0,1]^2$
so that
@f{align*}
\int_{K} \nabla_{K} u \cdot \nabla_{K} v
&=
\int_{\hat K} \nabla (u \circ \mathbf x_K)^T G_K^{-1} (D \mathbf
  x_K)^T D \mathbf x_K G_K^{-1} \nabla (v \circ \mathbf x_K) \sqrt{\det
    (G_K)}
\\
&=
\int_{\hat K} \nabla (u \circ \mathbf x_K)^T G_K^{-1} \nabla (v \circ \mathbf x_K) \sqrt{\det
    (G_K)}
@f}
and
@f[
\int_{K} f \ v = \int_{\hat K} (f \circ \mathbf x_K) (v \circ \mathbf
x_K)  \sqrt{\det
    (G_K)}.
@f]
Finally, we use a quadrature formula defined by points $\{p_l\}_{l=1}^N\subset
\hat K$ and weights $\{w_l\}_{l=1}^N \subset \mathbb R^+_*$ to
evaluate the above integrals and
obtain
@f[\int_{K} \nabla_{K} u \cdot \nabla_{K} v \approx \sum_{l=1}^N
 (\nabla (u \circ \mathbf x_K)(p_l))^T G^{-1}(p_l)  \nabla (v \circ \mathbf x_K)
(p_l) \sqrt{\det (G(p_l))} \ w_l
@f]
and
@f[
\int_{K} f \ v \approx \sum_{l=1}^N (f \circ \mathbf x_K)(p_l) \ (v \circ \mathbf x_K)(p_l) \sqrt{\det (G(p_l))} \ w_l.
@f]


Fortunately, deal.II has already all the tools to compute the above
expressions.
In fact, they barely differ from the ways in which we solve the usual
Laplacian, only requiring the surface coordinate mapping to be provided in the
constructor of the FEValues class.
This surface description given, in the codimension one surface case, the two
routines FEValues::shape_grad and FEValues::JxW
return
@f{align*}
\text{FEValues::shape\_grad}(i,l)&=D \mathbf x_K(p_l) G^{-1}(p_l)D(\varphi_i \circ \mathbf x_K)
  (p_l)
\\
\text{FEValues::JxW}(l) &=  \sqrt{\det (G(p_l))} \ w_l.
@f}
This provides exactly the terms we need for our computations.

On a more general note, details for the finite element approximation on
surfaces can be found for instance in
[Dziuk, in Partial differential equations and calculus of
variations 1357, Lecture Notes in Math., 1988],
[Demlow, SIAM J. Numer. Anal.  47(2), 2009]
and
[Bonito, Nochetto, and Pauletti, SIAM J. Numer. Anal. 48(5), 2010].



<h3>Testcase</h3>

In general when you want to test numerically the accuracy and/or order of
convergence of an algorithm you need to provide an exact solution. The usual
trick is to pick a function that we want to be the solution, then apply the
differential operator to it that defines a forcing term for the right hand
side. This is what we do in this example. In the current case, the form of the
domain is obviously also essential.

We produce one test case for a 2d problem and another one for 3d:

<ul>
<li>
  In 2d, let's choose as domain a half circle. On this domain, we choose the
  function $u(\mathbf x)=-2x_1x_2$ as the solution. To compute the right hand
  side, we have to compute the surface Laplacian of the
  solution function. There are (at least) two ways to do that. The first one
  is to project away the normal derivative as described above using the natural extension of $u(\mathbf x)$ (still denoted by $u$) over $\mathbb R^d$, i.e. to compute
  @f[
    -\Delta_\Gamma u =  \Delta u - \mathbf n^T \ D^2 u \ \mathbf n - (\mathbf n \cdot \nabla u)\ \kappa,
  @f]
  where $\kappa$ is the total curvature of $\Gamma$.
  Since we are on the unit circle, $\mathbf n=\mathbf x$ and $\kappa = 1$ so that
  @f[
    -\Delta_\Gamma u = -8 x_1x_2.
  @f]

  A somewhat simpler way, at least for the current case of a curve in
  two-dimensional space, is to note that we can map the interval $t \in
  [0,\pi]$ onto the domain $\Omega$ using the transformation
  $\mathbf x(t)= \left(\begin{array}{c} \cos t \\ \sin t \end{array}\right)$.
  At position $\mathbf x=\mathbf x(t)$, the value of the solution is then
  $u(\mathbf x(t)) = -2\cos t \sin t$.
  Taking into account that the transformation is length preserving, i.e. a
  segment of length $dt$ is mapped onto a piece of curve of exactly the same
  length, the tangential Laplacian then satisfies
  @f{align*}
    \Delta_\Gamma u
    &= \frac{d^2}{dt^2}(-2\cos t \sin t)
    = -2 \frac{d}{dt}(-\sin^2 t + \cos^2 t)
    = -2 (-2 \sin t \cos t - 2 \cos t \sin t)
    \\
    &= 8 \sin t \cos t
    \\
    &= 8 x_1x_2,
  @f}
  which is of course the same result as we had above.
</li>
<li>
  In 3d, the domain is again half of the surface of the unit ball, i.e. a half
  sphere or dome. We choose $u(\mathbf x)=-2\sin(\pi x_1)\cos(\pi x_2)e^z$ as
  the solution. We can compute the right hand side of the
  equation, $f=-\Delta_\Gamma u$, in the same way as the method above (with $\kappa = 2$), yielding an
  awkward and lengthy expression. You can find the full expression in the
  source code.
</li>
</ul>

In the program, we will also compute the $H^1$ seminorm error of the
solution. Since the solution function and its numerical approximation are only
defined on the manifold, the obvious definition of this error functional is
$| e |_{H^1(\Gamma)}
  = | \nabla_\Gamma e |_{L_2(\Gamma)}
  = \left( \int_\Gamma | \nabla_\Gamma (u-u_h) |^2 \right)^{1/2}$. This requires us to provide the
<i>tangential</i> gradient $\nabla_\Gamma u$ to the function VectorTools::integrate_difference
(first introduced in step-7), which we
will do by implementing the function <code>Solution::gradient</code> in the
program below.


<h3>Implementation</h3>

If you've read through step-4 and understand the discussion above of how
solution and right hand side correspond to each other, you will be immediately
familiar with this program as well. In fact, there are only two things that
are of significance:

- The way we generate the mesh that triangulates the computational domain.

- The way we use Mapping objects to describe that the domain on which we solve
  the partial differential equation is not planar but in fact curved.

Mapping objects were already introduced in step-10 and step-11 and as
explained there, there is usually not a whole lot you have to know about how
they work as long as you have a working description of how the boundary
looks. In essence, we will simply declare an appropriate object of type
MappingQ that will automatically obtain the boundary description from the
Triangulation. The mapping object will then be passed to the appropriate
functions, and we will get a boundary description for half circles or half
spheres that is predefined in the library.

The rest of the program follows closely step-4 and, as far as computing the
error, step-7. Some aspects of this program, in particular the use of two
template arguments on the classes Triangulation, DoFHandler, and similar, are
already described in detail in step-34; you may wish to read through this
tutorial program as well.


examples/step-38/doc/results.dox
<h1>Results</h1>

When you run the program, the following output should be printed on screen:

@verbatim
Surface mesh has 1280 cells.
Surface mesh has 5185 degrees of freedom.
H1 error = 0.0217136
@endverbatim


By playing around with the number of global refinements in the
<code>LaplaceBeltrami::make_grid_and_dofs</code> function you increase or decrease mesh
refinement. For example, doing one more refinement and only running the 3d surface
problem yields the following
output:

@verbatim
Surface mesh has 5120 cells.
Surface mesh has 20609 degrees of freedom.
H1 error = 0.00543481
@endverbatim

This is what we expect: make the mesh size smaller by a factor of two and the
error goes down by a factor of four (remember that we use bi-quadratic
elements). The full sequence of errors from one to five refinements looks like
this, neatly following the theoretically predicted pattern:
@verbatim
0.339438
0.0864385
0.0217136
0.00543481
0.00135913
@endverbatim

Finally, the program produces graphical output that we can visualize. Here is
a plot of the results:

<img src="https://www.dealii.org/images/steps/developer/step-38.solution-3d.png" alt="">

The program also works for 1d curves in 2d, not just 2d surfaces in 3d. You
can test this by changing the template argument in <code>main()</code> like
so:
@code
      LaplaceBeltramiProblem<2> laplace_beltrami;
@endcode
The domain is a curve in 2d, and we can visualize the solution by using the
third dimension (and color) to denote the value of the function $u(x)$. This
then looks like so (the white curve is the domain, the colored curve is the
solution extruded into the third dimension, clearly showing the change in sign
as the curve moves from one quadrant of the domain into the adjacent one):

<img src="https://www.dealii.org/images/steps/developer/step-38.solution-2d.png" alt="">


<a name="extensions"></a>
<h3>Possibilities for extensions</h3>

Computing on surfaces only becomes interesting if the surface is more
interesting than just a half sphere. To achieve this, deal.II can read
meshes that describe surfaces through the usual GridIn class. Or, in case you
have an analytic description, a simple mesh can sometimes be stretched and
bent into a shape we are interested in.

Let us consider a relatively simple example: we take the half sphere we used
before, we stretch it by a factor of 10 in the z-direction, and then we jumble
the x- and y-coordinates a bit. Let's show the computational domain and the
solution first before we go into details of the implementation below:

<img src="https://www.dealii.org/images/steps/developer/step-38.warp-1.png" alt="">

<img src="https://www.dealii.org/images/steps/developer/step-38.warp-2.png" alt="">

The way to produce such a mesh is by using the GridTools::transform()
function. It needs a way to transform each individual mesh point to a
different position. Let us here use the following, rather simple function
(remember: stretch in one direction, jumble in the other two):

@code
template <int spacedim>
Point<spacedim> warp(const Point<spacedim> &p)
{
  Point<spacedim> q = p;
  q[spacedim-1] *= 10;

  if (spacedim >= 2)
    q[0] += 2*std::sin(q[spacedim-1]);
  if (spacedim >= 3)
    q[1] += 2*std::cos(q[spacedim-1]);

  return q;
}
@endcode

If we followed the <code>LaplaceBeltrami::make_grid_and_dofs</code> function, we would
extract the half spherical surface mesh as before, warp it into the shape we
want, and refine as often as necessary. This is not quite as simple as we'd
like here, though: refining requires that we have an appropriate manifold
object attached to the triangulation that describes where new vertices of the
mesh should be located upon refinement. I'm sure it's possible to describe
this manifold in a not-too-complicated way by simply undoing the
transformation above (yielding the spherical surface again), finding the
location of a new point on the sphere, and then re-warping the result. But I'm
a lazy person, and since doing this is not really the point here, let's just
make our lives a bit easier: we'll extract the half sphere, refine it as
often as necessary, get rid of the object that describes the manifold since we
now no longer need it, and then finally warp the mesh. With the function
above, this would look as follows:

@code
template <int spacedim>
void LaplaceBeltrami<spacedim>::make_grid_and_dofs()
{
  {
    Triangulation<spacedim> volume_mesh;
    GridGenerator::half_hyper_ball(volume_mesh);

    volume_mesh.refine_global(4);

    std::set<types::boundary_id> boundary_ids;
    boundary_ids.insert(0);

    GridGenerator::extract_boundary_mesh(volume_mesh, triangulation,
                                         boundary_ids);
    GridTools::transform(&warp<spacedim>, triangulation);       /* ** */
    std::ofstream x("x"), y("y");
    GridOut().write_gnuplot(volume_mesh, x);
    GridOut().write_gnuplot(triangulation, y);
  }

  std::cout << "Surface mesh has " << triangulation.n_active_cells()
            << " cells."
            << std::endl;
  ...
}
@endcode

Note that the only essential addition is the line marked with
asterisks. It is worth pointing out one other thing here, though: because we
detach the manifold description from the surface mesh, whenever we use a
mapping object in the rest of the program, it has no curves boundary
description to go on any more. Rather, it will have to use the implicit,
FlatManifold class that is used on all parts of the domain not
explicitly assigned a different manifold object. Consequently, whether we use
MappingQ(2), MappingQ(15) or MappingQ1, each cell of our mesh will be mapped
using a bilinear approximation.

All these drawbacks aside, the resulting pictures are still pretty. The only
other differences to what's in step-38 is that we changed the right hand side
to $f(\mathbf x)=\sin x_3$ and the boundary values (through the
<code>Solution</code> class) to $u(\mathbf x)|_{\partial\Omega}=\cos x_3$. Of
course, we now no longer know the exact solution, so the computation of the
error at the end of <code>LaplaceBeltrami::run</code> will yield a meaningless
number.


