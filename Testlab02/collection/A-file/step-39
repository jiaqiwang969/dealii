examples/step-39/doc/intro.dox
<a name="Intro"></a>

In this program, we use the interior penalty method and Nitsche's weak
boundary conditions to solve Poisson's equation. We use multigrid
methods on locally refined meshes, which are generated using a bulk
criterion and a standard error estimator based on cell and face
residuals. All operators are implemented using the MeshWorker interface.

Like in step-12, the discretization relies on finite element spaces,
which are polynomial inside the mesh cells $K\in \mathbb T_h$, but
have no continuity between cells. Since such functions have two values
on each interior face $F\in \mathbb F_h^i$, one from each side, we
define mean value and jump operators as follows: let
<i>K</i><sub>1</sub> and <i>K</i><sub>2</sub> be the two cells sharing
a face, and let the traces of functions <i>u<sub>i</sub></i> and the
outer normal vectors <b>n</b><i><sub>i</sub></i> be labeled
accordingly. Then, on the face, we let
@f[
	\average{ u } = \frac{u_1 + u_2}2
@f]

Note, that if such an expression contains a normal vector, the
averaging operator turns into a jump. The interior penalty method for the problem
@f[
  -\Delta u = f \text{ in }\Omega \qquad u = u^D \text{ on } \partial\Omega
@f]
becomes
@f{multline*}
  \sum_{K\in \mathbb T_h} (\nabla u, \nabla v)_K
  \\
  + \sum_{F \in F_h^i} \biggl\{4\sigma_F (\average{ u \mathbf n}, \average{ v \mathbf n })_F
  - 2 (\average{ \nabla u },\average{ v\mathbf n })_F
  - 2 (\average{ \nabla v },\average{ u\mathbf n })_F
  \biggr\}
  \\
  + \sum_{F \in F_h^b} \biggl\{2\sigma_F (u, v)_F
  - (\partial_n u,v)_F
  - (\partial_n v,u)_F
  \biggr\}
  \\
  = (f, v)_\Omega + \sum_{F \in F_h^b} \biggl\{
  2\sigma_F (u^D, v)_F - (\partial_n v,u^D)_F
  \biggr\}.
@f}

Here, $\sigma_F$ is the penalty parameter, which is chosen as follows:
for a face <i>F</i> of a cell <i>K</i>, compute the value
@f[
\sigma_{F,K} = p(p+1) \frac{|F|_{d-1}}{|K|_d},
@f]
where <i>p</i> is the polynomial degree of the finite element
functions and $|\cdot|_d$ and $|\cdot|_{d-1}$ denote the $d$ and $d-1$
dimensional Hausdorff measure of the corresponding
object. If the face is at the boundary, choose $\sigma_F = \sigma_{F,K}$.
For an interior face, we take the average of the two values at this face.

In our finite element program, we distinguish three different
integrals, corresponding to the sums over cells, interior faces and
boundary faces above. Since the MeshWorker::loop organizes the sums
for us, we only need to implement the integrals over each mesh
element. The class MatrixIntegrator below has these three functions
for the left hand side of the formula, the class RHSIntegrator for the
right.

As we will see below, even the error estimate is of the same
structure, since it can be written as
@f{align*}
  \eta^2 &= \eta_K^2 + \eta_F^2 + \eta_B^2
  \\
  \eta_K^2 &= \sum_{K\in \mathbb T_h} h^2 \|f + \Delta u_h\|^2
  \\
  \eta_F^2 &= \sum_{F \in F_h^i} \biggl\{
    4 \sigma_F \| \average{u_h\mathbf n} \|^2 + h \|\average{\partial_n u_h}\|^2 \biggr\}
  \\
  \eta_B^2 &= \sum_{F \in F_h^b} 2\sigma_F \| u_h-u^D \|^2.
@f}

Thus, the functions for assembling matrices, right hand side and error
estimates below exhibit that these loops are all generic and can be
programmed in the same way.

This program is related to step-12b, in that it uses MeshWorker and
discontinuous Galerkin methods. While there, we solved an advection
problem, here it is a diffusion problem. Here, we also use multigrid
preconditioning and a theoretically justified error estimator, see
Karakashian and Pascal (2003). The multilevel scheme was discussed in
detail in Kanschat (2004). The adaptive iteration and its convergence
have been discussed (for triangular meshes) in Hoppe, Kanschat, and
Warburton (2009).


examples/step-39/doc/results.dox
<h1>Results</h1>

<h3>Logfile output</h3>
First, the program produces the usual logfile here stored in <tt>deallog</tt>. It reads (with omission of intermediate steps)

@code
DEAL::Element: FE_DGQ<2>(3)
DEAL::Step 0
DEAL::Triangulation 16 cells, 2 levels
DEAL::DoFHandler 256 dofs, level dofs 64 256
DEAL::Assemble matrix
DEAL::Assemble multilevel matrix
DEAL::Assemble right hand side
DEAL::Solve
DEAL:cg::Starting value 37.4071
DEAL:cg::Convergence step 13 value 1.64974e-13
DEAL::energy-error: 0.297419
DEAL::L2-error:     0.00452447
DEAL::Estimate 0.990460
DEAL::Writing solution to <sol-00.gnuplot>...
DEAL::
DEAL::Step 1
DEAL::Triangulation 25 cells, 3 levels
DEAL::DoFHandler 400 dofs, level dofs 64 256 192
DEAL::Assemble matrix
DEAL::Assemble multilevel matrix
DEAL::Assemble right hand side
DEAL::Solve
DEAL:cg::Starting value 37.4071
DEAL:cg::Convergence step 14 value 3.72262e-13
DEAL::energy-error: 0.258559
DEAL::L2-error:     0.00288510
DEAL::Estimate 0.738624
DEAL::Writing solution to <sol-01.gnuplot>...
DEAL::
DEAL::Step 2
DEAL::Triangulation 34 cells, 4 levels
DEAL::DoFHandler 544 dofs, level dofs 64 256 256 128
DEAL::Assemble matrix
DEAL::Assemble multilevel matrix
DEAL::Assemble right hand side
DEAL::Solve
DEAL:cg::Starting value 37.4071
DEAL:cg::Convergence step 15 value 1.91610e-13
DEAL::energy-error: 0.189234
DEAL::L2-error:     0.00147954
DEAL::Estimate 0.657507
DEAL::Writing solution to <sol-02.gnuplot>...

...

DEAL::Step 10
DEAL::Triangulation 232 cells, 11 levels
DEAL::DoFHandler 3712 dofs, level dofs 64 256 896 768 768 640 512 256 256 256 256
DEAL::Assemble matrix
DEAL::Assemble multilevel matrix
DEAL::Assemble right hand side
DEAL::Solve
DEAL:cg::Starting value 51.1571
DEAL:cg::Convergence step 15 value 7.19599e-13
DEAL::energy-error: 0.0132475
DEAL::L2-error:     1.00423e-05
DEAL::Estimate 0.0470724
DEAL::Writing solution to <sol-10.gnuplot>...
DEAL::
DEAL::Step 11
DEAL::Triangulation 322 cells, 12 levels
DEAL::DoFHandler 5152 dofs, level dofs 64 256 1024 1024 896 768 768 640 448 320 320 320
DEAL::Assemble matrix
DEAL::Assemble multilevel matrix
DEAL::Assemble right hand side
DEAL::Solve
DEAL:cg::Starting value 52.2226
DEAL:cg::Convergence step 15 value 8.15195e-13
DEAL::energy-error: 0.00934891
DEAL::L2-error:     5.41095e-06
DEAL::Estimate 0.0329102
DEAL::Writing solution to <sol-11.gnuplot>...
DEAL::
@endcode

This log for instance shows that the number of conjugate gradient
iteration steps is constant at approximately 15.

<h3>Postprocessing of the logfile</h3>

<img src="https://www.dealii.org/images/steps/developer/step-39-convergence.svg" alt="">
Using the perl script <tt>postprocess.pl</tt>, we extract relevant
data into <tt>output.dat</tt>, which can be used to plot graphs with
<tt>gnuplot</tt>. The graph above for instance was produced using the gnuplot
script <tt>plot_errors.gpl</tt> via

@code
perl postprocess.pl deallog &> output.dat
gnuplot plot_errors.gpl
@endcode

Reference data can be found in <tt>output.reference.dat</tt>.


