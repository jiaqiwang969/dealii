include/deal.II-translator/opencascade/boundary_lib_0.txt
[0.x.0]

include/deal.II-translator/opencascade/manifold_lib_0.txt
[0.x.0]*
  [2.x.0]  OpenCASCADE  [2.x.1] 

* 
* [0.x.1]*
   A Manifold object based on OpenCASCADE TopoDS_Shape where new points are   first computed by averaging the surrounding points in the same way as   FlatManifold does, and are then projected in the normal direction using   OpenCASCADE utilities.     This class makes no assumptions on the shape you pass to it, and the   topological dimension of the Manifold is inferred from the TopoDS_Shape   itself. In debug mode there is a sanity check to make sure that the   surrounding points (the ones used in project_to_manifold()) actually live   on the Manifold, i.e., calling  [2.x.2]  on those   points leaves them untouched. If this is not the case, an   ExcPointNotOnManifold is thrown.     This could happen, for example, if you are trying to use a shape of type   TopoDS_Edge when projecting on a face. In this case, the vertices of the   face would be collapsed to the edge, and your surrounding points would   not be lying on the given shape, raising an exception.  
* [0.x.2]*
     The standard constructor takes a generic TopoDS_Shape  [2.x.3]  and a     tolerance used to compute distances internally.         The TopoDS_Shape can be arbitrary, i.e., a collection of shapes, faces,     edges or a single face or edge.    
* [0.x.3]*
     Clone the current Manifold.    
* [0.x.4]*
     Perform the actual projection onto the manifold. This function, in     debug mode, checks that each of the  [2.x.4]  is within     tolerance from the given TopoDS_Shape. If this is not the case, an     exception is thrown.         The projected point is computed using OpenCASCADE normal projection     algorithms.    
* [0.x.5]*
     The topological shape which is used internally to project points. You     can construct such a shape by calling the  [2.x.5]      function, which will create a TopoDS_Shape with the geometry contained     in the IGES file.    
* [0.x.6]*
     Relative tolerance used by this class to compute distances.    
* [0.x.7]*
   A Manifold object based on OpenCASCADE TopoDS_Shape where new points are   first computed by averaging the surrounding points in the same way as   FlatManifold does, and then projecting them onto the manifold along the   direction specified at construction time using OpenCASCADE utilities.     This class makes no assumptions on the shape you pass to it, and the   topological dimension of the Manifold is inferred from the TopoDS_Shape   itself. In debug mode there is a sanity check to make sure that the   surrounding points (the ones used in project_to_manifold()) actually live   on the Manifold, i.e., calling  [2.x.6]  on those   points leaves them untouched. If this is not the case, an   ExcPointNotOnManifold is thrown.     Notice that this type of Manifold descriptor may fail to give results if   the triangulation to be refined is close to the boundary of the given   TopoDS_Shape, or when the direction you use at construction time does not   intersect the shape. An exception is thrown when this happens.  
* [0.x.8]*
     Construct a Manifold object which will project points on the     TopoDS_Shape  [2.x.7]  along the given  [2.x.8]     
* [0.x.9]*
     Clone the current Manifold.    
* [0.x.10]*
     Perform the actual projection onto the manifold. This function, in     debug mode, checks that each of the  [2.x.9]  is within     tolerance from the given TopoDS_Shape. If this is not the case, an     exception is thrown.         The projected point is computed using OpenCASCADE directional     projection algorithms.    
* [0.x.11]*
     The topological shape which is used internally to project points. You     can construct such a shape by calling the  [2.x.10]      function, which will create a TopoDS_Shape with the geometry contained     in the IGES file.    
* [0.x.12]*
     Direction used to project new points on the shape.    
* [0.x.13]*
     Relative tolerance used by this class to compute distances.    
* [0.x.14]*
   A Manifold object based on OpenCASCADE TopoDS_Shape where new points are   first computed by averaging the surrounding points in the same way as   FlatManifold does, and then projecting them using OpenCASCADE utilities   onto the manifold along a direction which is an estimation of the   surrounding points (hence mesh cell) normal.     The direction normal to the mesh is particularly useful because it is the   direction in which the mesh is missing nodes. For instance, during the   refinement of a cell a new node is initially created around the   baricenter of the cell. This location somehow ensures a uniform distance   from the nodes of the old cell. Projecting such cell baricenter onto the   CAD surface in the direction normal to the original cell will then retain   uniform distance from the points of the original cell. Of course, at the   stage of mesh generation, no dof handler nor finite element are defined,   and such direction has to be estimated. For the case in which 8   surrounding points are present, 4 different triangles are identified with   the points assigned, and the normals of such triangles are averaged to   obtain the approximation of the normal to the cell.     The case in which 2 surrounding points are present (i.e.:a cell edge is   being refined) is of course more tricky. The average of the CAD surface   normals at the 2 surrounding points is first computed, and then projected   onto the plane normal to the segment linking the surrounding points. This   again is an attempt to have the new point with equal distance with   respect to the surrounding points     This class only operates with CAD faces and makes the assumption that the   shape you pass to it contains at least one face. If that is not the case,   an Exception is thrown. In debug mode there is a sanity check to make   sure that the surrounding points (the ones used in project_to_manifold())   actually live on the Manifold, i.e., calling  [2.x.11]    on those points leaves them untouched. If this is not the case, an   ExcPointNotOnManifold is thrown.       Notice that this type of Manifold descriptor may fail to give results if   the triangulation to be refined is close to the boundary of the given   TopoDS_Shape, or when the normal direction estimated from the surrounding   points does not intersect the shape.  An exception is thrown when this   happens.  
* [0.x.15]*
     Construct a Manifold object which will project points on the     TopoDS_Shape  [2.x.12]  along a direction which is approximately normal to     the mesh cell.    
* [0.x.16]*
     Clone the current Manifold.    
* [0.x.17]*
     Perform the actual projection onto the manifold. This function, in     debug mode, checks that each of the  [2.x.13]  is within     tolerance from the given TopoDS_Shape. If this is not the case, an     exception is thrown.    
* [0.x.18]*
     The topological shape which is used internally to project points. You     can construct such a shape by calling the  [2.x.14]      function, which will create a TopoDS_Shape with the geometry contained     in the IGES file.    
* [0.x.19]*
     Relative tolerance used by this class to compute distances.    
* [0.x.20]*
   A Manifold object based on OpenCASCADE TopoDS_Shape objects which have   topological dimension equal to one (TopoDS_Edge or TopoDS_Wire) where new   points are located at the arclength average of the surrounding points. If   the given TopoDS_Shape can be casted to a periodic (closed) curve, then   this information is used internally to set the periodicity of the base   ChartManifold class.     This class can only work on TopoDS_Edge or TopoDS_Wire objects, and it   only makes sense when spacedim is three. If you use an object of   topological dimension different from one, an exception is throw.     In debug mode there is an additional sanity check to make sure that the   surrounding points actually live on the Manifold, i.e., calling    [2.x.15]  on those points leaves them untouched. If   this is not the case, an ExcPointNotOnManifold is thrown.  
* [0.x.21]*
     Default constructor with a TopoDS_Edge.    
* [0.x.22]*
     Clone the current Manifold.    
* [0.x.23]*
     Given a point on real space, find its arclength parameter. Throws an     error in debug mode, if the point is not on the TopoDS_Edge given at     construction time.    
* [0.x.24]*
     Given an arclength parameter, find its image in real space.    
* [0.x.25]*
     The actual shape used to build this object.    
* [0.x.26]*
     A Curve adaptor. This is the one which is used in the computations, and     it points to the right one above.    
* [0.x.27]*
     Relative tolerance used in all internal computations.    
* [0.x.28]*
     The total length of the curve. This is also used as a period if the     edge is periodic.    
* [0.x.29]*
   Manifold description for the face of a CAD imported using OpenCASCADE.    
*  [2.x.16]   
* [0.x.30]*
     The constructor takes an OpenCASCADE TopoDS_Face  [2.x.17]  and an optional      [2.x.18]  This class uses the interval OpenCASCADE variables u, v     to describe the manifold.    
* [0.x.31]*
     Clone the current Manifold.    
* [0.x.32]*
     Pull back the given point from the Euclidean space. Will return the uv     coordinates associated with the point  [2.x.19]     
* [0.x.33]*
     Given a  [2.x.20]  in the uv coordinate system, this method returns the     Euclidean coordinates associated.    
* [0.x.34]*
     Given a point in the spacedim dimensional Euclidean space, this     method returns the derivatives of the function  [2.x.21]  that maps from     the uv coordinate system to the Euclidean coordinate     system. In other words, it is a matrix of size      [2.x.22] .         This function is used in the computations required by the     get_tangent_vector() function.         Refer to the general documentation of this class for more information.    
* [0.x.35]*
     Return a tuple representing the minimum and maximum values of u     and v.  Precisely, it returns (u_min, u_max, v_min, v_max)    
* [0.x.36]*
     An OpenCASCADE TopoDS_Face  [2.x.23]  given by the CAD.    
* [0.x.37]*
     Tolerance used by OpenCASCADE to identify points in each     operation.    
* [0.x.38]

include/deal.II-translator/opencascade/utilities_0.txt
[0.x.0]*
 We collect in this namespace all utilities which operate on OpenCASCADE entities. OpenCASCADE splits every object into a topological description and a geometrical entity. The basic topological description is a TopoDS_Shape. TopoDS_Shapes are light objects, and can be copied around. The closest deal.II analog is a TriaIterator.
*  The OpenCASCADE topology is designed with reference to the STEP standard ISO-10303-42.  The structure is an oriented one-way graph, where parents refer to their children, and there are no back references. Abstract structure is implemented as C++ classes from the TopoDS package. A TopoDS_Shape is manipulated by value and contains 3 fields: location, orientation and a myTShape handle (of the TopoDS_TShape type). According to OpenCASCADE documentation, myTShape and Location are used to share data between various shapes to save memory. For example, an edge belonging to two faces has equal Locations and myTShape fields but different Orientations (Forward in context of one face and Reversed in one of the other).
*  Valid shapes include collection of other shapes, solids, faces, edges, vertices, etc.
*  Once a topological description is available, if a concrete geometrical object can be created, the BRep classes allow one to extract the actual geometrical information from a shape.
*  This is done by inheriting abstract topology classes from the TopoDS package by those implementing a boundary representation model (from the BRep package). Only 3 types of topological objects have geometric representations
* 
*  - vertex, edge, and face.
*  Every TopoDS_Shape can be queried to figure out what type of shape it is, and actual geometrical objects, like surfaces, curves or points, can be extracted using BRepTools.
*  In this namespace we provide readers and writers that read standard CAD files, and return a TopoDS_Shape, or that write a CAD file, given a TopoDS_Shape. Most of the functions in the OpenCASCADE namespace deal with TopoDS_Shapes of one type or another, and provide interfaces to common deal.II objects, like Triangulation, Manifold, and so on.
*  Notice that most of these tools are only useful when spacedim is equal to three, since OpenCASCADE only operates in three-dimensional mode. In some cases they can be used in two dimensions as well, and the third dimension will be set to zero.
*  If you wish to use these tools when the dimension of the space is two, then make sure your CAD files are actually flat and that all z coordinates are equal to zero, as otherwise you will get many exceptions.

* 
* [0.x.1]*
   Count the subobjects of a shape. This function is useful to gather   information about the TopoDS_Shape passed as argument. It returns the   number of faces, edges and vertices (the only topological entities   associated with actual geometries) which are contained in the given   shape.  
* [0.x.2]*
   Read IGES files and translate their content into openCascade topological   entities. The option scale_factor is used to compensate for different   units being used in the IGES files and in the target application. The   standard unit for IGES files is millimiters. The return object is a   TopoDS_Shape which contains all objects from the file.  
* [0.x.3]*
   Write the given topological shape into an IGES file.  
* [0.x.4]*
   Read STL files and translate their content into openCascade topological   entities.  The return object is a   TopoDS_Shape which contains all objects from the file.  
* [0.x.5]*
   Write the given topological shape into an STL file. In order to do so the   shape must contain a mesh structure, the function checks if all the faces   of the shape have an attached mesh, if this is not the case it proceeds to   mesh it automatically. We remark that the automatic mesh generation in   OpenCASCADE takes care only of the geometrical resemblance between the   shape and the mesh, to control the shape and regularity of the triangles   you should use other meshing softwares. The two arguments `deflection` and   `angular_deflection` select the accuracy of the created triangulation with   respect to the original topological shape. The argument   `sew_different_faces` gives the possibility to use a Sewer from OpenCASCADE   to create a watertight closed STL using the argument `sewer_tolerance`. The   argument `is_relative` specifies if distance are relative and `in_parallel`   if the execution should be in parallel.  
* [0.x.6]*
   Read STEP files and translate their content into openCascade topological   entities. The option scale_factor is used to compensate for different   units being used in the STEP files and in the target application. The   standard unit for STEP files is millimiters. The return object is a   TopoDS_Shape which contains all objects from the file.  
* [0.x.7]*
   Write the given topological shape into an STEP file.  
* [0.x.8]*
   This function returns the tolerance associated with the shape. Each CAD   geometrical object is defined along with a tolerance, which indicates   possible inaccuracy of its placement. For instance, the tolerance of a   vertex indicates that it can be located in any point contained in a   sphere centered in the nominal position and having radius tol. While   carrying out an operation such as projecting a point onto a surface   (which will in turn have its tolerance) we must keep in mind that the   precision of the projection will be limited by the tolerance with which   the surface is built.  The tolerance is computed taking the maximum   tolerance among the subshapes composing the shape.  
* [0.x.9]*
   Perform the intersection of the given topological shape with the plane    [2.x.0] . The returned topological shape will   contain as few bsplines as possible. An exception is thrown if the   intersection produces an empty shape.  
* [0.x.10]*
   Try to join all edges contained in the given TopoDS_Shape into a single   TopoDS_Edge, containing as few BSPlines as possible. If the input shape   contains faces, they will be ignored by this function. If the contained   edges cannot be joined into a single one, i.e., they form disconnected   curves, an exception will be thrown.  
* [0.x.11]*
   Creates a smooth BSpline curve passing through the points in the assigned   vector, and store it in the returned TopoDS_Shape (which is of type   TopoDS_Edge). The points are reordered internally according to their   scalar product with the direction, if direction is different from zero,   otherwise they are used as passed. Notice that this function changes the   input points if required by the algorithm.     This class is used to interpolate a BsplineCurve passing through an array   of points, with a C2 Continuity. If the optional parameter  [2.x.1]  is   set to true, then the curve will be C2 at all points except the first   (where only C1 continuity will be given), and it will be a closed curve.     The curve is guaranteed to be at distance  [2.x.2]  from the input   points. If the algorithm fails in generating such a curve, an exception   is thrown.  
* [0.x.12]*
   Extract all subshapes from a TopoDS_Shape, and store the results into   standard containers. If the shape does not contain a certain type of   shape, the respective container will be empty.  
* [0.x.13]*
   Create a triangulation from a single face. This class extracts the first u   and v parameter of the parametric surface making up this face, and creates   a Triangulation<2,spacedim> containing a single coarse cell reflecting   this face. If the surface is not a trimmed surface, the vertices of this   cell will coincide with the TopoDS_Vertex vertices of the original   TopoDS_Face. This, however, is often not the case, and the user should be   careful on how this mesh is used.     If you call this function with a Triangulation<2,2>, make sure that the   input face has all z coordinates set to zero, or you'll get an exception.  
* [0.x.14]*
   Given a Triangulation and an optional Mapping, create a vector of smooth   curves that interpolate the connected parts of the boundary vertices of   the Triangulation and return them as a vector of TopoDS_Edge objects.     This function constructs closed Bspline curve objects passing through all   vertices of the boundary of the triangulation, with  [2.x.3]  Continuity on   each vertex except the first, where only  [2.x.4]  continuity is guaranteed.     The returned curves are ordered with respect to the indices of the faces   that make up the triangulation boundary, i.e., the first curve is the one   extracted starting from the face with the lowest index, and so on.      [2.x.5]  triangulation Input triangulation    [2.x.6]  mapping Optional input mapping    [2.x.7]  An  [2.x.8]  of TopoDS_Edge objects representing the smooth    interpolation of the boundary of the `triangulation`  
* [0.x.15]*
   Extract all compound shapes from a TopoDS_Shape, and store the results   into standard containers. If the shape does not contain a certain type of   compound, the respective container will be empty.  
* [0.x.16]*
   Project the point  [2.x.9]  on the topological shape given by  [2.x.10]    in_shape, and returns the projected point, the subshape which contains   the point and the parametric u and v coordinates of the point within the   resulting shape. If the shape is not elementary, all its subshapes are   iterated, faces first, then edges, and the returned shape is the closest   one to the point  [2.x.11]  If the returned shape is an edge, then only   the u coordinate is filled with sensible information, and the v   coordinate is set to zero.     This function returns a tuple containing the projected point, the shape,   the u coordinate and the v coordinate (which is different from zero only   if the resulting shape is a face).  
* [0.x.17]*
   Return the projection of the point  [2.x.12]  on the topological shape   given by  [2.x.13]  If the shape is not elementary, all its subshapes   are iterated, faces first, then edges, and the returned point is the   closest one to the  [2.x.14]  regardless of its type.  
* [0.x.18]*
   Given an elementary shape  [2.x.15]  and the reference coordinates   within the shape, returns the corresponding point in real space. If the   shape is a TopoDS_Edge, the  [2.x.16]  coordinate is ignored. Only edges or   faces, as returned by the function project_point_and_pull_back(), can be   used as input to this function. If this is not the case, an Exception is   thrown.  
* [0.x.19]*
   Given a TopoDS_Face  [2.x.17]  and the reference coordinates within this   face, returns the corresponding point in real space, the normal to the   surface at that point and the min and max curvatures as a tuple.  
* [0.x.20]*
   Get the closest point to the given topological shape, together with the   normal and the min and max curvatures at that point. If the shape is not   elementary, all its sub-faces (only the faces) are iterated, faces first,   and only the closest point is returned. This function will throw an   exception if the  [2.x.18]  does not contain at least one face.  
* [0.x.21]*
   Intersect a line passing through the given  [2.x.19]  point along  [2.x.20]    direction and the given topological shape. If there is more than one   intersection, it will return the closest one.     The optional  [2.x.21]  parameter is used to compute distances.  
* [0.x.22]*
   Convert OpenCASCADE point into a Point<spacedim>.     The tolerance argument is used to check if the non used components of the   OpenCASCADE point are close to zero. If this is not the case, an assertion   is thrown in debug mode.  
* [0.x.23]*
   Convert Point<3> into OpenCASCADE point.  
* [0.x.24]*
   Sort two points according to their scalar product with direction. If the   norm of the direction is zero, then use lexicographical ordering. The   optional parameter is used as a relative tolerance when comparing   objects.  
* [0.x.25]*
   Exception thrown when the point specified as argument does not lie   between  [2.x.22]  from the given TopoDS_Shape.  
* [0.x.26]*
   Exception thrown when the point specified as argument cannot be projected   to the manifold.  
* [0.x.27]*
   Thrown when internal OpenCASCADE utilities fail to return the OK status.  
* [0.x.28]*
   Trying to make curve operations on a degenerate edge.  
* [0.x.29]*
   Trying to make operations on the wrong type of shapes.  
* [0.x.30]

