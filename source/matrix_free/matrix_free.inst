// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template class MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >;

 template void MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 print_memory_consumption<std::ostream>(std::ostream &) const;

 template void MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

 template void MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 internal_reinit< VectorizedArray<double,1> ::value_type>(
 const std::shared_ptr<hp::MappingCollection< 1 >> &,
 const std::vector<const DoFHandler< 1 > *> &,
 const std::vector<
 const AffineConstraints< VectorizedArray<double,1> ::value_type> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 1 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template class MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >;

 template void MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 print_memory_consumption<std::ostream>(std::ostream &) const;

 template void MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

 template void MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 internal_reinit< VectorizedArray<float,1> ::value_type>(
 const std::shared_ptr<hp::MappingCollection< 1 >> &,
 const std::vector<const DoFHandler< 1 > *> &,
 const std::vector<
 const AffineConstraints< VectorizedArray<float,1> ::value_type> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 1 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template class MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >;

 template void MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 print_memory_consumption<std::ostream>(std::ostream &) const;

 template void MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

 template void MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 internal_reinit< VectorizedArray<double,1> ::value_type>(
 const std::shared_ptr<hp::MappingCollection< 2 >> &,
 const std::vector<const DoFHandler< 2 > *> &,
 const std::vector<
 const AffineConstraints< VectorizedArray<double,1> ::value_type> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 2 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template class MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >;

 template void MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 print_memory_consumption<std::ostream>(std::ostream &) const;

 template void MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

 template void MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 internal_reinit< VectorizedArray<float,1> ::value_type>(
 const std::shared_ptr<hp::MappingCollection< 2 >> &,
 const std::vector<const DoFHandler< 2 > *> &,
 const std::vector<
 const AffineConstraints< VectorizedArray<float,1> ::value_type> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 2 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template class MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >;

 template void MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 print_memory_consumption<std::ostream>(std::ostream &) const;

 template void MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

 template void MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 internal_reinit< VectorizedArray<double,1> ::value_type>(
 const std::shared_ptr<hp::MappingCollection< 3 >> &,
 const std::vector<const DoFHandler< 3 > *> &,
 const std::vector<
 const AffineConstraints< VectorizedArray<double,1> ::value_type> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 3 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template class MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >;

 template void MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 print_memory_consumption<std::ostream>(std::ostream &) const;

 template void MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

 template void MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 internal_reinit< VectorizedArray<float,1> ::value_type>(
 const std::shared_ptr<hp::MappingCollection< 3 >> &,
 const std::vector<const DoFHandler< 3 > *> &,
 const std::vector<
 const AffineConstraints< VectorizedArray<float,1> ::value_type> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 3 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template void MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 internal_reinit<double>(
 const std::shared_ptr<hp::MappingCollection< 1 >> &,
 const std::vector<const DoFHandler< 1 > *> &,
 const std::vector<const AffineConstraints<double> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 1 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template void MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 internal_reinit<double>(
 const std::shared_ptr<hp::MappingCollection< 2 >> &,
 const std::vector<const DoFHandler< 2 > *> &,
 const std::vector<const AffineConstraints<double> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 2 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template void MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 internal_reinit<double>(
 const std::shared_ptr<hp::MappingCollection< 3 >> &,
 const std::vector<const DoFHandler< 3 > *> &,
 const std::vector<const AffineConstraints<double> *> &,
 const std::vector<IndexSet> &,
 const std::vector<hp::QCollection< 3 >> &,
 const AdditionalData &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  1 
 template bool MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 1 ,  1 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  1 
 template bool MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 1 ,  1 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  2 
 template bool MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 1 ,  2 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  1  <=  2 
 template bool MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 1 ,  2 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  1  <=  3 
 template bool MatrixFree< 1 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 1 ,  3 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  1  <=  3 
 template bool MatrixFree< 1 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 1 ,  3 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  2  <=  1 
 template bool MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 2 ,  1 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  2  <=  1 
 template bool MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 2 ,  1 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  2  <=  2 
 template bool MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 2 ,  2 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  2  <=  2 
 template bool MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 2 ,  2 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  2  <=  3 
 template bool MatrixFree< 2 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 2 ,  3 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  2  <=  3 
 template bool MatrixFree< 2 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 2 ,  3 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  3  <=  1 
 template bool MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 3 ,  1 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  3  <=  1 
 template bool MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 3 ,  1 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  3  <=  2 
 template bool MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 3 ,  2 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  2 
 template bool MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 3 ,  2 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  3 
 template bool MatrixFree< 3 ,
  VectorizedArray<double,1> ::value_type,
  VectorizedArray<double,1> >::
 is_supported(
 const FiniteElement< 3 ,  3 > &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  3 
 template bool MatrixFree< 3 ,
  VectorizedArray<float,1> ::value_type,
  VectorizedArray<float,1> >::
 is_supported(
 const FiniteElement< 3 ,  3 > &);
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
