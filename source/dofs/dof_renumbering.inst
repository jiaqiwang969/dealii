// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 1 ,  1 >(
 DoFHandler< 1 ,  1 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 1 ,  1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 ,  1 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 1 ,  1 >(
 DoFHandler< 1 ,  1 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 1 ,  1 >(
 DoFHandler< 1 ,  1 > &);

 template void
 subdomain_wise< 1 ,  1 >(
 DoFHandler< 1 ,  1 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 1 ,  1 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 1 ,  1 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 1 ,  2 >(
 DoFHandler< 1 ,  2 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 1 ,  2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 ,  2 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 1 ,  2 >(
 DoFHandler< 1 ,  2 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 1 ,  2 >(
 DoFHandler< 1 ,  2 > &);

 template void
 subdomain_wise< 1 ,  2 >(
 DoFHandler< 1 ,  2 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 1 ,  2 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 1 ,  2 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 1 ,  3 >(
 DoFHandler< 1 ,  3 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 1 ,  3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 ,  3 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 1 ,  3 >(
 DoFHandler< 1 ,  3 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 1 ,  3 >(
 DoFHandler< 1 ,  3 > &);

 template void
 subdomain_wise< 1 ,  3 >(
 DoFHandler< 1 ,  3 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 1 ,  3 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 1 ,  3 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 2 ,  1 >(
 DoFHandler< 2 ,  1 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 2 ,  1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 ,  1 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 2 ,  1 >(
 DoFHandler< 2 ,  1 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 2 ,  1 >(
 DoFHandler< 2 ,  1 > &);

 template void
 subdomain_wise< 2 ,  1 >(
 DoFHandler< 2 ,  1 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 2 ,  1 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 2 ,  1 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 2 ,  2 >(
 DoFHandler< 2 ,  2 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 2 ,  2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 ,  2 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 2 ,  2 >(
 DoFHandler< 2 ,  2 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 2 ,  2 >(
 DoFHandler< 2 ,  2 > &);

 template void
 subdomain_wise< 2 ,  2 >(
 DoFHandler< 2 ,  2 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 2 ,  2 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 2 ,  2 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 2 ,  3 >(
 DoFHandler< 2 ,  3 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 2 ,  3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 ,  3 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 2 ,  3 >(
 DoFHandler< 2 ,  3 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 2 ,  3 >(
 DoFHandler< 2 ,  3 > &);

 template void
 subdomain_wise< 2 ,  3 >(
 DoFHandler< 2 ,  3 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 2 ,  3 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 2 ,  3 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 3 ,  1 >(
 DoFHandler< 3 ,  1 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 3 ,  1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 ,  1 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 3 ,  1 >(
 DoFHandler< 3 ,  1 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 3 ,  1 >(
 DoFHandler< 3 ,  1 > &);

 template void
 subdomain_wise< 3 ,  1 >(
 DoFHandler< 3 ,  1 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 3 ,  1 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 3 ,  1 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 3 ,  2 >(
 DoFHandler< 3 ,  2 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 3 ,  2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 ,  2 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 3 ,  2 >(
 DoFHandler< 3 ,  2 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 3 ,  2 >(
 DoFHandler< 3 ,  2 > &);

 template void
 subdomain_wise< 3 ,  2 >(
 DoFHandler< 3 ,  2 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 3 ,  2 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 3 ,  2 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 }


 
 template void
 Cuthill_McKee< 3 ,  3 >(
 DoFHandler< 3 ,  3 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &);

 template void
 compute_Cuthill_McKee< 3 ,  3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 ,  3 > &,
 const bool,
 const bool,
 const std::vector<types::global_dof_index> &,
 const unsigned int);

 template void
 component_wise< 3 ,  3 >(
 DoFHandler< 3 ,  3 > &,
 const std::vector<unsigned int> &);

 template void
 block_wise< 3 ,  3 >(
 DoFHandler< 3 ,  3 > &);

 template void
 subdomain_wise< 3 ,  3 >(
 DoFHandler< 3 ,  3 > &);

 template void
 compute_subdomain_wise(
 std::vector<types::global_dof_index> &new_dof_indices,
 const DoFHandler< 3 ,  3 >
 &dof_handler);

 template void
 hierarchical(DoFHandler< 3 ,  3 > &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  ==  1 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 1 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 1 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 1 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 1 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 1 >(DoFHandler< 1 > &,
 unsigned int);

 template void
 cell_wise< 1 >(
 DoFHandler< 1 > &,
 const std::vector<DoFHandler< 1 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const std::vector<DoFHandler< 1 >::active_cell_iterator>
 &);

 template void
 cell_wise< 1 >(
 DoFHandler< 1 > &,
 unsigned int,
 const std::vector<DoFHandler< 1 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 unsigned int,
 const std::vector<DoFHandler< 1 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 1 >(DoFHandler< 1 > &,
 const Point< 1 > &,
 bool);

 template void
 compute_clockwise_dg< 1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 1 > &,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 1 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 1 > &,
 const unsigned int,
 const Point< 1 > &,
 bool);

 

 template void
 random< 1 >(DoFHandler< 1 > &);

 template void
 compute_random< 1 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &);

 template void
 random< 1 >(DoFHandler< 1 > &,
 const unsigned int);

 template void
 compute_random< 1 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 1 >(
 DoFHandler< 1 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 1 >(
 DoFHandler< 1 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  ==  2 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 1 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 1 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 1 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 1 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 1 >(DoFHandler< 1 > &,
 unsigned int);

 template void
 cell_wise< 1 >(
 DoFHandler< 1 > &,
 const std::vector<DoFHandler< 1 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const std::vector<DoFHandler< 1 >::active_cell_iterator>
 &);

 template void
 cell_wise< 1 >(
 DoFHandler< 1 > &,
 unsigned int,
 const std::vector<DoFHandler< 1 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 unsigned int,
 const std::vector<DoFHandler< 1 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 1 >(DoFHandler< 1 > &,
 const Point< 1 > &,
 bool);

 template void
 compute_clockwise_dg< 1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 1 > &,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 1 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 1 > &,
 const unsigned int,
 const Point< 1 > &,
 bool);

 

 template void
 random< 1 >(DoFHandler< 1 > &);

 template void
 compute_random< 1 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &);

 template void
 random< 1 >(DoFHandler< 1 > &,
 const unsigned int);

 template void
 compute_random< 1 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 1 >(
 DoFHandler< 1 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 1 >(
 DoFHandler< 1 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  ==  3 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 1 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 1 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 1 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 1 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 1 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 1 >(DoFHandler< 1 > &,
 unsigned int);

 template void
 cell_wise< 1 >(
 DoFHandler< 1 > &,
 const std::vector<DoFHandler< 1 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const std::vector<DoFHandler< 1 >::active_cell_iterator>
 &);

 template void
 cell_wise< 1 >(
 DoFHandler< 1 > &,
 unsigned int,
 const std::vector<DoFHandler< 1 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 unsigned int,
 const std::vector<DoFHandler< 1 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 1 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 1 >(DoFHandler< 1 > &,
 const Point< 1 > &,
 bool);

 template void
 compute_clockwise_dg< 1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const Point< 1 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 1 > &,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 1 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 1 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 1 > &,
 const unsigned int,
 const Point< 1 > &,
 bool);

 

 template void
 random< 1 >(DoFHandler< 1 > &);

 template void
 compute_random< 1 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &);

 template void
 random< 1 >(DoFHandler< 1 > &,
 const unsigned int);

 template void
 compute_random< 1 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 1 >(
 DoFHandler< 1 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 1 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 1 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 1 >(
 DoFHandler< 1 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  2  ==  1 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 2 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 2 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 2 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 2 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 2 >(DoFHandler< 2 > &,
 unsigned int);

 template void
 cell_wise< 2 >(
 DoFHandler< 2 > &,
 const std::vector<DoFHandler< 2 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const std::vector<DoFHandler< 2 >::active_cell_iterator>
 &);

 template void
 cell_wise< 2 >(
 DoFHandler< 2 > &,
 unsigned int,
 const std::vector<DoFHandler< 2 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 unsigned int,
 const std::vector<DoFHandler< 2 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 2 >(DoFHandler< 2 > &,
 const Point< 2 > &,
 bool);

 template void
 compute_clockwise_dg< 2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 2 > &,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 2 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 2 > &,
 const unsigned int,
 const Point< 2 > &,
 bool);

 

 template void
 random< 2 >(DoFHandler< 2 > &);

 template void
 compute_random< 2 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &);

 template void
 random< 2 >(DoFHandler< 2 > &,
 const unsigned int);

 template void
 compute_random< 2 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 2 >(
 DoFHandler< 2 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 2 >(
 DoFHandler< 2 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  2  ==  2 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 2 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 2 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 2 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 2 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 2 >(DoFHandler< 2 > &,
 unsigned int);

 template void
 cell_wise< 2 >(
 DoFHandler< 2 > &,
 const std::vector<DoFHandler< 2 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const std::vector<DoFHandler< 2 >::active_cell_iterator>
 &);

 template void
 cell_wise< 2 >(
 DoFHandler< 2 > &,
 unsigned int,
 const std::vector<DoFHandler< 2 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 unsigned int,
 const std::vector<DoFHandler< 2 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 2 >(DoFHandler< 2 > &,
 const Point< 2 > &,
 bool);

 template void
 compute_clockwise_dg< 2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 2 > &,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 2 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 2 > &,
 const unsigned int,
 const Point< 2 > &,
 bool);

 

 template void
 random< 2 >(DoFHandler< 2 > &);

 template void
 compute_random< 2 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &);

 template void
 random< 2 >(DoFHandler< 2 > &,
 const unsigned int);

 template void
 compute_random< 2 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 2 >(
 DoFHandler< 2 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 2 >(
 DoFHandler< 2 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  2  ==  3 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 2 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 2 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 2 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 2 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 2 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 2 >(DoFHandler< 2 > &,
 unsigned int);

 template void
 cell_wise< 2 >(
 DoFHandler< 2 > &,
 const std::vector<DoFHandler< 2 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const std::vector<DoFHandler< 2 >::active_cell_iterator>
 &);

 template void
 cell_wise< 2 >(
 DoFHandler< 2 > &,
 unsigned int,
 const std::vector<DoFHandler< 2 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 unsigned int,
 const std::vector<DoFHandler< 2 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 2 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 2 >(DoFHandler< 2 > &,
 const Point< 2 > &,
 bool);

 template void
 compute_clockwise_dg< 2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const Point< 2 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 2 > &,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 2 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 2 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 2 > &,
 const unsigned int,
 const Point< 2 > &,
 bool);

 

 template void
 random< 2 >(DoFHandler< 2 > &);

 template void
 compute_random< 2 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &);

 template void
 random< 2 >(DoFHandler< 2 > &,
 const unsigned int);

 template void
 compute_random< 2 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 2 >(
 DoFHandler< 2 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 2 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 2 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 2 >(
 DoFHandler< 2 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  3  ==  1 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 3 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 3 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 3 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 3 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 3 >(DoFHandler< 3 > &,
 unsigned int);

 template void
 cell_wise< 3 >(
 DoFHandler< 3 > &,
 const std::vector<DoFHandler< 3 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const std::vector<DoFHandler< 3 >::active_cell_iterator>
 &);

 template void
 cell_wise< 3 >(
 DoFHandler< 3 > &,
 unsigned int,
 const std::vector<DoFHandler< 3 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 unsigned int,
 const std::vector<DoFHandler< 3 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 3 >(DoFHandler< 3 > &,
 const Point< 3 > &,
 bool);

 template void
 compute_clockwise_dg< 3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 3 > &,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 3 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 3 > &,
 const unsigned int,
 const Point< 3 > &,
 bool);

 

 template void
 random< 3 >(DoFHandler< 3 > &);

 template void
 compute_random< 3 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &);

 template void
 random< 3 >(DoFHandler< 3 > &,
 const unsigned int);

 template void
 compute_random< 3 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 3 >(
 DoFHandler< 3 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 3 >(
 DoFHandler< 3 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  3  ==  2 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 3 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 3 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 3 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 3 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 3 >(DoFHandler< 3 > &,
 unsigned int);

 template void
 cell_wise< 3 >(
 DoFHandler< 3 > &,
 const std::vector<DoFHandler< 3 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const std::vector<DoFHandler< 3 >::active_cell_iterator>
 &);

 template void
 cell_wise< 3 >(
 DoFHandler< 3 > &,
 unsigned int,
 const std::vector<DoFHandler< 3 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 unsigned int,
 const std::vector<DoFHandler< 3 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 3 >(DoFHandler< 3 > &,
 const Point< 3 > &,
 bool);

 template void
 compute_clockwise_dg< 3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 3 > &,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 3 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 3 > &,
 const unsigned int,
 const Point< 3 > &,
 bool);

 

 template void
 random< 3 >(DoFHandler< 3 > &);

 template void
 compute_random< 3 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &);

 template void
 random< 3 >(DoFHandler< 3 > &,
 const unsigned int);

 template void
 compute_random< 3 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 3 >(
 DoFHandler< 3 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 3 >(
 DoFHandler< 3 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  3  ==  3 
 namespace DoFRenumbering
 {
 namespace boost
 {
 
 template void
 Cuthill_McKee(DoFHandler< 3 > &, bool, bool);

 template void
 compute_Cuthill_McKee(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);

 template void
 king_ordering(DoFHandler< 3 > &, bool, bool);

 template void
 compute_king_ordering(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);

 template void
 minimum_degree(DoFHandler< 3 > &, bool, bool);

 template void
 compute_minimum_degree(std::vector<dealii::types::global_dof_index> &,
 const DoFHandler< 3 > &,
 bool,
 bool);
 }


 

 template void
 component_wise(DoFHandler< 3 > &,
 unsigned int,
 const std::vector<unsigned int> &);

 template void
 block_wise< 3 >(DoFHandler< 3 > &,
 unsigned int);

 template void
 cell_wise< 3 >(
 DoFHandler< 3 > &,
 const std::vector<DoFHandler< 3 >::active_cell_iterator>
 &);

 template void
 compute_cell_wise< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const std::vector<DoFHandler< 3 >::active_cell_iterator>
 &);

 template void
 cell_wise< 3 >(
 DoFHandler< 3 > &,
 unsigned int,
 const std::vector<DoFHandler< 3 >::level_cell_iterator>
 &);

 template void
 compute_cell_wise< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 unsigned int,
 const std::vector<DoFHandler< 3 >::level_cell_iterator>
 &);

 template void
 compute_downstream< 3 >(
 std::vector<types::global_dof_index> &,
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg< 3 >(DoFHandler< 3 > &,
 const Point< 3 > &,
 bool);

 template void
 compute_clockwise_dg< 3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const Point< 3 > &,
 const bool);

 


 template void
 downstream(
 DoFHandler< 3 > &,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 

 template void
 downstream(
 DoFHandler< 3 > &,
 const unsigned int,
 const Tensor<1, DoFHandler< 3 >::space_dimension> &,
 const bool);

 template void
 clockwise_dg(DoFHandler< 3 > &,
 const unsigned int,
 const Point< 3 > &,
 bool);

 

 template void
 random< 3 >(DoFHandler< 3 > &);

 template void
 compute_random< 3 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &);

 template void
 random< 3 >(DoFHandler< 3 > &,
 const unsigned int);

 template void
 compute_random< 3 >(std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const unsigned int);

 template void
 sort_selected_dofs_back< 3 >(
 DoFHandler< 3 > &,
 const std::vector<bool> &);

 template void
 compute_sort_selected_dofs_back< 3 >(
 std::vector<types::global_dof_index> &,
 const DoFHandler< 3 > &,
 const std::vector<bool> &);

 template void
 Cuthill_McKee< 3 >(
 DoFHandler< 3 > &,
 const unsigned int,
 const bool,
 const std::vector<types::global_dof_index> &);
 }
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
