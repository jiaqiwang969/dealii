// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 1 ,  1 >(
 const DoFHandler< 1 ,  1 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 1 ,
  1 >(
 const DoFHandler< 1 ,  1 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 1 ,  1 >(
 const DoFHandler< 1 ,  1 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 1 ,
  1 >(
 const DoFHandler< 1 ,  1 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 1 ,
  1 >(
 const DoFHandler< 1 ,  1 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 1 ,  1 >(
 const std::vector<
 DoFHandler< 1 ,
  1 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 1 ,  1 >(
 const std::vector<
 DoFHandler< 1 ,
  1 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 1 ,  2 >(
 const DoFHandler< 1 ,  2 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 1 ,
  2 >(
 const DoFHandler< 1 ,  2 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 1 ,  2 >(
 const DoFHandler< 1 ,  2 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 1 ,
  2 >(
 const DoFHandler< 1 ,  2 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 1 ,
  2 >(
 const DoFHandler< 1 ,  2 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 1 ,  2 >(
 const std::vector<
 DoFHandler< 1 ,
  2 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 1 ,  2 >(
 const std::vector<
 DoFHandler< 1 ,
  2 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 1 ,  3 >(
 const DoFHandler< 1 ,  3 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 1 ,
  3 >(
 const DoFHandler< 1 ,  3 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 1 ,  3 >(
 const DoFHandler< 1 ,  3 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 1 ,
  3 >(
 const DoFHandler< 1 ,  3 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 1 ,
  3 >(
 const DoFHandler< 1 ,  3 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 1 ,  3 >(
 const std::vector<
 DoFHandler< 1 ,
  3 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 1 ,  3 >(
 const std::vector<
 DoFHandler< 1 ,
  3 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 2 ,  1 >(
 const DoFHandler< 2 ,  1 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 2 ,
  1 >(
 const DoFHandler< 2 ,  1 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 2 ,  1 >(
 const DoFHandler< 2 ,  1 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 2 ,
  1 >(
 const DoFHandler< 2 ,  1 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 2 ,
  1 >(
 const DoFHandler< 2 ,  1 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 2 ,  1 >(
 const std::vector<
 DoFHandler< 2 ,
  1 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 2 ,  1 >(
 const std::vector<
 DoFHandler< 2 ,
  1 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 2 ,  2 >(
 const DoFHandler< 2 ,  2 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 2 ,
  2 >(
 const DoFHandler< 2 ,  2 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 2 ,  2 >(
 const DoFHandler< 2 ,  2 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 2 ,
  2 >(
 const DoFHandler< 2 ,  2 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 2 ,
  2 >(
 const DoFHandler< 2 ,  2 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 2 ,  2 >(
 const std::vector<
 DoFHandler< 2 ,
  2 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 2 ,  2 >(
 const std::vector<
 DoFHandler< 2 ,
  2 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 2 ,  3 >(
 const DoFHandler< 2 ,  3 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 2 ,
  3 >(
 const DoFHandler< 2 ,  3 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 2 ,  3 >(
 const DoFHandler< 2 ,  3 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 2 ,
  3 >(
 const DoFHandler< 2 ,  3 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 2 ,
  3 >(
 const DoFHandler< 2 ,  3 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 2 ,  3 >(
 const std::vector<
 DoFHandler< 2 ,
  3 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 2 ,  3 >(
 const std::vector<
 DoFHandler< 2 ,
  3 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 3 ,  1 >(
 const DoFHandler< 3 ,  1 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 3 ,
  1 >(
 const DoFHandler< 3 ,  1 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 3 ,  1 >(
 const DoFHandler< 3 ,  1 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 3 ,
  1 >(
 const DoFHandler< 3 ,  1 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 3 ,
  1 >(
 const DoFHandler< 3 ,  1 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 3 ,  1 >(
 const std::vector<
 DoFHandler< 3 ,
  1 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 3 ,  1 >(
 const std::vector<
 DoFHandler< 3 ,
  1 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 3 ,  2 >(
 const DoFHandler< 3 ,  2 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 3 ,
  2 >(
 const DoFHandler< 3 ,  2 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 3 ,  2 >(
 const DoFHandler< 3 ,  2 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 3 ,
  2 >(
 const DoFHandler< 3 ,  2 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 3 ,
  2 >(
 const DoFHandler< 3 ,  2 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 3 ,  2 >(
 const std::vector<
 DoFHandler< 3 ,
  2 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 3 ,  2 >(
 const std::vector<
 DoFHandler< 3 ,
  2 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 namespace DoFTools
 {
 template void
 extract_locally_relevant_dofs< 3 ,  3 >(
 const DoFHandler< 3 ,  3 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_relevant_level_dofs< 3 ,
  3 >(
 const DoFHandler< 3 ,  3 >
 & dof_handler,
 const unsigned int level,
 IndexSet & dof_set);

 template void
 extract_locally_active_dofs< 3 ,  3 >(
 const DoFHandler< 3 ,  3 >
 & dof_handler,
 IndexSet &dof_set);

 template void
 extract_locally_active_level_dofs< 3 ,
  3 >(
 const DoFHandler< 3 ,  3 >
 & dof_handler,
 IndexSet & dof_set,
 const unsigned int level);

 template std::vector<IndexSet>
 locally_owned_dofs_per_component< 3 ,
  3 >(
 const DoFHandler< 3 ,  3 >
 & dof_handler,
 const ComponentMask &components);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_component< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const bool,
 const std::vector<unsigned int> &);

 template std::vector<types::global_dof_index>
 count_dofs_per_fe_block< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::vector<unsigned int> &);


 template unsigned int
 count_dofs_on_patch< 3 ,  3 >(
 const std::vector<
 DoFHandler< 3 ,
  3 >::active_cell_iterator> &patch);

 template std::vector<types::global_dof_index>
 get_dofs_on_patch< 3 ,  3 >(
 const std::vector<
 DoFHandler< 3 ,
  3 >::active_cell_iterator> &patch);

 template IndexSet
 extract_dofs< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const ComponentMask &);

 template IndexSet
 extract_dofs< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const BlockMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template std::vector<unsigned int> DoFTools::make_vertex_patches(
 SparsityPattern &,
 const DoFHandler< 1 > &,
 unsigned int,
 bool,
 bool,
 bool,
 bool,
 bool);

 template std::vector<unsigned int> DoFTools::make_vertex_patches(
 SparsityPattern &,
 const DoFHandler< 1 > &,
 unsigned int,
 const BlockMask &,
 bool,
 bool,
 bool,
 bool);

 template void DoFTools::make_single_patch(
 SparsityPattern &,
 const DoFHandler< 1 > &,
 unsigned int,
 bool);

 template void DoFTools::make_child_patches(
 SparsityPattern &,
 const DoFHandler< 1 > &,
 unsigned int,
 bool,
 bool);

 

 template void DoFTools::distribute_cell_to_dof_vector< 1 ,
  1 >(
 const DoFHandler< 1 > &dof_handler,
 const Vector<float> & cell_data,
 Vector<double> & dof_data,
 const unsigned int component);
 template void DoFTools::distribute_cell_to_dof_vector< 1 ,
  1 >(
 const DoFHandler< 1 > &dof_handler,
 const Vector<double> & cell_data,
 Vector<double> & dof_data,
 const unsigned int component);

 template void
 DoFTools::extract_boundary_dofs< 1 ,  1 >(
 const DoFHandler< 1 > &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void
 DoFTools::extract_boundary_dofs< 1 ,  1 >(
 const DoFHandler< 1 > &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template IndexSet
 DoFTools::extract_boundary_dofs< 1 ,  1 >(
 const DoFHandler< 1 > &,
 const ComponentMask &,
 const std::set<types::boundary_id> &);

 template void DoFTools::extract_dofs_with_support_on_boundary<
  1 ,
  1 >(const DoFHandler< 1 > &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler< 1 > &);

 template void DoFTools::extract_subdomain_dofs< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const types::subdomain_id subdomain_id,
 std::vector<bool> & selected_dofs);

 template void DoFTools::extract_constant_modes< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const ComponentMask & selected_components,
 std::vector<std::vector<bool>> & constant_modes);

 template void DoFTools::get_active_fe_indices< 1 >(
 const DoFHandler< 1 > &dof_handler,
 std::vector<unsigned int> & active_fe_indices);

 template void DoFTools::get_subdomain_association< 1 >(
 const DoFHandler< 1 > &dof_handler,
 std::vector<types::subdomain_id> & subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain< 1 >(
 const DoFHandler< 1 > &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain< 1 >(
 const DoFHandler< 1 > &dof_handler);

 template unsigned int
 DoFTools::count_dofs_with_subdomain_association< 1 ,
  1 >(
 const DoFHandler< 1 > &, const types::subdomain_id);
 template IndexSet
 DoFTools::dof_indices_with_subdomain_association< 1 ,
  1 >(
 const DoFHandler< 1 > &, const types::subdomain_id);
 template void DoFTools::count_dofs_with_subdomain_association<
  1 ,
  1 >(const DoFHandler< 1 > &,
 const types::subdomain_id,
 std::vector<unsigned int> &);

#if  1  < 3

 template void
 DoFTools::extract_boundary_dofs< 1 ,  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void
 DoFTools::extract_boundary_dofs< 1 ,  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template unsigned int
 DoFTools::count_dofs_with_subdomain_association< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 const types::subdomain_id);

 template IndexSet
 DoFTools::dof_indices_with_subdomain_association< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 const types::subdomain_id);
 template void
 DoFTools::count_dofs_with_subdomain_association< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 const types::subdomain_id,
 std::vector<unsigned int> &);

 template void DoFTools::get_subdomain_association< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &dof_handler,
 std::vector<types::subdomain_id> &subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &dof_handler);

#endif

#if  1  == 3
 template void DoFTools::extract_boundary_dofs<1, 3>(
 const DoFHandler<1, 3> &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void DoFTools::extract_boundary_dofs<1, 3>(
 const DoFHandler<1, 3> &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template void DoFTools::get_subdomain_association<1, 3>(
 const DoFHandler<1, 3> & dof_handler,
 std::vector<types::subdomain_id> &subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain<1, 3>(
 const DoFHandler<1, 3> &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain<1, 3>(
 const DoFHandler<1, 3> &dof_handler);

 template unsigned int DoFTools::count_dofs_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &, const types::subdomain_id);
 template IndexSet DoFTools::dof_indices_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &, const types::subdomain_id);
 template void DoFTools::count_dofs_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &,
 const types::subdomain_id,
 std::vector<unsigned int> &);
#endif

 template void
 DoFTools::map_dof_to_boundary_indices< 1 ,  1 >(
 const DoFHandler< 1 > &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void
 DoFTools::map_dof_to_boundary_indices< 1 ,  1 >(
 const DoFHandler< 1 > &,
 std::vector<types::global_dof_index> &);


#if  1  < 3

 template void DoFTools::map_dof_to_boundary_indices< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void DoFTools::map_dof_to_boundary_indices< 1 ,
  1  + 1>(
 const DoFHandler< 1 ,  1  + 1> &,
 std::vector<types::global_dof_index> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler< 1 ,  1  + 1> &);

#endif

#if  1  == 3

 template void DoFTools::map_dof_to_boundary_indices<1, 3>(
 const DoFHandler<1, 3> &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void DoFTools::map_dof_to_boundary_indices<1, 3>(
 const DoFHandler<1, 3> &, std::vector<types::global_dof_index> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler<1, 3> &);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template std::vector<unsigned int> DoFTools::make_vertex_patches(
 SparsityPattern &,
 const DoFHandler< 2 > &,
 unsigned int,
 bool,
 bool,
 bool,
 bool,
 bool);

 template std::vector<unsigned int> DoFTools::make_vertex_patches(
 SparsityPattern &,
 const DoFHandler< 2 > &,
 unsigned int,
 const BlockMask &,
 bool,
 bool,
 bool,
 bool);

 template void DoFTools::make_single_patch(
 SparsityPattern &,
 const DoFHandler< 2 > &,
 unsigned int,
 bool);

 template void DoFTools::make_child_patches(
 SparsityPattern &,
 const DoFHandler< 2 > &,
 unsigned int,
 bool,
 bool);

 

 template void DoFTools::distribute_cell_to_dof_vector< 2 ,
  2 >(
 const DoFHandler< 2 > &dof_handler,
 const Vector<float> & cell_data,
 Vector<double> & dof_data,
 const unsigned int component);
 template void DoFTools::distribute_cell_to_dof_vector< 2 ,
  2 >(
 const DoFHandler< 2 > &dof_handler,
 const Vector<double> & cell_data,
 Vector<double> & dof_data,
 const unsigned int component);

 template void
 DoFTools::extract_boundary_dofs< 2 ,  2 >(
 const DoFHandler< 2 > &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void
 DoFTools::extract_boundary_dofs< 2 ,  2 >(
 const DoFHandler< 2 > &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template IndexSet
 DoFTools::extract_boundary_dofs< 2 ,  2 >(
 const DoFHandler< 2 > &,
 const ComponentMask &,
 const std::set<types::boundary_id> &);

 template void DoFTools::extract_dofs_with_support_on_boundary<
  2 ,
  2 >(const DoFHandler< 2 > &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler< 2 > &);

 template void DoFTools::extract_subdomain_dofs< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const types::subdomain_id subdomain_id,
 std::vector<bool> & selected_dofs);

 template void DoFTools::extract_constant_modes< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const ComponentMask & selected_components,
 std::vector<std::vector<bool>> & constant_modes);

 template void DoFTools::get_active_fe_indices< 2 >(
 const DoFHandler< 2 > &dof_handler,
 std::vector<unsigned int> & active_fe_indices);

 template void DoFTools::get_subdomain_association< 2 >(
 const DoFHandler< 2 > &dof_handler,
 std::vector<types::subdomain_id> & subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain< 2 >(
 const DoFHandler< 2 > &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain< 2 >(
 const DoFHandler< 2 > &dof_handler);

 template unsigned int
 DoFTools::count_dofs_with_subdomain_association< 2 ,
  2 >(
 const DoFHandler< 2 > &, const types::subdomain_id);
 template IndexSet
 DoFTools::dof_indices_with_subdomain_association< 2 ,
  2 >(
 const DoFHandler< 2 > &, const types::subdomain_id);
 template void DoFTools::count_dofs_with_subdomain_association<
  2 ,
  2 >(const DoFHandler< 2 > &,
 const types::subdomain_id,
 std::vector<unsigned int> &);

#if  2  < 3

 template void
 DoFTools::extract_boundary_dofs< 2 ,  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void
 DoFTools::extract_boundary_dofs< 2 ,  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template unsigned int
 DoFTools::count_dofs_with_subdomain_association< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 const types::subdomain_id);

 template IndexSet
 DoFTools::dof_indices_with_subdomain_association< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 const types::subdomain_id);
 template void
 DoFTools::count_dofs_with_subdomain_association< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 const types::subdomain_id,
 std::vector<unsigned int> &);

 template void DoFTools::get_subdomain_association< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &dof_handler,
 std::vector<types::subdomain_id> &subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &dof_handler);

#endif

#if  2  == 3
 template void DoFTools::extract_boundary_dofs<1, 3>(
 const DoFHandler<1, 3> &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void DoFTools::extract_boundary_dofs<1, 3>(
 const DoFHandler<1, 3> &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template void DoFTools::get_subdomain_association<1, 3>(
 const DoFHandler<1, 3> & dof_handler,
 std::vector<types::subdomain_id> &subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain<1, 3>(
 const DoFHandler<1, 3> &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain<1, 3>(
 const DoFHandler<1, 3> &dof_handler);

 template unsigned int DoFTools::count_dofs_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &, const types::subdomain_id);
 template IndexSet DoFTools::dof_indices_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &, const types::subdomain_id);
 template void DoFTools::count_dofs_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &,
 const types::subdomain_id,
 std::vector<unsigned int> &);
#endif

 template void
 DoFTools::map_dof_to_boundary_indices< 2 ,  2 >(
 const DoFHandler< 2 > &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void
 DoFTools::map_dof_to_boundary_indices< 2 ,  2 >(
 const DoFHandler< 2 > &,
 std::vector<types::global_dof_index> &);


#if  2  < 3

 template void DoFTools::map_dof_to_boundary_indices< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void DoFTools::map_dof_to_boundary_indices< 2 ,
  2  + 1>(
 const DoFHandler< 2 ,  2  + 1> &,
 std::vector<types::global_dof_index> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler< 2 ,  2  + 1> &);

#endif

#if  2  == 3

 template void DoFTools::map_dof_to_boundary_indices<1, 3>(
 const DoFHandler<1, 3> &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void DoFTools::map_dof_to_boundary_indices<1, 3>(
 const DoFHandler<1, 3> &, std::vector<types::global_dof_index> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler<1, 3> &);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template std::vector<unsigned int> DoFTools::make_vertex_patches(
 SparsityPattern &,
 const DoFHandler< 3 > &,
 unsigned int,
 bool,
 bool,
 bool,
 bool,
 bool);

 template std::vector<unsigned int> DoFTools::make_vertex_patches(
 SparsityPattern &,
 const DoFHandler< 3 > &,
 unsigned int,
 const BlockMask &,
 bool,
 bool,
 bool,
 bool);

 template void DoFTools::make_single_patch(
 SparsityPattern &,
 const DoFHandler< 3 > &,
 unsigned int,
 bool);

 template void DoFTools::make_child_patches(
 SparsityPattern &,
 const DoFHandler< 3 > &,
 unsigned int,
 bool,
 bool);

 

 template void DoFTools::distribute_cell_to_dof_vector< 3 ,
  3 >(
 const DoFHandler< 3 > &dof_handler,
 const Vector<float> & cell_data,
 Vector<double> & dof_data,
 const unsigned int component);
 template void DoFTools::distribute_cell_to_dof_vector< 3 ,
  3 >(
 const DoFHandler< 3 > &dof_handler,
 const Vector<double> & cell_data,
 Vector<double> & dof_data,
 const unsigned int component);

 template void
 DoFTools::extract_boundary_dofs< 3 ,  3 >(
 const DoFHandler< 3 > &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void
 DoFTools::extract_boundary_dofs< 3 ,  3 >(
 const DoFHandler< 3 > &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template IndexSet
 DoFTools::extract_boundary_dofs< 3 ,  3 >(
 const DoFHandler< 3 > &,
 const ComponentMask &,
 const std::set<types::boundary_id> &);

 template void DoFTools::extract_dofs_with_support_on_boundary<
  3 ,
  3 >(const DoFHandler< 3 > &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler< 3 > &);

 template void DoFTools::extract_subdomain_dofs< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const types::subdomain_id subdomain_id,
 std::vector<bool> & selected_dofs);

 template void DoFTools::extract_constant_modes< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const ComponentMask & selected_components,
 std::vector<std::vector<bool>> & constant_modes);

 template void DoFTools::get_active_fe_indices< 3 >(
 const DoFHandler< 3 > &dof_handler,
 std::vector<unsigned int> & active_fe_indices);

 template void DoFTools::get_subdomain_association< 3 >(
 const DoFHandler< 3 > &dof_handler,
 std::vector<types::subdomain_id> & subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain< 3 >(
 const DoFHandler< 3 > &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain< 3 >(
 const DoFHandler< 3 > &dof_handler);

 template unsigned int
 DoFTools::count_dofs_with_subdomain_association< 3 ,
  3 >(
 const DoFHandler< 3 > &, const types::subdomain_id);
 template IndexSet
 DoFTools::dof_indices_with_subdomain_association< 3 ,
  3 >(
 const DoFHandler< 3 > &, const types::subdomain_id);
 template void DoFTools::count_dofs_with_subdomain_association<
  3 ,
  3 >(const DoFHandler< 3 > &,
 const types::subdomain_id,
 std::vector<unsigned int> &);

#if  3  < 3

 template void
 DoFTools::extract_boundary_dofs< 3 ,  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void
 DoFTools::extract_boundary_dofs< 3 ,  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template unsigned int
 DoFTools::count_dofs_with_subdomain_association< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 const types::subdomain_id);

 template IndexSet
 DoFTools::dof_indices_with_subdomain_association< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 const types::subdomain_id);
 template void
 DoFTools::count_dofs_with_subdomain_association< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 const types::subdomain_id,
 std::vector<unsigned int> &);

 template void DoFTools::get_subdomain_association< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &dof_handler,
 std::vector<types::subdomain_id> &subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &dof_handler);

#endif

#if  3  == 3
 template void DoFTools::extract_boundary_dofs<1, 3>(
 const DoFHandler<1, 3> &,
 const ComponentMask &,
 std::vector<bool> &,
 const std::set<types::boundary_id> &);

 template void DoFTools::extract_boundary_dofs<1, 3>(
 const DoFHandler<1, 3> &,
 const ComponentMask &,
 IndexSet &,
 const std::set<types::boundary_id> &);

 template void DoFTools::get_subdomain_association<1, 3>(
 const DoFHandler<1, 3> & dof_handler,
 std::vector<types::subdomain_id> &subdomain_association);

 template std::vector<IndexSet>
 DoFTools::locally_owned_dofs_per_subdomain<1, 3>(
 const DoFHandler<1, 3> &dof_handler);

 template std::vector<IndexSet>
 DoFTools::locally_relevant_dofs_per_subdomain<1, 3>(
 const DoFHandler<1, 3> &dof_handler);

 template unsigned int DoFTools::count_dofs_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &, const types::subdomain_id);
 template IndexSet DoFTools::dof_indices_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &, const types::subdomain_id);
 template void DoFTools::count_dofs_with_subdomain_association<1, 3>(
 const DoFHandler<1, 3> &,
 const types::subdomain_id,
 std::vector<unsigned int> &);
#endif

 template void
 DoFTools::map_dof_to_boundary_indices< 3 ,  3 >(
 const DoFHandler< 3 > &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void
 DoFTools::map_dof_to_boundary_indices< 3 ,  3 >(
 const DoFHandler< 3 > &,
 std::vector<types::global_dof_index> &);


#if  3  < 3

 template void DoFTools::map_dof_to_boundary_indices< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void DoFTools::map_dof_to_boundary_indices< 3 ,
  3  + 1>(
 const DoFHandler< 3 ,  3  + 1> &,
 std::vector<types::global_dof_index> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler< 3 ,  3  + 1> &);

#endif

#if  3  == 3

 template void DoFTools::map_dof_to_boundary_indices<1, 3>(
 const DoFHandler<1, 3> &,
 const std::set<types::boundary_id> &,
 std::vector<types::global_dof_index> &);

 template void DoFTools::map_dof_to_boundary_indices<1, 3>(
 const DoFHandler<1, 3> &, std::vector<types::global_dof_index> &);

 template IndexSet DoFTools::extract_hanging_node_dofs(
 const DoFHandler<1, 3> &);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template void DoFTools::convert_couplings_to_blocks(
 const DoFHandler< 1 > &,
 const Table<2, Coupling> &,
 std::vector<Table<2, Coupling>> &);

 template void DoFTools::write_gnuplot_dof_support_point_info(
 std::ostream &,
 const std::map<types::global_dof_index, Point< 1 >> &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template void DoFTools::convert_couplings_to_blocks(
 const DoFHandler< 2 > &,
 const Table<2, Coupling> &,
 std::vector<Table<2, Coupling>> &);

 template void DoFTools::write_gnuplot_dof_support_point_info(
 std::ostream &,
 const std::map<types::global_dof_index, Point< 2 >> &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template void DoFTools::convert_couplings_to_blocks(
 const DoFHandler< 3 > &,
 const Table<2, Coupling> &,
 std::vector<Table<2, Coupling>> &);

 template void DoFTools::write_gnuplot_dof_support_point_info(
 std::ostream &,
 const std::map<types::global_dof_index, Point< 3 >> &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 1 ,
  1 ,
  double >(
 const DoFHandler< 1 > &,
 const std::function<bool(
 const typename DoFHandler< 1 >::active_cell_iterator &)>
 &,
 const AffineConstraints< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 1 ,
  1 ,
  float >(
 const DoFHandler< 1 > &,
 const std::function<bool(
 const typename DoFHandler< 1 >::active_cell_iterator &)>
 &,
 const AffineConstraints< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 1 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 1 > &,
 const std::function<bool(
 const typename DoFHandler< 1 >::active_cell_iterator &)>
 &,
 const AffineConstraints< std::complex<double> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 1 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 1 > &,
 const std::function<bool(
 const typename DoFHandler< 1 >::active_cell_iterator &)>
 &,
 const AffineConstraints< std::complex<float> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 2 ,
  2 ,
  double >(
 const DoFHandler< 2 > &,
 const std::function<bool(
 const typename DoFHandler< 2 >::active_cell_iterator &)>
 &,
 const AffineConstraints< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 2 ,
  2 ,
  float >(
 const DoFHandler< 2 > &,
 const std::function<bool(
 const typename DoFHandler< 2 >::active_cell_iterator &)>
 &,
 const AffineConstraints< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 2 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 2 > &,
 const std::function<bool(
 const typename DoFHandler< 2 >::active_cell_iterator &)>
 &,
 const AffineConstraints< std::complex<double> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 2 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 2 > &,
 const std::function<bool(
 const typename DoFHandler< 2 >::active_cell_iterator &)>
 &,
 const AffineConstraints< std::complex<float> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 3 ,
  3 ,
  double >(
 const DoFHandler< 3 > &,
 const std::function<bool(
 const typename DoFHandler< 3 >::active_cell_iterator &)>
 &,
 const AffineConstraints< double > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 3 ,
  3 ,
  float >(
 const DoFHandler< 3 > &,
 const std::function<bool(
 const typename DoFHandler< 3 >::active_cell_iterator &)>
 &,
 const AffineConstraints< float > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 3 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 3 > &,
 const std::function<bool(
 const typename DoFHandler< 3 >::active_cell_iterator &)>
 &,
 const AffineConstraints< std::complex<double> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
template IndexSet
 DoFTools::extract_dofs_with_support_contained_within< 3 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 3 > &,
 const std::function<bool(
 const typename DoFHandler< 3 >::active_cell_iterator &)>
 &,
 const AffineConstraints< std::complex<float> > &);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
#if  1  <=  1 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 1 ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 std::vector<Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  1 >(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 std::vector<Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 std::map<types::global_dof_index, Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  1 >(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 std::map<types::global_dof_index, Point< 1 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
#if  1  <=  2 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 1 ,  2 >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 std::vector<Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  2 >(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 std::vector<Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  2 >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 std::map<types::global_dof_index, Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  2 >(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 std::map<types::global_dof_index, Point< 2 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
#if  1  <=  3 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 1 ,  3 >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 std::vector<Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  3 >(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 std::vector<Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  3 >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 std::map<types::global_dof_index, Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 1 ,  3 >(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 std::map<types::global_dof_index, Point< 3 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
#if  2  <=  1 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 2 ,  1 >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 std::vector<Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  1 >(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 std::vector<Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  1 >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 std::map<types::global_dof_index, Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  1 >(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 std::map<types::global_dof_index, Point< 1 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
#if  2  <=  2 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 2 ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 std::vector<Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  2 >(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 std::vector<Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 std::map<types::global_dof_index, Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  2 >(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 std::map<types::global_dof_index, Point< 2 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
#if  2  <=  3 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 2 ,  3 >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 std::vector<Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  3 >(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 std::vector<Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  3 >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 std::map<types::global_dof_index, Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 2 ,  3 >(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 std::map<types::global_dof_index, Point< 3 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
#if  3  <=  1 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 3 ,  1 >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 std::vector<Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  1 >(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 std::vector<Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  1 >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 std::map<types::global_dof_index, Point< 1 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  1 >(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 std::map<types::global_dof_index, Point< 1 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
#if  3  <=  2 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 3 ,  2 >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 std::vector<Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  2 >(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 std::vector<Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  2 >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 std::map<types::global_dof_index, Point< 2 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  2 >(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 std::map<types::global_dof_index, Point< 2 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
#if  3  <=  3 
 namespace DoFTools
 {
 template void
 map_dofs_to_support_points< 3 ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 std::vector<Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  3 >(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 std::vector<Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 std::map<types::global_dof_index, Point< 3 >> &,
 const ComponentMask &);

 template void
 map_dofs_to_support_points< 3 ,  3 >(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 std::map<types::global_dof_index, Point< 3 >> &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
#if  1  <=  1 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 1 ,  1 >(
 const unsigned int level,
 const DoFHandler< 1 ,  1 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 1 ,  1 >(
 const unsigned int level,
 const DoFHandler< 1 ,  1 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
#if  1  <=  2 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 1 ,  2 >(
 const unsigned int level,
 const DoFHandler< 1 ,  2 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 1 ,  2 >(
 const unsigned int level,
 const DoFHandler< 1 ,  2 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
#if  1  <=  3 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 1 ,  3 >(
 const unsigned int level,
 const DoFHandler< 1 ,  3 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 1 ,  3 >(
 const unsigned int level,
 const DoFHandler< 1 ,  3 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
#if  2  <=  1 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 2 ,  1 >(
 const unsigned int level,
 const DoFHandler< 2 ,  1 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 2 ,  1 >(
 const unsigned int level,
 const DoFHandler< 2 ,  1 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
#if  2  <=  2 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 2 ,  2 >(
 const unsigned int level,
 const DoFHandler< 2 ,  2 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 2 ,  2 >(
 const unsigned int level,
 const DoFHandler< 2 ,  2 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
#if  2  <=  3 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 2 ,  3 >(
 const unsigned int level,
 const DoFHandler< 2 ,  3 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 2 ,  3 >(
 const unsigned int level,
 const DoFHandler< 2 ,  3 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
#if  3  <=  1 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 3 ,  1 >(
 const unsigned int level,
 const DoFHandler< 3 ,  1 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 3 ,  1 >(
 const unsigned int level,
 const DoFHandler< 3 ,  1 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
#if  3  <=  2 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 3 ,  2 >(
 const unsigned int level,
 const DoFHandler< 3 ,  2 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 3 ,  2 >(
 const unsigned int level,
 const DoFHandler< 3 ,  2 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
#if  3  <=  3 
 namespace DoFTools
 {
 
 template void
 extract_level_dofs< 3 ,  3 >(
 const unsigned int level,
 const DoFHandler< 3 ,  3 > &,
 const ComponentMask &,
 std::vector<bool> &);

 template void
 extract_level_dofs< 3 ,  3 >(
 const unsigned int level,
 const DoFHandler< 3 ,  3 > &,
 const BlockMask &,
 std::vector<bool> &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
#if  1  <=  1 
 namespace DoFTools
 {
 template void
 make_cell_patches< 1 ,  1 >(
 SparsityPattern &,
 const DoFHandler< 1 ,  1 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
#if  1  <=  2 
 namespace DoFTools
 {
 template void
 make_cell_patches< 1 ,  2 >(
 SparsityPattern &,
 const DoFHandler< 1 ,  2 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
#if  1  <=  3 
 namespace DoFTools
 {
 template void
 make_cell_patches< 1 ,  3 >(
 SparsityPattern &,
 const DoFHandler< 1 ,  3 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
#if  2  <=  1 
 namespace DoFTools
 {
 template void
 make_cell_patches< 2 ,  1 >(
 SparsityPattern &,
 const DoFHandler< 2 ,  1 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
#if  2  <=  2 
 namespace DoFTools
 {
 template void
 make_cell_patches< 2 ,  2 >(
 SparsityPattern &,
 const DoFHandler< 2 ,  2 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
#if  2  <=  3 
 namespace DoFTools
 {
 template void
 make_cell_patches< 2 ,  3 >(
 SparsityPattern &,
 const DoFHandler< 2 ,  3 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
#if  3  <=  1 
 namespace DoFTools
 {
 template void
 make_cell_patches< 3 ,  1 >(
 SparsityPattern &,
 const DoFHandler< 3 ,  1 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
#if  3  <=  2 
 namespace DoFTools
 {
 template void
 make_cell_patches< 3 ,  2 >(
 SparsityPattern &,
 const DoFHandler< 3 ,  2 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
#if  3  <=  3 
 namespace DoFTools
 {
 template void
 make_cell_patches< 3 ,  3 >(
 SparsityPattern &,
 const DoFHandler< 3 ,  3 > &,
 const unsigned int,
 const std::vector<bool> &,
 const types::global_dof_index);

 }
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
