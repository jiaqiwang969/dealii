// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template void
 GridRefinement::refine< 1 ,  double ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 1 ,  double ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double);

 template void GridRefinement::
 refine_and_coarsen_fixed_number< 1 ,  double ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int);

 template void GridRefinement::refine_and_coarsen_fixed_fraction<
  1 ,
  double ,
  1 >(Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 1 ,  double ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const unsigned int);

#if  1  < 3
 template void
 GridRefinement::refine< 1 ,  double ,  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 1 ,  double ,  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< double > &,
 const double);

 template void
 GridRefinement::refine_and_coarsen_fixed_number< 1 ,
  double ,
  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int);

 template void
 GridRefinement::refine_and_coarsen_fixed_fraction< 1 ,
  double ,
  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 1 ,  double ,  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< double > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template void
 GridRefinement::refine< 2 ,  double ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 2 ,  double ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double);

 template void GridRefinement::
 refine_and_coarsen_fixed_number< 2 ,  double ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int);

 template void GridRefinement::refine_and_coarsen_fixed_fraction<
  2 ,
  double ,
  2 >(Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 2 ,  double ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const unsigned int);

#if  2  < 3
 template void
 GridRefinement::refine< 2 ,  double ,  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 2 ,  double ,  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< double > &,
 const double);

 template void
 GridRefinement::refine_and_coarsen_fixed_number< 2 ,
  double ,
  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int);

 template void
 GridRefinement::refine_and_coarsen_fixed_fraction< 2 ,
  double ,
  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 2 ,  double ,  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< double > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template void
 GridRefinement::refine< 3 ,  double ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 3 ,  double ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double);

 template void GridRefinement::
 refine_and_coarsen_fixed_number< 3 ,  double ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int);

 template void GridRefinement::refine_and_coarsen_fixed_fraction<
  3 ,
  double ,
  3 >(Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 3 ,  double ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const unsigned int);

#if  3  < 3
 template void
 GridRefinement::refine< 3 ,  double ,  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 3 ,  double ,  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< double > &,
 const double);

 template void
 GridRefinement::refine_and_coarsen_fixed_number< 3 ,
  double ,
  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int);

 template void
 GridRefinement::refine_and_coarsen_fixed_fraction< 3 ,
  double ,
  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 3 ,  double ,  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< double > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template void
 GridRefinement::refine< 1 ,  float ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 1 ,  float ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double);

 template void GridRefinement::
 refine_and_coarsen_fixed_number< 1 ,  float ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int);

 template void GridRefinement::refine_and_coarsen_fixed_fraction<
  1 ,
  float ,
  1 >(Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 1 ,  float ,  1 >(
 Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const unsigned int);

#if  1  < 3
 template void
 GridRefinement::refine< 1 ,  float ,  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 1 ,  float ,  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< float > &,
 const double);

 template void
 GridRefinement::refine_and_coarsen_fixed_number< 1 ,
  float ,
  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int);

 template void
 GridRefinement::refine_and_coarsen_fixed_fraction< 1 ,
  float ,
  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 1 ,  float ,  1  + 1>(
 Triangulation< 1 ,  1  + 1> &,
 const dealii::Vector< float > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template void
 GridRefinement::refine< 2 ,  float ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 2 ,  float ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double);

 template void GridRefinement::
 refine_and_coarsen_fixed_number< 2 ,  float ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int);

 template void GridRefinement::refine_and_coarsen_fixed_fraction<
  2 ,
  float ,
  2 >(Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 2 ,  float ,  2 >(
 Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const unsigned int);

#if  2  < 3
 template void
 GridRefinement::refine< 2 ,  float ,  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 2 ,  float ,  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< float > &,
 const double);

 template void
 GridRefinement::refine_and_coarsen_fixed_number< 2 ,
  float ,
  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int);

 template void
 GridRefinement::refine_and_coarsen_fixed_fraction< 2 ,
  float ,
  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 2 ,  float ,  2  + 1>(
 Triangulation< 2 ,  2  + 1> &,
 const dealii::Vector< float > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template void
 GridRefinement::refine< 3 ,  float ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 3 ,  float ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double);

 template void GridRefinement::
 refine_and_coarsen_fixed_number< 3 ,  float ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int);

 template void GridRefinement::refine_and_coarsen_fixed_fraction<
  3 ,
  float ,
  3 >(Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 3 ,  float ,  3 >(
 Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const unsigned int);

#if  3  < 3
 template void
 GridRefinement::refine< 3 ,  float ,  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const unsigned int);

 template void
 GridRefinement::coarsen< 3 ,  float ,  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< float > &,
 const double);

 template void
 GridRefinement::refine_and_coarsen_fixed_number< 3 ,
  float ,
  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int);

 template void
 GridRefinement::refine_and_coarsen_fixed_fraction< 3 ,
  float ,
  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const unsigned int,
 const VectorTools::NormType);

 template void GridRefinement::
 refine_and_coarsen_optimize< 3 ,  float ,  3  + 1>(
 Triangulation< 3 ,  3  + 1> &,
 const dealii::Vector< float > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template std::pair<double, double>
 GridRefinement::adjust_refine_and_coarsen_number_fraction<
  1 >(const types::global_cell_index,
 const types::global_cell_index,
 const double,
 const double);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template std::pair<double, double>
 GridRefinement::adjust_refine_and_coarsen_number_fraction<
  2 >(const types::global_cell_index,
 const types::global_cell_index,
 const double,
 const double);
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template std::pair<double, double>
 GridRefinement::adjust_refine_and_coarsen_number_fraction<
  3 >(const types::global_cell_index,
 const types::global_cell_index,
 const double,
 const double);
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
