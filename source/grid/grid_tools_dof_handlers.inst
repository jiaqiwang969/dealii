// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  1 > &,
 const  Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 1 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  1 ,  Triangulation< 1 ,  1 > >::type
 find_active_cell_around_point(const  Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  1 > &,
 const  Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  Triangulation< 1 ,  1 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type &)> &);

 template std::vector< Triangulation< 1 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 1 ,  1 >  &,
 const std::function<bool(const  Triangulation< 1 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 1 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 1 ,  1 >  &, const double);


 template std::pair<Point< Triangulation< 1 ,  1 > ::space_dimension>, Point< Triangulation< 1 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  Triangulation< 1 ,  1 > >::type &)> &);


 template std::list<std::pair< Triangulation< 1 ,  1 > ::cell_iterator,  Triangulation< 1 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 1 ,  1 >  &mesh_1, const  Triangulation< 1 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 1 ,  1 >  &mesh_1, const  Triangulation< 1 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  2 > &,
 const  Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 1 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  2 ,  Triangulation< 1 ,  2 > >::type
 find_active_cell_around_point(const  Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  2 > &,
 const  Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  Triangulation< 1 ,  2 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type &)> &);

 template std::vector< Triangulation< 1 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 1 ,  2 >  &,
 const std::function<bool(const  Triangulation< 1 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 1 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 1 ,  2 >  &, const double);


 template std::pair<Point< Triangulation< 1 ,  2 > ::space_dimension>, Point< Triangulation< 1 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  Triangulation< 1 ,  2 > >::type &)> &);


 template std::list<std::pair< Triangulation< 1 ,  2 > ::cell_iterator,  Triangulation< 1 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 1 ,  2 >  &mesh_1, const  Triangulation< 1 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 1 ,  2 >  &mesh_1, const  Triangulation< 1 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  3 > &,
 const  Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 1 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  3 ,  Triangulation< 1 ,  3 > >::type
 find_active_cell_around_point(const  Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  3 > &,
 const  Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  Triangulation< 1 ,  3 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type &)> &);

 template std::vector< Triangulation< 1 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 1 ,  3 >  &,
 const std::function<bool(const  Triangulation< 1 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 1 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 1 ,  3 >  &, const double);


 template std::pair<Point< Triangulation< 1 ,  3 > ::space_dimension>, Point< Triangulation< 1 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  Triangulation< 1 ,  3 > >::type &)> &);


 template std::list<std::pair< Triangulation< 1 ,  3 > ::cell_iterator,  Triangulation< 1 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 1 ,  3 >  &mesh_1, const  Triangulation< 1 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 1 ,  3 >  &mesh_1, const  Triangulation< 1 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  1 > &,
 const  Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 2 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  1 ,  Triangulation< 2 ,  1 > >::type
 find_active_cell_around_point(const  Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  1 > &,
 const  Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  Triangulation< 2 ,  1 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type &)> &);

 template std::vector< Triangulation< 2 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 2 ,  1 >  &,
 const std::function<bool(const  Triangulation< 2 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 2 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 2 ,  1 >  &, const double);


 template std::pair<Point< Triangulation< 2 ,  1 > ::space_dimension>, Point< Triangulation< 2 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  Triangulation< 2 ,  1 > >::type &)> &);


 template std::list<std::pair< Triangulation< 2 ,  1 > ::cell_iterator,  Triangulation< 2 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 2 ,  1 >  &mesh_1, const  Triangulation< 2 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 2 ,  1 >  &mesh_1, const  Triangulation< 2 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  2 > &,
 const  Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 2 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  2 ,  Triangulation< 2 ,  2 > >::type
 find_active_cell_around_point(const  Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  2 > &,
 const  Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  Triangulation< 2 ,  2 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type &)> &);

 template std::vector< Triangulation< 2 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 2 ,  2 >  &,
 const std::function<bool(const  Triangulation< 2 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 2 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 2 ,  2 >  &, const double);


 template std::pair<Point< Triangulation< 2 ,  2 > ::space_dimension>, Point< Triangulation< 2 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  Triangulation< 2 ,  2 > >::type &)> &);


 template std::list<std::pair< Triangulation< 2 ,  2 > ::cell_iterator,  Triangulation< 2 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 2 ,  2 >  &mesh_1, const  Triangulation< 2 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 2 ,  2 >  &mesh_1, const  Triangulation< 2 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  3 > &,
 const  Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 2 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  3 ,  Triangulation< 2 ,  3 > >::type
 find_active_cell_around_point(const  Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  3 > &,
 const  Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  Triangulation< 2 ,  3 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type &)> &);

 template std::vector< Triangulation< 2 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 2 ,  3 >  &,
 const std::function<bool(const  Triangulation< 2 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 2 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 2 ,  3 >  &, const double);


 template std::pair<Point< Triangulation< 2 ,  3 > ::space_dimension>, Point< Triangulation< 2 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  Triangulation< 2 ,  3 > >::type &)> &);


 template std::list<std::pair< Triangulation< 2 ,  3 > ::cell_iterator,  Triangulation< 2 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 2 ,  3 >  &mesh_1, const  Triangulation< 2 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 2 ,  3 >  &mesh_1, const  Triangulation< 2 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  1 > &,
 const  Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 3 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  1 ,  Triangulation< 3 ,  1 > >::type
 find_active_cell_around_point(const  Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  1 > &,
 const  Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  Triangulation< 3 ,  1 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type &)> &);

 template std::vector< Triangulation< 3 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 3 ,  1 >  &,
 const std::function<bool(const  Triangulation< 3 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 3 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 3 ,  1 >  &, const double);


 template std::pair<Point< Triangulation< 3 ,  1 > ::space_dimension>, Point< Triangulation< 3 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  Triangulation< 3 ,  1 > >::type &)> &);


 template std::list<std::pair< Triangulation< 3 ,  1 > ::cell_iterator,  Triangulation< 3 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 3 ,  1 >  &mesh_1, const  Triangulation< 3 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 3 ,  1 >  &mesh_1, const  Triangulation< 3 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  2 > &,
 const  Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 3 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  2 ,  Triangulation< 3 ,  2 > >::type
 find_active_cell_around_point(const  Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  2 > &,
 const  Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  Triangulation< 3 ,  2 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type &)> &);

 template std::vector< Triangulation< 3 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 3 ,  2 >  &,
 const std::function<bool(const  Triangulation< 3 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 3 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 3 ,  2 >  &, const double);


 template std::pair<Point< Triangulation< 3 ,  2 > ::space_dimension>, Point< Triangulation< 3 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  Triangulation< 3 ,  2 > >::type &)> &);


 template std::list<std::pair< Triangulation< 3 ,  2 > ::cell_iterator,  Triangulation< 3 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 3 ,  2 >  &mesh_1, const  Triangulation< 3 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 3 ,  2 >  &mesh_1, const  Triangulation< 3 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  3 > &,
 const  Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  Triangulation< 3 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  3 ,  Triangulation< 3 ,  3 > >::type
 find_active_cell_around_point(const  Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  3 > &,
 const  Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  Triangulation< 3 ,  3 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type &)> &);

 template std::vector< Triangulation< 3 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  Triangulation< 3 ,  3 >  &,
 const std::function<bool(const  Triangulation< 3 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  Triangulation< 3 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  Triangulation< 3 ,  3 >  &, const double);


 template std::pair<Point< Triangulation< 3 ,  3 > ::space_dimension>, Point< Triangulation< 3 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  Triangulation< 3 ,  3 > >::type &)> &);


 template std::list<std::pair< Triangulation< 3 ,  3 > ::cell_iterator,  Triangulation< 3 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  Triangulation< 3 ,  3 >  &mesh_1, const  Triangulation< 3 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  Triangulation< 3 ,  3 >  &mesh_1, const  Triangulation< 3 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  1 > &,
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 1 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  1 ,  parallel::shared::Triangulation< 1 ,  1 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  1 > &,
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 1 ,  1 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 1 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 1 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 1 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 1 ,  1 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 1 ,  1 > ::space_dimension>, Point< parallel::shared::Triangulation< 1 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::shared::Triangulation< 1 ,  1 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 1 ,  1 > ::cell_iterator,  parallel::shared::Triangulation< 1 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 1 ,  1 >  &mesh_1, const  parallel::shared::Triangulation< 1 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 1 ,  1 >  &mesh_1, const  parallel::shared::Triangulation< 1 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  2 > &,
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 1 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  2 ,  parallel::shared::Triangulation< 1 ,  2 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  2 > &,
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 1 ,  2 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 1 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 1 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 1 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 1 ,  2 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 1 ,  2 > ::space_dimension>, Point< parallel::shared::Triangulation< 1 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::shared::Triangulation< 1 ,  2 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 1 ,  2 > ::cell_iterator,  parallel::shared::Triangulation< 1 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 1 ,  2 >  &mesh_1, const  parallel::shared::Triangulation< 1 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 1 ,  2 >  &mesh_1, const  parallel::shared::Triangulation< 1 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  3 > &,
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 1 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  3 ,  parallel::shared::Triangulation< 1 ,  3 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  3 > &,
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 1 ,  3 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 1 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 1 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 1 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 1 ,  3 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 1 ,  3 > ::space_dimension>, Point< parallel::shared::Triangulation< 1 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::shared::Triangulation< 1 ,  3 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 1 ,  3 > ::cell_iterator,  parallel::shared::Triangulation< 1 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 1 ,  3 >  &mesh_1, const  parallel::shared::Triangulation< 1 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 1 ,  3 >  &mesh_1, const  parallel::shared::Triangulation< 1 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  2  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  1 > &,
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 2 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  1 ,  parallel::shared::Triangulation< 2 ,  1 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  1 > &,
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 2 ,  1 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 2 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 2 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 2 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 2 ,  1 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 2 ,  1 > ::space_dimension>, Point< parallel::shared::Triangulation< 2 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::shared::Triangulation< 2 ,  1 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 2 ,  1 > ::cell_iterator,  parallel::shared::Triangulation< 2 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 2 ,  1 >  &mesh_1, const  parallel::shared::Triangulation< 2 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 2 ,  1 >  &mesh_1, const  parallel::shared::Triangulation< 2 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  2  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  2 > &,
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 2 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  2 ,  parallel::shared::Triangulation< 2 ,  2 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  2 > &,
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 2 ,  2 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 2 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 2 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 2 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 2 ,  2 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 2 ,  2 > ::space_dimension>, Point< parallel::shared::Triangulation< 2 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::shared::Triangulation< 2 ,  2 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 2 ,  2 > ::cell_iterator,  parallel::shared::Triangulation< 2 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 2 ,  2 >  &mesh_1, const  parallel::shared::Triangulation< 2 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 2 ,  2 >  &mesh_1, const  parallel::shared::Triangulation< 2 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  2  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  3 > &,
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 2 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  3 ,  parallel::shared::Triangulation< 2 ,  3 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  3 > &,
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 2 ,  3 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 2 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 2 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 2 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 2 ,  3 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 2 ,  3 > ::space_dimension>, Point< parallel::shared::Triangulation< 2 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::shared::Triangulation< 2 ,  3 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 2 ,  3 > ::cell_iterator,  parallel::shared::Triangulation< 2 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 2 ,  3 >  &mesh_1, const  parallel::shared::Triangulation< 2 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 2 ,  3 >  &mesh_1, const  parallel::shared::Triangulation< 2 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  3  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  1 > &,
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 3 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  1 ,  parallel::shared::Triangulation< 3 ,  1 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  1 > &,
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 3 ,  1 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 3 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 3 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 3 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 3 ,  1 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 3 ,  1 > ::space_dimension>, Point< parallel::shared::Triangulation< 3 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::shared::Triangulation< 3 ,  1 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 3 ,  1 > ::cell_iterator,  parallel::shared::Triangulation< 3 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 3 ,  1 >  &mesh_1, const  parallel::shared::Triangulation< 3 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 3 ,  1 >  &mesh_1, const  parallel::shared::Triangulation< 3 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  3  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  2 > &,
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 3 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  2 ,  parallel::shared::Triangulation< 3 ,  2 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  2 > &,
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 3 ,  2 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 3 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 3 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 3 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 3 ,  2 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 3 ,  2 > ::space_dimension>, Point< parallel::shared::Triangulation< 3 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::shared::Triangulation< 3 ,  2 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 3 ,  2 > ::cell_iterator,  parallel::shared::Triangulation< 3 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 3 ,  2 >  &mesh_1, const  parallel::shared::Triangulation< 3 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 3 ,  2 >  &mesh_1, const  parallel::shared::Triangulation< 3 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  3  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  3 > &,
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::shared::Triangulation< 3 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  3 ,  parallel::shared::Triangulation< 3 ,  3 > >::type
 find_active_cell_around_point(const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  3 > &,
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  parallel::shared::Triangulation< 3 ,  3 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type &)> &);

 template std::vector< parallel::shared::Triangulation< 3 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const std::function<bool(const  parallel::shared::Triangulation< 3 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::shared::Triangulation< 3 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::shared::Triangulation< 3 ,  3 >  &, const double);


 template std::pair<Point< parallel::shared::Triangulation< 3 ,  3 > ::space_dimension>, Point< parallel::shared::Triangulation< 3 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::shared::Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::shared::Triangulation< 3 ,  3 > >::type &)> &);


 template std::list<std::pair< parallel::shared::Triangulation< 3 ,  3 > ::cell_iterator,  parallel::shared::Triangulation< 3 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::shared::Triangulation< 3 ,  3 >  &mesh_1, const  parallel::shared::Triangulation< 3 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::shared::Triangulation< 3 ,  3 >  &mesh_1, const  parallel::shared::Triangulation< 3 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  1  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  1 > &,
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 1 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  1 ,  parallel::distributed::Triangulation< 1 ,  1 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  1 > &,
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 1 ,  1 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 1 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 1 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 1 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 1 ,  1 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 1 ,  1 > ::space_dimension>, Point< parallel::distributed::Triangulation< 1 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  parallel::distributed::Triangulation< 1 ,  1 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 1 ,  1 > ::cell_iterator,  parallel::distributed::Triangulation< 1 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 1 ,  1 >  &mesh_1, const  parallel::distributed::Triangulation< 1 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 1 ,  1 >  &mesh_1, const  parallel::distributed::Triangulation< 1 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  1  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  2 > &,
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 1 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  2 ,  parallel::distributed::Triangulation< 1 ,  2 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  2 > &,
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 1 ,  2 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 1 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 1 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 1 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 1 ,  2 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 1 ,  2 > ::space_dimension>, Point< parallel::distributed::Triangulation< 1 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  parallel::distributed::Triangulation< 1 ,  2 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 1 ,  2 > ::cell_iterator,  parallel::distributed::Triangulation< 1 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 1 ,  2 >  &mesh_1, const  parallel::distributed::Triangulation< 1 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 1 ,  2 >  &mesh_1, const  parallel::distributed::Triangulation< 1 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  1  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  3 > &,
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 1 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  3 ,  parallel::distributed::Triangulation< 1 ,  3 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  3 > &,
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 1 ,  3 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 1 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 1 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 1 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 1 ,  3 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 1 ,  3 > ::space_dimension>, Point< parallel::distributed::Triangulation< 1 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  parallel::distributed::Triangulation< 1 ,  3 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 1 ,  3 > ::cell_iterator,  parallel::distributed::Triangulation< 1 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 1 ,  3 >  &mesh_1, const  parallel::distributed::Triangulation< 1 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 1 ,  3 >  &mesh_1, const  parallel::distributed::Triangulation< 1 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  2  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  1 > &,
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 2 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  1 ,  parallel::distributed::Triangulation< 2 ,  1 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  1 > &,
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 2 ,  1 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 2 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 2 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 2 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 2 ,  1 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 2 ,  1 > ::space_dimension>, Point< parallel::distributed::Triangulation< 2 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  parallel::distributed::Triangulation< 2 ,  1 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 2 ,  1 > ::cell_iterator,  parallel::distributed::Triangulation< 2 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 2 ,  1 >  &mesh_1, const  parallel::distributed::Triangulation< 2 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 2 ,  1 >  &mesh_1, const  parallel::distributed::Triangulation< 2 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  2  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  2 > &,
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 2 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  2 ,  parallel::distributed::Triangulation< 2 ,  2 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  2 > &,
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 2 ,  2 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 2 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 2 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 2 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 2 ,  2 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 2 ,  2 > ::space_dimension>, Point< parallel::distributed::Triangulation< 2 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  parallel::distributed::Triangulation< 2 ,  2 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 2 ,  2 > ::cell_iterator,  parallel::distributed::Triangulation< 2 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 2 ,  2 >  &mesh_1, const  parallel::distributed::Triangulation< 2 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 2 ,  2 >  &mesh_1, const  parallel::distributed::Triangulation< 2 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  2  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  3 > &,
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 2 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  3 ,  parallel::distributed::Triangulation< 2 ,  3 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  3 > &,
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 2 ,  3 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 2 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 2 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 2 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 2 ,  3 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 2 ,  3 > ::space_dimension>, Point< parallel::distributed::Triangulation< 2 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  parallel::distributed::Triangulation< 2 ,  3 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 2 ,  3 > ::cell_iterator,  parallel::distributed::Triangulation< 2 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 2 ,  3 >  &mesh_1, const  parallel::distributed::Triangulation< 2 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 2 ,  3 >  &mesh_1, const  parallel::distributed::Triangulation< 2 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  1 > &,
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 3 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  1 ,  parallel::distributed::Triangulation< 3 ,  1 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  1 > &,
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 3 ,  1 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 3 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 3 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 3 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 3 ,  1 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 3 ,  1 > ::space_dimension>, Point< parallel::distributed::Triangulation< 3 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  parallel::distributed::Triangulation< 3 ,  1 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 3 ,  1 > ::cell_iterator,  parallel::distributed::Triangulation< 3 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 3 ,  1 >  &mesh_1, const  parallel::distributed::Triangulation< 3 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 3 ,  1 >  &mesh_1, const  parallel::distributed::Triangulation< 3 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  2 > &,
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 3 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  2 ,  parallel::distributed::Triangulation< 3 ,  2 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  2 > &,
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 3 ,  2 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 3 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 3 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 3 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 3 ,  2 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 3 ,  2 > ::space_dimension>, Point< parallel::distributed::Triangulation< 3 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  parallel::distributed::Triangulation< 3 ,  2 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 3 ,  2 > ::cell_iterator,  parallel::distributed::Triangulation< 3 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 3 ,  2 >  &mesh_1, const  parallel::distributed::Triangulation< 3 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 3 ,  2 >  &mesh_1, const  parallel::distributed::Triangulation< 3 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  3 > &,
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  parallel::distributed::Triangulation< 3 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  3 ,  parallel::distributed::Triangulation< 3 ,  3 > >::type
 find_active_cell_around_point(const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  3 > &,
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  parallel::distributed::Triangulation< 3 ,  3 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type &)> &);

 template std::vector< parallel::distributed::Triangulation< 3 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const std::function<bool(const  parallel::distributed::Triangulation< 3 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  parallel::distributed::Triangulation< 3 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  parallel::distributed::Triangulation< 3 ,  3 >  &, const double);


 template std::pair<Point< parallel::distributed::Triangulation< 3 ,  3 > ::space_dimension>, Point< parallel::distributed::Triangulation< 3 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  parallel::distributed::Triangulation< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  parallel::distributed::Triangulation< 3 ,  3 > >::type &)> &);


 template std::list<std::pair< parallel::distributed::Triangulation< 3 ,  3 > ::cell_iterator,  parallel::distributed::Triangulation< 3 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  parallel::distributed::Triangulation< 3 ,  3 >  &mesh_1, const  parallel::distributed::Triangulation< 3 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  parallel::distributed::Triangulation< 3 ,  3 >  &mesh_1, const  parallel::distributed::Triangulation< 3 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
#if  1  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  1 > &,
 const  DoFHandler< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 1 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  1 ,  DoFHandler< 1 ,  1 > >::type
 find_active_cell_around_point(const  DoFHandler< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  1 > &,
 const  DoFHandler< 1 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  DoFHandler< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  DoFHandler< 1 ,  1 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  1 > &,
 const  DoFHandler< 1 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type &)> &);

 template std::vector< DoFHandler< 1 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 1 ,  1 >  &,
 const std::function<bool(const  DoFHandler< 1 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 1 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 1 ,  1 >  &, const double);


 template std::pair<Point< DoFHandler< 1 ,  1 > ::space_dimension>, Point< DoFHandler< 1 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 1 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  1 ,
  DoFHandler< 1 ,  1 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 1 ,  1 > ::cell_iterator,  DoFHandler< 1 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 1 ,  1 >  &mesh_1, const  DoFHandler< 1 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 1 ,  1 >  &mesh_1, const  DoFHandler< 1 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
#if  1  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  2 > &,
 const  DoFHandler< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 1 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  2 ,  DoFHandler< 1 ,  2 > >::type
 find_active_cell_around_point(const  DoFHandler< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  2 > &,
 const  DoFHandler< 1 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  DoFHandler< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  DoFHandler< 1 ,  2 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  2 > &,
 const  DoFHandler< 1 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type &)> &);

 template std::vector< DoFHandler< 1 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 1 ,  2 >  &,
 const std::function<bool(const  DoFHandler< 1 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 1 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 1 ,  2 >  &, const double);


 template std::pair<Point< DoFHandler< 1 ,  2 > ::space_dimension>, Point< DoFHandler< 1 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 1 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  2 ,
  DoFHandler< 1 ,  2 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 1 ,  2 > ::cell_iterator,  DoFHandler< 1 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 1 ,  2 >  &mesh_1, const  DoFHandler< 1 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 1 ,  2 >  &mesh_1, const  DoFHandler< 1 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
#if  1  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 1 ,  3 > &,
 const  DoFHandler< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 1 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 1 ,  3 ,  DoFHandler< 1 ,  3 > >::type
 find_active_cell_around_point(const  DoFHandler< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type,
 Point< 1 >>
 find_active_cell_around_point(
 const Mapping< 1 ,  3 > &,
 const  DoFHandler< 1 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  DoFHandler< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  DoFHandler< 1 ,  3 > ::active_cell_iterator,
 Point< 1 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type,
 Point< 1 >>>
 find_all_active_cells_around_point(
 const Mapping< 1 ,  3 > &,
 const  DoFHandler< 1 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type &)> &);

 template std::vector< DoFHandler< 1 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 1 ,  3 >  &,
 const std::function<bool(const  DoFHandler< 1 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 1 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 1 ,  3 >  &, const double);


 template std::pair<Point< DoFHandler< 1 ,  3 > ::space_dimension>, Point< DoFHandler< 1 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 1 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 1 ,
  3 ,
  DoFHandler< 1 ,  3 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 1 ,  3 > ::cell_iterator,  DoFHandler< 1 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 1 ,  3 >  &mesh_1, const  DoFHandler< 1 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 1 ,  3 >  &mesh_1, const  DoFHandler< 1 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
#if  2  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  1 > &,
 const  DoFHandler< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 2 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  1 ,  DoFHandler< 2 ,  1 > >::type
 find_active_cell_around_point(const  DoFHandler< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  1 > &,
 const  DoFHandler< 2 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  DoFHandler< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  DoFHandler< 2 ,  1 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  1 > &,
 const  DoFHandler< 2 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type &)> &);

 template std::vector< DoFHandler< 2 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 2 ,  1 >  &,
 const std::function<bool(const  DoFHandler< 2 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 2 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 2 ,  1 >  &, const double);


 template std::pair<Point< DoFHandler< 2 ,  1 > ::space_dimension>, Point< DoFHandler< 2 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 2 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  1 ,
  DoFHandler< 2 ,  1 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 2 ,  1 > ::cell_iterator,  DoFHandler< 2 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 2 ,  1 >  &mesh_1, const  DoFHandler< 2 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 2 ,  1 >  &mesh_1, const  DoFHandler< 2 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
#if  2  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  2 > &,
 const  DoFHandler< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 2 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  2 ,  DoFHandler< 2 ,  2 > >::type
 find_active_cell_around_point(const  DoFHandler< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  2 > &,
 const  DoFHandler< 2 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  DoFHandler< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  DoFHandler< 2 ,  2 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  2 > &,
 const  DoFHandler< 2 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type &)> &);

 template std::vector< DoFHandler< 2 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 2 ,  2 >  &,
 const std::function<bool(const  DoFHandler< 2 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 2 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 2 ,  2 >  &, const double);


 template std::pair<Point< DoFHandler< 2 ,  2 > ::space_dimension>, Point< DoFHandler< 2 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 2 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  2 ,
  DoFHandler< 2 ,  2 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 2 ,  2 > ::cell_iterator,  DoFHandler< 2 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 2 ,  2 >  &mesh_1, const  DoFHandler< 2 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 2 ,  2 >  &mesh_1, const  DoFHandler< 2 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
#if  2  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 2 ,  3 > &,
 const  DoFHandler< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 2 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 2 ,  3 ,  DoFHandler< 2 ,  3 > >::type
 find_active_cell_around_point(const  DoFHandler< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type,
 Point< 2 >>
 find_active_cell_around_point(
 const Mapping< 2 ,  3 > &,
 const  DoFHandler< 2 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  DoFHandler< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  DoFHandler< 2 ,  3 > ::active_cell_iterator,
 Point< 2 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type,
 Point< 2 >>>
 find_all_active_cells_around_point(
 const Mapping< 2 ,  3 > &,
 const  DoFHandler< 2 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type &)> &);

 template std::vector< DoFHandler< 2 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 2 ,  3 >  &,
 const std::function<bool(const  DoFHandler< 2 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 2 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 2 ,  3 >  &, const double);


 template std::pair<Point< DoFHandler< 2 ,  3 > ::space_dimension>, Point< DoFHandler< 2 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 2 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 2 ,
  3 ,
  DoFHandler< 2 ,  3 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 2 ,  3 > ::cell_iterator,  DoFHandler< 2 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 2 ,  3 >  &mesh_1, const  DoFHandler< 2 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 2 ,  3 >  &mesh_1, const  DoFHandler< 2 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
#if  3  <=  1 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  1 > &,
 const  DoFHandler< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 3 ,  1 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  1 ,  DoFHandler< 3 ,  1 > >::type
 find_active_cell_around_point(const  DoFHandler< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  1 > &,
 const  DoFHandler< 3 ,  1 >  &,
 const Point< 1 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  DoFHandler< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::pair<typename  DoFHandler< 3 ,  1 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  1 > &,
 const  DoFHandler< 3 ,  1 >  &,
 const Point< 1 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type &)> &);

 template std::vector< DoFHandler< 3 ,  1 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 3 ,  1 >  &,
 const std::function<bool(const  DoFHandler< 3 ,  1 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 3 ,  1 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 3 ,  1 >  &, const double);


 template std::pair<Point< DoFHandler< 3 ,  1 > ::space_dimension>, Point< DoFHandler< 3 ,  1 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 3 ,  1 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  1 ,
  DoFHandler< 3 ,  1 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 3 ,  1 > ::cell_iterator,  DoFHandler< 3 ,  1 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 3 ,  1 >  &mesh_1, const  DoFHandler< 3 ,  1 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 3 ,  1 >  &mesh_1, const  DoFHandler< 3 ,  1 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
#if  3  <=  2 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  2 > &,
 const  DoFHandler< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 3 ,  2 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  2 ,  DoFHandler< 3 ,  2 > >::type
 find_active_cell_around_point(const  DoFHandler< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  2 > &,
 const  DoFHandler< 3 ,  2 >  &,
 const Point< 2 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  DoFHandler< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::pair<typename  DoFHandler< 3 ,  2 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  2 > &,
 const  DoFHandler< 3 ,  2 >  &,
 const Point< 2 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type &)> &);

 template std::vector< DoFHandler< 3 ,  2 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 3 ,  2 >  &,
 const std::function<bool(const  DoFHandler< 3 ,  2 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 3 ,  2 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 3 ,  2 >  &, const double);


 template std::pair<Point< DoFHandler< 3 ,  2 > ::space_dimension>, Point< DoFHandler< 3 ,  2 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 3 ,  2 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  2 ,
  DoFHandler< 3 ,  2 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 3 ,  2 > ::cell_iterator,  DoFHandler< 3 ,  2 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 3 ,  2 >  &mesh_1, const  DoFHandler< 3 ,  2 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 3 ,  2 >  &mesh_1, const  DoFHandler< 3 ,  2 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
#if  3  <=  3 
 namespace GridTools
 {

 template unsigned int
 find_closest_vertex(const  DoFHandler< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template unsigned int
 find_closest_vertex(
 const Mapping< 3 ,  3 > &,
 const  DoFHandler< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type>
 find_cells_adjacent_to_vertex(const  DoFHandler< 3 ,  3 >  &, const unsigned int);

 template dealii::internal::
 ActiveCellIterator< 3 ,  3 ,  DoFHandler< 3 ,  3 > >::type
 find_active_cell_around_point(const  DoFHandler< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::pair<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type,
 Point< 3 >>
 find_active_cell_around_point(
 const Mapping< 3 ,  3 > &,
 const  DoFHandler< 3 ,  3 >  &,
 const Point< 3 > &,
 const std::vector<bool> &,
 const double);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  DoFHandler< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::pair<typename  DoFHandler< 3 ,  3 > ::active_cell_iterator,
 Point< 3 >> &);

 template std::vector<
 std::pair<dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type,
 Point< 3 >>>
 find_all_active_cells_around_point(
 const Mapping< 3 ,  3 > &,
 const  DoFHandler< 3 ,  3 >  &,
 const Point< 3 > &,
 const double,
 const std::vector<bool> &);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type>
 compute_active_cell_halo_layer(
 const  DoFHandler< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type &)> &);

 template std::vector< DoFHandler< 3 ,  3 > ::cell_iterator>
 compute_cell_halo_layer_on_level(
 const  DoFHandler< 3 ,  3 >  &,
 const std::function<bool(const  DoFHandler< 3 ,  3 > ::cell_iterator &)> &,
 const unsigned int);

 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type>
 compute_ghost_cell_halo_layer(const  DoFHandler< 3 ,  3 >  &);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type>
 compute_active_cell_layer_within_distance(
 const  DoFHandler< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type &)> &,
 const double);


 template std::vector<
 dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type>
 compute_ghost_cell_layer_within_distance(const  DoFHandler< 3 ,  3 >  &, const double);


 template std::pair<Point< DoFHandler< 3 ,  3 > ::space_dimension>, Point< DoFHandler< 3 ,  3 > ::space_dimension>>
 compute_bounding_box(
 const  DoFHandler< 3 ,  3 >  &,
 const std::function<bool(
 const dealii::internal::ActiveCellIterator< 3 ,
  3 ,
  DoFHandler< 3 ,  3 > >::type &)> &);


 template std::list<std::pair< DoFHandler< 3 ,  3 > ::cell_iterator,  DoFHandler< 3 ,  3 > ::cell_iterator>>
 get_finest_common_cells(const  DoFHandler< 3 ,  3 >  &mesh_1, const  DoFHandler< 3 ,  3 >  &mesh_2);


 template bool
 have_same_coarse_mesh(const  DoFHandler< 3 ,  3 >  &mesh_1, const  DoFHandler< 3 ,  3 >  &mesh_2);
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
#if  1  <=  1 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 1 ,
  1 >::active_cell_iterator,
 Point< 1 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const Point< 1 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
#if  1  <=  2 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 1 ,
  2 >::active_cell_iterator,
 Point< 1 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const Point< 2 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
#if  1  <=  3 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 1 ,
  3 >::active_cell_iterator,
 Point< 1 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const Point< 3 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
#if  2  <=  1 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 2 ,
  1 >::active_cell_iterator,
 Point< 2 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const Point< 1 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
#if  2  <=  2 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 2 ,
  2 >::active_cell_iterator,
 Point< 2 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const Point< 2 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
#if  2  <=  3 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 2 ,
  3 >::active_cell_iterator,
 Point< 2 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const Point< 3 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
#if  3  <=  1 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 3 ,
  1 >::active_cell_iterator,
 Point< 3 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const Point< 1 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
#if  3  <=  2 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 3 ,
  2 >::active_cell_iterator,
 Point< 3 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const Point< 2 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
#if  3  <=  3 
 namespace GridTools
 {

 template std::pair<
 dealii::DoFHandler< 3 ,
  3 >::active_cell_iterator,
 Point< 3 >>
 find_active_cell_around_point(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const Point< 3 > &,
 const double);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
#if  1  <=  1 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 1 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 1 ,  1 >>(
 const  Triangulation < 1 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 1 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 1 ,  1 >>(
 const std::vector<
  Triangulation < 1 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 1 ,  1 >>(
 const std::vector<
  Triangulation < 1 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 1 ,  1 >::dimension,
  Triangulation < 1 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  1 >::active_cell_iterator,
  Triangulation < 1 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
#if  1  <=  1 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 1 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 1 ,  1 >>(
 const  parallel::shared::Triangulation < 1 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 1 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 1 ,  1 >>(
 const std::vector<
  parallel::shared::Triangulation < 1 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 1 ,  1 >>(
 const std::vector<
  parallel::shared::Triangulation < 1 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 1 ,  1 >::dimension,
  parallel::shared::Triangulation < 1 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  1 >::active_cell_iterator,
  parallel::shared::Triangulation < 1 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
#if  1  <=  1 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 1 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 1 ,  1 >>(
 const  parallel::distributed::Triangulation < 1 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 1 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 1 ,  1 >>(
 const std::vector<
  parallel::distributed::Triangulation < 1 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 1 ,  1 >>(
 const std::vector<
  parallel::distributed::Triangulation < 1 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 1 ,  1 >::dimension,
  parallel::distributed::Triangulation < 1 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  1 >::active_cell_iterator,
  parallel::distributed::Triangulation < 1 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
#if  1  <=  1 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 1 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 1 ,  1 >>(
 const  DoFHandler < 1 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 1 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 1 ,  1 >>(
 const std::vector<
  DoFHandler < 1 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 1 ,  1 >>(
 const std::vector<
  DoFHandler < 1 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 1 ,  1 >::dimension,
  DoFHandler < 1 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  1 >::active_cell_iterator,
  DoFHandler < 1 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
#if  1  <=  2 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 1 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 1 ,  2 >>(
 const  Triangulation < 1 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 1 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 1 ,  2 >>(
 const std::vector<
  Triangulation < 1 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 1 ,  2 >>(
 const std::vector<
  Triangulation < 1 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 1 ,  2 >::dimension,
  Triangulation < 1 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  2 >::active_cell_iterator,
  Triangulation < 1 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
#if  1  <=  2 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 1 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 1 ,  2 >>(
 const  parallel::shared::Triangulation < 1 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 1 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 1 ,  2 >>(
 const std::vector<
  parallel::shared::Triangulation < 1 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 1 ,  2 >>(
 const std::vector<
  parallel::shared::Triangulation < 1 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 1 ,  2 >::dimension,
  parallel::shared::Triangulation < 1 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  2 >::active_cell_iterator,
  parallel::shared::Triangulation < 1 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
#if  1  <=  2 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 1 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 1 ,  2 >>(
 const  parallel::distributed::Triangulation < 1 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 1 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 1 ,  2 >>(
 const std::vector<
  parallel::distributed::Triangulation < 1 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 1 ,  2 >>(
 const std::vector<
  parallel::distributed::Triangulation < 1 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 1 ,  2 >::dimension,
  parallel::distributed::Triangulation < 1 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  2 >::active_cell_iterator,
  parallel::distributed::Triangulation < 1 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
#if  1  <=  2 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 1 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 1 ,  2 >>(
 const  DoFHandler < 1 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 1 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 1 ,  2 >>(
 const std::vector<
  DoFHandler < 1 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 1 ,  2 >>(
 const std::vector<
  DoFHandler < 1 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 1 ,  2 >::dimension,
  DoFHandler < 1 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  2 >::active_cell_iterator,
  DoFHandler < 1 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
#if  1  <=  3 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 1 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 1 ,  3 >>(
 const  Triangulation < 1 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 1 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 1 ,  3 >>(
 const std::vector<
  Triangulation < 1 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 1 ,  3 >>(
 const std::vector<
  Triangulation < 1 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 1 ,  3 >::dimension,
  Triangulation < 1 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  3 >::active_cell_iterator,
  Triangulation < 1 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
#if  1  <=  3 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 1 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 1 ,  3 >>(
 const  parallel::shared::Triangulation < 1 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 1 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 1 ,  3 >>(
 const std::vector<
  parallel::shared::Triangulation < 1 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 1 ,  3 >>(
 const std::vector<
  parallel::shared::Triangulation < 1 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 1 ,  3 >::dimension,
  parallel::shared::Triangulation < 1 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  3 >::active_cell_iterator,
  parallel::shared::Triangulation < 1 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
#if  1  <=  3 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 1 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 1 ,  3 >>(
 const  parallel::distributed::Triangulation < 1 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 1 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 1 ,  3 >>(
 const std::vector<
  parallel::distributed::Triangulation < 1 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 1 ,  3 >>(
 const std::vector<
  parallel::distributed::Triangulation < 1 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 1 ,  3 >::dimension,
  parallel::distributed::Triangulation < 1 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  3 >::active_cell_iterator,
  parallel::distributed::Triangulation < 1 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
#if  1  <=  3 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 1 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 1 ,  3 >>(
 const  DoFHandler < 1 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 1 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 1 ,  3 >>(
 const std::vector<
  DoFHandler < 1 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 1 ,  3 >>(
 const std::vector<
  DoFHandler < 1 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 1 ,  3 >::dimension,
  DoFHandler < 1 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 1 ,
  3 >::active_cell_iterator,
  DoFHandler < 1 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
#if  2  <=  1 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 2 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 2 ,  1 >>(
 const  Triangulation < 2 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 2 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 2 ,  1 >>(
 const std::vector<
  Triangulation < 2 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 2 ,  1 >>(
 const std::vector<
  Triangulation < 2 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 2 ,  1 >::dimension,
  Triangulation < 2 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  1 >::active_cell_iterator,
  Triangulation < 2 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
#if  2  <=  1 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 2 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 2 ,  1 >>(
 const  parallel::shared::Triangulation < 2 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 2 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 2 ,  1 >>(
 const std::vector<
  parallel::shared::Triangulation < 2 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 2 ,  1 >>(
 const std::vector<
  parallel::shared::Triangulation < 2 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 2 ,  1 >::dimension,
  parallel::shared::Triangulation < 2 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  1 >::active_cell_iterator,
  parallel::shared::Triangulation < 2 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
#if  2  <=  1 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 2 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 2 ,  1 >>(
 const  parallel::distributed::Triangulation < 2 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 2 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 2 ,  1 >>(
 const std::vector<
  parallel::distributed::Triangulation < 2 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 2 ,  1 >>(
 const std::vector<
  parallel::distributed::Triangulation < 2 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 2 ,  1 >::dimension,
  parallel::distributed::Triangulation < 2 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  1 >::active_cell_iterator,
  parallel::distributed::Triangulation < 2 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
#if  2  <=  1 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 2 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 2 ,  1 >>(
 const  DoFHandler < 2 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 2 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 2 ,  1 >>(
 const std::vector<
  DoFHandler < 2 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 2 ,  1 >>(
 const std::vector<
  DoFHandler < 2 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 2 ,  1 >::dimension,
  DoFHandler < 2 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  1 >::active_cell_iterator,
  DoFHandler < 2 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
#if  2  <=  2 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 2 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 2 ,  2 >>(
 const  Triangulation < 2 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 2 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 2 ,  2 >>(
 const std::vector<
  Triangulation < 2 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 2 ,  2 >>(
 const std::vector<
  Triangulation < 2 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 2 ,  2 >::dimension,
  Triangulation < 2 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  2 >::active_cell_iterator,
  Triangulation < 2 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
#if  2  <=  2 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 2 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 2 ,  2 >>(
 const  parallel::shared::Triangulation < 2 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 2 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 2 ,  2 >>(
 const std::vector<
  parallel::shared::Triangulation < 2 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 2 ,  2 >>(
 const std::vector<
  parallel::shared::Triangulation < 2 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 2 ,  2 >::dimension,
  parallel::shared::Triangulation < 2 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  2 >::active_cell_iterator,
  parallel::shared::Triangulation < 2 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
#if  2  <=  2 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 2 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 2 ,  2 >>(
 const  parallel::distributed::Triangulation < 2 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 2 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 2 ,  2 >>(
 const std::vector<
  parallel::distributed::Triangulation < 2 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 2 ,  2 >>(
 const std::vector<
  parallel::distributed::Triangulation < 2 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 2 ,  2 >::dimension,
  parallel::distributed::Triangulation < 2 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  2 >::active_cell_iterator,
  parallel::distributed::Triangulation < 2 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
#if  2  <=  2 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 2 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 2 ,  2 >>(
 const  DoFHandler < 2 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 2 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 2 ,  2 >>(
 const std::vector<
  DoFHandler < 2 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 2 ,  2 >>(
 const std::vector<
  DoFHandler < 2 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 2 ,  2 >::dimension,
  DoFHandler < 2 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  2 >::active_cell_iterator,
  DoFHandler < 2 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
#if  2  <=  3 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 2 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 2 ,  3 >>(
 const  Triangulation < 2 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 2 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 2 ,  3 >>(
 const std::vector<
  Triangulation < 2 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 2 ,  3 >>(
 const std::vector<
  Triangulation < 2 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 2 ,  3 >::dimension,
  Triangulation < 2 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  3 >::active_cell_iterator,
  Triangulation < 2 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
#if  2  <=  3 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 2 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 2 ,  3 >>(
 const  parallel::shared::Triangulation < 2 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 2 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 2 ,  3 >>(
 const std::vector<
  parallel::shared::Triangulation < 2 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 2 ,  3 >>(
 const std::vector<
  parallel::shared::Triangulation < 2 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 2 ,  3 >::dimension,
  parallel::shared::Triangulation < 2 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  3 >::active_cell_iterator,
  parallel::shared::Triangulation < 2 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
#if  2  <=  3 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 2 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 2 ,  3 >>(
 const  parallel::distributed::Triangulation < 2 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 2 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 2 ,  3 >>(
 const std::vector<
  parallel::distributed::Triangulation < 2 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 2 ,  3 >>(
 const std::vector<
  parallel::distributed::Triangulation < 2 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 2 ,  3 >::dimension,
  parallel::distributed::Triangulation < 2 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  3 >::active_cell_iterator,
  parallel::distributed::Triangulation < 2 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
#if  2  <=  3 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 2 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 2 ,  3 >>(
 const  DoFHandler < 2 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 2 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 2 ,  3 >>(
 const std::vector<
  DoFHandler < 2 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 2 ,  3 >>(
 const std::vector<
  DoFHandler < 2 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 2 ,  3 >::dimension,
  DoFHandler < 2 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 2 ,
  3 >::active_cell_iterator,
  DoFHandler < 2 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
#if  3  <=  1 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 3 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 3 ,  1 >>(
 const  Triangulation < 3 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 3 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 3 ,  1 >>(
 const std::vector<
  Triangulation < 3 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 3 ,  1 >>(
 const std::vector<
  Triangulation < 3 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 3 ,  1 >::dimension,
  Triangulation < 3 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  1 >::active_cell_iterator,
  Triangulation < 3 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
#if  3  <=  1 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 3 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 3 ,  1 >>(
 const  parallel::shared::Triangulation < 3 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 3 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 3 ,  1 >>(
 const std::vector<
  parallel::shared::Triangulation < 3 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 3 ,  1 >>(
 const std::vector<
  parallel::shared::Triangulation < 3 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 3 ,  1 >::dimension,
  parallel::shared::Triangulation < 3 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  1 >::active_cell_iterator,
  parallel::shared::Triangulation < 3 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
#if  3  <=  1 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 3 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 3 ,  1 >>(
 const  parallel::distributed::Triangulation < 3 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 3 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 3 ,  1 >>(
 const std::vector<
  parallel::distributed::Triangulation < 3 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 3 ,  1 >>(
 const std::vector<
  parallel::distributed::Triangulation < 3 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 3 ,  1 >::dimension,
  parallel::distributed::Triangulation < 3 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  1 >::active_cell_iterator,
  parallel::distributed::Triangulation < 3 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
#if  3  <=  1 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 3 ,
  1 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 3 ,  1 >>(
 const  DoFHandler < 3 ,
  1 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 3 ,  1 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 3 ,  1 >>(
 const std::vector<
  DoFHandler < 3 ,
  1 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 3 ,  1 >>(
 const std::vector<
  DoFHandler < 3 ,
  1 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 3 ,  1 >::dimension,
  DoFHandler < 3 ,
  1 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  1 >::active_cell_iterator,
  DoFHandler < 3 ,
  1 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
#if  3  <=  2 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 3 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 3 ,  2 >>(
 const  Triangulation < 3 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 3 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 3 ,  2 >>(
 const std::vector<
  Triangulation < 3 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 3 ,  2 >>(
 const std::vector<
  Triangulation < 3 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 3 ,  2 >::dimension,
  Triangulation < 3 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  2 >::active_cell_iterator,
  Triangulation < 3 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
#if  3  <=  2 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 3 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 3 ,  2 >>(
 const  parallel::shared::Triangulation < 3 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 3 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 3 ,  2 >>(
 const std::vector<
  parallel::shared::Triangulation < 3 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 3 ,  2 >>(
 const std::vector<
  parallel::shared::Triangulation < 3 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 3 ,  2 >::dimension,
  parallel::shared::Triangulation < 3 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  2 >::active_cell_iterator,
  parallel::shared::Triangulation < 3 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
#if  3  <=  2 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 3 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 3 ,  2 >>(
 const  parallel::distributed::Triangulation < 3 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 3 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 3 ,  2 >>(
 const std::vector<
  parallel::distributed::Triangulation < 3 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 3 ,  2 >>(
 const std::vector<
  parallel::distributed::Triangulation < 3 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 3 ,  2 >::dimension,
  parallel::distributed::Triangulation < 3 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  2 >::active_cell_iterator,
  parallel::distributed::Triangulation < 3 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
#if  3  <=  2 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 3 ,
  2 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 3 ,  2 >>(
 const  DoFHandler < 3 ,
  2 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 3 ,  2 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 3 ,  2 >>(
 const std::vector<
  DoFHandler < 3 ,
  2 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 3 ,  2 >>(
 const std::vector<
  DoFHandler < 3 ,
  2 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 3 ,  2 >::dimension,
  DoFHandler < 3 ,
  2 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  2 >::active_cell_iterator,
  DoFHandler < 3 ,
  2 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
#if  3  <=  3 
 namespace GridTools
 {

 template std::vector<
  Triangulation < 3 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  Triangulation < 3 ,  3 >>(
 const  Triangulation < 3 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  Triangulation < 3 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  Triangulation < 3 ,  3 >>(
 const std::vector<
  Triangulation < 3 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  Triangulation < 3 ,  3 >>(
 const std::vector<
  Triangulation < 3 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  Triangulation < 3 ,  3 >::dimension,
  Triangulation < 3 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  3 >::active_cell_iterator,
  Triangulation < 3 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
#if  3  <=  3 
 namespace GridTools
 {

 template std::vector<
  parallel::shared::Triangulation < 3 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::shared::Triangulation < 3 ,  3 >>(
 const  parallel::shared::Triangulation < 3 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  parallel::shared::Triangulation < 3 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::shared::Triangulation < 3 ,  3 >>(
 const std::vector<
  parallel::shared::Triangulation < 3 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::shared::Triangulation < 3 ,  3 >>(
 const std::vector<
  parallel::shared::Triangulation < 3 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::shared::Triangulation < 3 ,  3 >::dimension,
  parallel::shared::Triangulation < 3 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  3 >::active_cell_iterator,
  parallel::shared::Triangulation < 3 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
#if  3  <=  3 
 namespace GridTools
 {

 template std::vector<
  parallel::distributed::Triangulation < 3 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  parallel::distributed::Triangulation < 3 ,  3 >>(
 const  parallel::distributed::Triangulation < 3 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  parallel::distributed::Triangulation < 3 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  parallel::distributed::Triangulation < 3 ,  3 >>(
 const std::vector<
  parallel::distributed::Triangulation < 3 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  parallel::distributed::Triangulation < 3 ,  3 >>(
 const std::vector<
  parallel::distributed::Triangulation < 3 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  parallel::distributed::Triangulation < 3 ,  3 >::dimension,
  parallel::distributed::Triangulation < 3 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  3 >::active_cell_iterator,
  parallel::distributed::Triangulation < 3 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
#if  3  <=  3 
 namespace GridTools
 {

 template std::vector<
  DoFHandler < 3 ,
  3 >::active_cell_iterator>
 get_patch_around_cell<
  DoFHandler < 3 ,  3 >>(
 const  DoFHandler < 3 ,
  3 >::active_cell_iterator &cell);

 template std::vector<
  DoFHandler < 3 ,  3 >::cell_iterator>
 get_cells_at_coarsest_common_level<
  DoFHandler < 3 ,  3 >>(
 const std::vector<
  DoFHandler < 3 ,
  3 >::active_cell_iterator>
 &patch_cells);

 template void
 build_triangulation_from_patch<
  DoFHandler < 3 ,  3 >>(
 const std::vector<
  DoFHandler < 3 ,
  3 >::active_cell_iterator> &patch,
 Triangulation<
  DoFHandler < 3 ,  3 >::dimension,
  DoFHandler < 3 ,
  3 >::space_dimension>
 &local_triangulation,
 std::map<Triangulation< 3 ,
  3 >::active_cell_iterator,
  DoFHandler < 3 ,
  3 >::active_cell_iterator>
 &patch_to_global_tria_map);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
#if  1  <=  1 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 1 ,
  1 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 1 ,  1 >(
 DoFHandler< 1 ,  1 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
#if  1  <=  2 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 1 ,
  2 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 1 ,  2 >(
 DoFHandler< 1 ,  2 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
#if  1  <=  3 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 1 ,
  3 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 1 ,  3 >(
 DoFHandler< 1 ,  3 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
#if  2  <=  1 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 2 ,
  1 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 2 ,  1 >(
 DoFHandler< 2 ,  1 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
#if  2  <=  2 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 2 ,
  2 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 2 ,  2 >(
 DoFHandler< 2 ,  2 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
#if  2  <=  3 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 2 ,
  3 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 2 ,  3 >(
 DoFHandler< 2 ,  3 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
#if  3  <=  1 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 3 ,
  1 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 3 ,  1 >(
 DoFHandler< 3 ,  1 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
#if  3  <=  2 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 3 ,
  2 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 3 ,  2 >(
 DoFHandler< 3 ,  2 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
#if  3  <=  3 
 namespace GridTools
 {

 template std::map<
 types::global_dof_index,
 std::vector<DoFHandler< 3 ,
  3 >::active_cell_iterator>>
 get_dof_to_support_patch_map< 3 ,  3 >(
 DoFHandler< 3 ,  3 > &dof_handler);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
#if  1  <=  1 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 1 ,  1 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 1 ,  1 > ::active_face_iterator &,
 const  Triangulation< 1 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 1 ,  1 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 1 ,  1 > ::face_iterator &,
 const  Triangulation< 1 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 1 ,  1 > ::active_face_iterator>(
 const  Triangulation< 1 ,  1 > ::active_face_iterator &,
 const  Triangulation< 1 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 1 ,  1 > ::face_iterator>(
 const  Triangulation< 1 ,  1 > ::face_iterator &,
 const  Triangulation< 1 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
#if  1  <=  2 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 1 ,  2 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 1 ,  2 > ::active_face_iterator &,
 const  Triangulation< 1 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 1 ,  2 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 1 ,  2 > ::face_iterator &,
 const  Triangulation< 1 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 1 ,  2 > ::active_face_iterator>(
 const  Triangulation< 1 ,  2 > ::active_face_iterator &,
 const  Triangulation< 1 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 1 ,  2 > ::face_iterator>(
 const  Triangulation< 1 ,  2 > ::face_iterator &,
 const  Triangulation< 1 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
#if  1  <=  3 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 1 ,  3 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 1 ,  3 > ::active_face_iterator &,
 const  Triangulation< 1 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 1 ,  3 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 1 ,  3 > ::face_iterator &,
 const  Triangulation< 1 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 1 ,  3 > ::active_face_iterator>(
 const  Triangulation< 1 ,  3 > ::active_face_iterator &,
 const  Triangulation< 1 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 1 ,  3 > ::face_iterator>(
 const  Triangulation< 1 ,  3 > ::face_iterator &,
 const  Triangulation< 1 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
#if  2  <=  1 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 2 ,  1 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 2 ,  1 > ::active_face_iterator &,
 const  Triangulation< 2 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 2 ,  1 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 2 ,  1 > ::face_iterator &,
 const  Triangulation< 2 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 2 ,  1 > ::active_face_iterator>(
 const  Triangulation< 2 ,  1 > ::active_face_iterator &,
 const  Triangulation< 2 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 2 ,  1 > ::face_iterator>(
 const  Triangulation< 2 ,  1 > ::face_iterator &,
 const  Triangulation< 2 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
#if  2  <=  2 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 2 ,  2 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 2 ,  2 > ::active_face_iterator &,
 const  Triangulation< 2 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 2 ,  2 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 2 ,  2 > ::face_iterator &,
 const  Triangulation< 2 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 2 ,  2 > ::active_face_iterator>(
 const  Triangulation< 2 ,  2 > ::active_face_iterator &,
 const  Triangulation< 2 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 2 ,  2 > ::face_iterator>(
 const  Triangulation< 2 ,  2 > ::face_iterator &,
 const  Triangulation< 2 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
#if  2  <=  3 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 2 ,  3 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 2 ,  3 > ::active_face_iterator &,
 const  Triangulation< 2 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 2 ,  3 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 2 ,  3 > ::face_iterator &,
 const  Triangulation< 2 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 2 ,  3 > ::active_face_iterator>(
 const  Triangulation< 2 ,  3 > ::active_face_iterator &,
 const  Triangulation< 2 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 2 ,  3 > ::face_iterator>(
 const  Triangulation< 2 ,  3 > ::face_iterator &,
 const  Triangulation< 2 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
#if  3  <=  1 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 3 ,  1 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 3 ,  1 > ::active_face_iterator &,
 const  Triangulation< 3 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 3 ,  1 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 3 ,  1 > ::face_iterator &,
 const  Triangulation< 3 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 3 ,  1 > ::active_face_iterator>(
 const  Triangulation< 3 ,  1 > ::active_face_iterator &,
 const  Triangulation< 3 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 3 ,  1 > ::face_iterator>(
 const  Triangulation< 3 ,  1 > ::face_iterator &,
 const  Triangulation< 3 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
#if  3  <=  2 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 3 ,  2 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 3 ,  2 > ::active_face_iterator &,
 const  Triangulation< 3 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 3 ,  2 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 3 ,  2 > ::face_iterator &,
 const  Triangulation< 3 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 3 ,  2 > ::active_face_iterator>(
 const  Triangulation< 3 ,  2 > ::active_face_iterator &,
 const  Triangulation< 3 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 3 ,  2 > ::face_iterator>(
 const  Triangulation< 3 ,  2 > ::face_iterator &,
 const  Triangulation< 3 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
#if  3  <=  3 
 namespace GridTools
 {

 template bool orthogonal_equality< Triangulation< 3 ,  3 > ::active_face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 3 ,  3 > ::active_face_iterator &,
 const  Triangulation< 3 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< Triangulation< 3 ,  3 > ::face_iterator>(
 std::bitset<3> &,
 const  Triangulation< 3 ,  3 > ::face_iterator &,
 const  Triangulation< 3 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 3 ,  3 > ::active_face_iterator>(
 const  Triangulation< 3 ,  3 > ::active_face_iterator &,
 const  Triangulation< 3 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< Triangulation< 3 ,  3 > ::face_iterator>(
 const  Triangulation< 3 ,  3 > ::face_iterator &,
 const  Triangulation< 3 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
#if  1  <=  1 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 1 ,  1 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 1 ,  1 > ::active_face_iterator &,
 const  DoFHandler< 1 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 1 ,  1 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 1 ,  1 > ::face_iterator &,
 const  DoFHandler< 1 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 1 ,  1 > ::active_face_iterator>(
 const  DoFHandler< 1 ,  1 > ::active_face_iterator &,
 const  DoFHandler< 1 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 1 ,  1 > ::face_iterator>(
 const  DoFHandler< 1 ,  1 > ::face_iterator &,
 const  DoFHandler< 1 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
#if  1  <=  2 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 1 ,  2 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 1 ,  2 > ::active_face_iterator &,
 const  DoFHandler< 1 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 1 ,  2 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 1 ,  2 > ::face_iterator &,
 const  DoFHandler< 1 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 1 ,  2 > ::active_face_iterator>(
 const  DoFHandler< 1 ,  2 > ::active_face_iterator &,
 const  DoFHandler< 1 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 1 ,  2 > ::face_iterator>(
 const  DoFHandler< 1 ,  2 > ::face_iterator &,
 const  DoFHandler< 1 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
#if  1  <=  3 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 1 ,  3 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 1 ,  3 > ::active_face_iterator &,
 const  DoFHandler< 1 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 1 ,  3 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 1 ,  3 > ::face_iterator &,
 const  DoFHandler< 1 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 1 ,  3 > ::active_face_iterator>(
 const  DoFHandler< 1 ,  3 > ::active_face_iterator &,
 const  DoFHandler< 1 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 1 ,  3 > ::face_iterator>(
 const  DoFHandler< 1 ,  3 > ::face_iterator &,
 const  DoFHandler< 1 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
#if  2  <=  1 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 2 ,  1 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 2 ,  1 > ::active_face_iterator &,
 const  DoFHandler< 2 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 2 ,  1 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 2 ,  1 > ::face_iterator &,
 const  DoFHandler< 2 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 2 ,  1 > ::active_face_iterator>(
 const  DoFHandler< 2 ,  1 > ::active_face_iterator &,
 const  DoFHandler< 2 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 2 ,  1 > ::face_iterator>(
 const  DoFHandler< 2 ,  1 > ::face_iterator &,
 const  DoFHandler< 2 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
#if  2  <=  2 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 2 ,  2 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 2 ,  2 > ::active_face_iterator &,
 const  DoFHandler< 2 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 2 ,  2 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 2 ,  2 > ::face_iterator &,
 const  DoFHandler< 2 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 2 ,  2 > ::active_face_iterator>(
 const  DoFHandler< 2 ,  2 > ::active_face_iterator &,
 const  DoFHandler< 2 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 2 ,  2 > ::face_iterator>(
 const  DoFHandler< 2 ,  2 > ::face_iterator &,
 const  DoFHandler< 2 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
#if  2  <=  3 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 2 ,  3 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 2 ,  3 > ::active_face_iterator &,
 const  DoFHandler< 2 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 2 ,  3 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 2 ,  3 > ::face_iterator &,
 const  DoFHandler< 2 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 2 ,  3 > ::active_face_iterator>(
 const  DoFHandler< 2 ,  3 > ::active_face_iterator &,
 const  DoFHandler< 2 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 2 ,  3 > ::face_iterator>(
 const  DoFHandler< 2 ,  3 > ::face_iterator &,
 const  DoFHandler< 2 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
#if  3  <=  1 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 3 ,  1 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 3 ,  1 > ::active_face_iterator &,
 const  DoFHandler< 3 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 3 ,  1 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 3 ,  1 > ::face_iterator &,
 const  DoFHandler< 3 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 3 ,  1 > ::active_face_iterator>(
 const  DoFHandler< 3 ,  1 > ::active_face_iterator &,
 const  DoFHandler< 3 ,  1 > ::active_face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 3 ,  1 > ::face_iterator>(
 const  DoFHandler< 3 ,  1 > ::face_iterator &,
 const  DoFHandler< 3 ,  1 > ::face_iterator &,
 const int,
 const Tensor<1,  1 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
#if  3  <=  2 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 3 ,  2 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 3 ,  2 > ::active_face_iterator &,
 const  DoFHandler< 3 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 3 ,  2 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 3 ,  2 > ::face_iterator &,
 const  DoFHandler< 3 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 3 ,  2 > ::active_face_iterator>(
 const  DoFHandler< 3 ,  2 > ::active_face_iterator &,
 const  DoFHandler< 3 ,  2 > ::active_face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 3 ,  2 > ::face_iterator>(
 const  DoFHandler< 3 ,  2 > ::face_iterator &,
 const  DoFHandler< 3 ,  2 > ::face_iterator &,
 const int,
 const Tensor<1,  2 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
#if  3  <=  3 
 namespace GridTools
 {

 template bool orthogonal_equality< DoFHandler< 3 ,  3 > ::active_face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 3 ,  3 > ::active_face_iterator &,
 const  DoFHandler< 3 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool orthogonal_equality< DoFHandler< 3 ,  3 > ::face_iterator>(
 std::bitset<3> &,
 const  DoFHandler< 3 ,  3 > ::face_iterator &,
 const  DoFHandler< 3 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 3 ,  3 > ::active_face_iterator>(
 const  DoFHandler< 3 ,  3 > ::active_face_iterator &,
 const  DoFHandler< 3 ,  3 > ::active_face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 template bool
 orthogonal_equality< DoFHandler< 3 ,  3 > ::face_iterator>(
 const  DoFHandler< 3 ,  3 > ::face_iterator &,
 const  DoFHandler< 3 ,  3 > ::face_iterator &,
 const int,
 const Tensor<1,  3 > &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
#if  1  <=  1 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 1 ,  1 > >(
 const  Triangulation< 1 ,  1 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 1 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 1 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 1 ,  1 > >(
 const  Triangulation< 1 ,  1 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 1 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 1 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
#if  1  <=  2 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 1 ,  2 > >(
 const  Triangulation< 1 ,  2 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 1 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 1 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 1 ,  2 > >(
 const  Triangulation< 1 ,  2 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 1 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 1 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
#if  1  <=  3 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 1 ,  3 > >(
 const  Triangulation< 1 ,  3 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 1 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 1 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 1 ,  3 > >(
 const  Triangulation< 1 ,  3 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 1 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 1 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
#if  2  <=  1 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 2 ,  1 > >(
 const  Triangulation< 2 ,  1 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 2 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 2 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 2 ,  1 > >(
 const  Triangulation< 2 ,  1 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 2 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 2 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
#if  2  <=  2 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 2 ,  2 > >(
 const  Triangulation< 2 ,  2 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 2 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 2 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 2 ,  2 > >(
 const  Triangulation< 2 ,  2 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 2 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 2 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
#if  2  <=  3 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 2 ,  3 > >(
 const  Triangulation< 2 ,  3 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 2 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 2 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 2 ,  3 > >(
 const  Triangulation< 2 ,  3 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 2 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 2 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
#if  3  <=  1 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 3 ,  1 > >(
 const  Triangulation< 3 ,  1 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 3 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 3 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 3 ,  1 > >(
 const  Triangulation< 3 ,  1 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 3 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 3 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
#if  3  <=  2 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 3 ,  2 > >(
 const  Triangulation< 3 ,  2 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 3 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 3 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 3 ,  2 > >(
 const  Triangulation< 3 ,  2 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 3 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 3 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
#if  3  <=  3 
 namespace GridTools
 {
 template void
 collect_periodic_faces< Triangulation< 3 ,  3 > >(
 const  Triangulation< 3 ,  3 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 3 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 3 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< Triangulation< 3 ,  3 > >(
 const  Triangulation< 3 ,  3 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< Triangulation< 3 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  Triangulation< 3 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
#if  1  <=  1 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 1 ,  1 > >(
 const  DoFHandler< 1 ,  1 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 1 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 1 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 1 ,  1 > >(
 const  DoFHandler< 1 ,  1 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 1 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 1 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
#if  1  <=  2 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 1 ,  2 > >(
 const  DoFHandler< 1 ,  2 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 1 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 1 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 1 ,  2 > >(
 const  DoFHandler< 1 ,  2 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 1 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 1 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
#if  1  <=  3 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 1 ,  3 > >(
 const  DoFHandler< 1 ,  3 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 1 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 1 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 1 ,  3 > >(
 const  DoFHandler< 1 ,  3 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 1 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 1 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
#if  2  <=  1 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 2 ,  1 > >(
 const  DoFHandler< 2 ,  1 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 2 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 2 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 2 ,  1 > >(
 const  DoFHandler< 2 ,  1 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 2 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 2 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
#if  2  <=  2 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 2 ,  2 > >(
 const  DoFHandler< 2 ,  2 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 2 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 2 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 2 ,  2 > >(
 const  DoFHandler< 2 ,  2 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 2 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 2 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
#if  2  <=  3 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 2 ,  3 > >(
 const  DoFHandler< 2 ,  3 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 2 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 2 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 2 ,  3 > >(
 const  DoFHandler< 2 ,  3 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 2 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 2 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
#if  3  <=  1 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 3 ,  1 > >(
 const  DoFHandler< 3 ,  1 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 3 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 3 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 3 ,  1 > >(
 const  DoFHandler< 3 ,  1 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 3 ,  1 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 3 ,  1 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
#if  3  <=  2 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 3 ,  2 > >(
 const  DoFHandler< 3 ,  2 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 3 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 3 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 3 ,  2 > >(
 const  DoFHandler< 3 ,  2 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 3 ,  2 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 3 ,  2 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
#if  3  <=  3 
 namespace GridTools
 {
 template void
 collect_periodic_faces< DoFHandler< 3 ,  3 > >(
 const  DoFHandler< 3 ,  3 >  &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 3 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 3 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces< DoFHandler< 3 ,  3 > >(
 const  DoFHandler< 3 ,  3 >  &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair< DoFHandler< 3 ,  3 > ::cell_iterator>> &,
 const Tensor<1,  DoFHandler< 3 ,  3 > ::space_dimension> &,
 const FullMatrix<double> &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
#if  1  <=  1 
# if  1  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 1 ,
  1 >>(
 const parallel::distributed::Triangulation< 1 ,
  1 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  1 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  1 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 1 ,
  1 >>(
 const parallel::distributed::Triangulation< 1 ,
  1 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  1 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  1 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
#if  1  <=  2 
# if  1  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 1 ,
  2 >>(
 const parallel::distributed::Triangulation< 1 ,
  2 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  1 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  1 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 1 ,
  2 >>(
 const parallel::distributed::Triangulation< 1 ,
  2 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  1 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  1 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
#if  1  <=  3 
# if  1  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 1 ,
  3 >>(
 const parallel::distributed::Triangulation< 1 ,
  3 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  1 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  1 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 1 ,
  3 >>(
 const parallel::distributed::Triangulation< 1 ,
  3 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  1 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  1 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
#if  2  <=  1 
# if  2  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 2 ,
  1 >>(
 const parallel::distributed::Triangulation< 2 ,
  1 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  2 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  2 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 2 ,
  1 >>(
 const parallel::distributed::Triangulation< 2 ,
  1 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  2 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  2 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
#if  2  <=  2 
# if  2  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 2 ,
  2 >>(
 const parallel::distributed::Triangulation< 2 ,
  2 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  2 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  2 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 2 ,
  2 >>(
 const parallel::distributed::Triangulation< 2 ,
  2 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  2 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  2 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
#if  2  <=  3 
# if  2  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 2 ,
  3 >>(
 const parallel::distributed::Triangulation< 2 ,
  3 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  2 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  2 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 2 ,
  3 >>(
 const parallel::distributed::Triangulation< 2 ,
  3 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  2 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  2 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(132))
#if  3  <=  1 
# if  3  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 3 ,
  1 >>(
 const parallel::distributed::Triangulation< 3 ,
  1 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  3 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  3 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 3 ,
  1 >>(
 const parallel::distributed::Triangulation< 3 ,
  1 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  3 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  3 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(133))
#if  3  <=  2 
# if  3  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 3 ,
  2 >>(
 const parallel::distributed::Triangulation< 3 ,
  2 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  3 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  3 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 3 ,
  2 >>(
 const parallel::distributed::Triangulation< 3 ,
  2 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  3 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  3 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(134))
#if  3  <=  3 
# if  3  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 3 ,
  3 >>(
 const parallel::distributed::Triangulation< 3 ,
  3 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  3 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  3 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::distributed::Triangulation< 3 ,
  3 >>(
 const parallel::distributed::Triangulation< 3 ,
  3 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::distributed::Triangulation<
  3 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::distributed::Triangulation<
  3 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(135))
#if  1  <=  1 
# if  1  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 1 ,
  1 >>(
 const parallel::shared::Triangulation< 1 ,
  1 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  1 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  1 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 1 ,
  1 >>(
 const parallel::shared::Triangulation< 1 ,
  1 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  1 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  1 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(136))
#if  1  <=  2 
# if  1  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 1 ,
  2 >>(
 const parallel::shared::Triangulation< 1 ,
  2 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  1 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  1 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 1 ,
  2 >>(
 const parallel::shared::Triangulation< 1 ,
  2 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  1 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  1 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(137))
#if  1  <=  3 
# if  1  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 1 ,
  3 >>(
 const parallel::shared::Triangulation< 1 ,
  3 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  1 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  1 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 1 ,
  3 >>(
 const parallel::shared::Triangulation< 1 ,
  3 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  1 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  1 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(138))
#if  2  <=  1 
# if  2  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 2 ,
  1 >>(
 const parallel::shared::Triangulation< 2 ,
  1 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  2 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  2 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 2 ,
  1 >>(
 const parallel::shared::Triangulation< 2 ,
  1 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  2 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  2 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(139))
#if  2  <=  2 
# if  2  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 2 ,
  2 >>(
 const parallel::shared::Triangulation< 2 ,
  2 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  2 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  2 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 2 ,
  2 >>(
 const parallel::shared::Triangulation< 2 ,
  2 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  2 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  2 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(140))
#if  2  <=  3 
# if  2  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 2 ,
  3 >>(
 const parallel::shared::Triangulation< 2 ,
  3 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  2 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  2 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 2 ,
  3 >>(
 const parallel::shared::Triangulation< 2 ,
  3 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  2 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  2 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(141))
#if  3  <=  1 
# if  3  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 3 ,
  1 >>(
 const parallel::shared::Triangulation< 3 ,
  1 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  3 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  3 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 3 ,
  1 >>(
 const parallel::shared::Triangulation< 3 ,
  1 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  3 ,
  1 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  3 ,
  1 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(142))
#if  3  <=  2 
# if  3  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 3 ,
  2 >>(
 const parallel::shared::Triangulation< 3 ,
  2 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  3 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  3 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 3 ,
  2 >>(
 const parallel::shared::Triangulation< 3 ,
  2 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  3 ,
  2 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  3 ,
  2 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(143))
#if  3  <=  3 
# if  3  >= 2

 namespace GridTools
 {
 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 3 ,
  3 >>(
 const parallel::shared::Triangulation< 3 ,
  3 > &,
 const types::boundary_id,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  3 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  3 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);

 template void
 collect_periodic_faces<
 parallel::shared::Triangulation< 3 ,
  3 >>(
 const parallel::shared::Triangulation< 3 ,
  3 > &,
 const types::boundary_id,
 const int,
 std::vector<PeriodicFacePair<parallel::shared::Triangulation<
  3 ,
  3 >::cell_iterator>> &,
 const Tensor<1,
 parallel::shared::Triangulation<
  3 ,
  3 >::space_dimension> &,
 const FullMatrix<double> &);
 }
# endif
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
