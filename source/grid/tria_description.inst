// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  1  <=  1 
 template Description< 1 ,  1 >
 create_description_from_triangulation(
 const dealii::Triangulation< 1 ,
  1 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 1 ,  1 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 1 ,  1 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 1 ,  1 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 1 ,
  1 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 1 ,  1 >
 create_description_from_triangulation(
 const Triangulation< 1 ,  1 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  1  <=  2 
 template Description< 1 ,  2 >
 create_description_from_triangulation(
 const dealii::Triangulation< 1 ,
  2 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 1 ,  2 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 1 ,  2 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 1 ,  2 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 1 ,
  2 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 1 ,  2 >
 create_description_from_triangulation(
 const Triangulation< 1 ,  2 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  1  <=  3 
 template Description< 1 ,  3 >
 create_description_from_triangulation(
 const dealii::Triangulation< 1 ,
  3 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 1 ,  3 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 1 ,  3 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 1 ,  3 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 1 ,
  3 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 1 ,  3 >
 create_description_from_triangulation(
 const Triangulation< 1 ,  3 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  2  <=  1 
 template Description< 2 ,  1 >
 create_description_from_triangulation(
 const dealii::Triangulation< 2 ,
  1 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 2 ,  1 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 2 ,  1 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 2 ,  1 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 2 ,
  1 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 2 ,  1 >
 create_description_from_triangulation(
 const Triangulation< 2 ,  1 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  2  <=  2 
 template Description< 2 ,  2 >
 create_description_from_triangulation(
 const dealii::Triangulation< 2 ,
  2 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 2 ,  2 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 2 ,  2 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 2 ,  2 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 2 ,
  2 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 2 ,  2 >
 create_description_from_triangulation(
 const Triangulation< 2 ,  2 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  2  <=  3 
 template Description< 2 ,  3 >
 create_description_from_triangulation(
 const dealii::Triangulation< 2 ,
  3 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 2 ,  3 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 2 ,  3 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 2 ,  3 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 2 ,
  3 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 2 ,  3 >
 create_description_from_triangulation(
 const Triangulation< 2 ,  3 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  3  <=  1 
 template Description< 3 ,  1 >
 create_description_from_triangulation(
 const dealii::Triangulation< 3 ,
  1 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 3 ,  1 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 3 ,  1 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 3 ,  1 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 3 ,
  1 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 3 ,  1 >
 create_description_from_triangulation(
 const Triangulation< 3 ,  1 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  3  <=  2 
 template Description< 3 ,  2 >
 create_description_from_triangulation(
 const dealii::Triangulation< 3 ,
  2 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 3 ,  2 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 3 ,  2 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 3 ,  2 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 3 ,
  2 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 3 ,  2 >
 create_description_from_triangulation(
 const Triangulation< 3 ,  2 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace TriangulationDescription
 {
 namespace Utilities
 {
#if  3  <=  3 
 template Description< 3 ,  3 >
 create_description_from_triangulation(
 const dealii::Triangulation< 3 ,
  3 > &tria,
 const MPI_Comm & comm,
 const TriangulationDescription::Settings settings,
 const unsigned int my_rank_in);

 template Description< 3 ,  3 >
 create_description_from_triangulation_in_groups(
 const std::function<void(
 dealii::Triangulation< 3 ,  3 >
 &)> & serial_grid_generator,
 const std::function<void(
 dealii::Triangulation< 3 ,  3 > &,
 const MPI_Comm &,
 const unsigned int)> &serial_grid_partitioner,
 const MPI_Comm & comm,
 const int group_size,
 const typename Triangulation< 3 ,
  3 >::MeshSmoothing
 smoothing,
 const TriangulationDescription::Settings);

 template Description< 3 ,  3 >
 create_description_from_triangulation(
 const Triangulation< 3 ,  3 > &tria,
 const LinearAlgebra::distributed::Vector<double> &partition);
#endif
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template struct CellData< 1 >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template struct CellData< 2 >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template struct CellData< 3 >;
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
