// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 1 ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &);

 template void
 p_adaptivity_from_flags< 1 ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 1 ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &);

 template void
 choose_p_over_h< 1 ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &);

 template bool
 limit_p_level_difference< 1 ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 1 ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &);

 template void
 p_adaptivity_from_flags< 1 ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 1 ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &);

 template void
 choose_p_over_h< 1 ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &);

 template bool
 limit_p_level_difference< 1 ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 1 ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &);

 template void
 p_adaptivity_from_flags< 1 ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 1 ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &);

 template void
 choose_p_over_h< 1 ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &);

 template bool
 limit_p_level_difference< 1 ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 2 ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &);

 template void
 p_adaptivity_from_flags< 2 ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 2 ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &);

 template void
 choose_p_over_h< 2 ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &);

 template bool
 limit_p_level_difference< 2 ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 2 ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &);

 template void
 p_adaptivity_from_flags< 2 ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 2 ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &);

 template void
 choose_p_over_h< 2 ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &);

 template bool
 limit_p_level_difference< 2 ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 2 ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &);

 template void
 p_adaptivity_from_flags< 2 ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 2 ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &);

 template void
 choose_p_over_h< 2 ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &);

 template bool
 limit_p_level_difference< 2 ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 3 ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &);

 template void
 p_adaptivity_from_flags< 3 ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 3 ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &);

 template void
 choose_p_over_h< 3 ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &);

 template bool
 limit_p_level_difference< 3 ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 3 ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &);

 template void
 p_adaptivity_from_flags< 3 ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 3 ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &);

 template void
 choose_p_over_h< 3 ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &);

 template bool
 limit_p_level_difference< 3 ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 full_p_adaptivity< 3 ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &);

 template void
 p_adaptivity_from_flags< 3 ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const std::vector<bool> &);

 template void
 force_p_over_h< 3 ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &);

 template void
 choose_p_over_h< 3 ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &);

 template bool
 limit_p_level_difference< 3 ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const unsigned int,
 const unsigned int);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 1 ,
  double ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 1 ,
  double ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 1 ,
  double ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 1 ,
  double ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 1 ,
  double ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 1 ,  double ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 1 ,
  double ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 1 ,
  double ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 1 ,
  double ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 1 ,
  double ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 1 ,
  double ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 1 ,  double ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 1 ,
  double ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 1 ,
  double ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 1 ,
  double ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 1 ,
  double ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 1 ,
  double ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 1 ,  double ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  1  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 1 ,
  float ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 1 ,
  float ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 1 ,
  float ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 1 ,
  float ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 1 ,
  float ,
  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 1 ,  float ,  1 >(
 const dealii::DoFHandler< 1 ,  1 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  1  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 1 ,
  float ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 1 ,
  float ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 1 ,
  float ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 1 ,
  float ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 1 ,
  float ,
  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 1 ,  float ,  2 >(
 const dealii::DoFHandler< 1 ,  2 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  1  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 1 ,
  float ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 1 ,
  float ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 1 ,
  float ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 1 ,
  float ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 1 ,
  float ,
  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 1 ,  float ,  3 >(
 const dealii::DoFHandler< 1 ,  3 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  2  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 2 ,
  double ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 2 ,
  double ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 2 ,
  double ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 2 ,
  double ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 2 ,
  double ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 2 ,  double ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  2  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 2 ,
  double ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 2 ,
  double ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 2 ,
  double ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 2 ,
  double ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 2 ,
  double ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 2 ,  double ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  2  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 2 ,
  double ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 2 ,
  double ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 2 ,
  double ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 2 ,
  double ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 2 ,
  double ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 2 ,  double ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  2  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 2 ,
  float ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 2 ,
  float ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 2 ,
  float ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 2 ,
  float ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 2 ,
  float ,
  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 2 ,  float ,  1 >(
 const dealii::DoFHandler< 2 ,  1 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  2  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 2 ,
  float ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 2 ,
  float ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 2 ,
  float ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 2 ,
  float ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 2 ,
  float ,
  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 2 ,  float ,  2 >(
 const dealii::DoFHandler< 2 ,  2 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  2  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 2 ,
  float ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 2 ,
  float ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 2 ,
  float ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 2 ,
  float ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 2 ,
  float ,
  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 2 ,  float ,  3 >(
 const dealii::DoFHandler< 2 ,  3 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  3  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 3 ,
  double ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 3 ,
  double ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 3 ,
  double ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 3 ,
  double ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 3 ,
  double ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 3 ,  double ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  3  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 3 ,
  double ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 3 ,
  double ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 3 ,
  double ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 3 ,
  double ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 3 ,
  double ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 3 ,  double ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  3  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 3 ,
  double ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< double > &,
 const  double ,
 const  double ,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 3 ,
  double ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_fixed_number< 3 ,
  double ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< double > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 p_adaptivity_from_regularity< 3 ,
  double ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< double > &);

 template void
 p_adaptivity_from_reference< 3 ,
  double ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< double > &,
 const Vector< double > &,
 const ComparisonFunction<typename identity< double >::type> &,
 const ComparisonFunction<typename identity< double >::type> &);

 template void
 predict_error< 3 ,  double ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< double > &,
 Vector< double > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  1 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 3 ,
  float ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 3 ,
  float ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 3 ,
  float ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 3 ,
  float ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 3 ,
  float ,
  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 3 ,  float ,  1 >(
 const dealii::DoFHandler< 3 ,  1 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  2 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 3 ,
  float ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 3 ,
  float ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 3 ,
  float ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 3 ,
  float ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 3 ,
  float ,
  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 3 ,  float ,  2 >(
 const dealii::DoFHandler< 3 ,  2 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  3 
 namespace hp
 {
 namespace Refinement
 {
 template void
 p_adaptivity_from_absolute_threshold< 3 ,
  float ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< float > &,
 const  float ,
 const  float ,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_relative_threshold< 3 ,
  float ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_fixed_number< 3 ,
  float ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< float > &,
 const double,
 const double,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 p_adaptivity_from_regularity< 3 ,
  float ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< float > &);

 template void
 p_adaptivity_from_reference< 3 ,
  float ,
  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< float > &,
 const Vector< float > &,
 const ComparisonFunction<typename identity< float >::type> &,
 const ComparisonFunction<typename identity< float >::type> &);

 template void
 predict_error< 3 ,  float ,  3 >(
 const dealii::DoFHandler< 3 ,  3 >
 &,
 const Vector< float > &,
 Vector< float > &,
 const double,
 const double,
 const double);
 }
 }
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
