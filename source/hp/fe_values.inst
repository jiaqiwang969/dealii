// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace hp
 {
 template class FEValuesBase< 1 ,
  1 ,
 dealii::FEValues< 1 >>;
 template class FEValuesBase< 1 ,
  1  - 1,
 dealii::FEFaceValues< 1 >>;
 template class FEValuesBase< 1 ,
  1  - 1,
 dealii::FESubfaceValues< 1 >>;
 }

 namespace hp
 {
 template class FEValues< 1 >;
 template class FEFaceValues< 1 ,  1 >;
 template class FESubfaceValues< 1 ,  1 >;
 }



#if  1  != 3

 namespace hp
 {
 template class FEValuesBase<
  1 ,
  1 ,
 dealii::FEValues< 1 ,  1  + 1>>;
 template class FEValuesBase<
  1 ,
  1  - 1,
 dealii::FEFaceValues< 1 ,  1  + 1>>;
 template class FEValuesBase<
  1 ,
  1  - 1,
 dealii::FESubfaceValues< 1 ,  1  + 1>>;
 }

 namespace hp
 {
 template class FEValues< 1 ,  1  + 1>;
 template class FEFaceValues< 1 ,  1  + 1>;
 template class FESubfaceValues< 1 ,  1  + 1>;
 }
#endif

#if  1  == 3

 namespace hp
 {
 template class FEValuesBase<1, 1, dealii::FEValues<1, 3>>;
 template class FEValuesBase<1, 1 - 1, dealii::FEFaceValues<1, 3>>;
 template class FEValuesBase<1, 1 - 1, dealii::FESubfaceValues<1, 3>>;
 }

 namespace hp
 {
 template class FEValues<1, 3>;
 template class FEFaceValues<1, 3>;
 template class FESubfaceValues<1, 3>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace hp
 {
 template class FEValuesBase< 2 ,
  2 ,
 dealii::FEValues< 2 >>;
 template class FEValuesBase< 2 ,
  2  - 1,
 dealii::FEFaceValues< 2 >>;
 template class FEValuesBase< 2 ,
  2  - 1,
 dealii::FESubfaceValues< 2 >>;
 }

 namespace hp
 {
 template class FEValues< 2 >;
 template class FEFaceValues< 2 ,  2 >;
 template class FESubfaceValues< 2 ,  2 >;
 }



#if  2  != 3

 namespace hp
 {
 template class FEValuesBase<
  2 ,
  2 ,
 dealii::FEValues< 2 ,  2  + 1>>;
 template class FEValuesBase<
  2 ,
  2  - 1,
 dealii::FEFaceValues< 2 ,  2  + 1>>;
 template class FEValuesBase<
  2 ,
  2  - 1,
 dealii::FESubfaceValues< 2 ,  2  + 1>>;
 }

 namespace hp
 {
 template class FEValues< 2 ,  2  + 1>;
 template class FEFaceValues< 2 ,  2  + 1>;
 template class FESubfaceValues< 2 ,  2  + 1>;
 }
#endif

#if  2  == 3

 namespace hp
 {
 template class FEValuesBase<1, 1, dealii::FEValues<1, 3>>;
 template class FEValuesBase<1, 1 - 1, dealii::FEFaceValues<1, 3>>;
 template class FEValuesBase<1, 1 - 1, dealii::FESubfaceValues<1, 3>>;
 }

 namespace hp
 {
 template class FEValues<1, 3>;
 template class FEFaceValues<1, 3>;
 template class FESubfaceValues<1, 3>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace hp
 {
 template class FEValuesBase< 3 ,
  3 ,
 dealii::FEValues< 3 >>;
 template class FEValuesBase< 3 ,
  3  - 1,
 dealii::FEFaceValues< 3 >>;
 template class FEValuesBase< 3 ,
  3  - 1,
 dealii::FESubfaceValues< 3 >>;
 }

 namespace hp
 {
 template class FEValues< 3 >;
 template class FEFaceValues< 3 ,  3 >;
 template class FESubfaceValues< 3 ,  3 >;
 }



#if  3  != 3

 namespace hp
 {
 template class FEValuesBase<
  3 ,
  3 ,
 dealii::FEValues< 3 ,  3  + 1>>;
 template class FEValuesBase<
  3 ,
  3  - 1,
 dealii::FEFaceValues< 3 ,  3  + 1>>;
 template class FEValuesBase<
  3 ,
  3  - 1,
 dealii::FESubfaceValues< 3 ,  3  + 1>>;
 }

 namespace hp
 {
 template class FEValues< 3 ,  3  + 1>;
 template class FEFaceValues< 3 ,  3  + 1>;
 template class FESubfaceValues< 3 ,  3  + 1>;
 }
#endif

#if  3  == 3

 namespace hp
 {
 template class FEValuesBase<1, 1, dealii::FEValues<1, 3>>;
 template class FEValuesBase<1, 1 - 1, dealii::FEFaceValues<1, 3>>;
 template class FEValuesBase<1, 1 - 1, dealii::FESubfaceValues<1, 3>>;
 }

 namespace hp
 {
 template class FEValues<1, 3>;
 template class FEFaceValues<1, 3>;
 template class FESubfaceValues<1, 3>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace hp
 {
#if  1  <=  1 

 template void
 FEValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const Triangulation< 1 ,
  1 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace hp
 {
#if  1  <=  1 

 template void
 FEValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const Triangulation< 1 ,
  1 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace hp
 {
#if  1  <=  2 

 template void
 FEValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const Triangulation< 1 ,
  2 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace hp
 {
#if  1  <=  2 

 template void
 FEValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const Triangulation< 1 ,
  2 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace hp
 {
#if  1  <=  3 

 template void
 FEValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const Triangulation< 1 ,
  3 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace hp
 {
#if  1  <=  3 

 template void
 FEValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const Triangulation< 1 ,
  3 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace hp
 {
#if  2  <=  1 

 template void
 FEValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const Triangulation< 2 ,
  1 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace hp
 {
#if  2  <=  1 

 template void
 FEValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const Triangulation< 2 ,
  1 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace hp
 {
#if  2  <=  2 

 template void
 FEValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const Triangulation< 2 ,
  2 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace hp
 {
#if  2  <=  2 

 template void
 FEValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const Triangulation< 2 ,
  2 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace hp
 {
#if  2  <=  3 

 template void
 FEValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const Triangulation< 2 ,
  3 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace hp
 {
#if  2  <=  3 

 template void
 FEValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const Triangulation< 2 ,
  3 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace hp
 {
#if  3  <=  1 

 template void
 FEValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const Triangulation< 3 ,
  1 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace hp
 {
#if  3  <=  1 

 template void
 FEValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const Triangulation< 3 ,
  1 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace hp
 {
#if  3  <=  2 

 template void
 FEValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const Triangulation< 3 ,
  2 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
namespace hp
 {
#if  3  <=  2 

 template void
 FEValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const Triangulation< 3 ,
  2 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
namespace hp
 {
#if  3  <=  3 

 template void
 FEValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const Triangulation< 3 ,
  3 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
namespace hp
 {
#if  3  <=  3 

 template void
 FEValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const Triangulation< 3 ,
  3 >::face_iterator &,
 unsigned int,
 unsigned int,
 unsigned int);
 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int,
 unsigned int);
#endif
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
