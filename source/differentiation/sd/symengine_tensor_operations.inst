// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor<1,  1 , Expression>
 make_vector_of_symbols< 1 >(const std::string &symbol);

 template Tensor<1,  1 , Expression>
 make_vector_of_symbolic_functions< 1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 

 template Tensor<0,  1 , Expression>
 make_tensor_of_symbols<0,  1 >(const std::string &symbol);

 template Tensor<0,  1 , Expression>
 make_tensor_of_symbolic_functions<0,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor<1,  2 , Expression>
 make_vector_of_symbols< 2 >(const std::string &symbol);

 template Tensor<1,  2 , Expression>
 make_vector_of_symbolic_functions< 2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 

 template Tensor<0,  2 , Expression>
 make_tensor_of_symbols<0,  2 >(const std::string &symbol);

 template Tensor<0,  2 , Expression>
 make_tensor_of_symbolic_functions<0,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor<1,  3 , Expression>
 make_vector_of_symbols< 3 >(const std::string &symbol);

 template Tensor<1,  3 , Expression>
 make_vector_of_symbolic_functions< 3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 

 template Tensor<0,  3 , Expression>
 make_tensor_of_symbols<0,  3 >(const std::string &symbol);

 template Tensor<0,  3 , Expression>
 make_tensor_of_symbolic_functions<0,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 1 ,  1 , Expression>
 make_tensor_of_symbols< 1 ,  1 >(
 const std::string &symbol);

 template Tensor< 1 ,  1 , Expression>
 make_tensor_of_symbolic_functions< 1 ,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 1 ,  2 , Expression>
 make_tensor_of_symbols< 1 ,  2 >(
 const std::string &symbol);

 template Tensor< 1 ,  2 , Expression>
 make_tensor_of_symbolic_functions< 1 ,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 1 ,  3 , Expression>
 make_tensor_of_symbols< 1 ,  3 >(
 const std::string &symbol);

 template Tensor< 1 ,  3 , Expression>
 make_tensor_of_symbolic_functions< 1 ,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 2 ,  1 , Expression>
 make_tensor_of_symbols< 2 ,  1 >(
 const std::string &symbol);

 template Tensor< 2 ,  1 , Expression>
 make_tensor_of_symbolic_functions< 2 ,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 2 ,  2 , Expression>
 make_tensor_of_symbols< 2 ,  2 >(
 const std::string &symbol);

 template Tensor< 2 ,  2 , Expression>
 make_tensor_of_symbolic_functions< 2 ,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 2 ,  3 , Expression>
 make_tensor_of_symbols< 2 ,  3 >(
 const std::string &symbol);

 template Tensor< 2 ,  3 , Expression>
 make_tensor_of_symbolic_functions< 2 ,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 3 ,  1 , Expression>
 make_tensor_of_symbols< 3 ,  1 >(
 const std::string &symbol);

 template Tensor< 3 ,  1 , Expression>
 make_tensor_of_symbolic_functions< 3 ,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 3 ,  2 , Expression>
 make_tensor_of_symbols< 3 ,  2 >(
 const std::string &symbol);

 template Tensor< 3 ,  2 , Expression>
 make_tensor_of_symbolic_functions< 3 ,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 3 ,  3 , Expression>
 make_tensor_of_symbols< 3 ,  3 >(
 const std::string &symbol);

 template Tensor< 3 ,  3 , Expression>
 make_tensor_of_symbolic_functions< 3 ,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 4 ,  1 , Expression>
 make_tensor_of_symbols< 4 ,  1 >(
 const std::string &symbol);

 template Tensor< 4 ,  1 , Expression>
 make_tensor_of_symbolic_functions< 4 ,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 4 ,  2 , Expression>
 make_tensor_of_symbols< 4 ,  2 >(
 const std::string &symbol);

 template Tensor< 4 ,  2 , Expression>
 make_tensor_of_symbolic_functions< 4 ,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace Differentiation
 {
 namespace SD
 {

 template Tensor< 4 ,  3 , Expression>
 make_tensor_of_symbols< 4 ,  3 >(
 const std::string &symbol);

 template Tensor< 4 ,  3 , Expression>
 make_tensor_of_symbolic_functions< 4 ,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace Differentiation
 {
 namespace SD
 {

 template SymmetricTensor< 2 ,  1 , Expression>
 make_symmetric_tensor_of_symbols< 2 ,  1 >(
 const std::string &symbol);

 template SymmetricTensor< 2 ,  1 , Expression>
 make_symmetric_tensor_of_symbolic_functions< 2 ,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace Differentiation
 {
 namespace SD
 {

 template SymmetricTensor< 2 ,  2 , Expression>
 make_symmetric_tensor_of_symbols< 2 ,  2 >(
 const std::string &symbol);

 template SymmetricTensor< 2 ,  2 , Expression>
 make_symmetric_tensor_of_symbolic_functions< 2 ,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace Differentiation
 {
 namespace SD
 {

 template SymmetricTensor< 2 ,  3 , Expression>
 make_symmetric_tensor_of_symbols< 2 ,  3 >(
 const std::string &symbol);

 template SymmetricTensor< 2 ,  3 , Expression>
 make_symmetric_tensor_of_symbolic_functions< 2 ,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
namespace Differentiation
 {
 namespace SD
 {

 template SymmetricTensor< 4 ,  1 , Expression>
 make_symmetric_tensor_of_symbols< 4 ,  1 >(
 const std::string &symbol);

 template SymmetricTensor< 4 ,  1 , Expression>
 make_symmetric_tensor_of_symbolic_functions< 4 ,  1 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
namespace Differentiation
 {
 namespace SD
 {

 template SymmetricTensor< 4 ,  2 , Expression>
 make_symmetric_tensor_of_symbols< 4 ,  2 >(
 const std::string &symbol);

 template SymmetricTensor< 4 ,  2 , Expression>
 make_symmetric_tensor_of_symbolic_functions< 4 ,  2 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
namespace Differentiation
 {
 namespace SD
 {

 template SymmetricTensor< 4 ,  3 , Expression>
 make_symmetric_tensor_of_symbols< 4 ,  3 >(
 const std::string &symbol);

 template SymmetricTensor< 4 ,  3 , Expression>
 make_symmetric_tensor_of_symbolic_functions< 4 ,  3 >(
 const std::string & symbol,
 const types::substitution_map &arguments);

 }
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
