// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class HelperBase<NumberTypes::adolc_taped, double >;

 template
 class HelperBase<NumberTypes::adolc_tapeless, double >;

 

 template
 class CellLevelBase<NumberTypes::adolc_taped, double >;

 template
 class CellLevelBase<NumberTypes::adolc_tapeless, double >;

 

 template
 class EnergyFunctional<NumberTypes::adolc_taped, double >;

 template
 class EnergyFunctional<NumberTypes::adolc_tapeless, double >;

 

 template
 class ResidualLinearization<NumberTypes::adolc_taped, double >;

 template
 class ResidualLinearization<NumberTypes::adolc_tapeless, double >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class HelperBase<NumberTypes::adolc_taped, float >;

 template
 class HelperBase<NumberTypes::adolc_tapeless, float >;

 

 template
 class CellLevelBase<NumberTypes::adolc_taped, float >;

 template
 class CellLevelBase<NumberTypes::adolc_tapeless, float >;

 

 template
 class EnergyFunctional<NumberTypes::adolc_taped, float >;

 template
 class EnergyFunctional<NumberTypes::adolc_tapeless, float >;

 

 template
 class ResidualLinearization<NumberTypes::adolc_taped, float >;

 template
 class ResidualLinearization<NumberTypes::adolc_tapeless, float >;

 }
 }

#endif
namespace Differentiation
 {
 namespace AD
 {

 

 template
 class HelperBase<NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class HelperBase<NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class CellLevelBase<NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class CellLevelBase<NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class EnergyFunctional<NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class EnergyFunctional<NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class ResidualLinearization<NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class ResidualLinearization<NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;


 }
 }

#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class PointLevelFunctionsBase< 1 ,NumberTypes::adolc_taped, double >;

 template
 class PointLevelFunctionsBase< 1 ,NumberTypes::adolc_tapeless, double >;

 

 template
 class ScalarFunction< 1 ,NumberTypes::adolc_taped, double >;

 template
 class ScalarFunction< 1 ,NumberTypes::adolc_tapeless, double >;

 

 template
 class VectorFunction< 1 ,NumberTypes::adolc_taped, double >;

 template
 class VectorFunction< 1 ,NumberTypes::adolc_tapeless, double >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class PointLevelFunctionsBase< 1 ,NumberTypes::adolc_taped, float >;

 template
 class PointLevelFunctionsBase< 1 ,NumberTypes::adolc_tapeless, float >;

 

 template
 class ScalarFunction< 1 ,NumberTypes::adolc_taped, float >;

 template
 class ScalarFunction< 1 ,NumberTypes::adolc_tapeless, float >;

 

 template
 class VectorFunction< 1 ,NumberTypes::adolc_taped, float >;

 template
 class VectorFunction< 1 ,NumberTypes::adolc_tapeless, float >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class PointLevelFunctionsBase< 2 ,NumberTypes::adolc_taped, double >;

 template
 class PointLevelFunctionsBase< 2 ,NumberTypes::adolc_tapeless, double >;

 

 template
 class ScalarFunction< 2 ,NumberTypes::adolc_taped, double >;

 template
 class ScalarFunction< 2 ,NumberTypes::adolc_tapeless, double >;

 

 template
 class VectorFunction< 2 ,NumberTypes::adolc_taped, double >;

 template
 class VectorFunction< 2 ,NumberTypes::adolc_tapeless, double >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class PointLevelFunctionsBase< 2 ,NumberTypes::adolc_taped, float >;

 template
 class PointLevelFunctionsBase< 2 ,NumberTypes::adolc_tapeless, float >;

 

 template
 class ScalarFunction< 2 ,NumberTypes::adolc_taped, float >;

 template
 class ScalarFunction< 2 ,NumberTypes::adolc_tapeless, float >;

 

 template
 class VectorFunction< 2 ,NumberTypes::adolc_taped, float >;

 template
 class VectorFunction< 2 ,NumberTypes::adolc_tapeless, float >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class PointLevelFunctionsBase< 3 ,NumberTypes::adolc_taped, double >;

 template
 class PointLevelFunctionsBase< 3 ,NumberTypes::adolc_tapeless, double >;

 

 template
 class ScalarFunction< 3 ,NumberTypes::adolc_taped, double >;

 template
 class ScalarFunction< 3 ,NumberTypes::adolc_tapeless, double >;

 

 template
 class VectorFunction< 3 ,NumberTypes::adolc_taped, double >;

 template
 class VectorFunction< 3 ,NumberTypes::adolc_tapeless, double >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace Differentiation
 {
 namespace AD
 {
 

 template
 class PointLevelFunctionsBase< 3 ,NumberTypes::adolc_taped, float >;

 template
 class PointLevelFunctionsBase< 3 ,NumberTypes::adolc_tapeless, float >;

 

 template
 class ScalarFunction< 3 ,NumberTypes::adolc_taped, float >;

 template
 class ScalarFunction< 3 ,NumberTypes::adolc_tapeless, float >;

 

 template
 class VectorFunction< 3 ,NumberTypes::adolc_taped, float >;

 template
 class VectorFunction< 3 ,NumberTypes::adolc_tapeless, float >;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace Differentiation
 {
 namespace AD
 {

 

 template
 class PointLevelFunctionsBase< 1 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class PointLevelFunctionsBase< 1 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class ScalarFunction< 1 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class ScalarFunction< 1 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class VectorFunction< 1 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class VectorFunction< 1 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace Differentiation
 {
 namespace AD
 {

 

 template
 class PointLevelFunctionsBase< 2 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class PointLevelFunctionsBase< 2 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class ScalarFunction< 2 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class ScalarFunction< 2 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class VectorFunction< 2 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class VectorFunction< 2 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace Differentiation
 {
 namespace AD
 {

 

 template
 class PointLevelFunctionsBase< 3 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class PointLevelFunctionsBase< 3 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class ScalarFunction< 3 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class ScalarFunction< 3 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 

 template
 class VectorFunction< 3 ,NumberTypes::adolc_taped,typename NumberTraits<double,NumberTypes::adolc_taped>::ad_type>;

 template
 class VectorFunction< 3 ,NumberTypes::adolc_tapeless,typename NumberTraits<double,NumberTypes::adolc_tapeless>::ad_type>;

 }
 }

#endif

#undef SPLIT_INSTANTIATIONS_CHECK
