// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Differentiation
 {
 namespace AD
 {
 

 template class HelperBase<NumberTypes::none,  double >;

 

 template class CellLevelBase<NumberTypes::none,  double >;

 

 template class EnergyFunctional<NumberTypes::none,  double >;

 

 template class ResidualLinearization<NumberTypes::none,  double >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Differentiation
 {
 namespace AD
 {
 

 template class HelperBase<NumberTypes::none,  float >;

 

 template class CellLevelBase<NumberTypes::none,  float >;

 

 template class EnergyFunctional<NumberTypes::none,  float >;

 

 template class ResidualLinearization<NumberTypes::none,  float >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Differentiation
 {
 namespace AD
 {
 

 template class PointLevelFunctionsBase< 1 ,
 NumberTypes::none,
  double >;

 

 template class ScalarFunction< 1 ,
 NumberTypes::none,
  double >;

 

 template class VectorFunction< 1 ,
 NumberTypes::none,
  double >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Differentiation
 {
 namespace AD
 {
 

 template class PointLevelFunctionsBase< 1 ,
 NumberTypes::none,
  float >;

 

 template class ScalarFunction< 1 ,
 NumberTypes::none,
  float >;

 

 template class VectorFunction< 1 ,
 NumberTypes::none,
  float >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Differentiation
 {
 namespace AD
 {
 

 template class PointLevelFunctionsBase< 2 ,
 NumberTypes::none,
  double >;

 

 template class ScalarFunction< 2 ,
 NumberTypes::none,
  double >;

 

 template class VectorFunction< 2 ,
 NumberTypes::none,
  double >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Differentiation
 {
 namespace AD
 {
 

 template class PointLevelFunctionsBase< 2 ,
 NumberTypes::none,
  float >;

 

 template class ScalarFunction< 2 ,
 NumberTypes::none,
  float >;

 

 template class VectorFunction< 2 ,
 NumberTypes::none,
  float >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace Differentiation
 {
 namespace AD
 {
 

 template class PointLevelFunctionsBase< 3 ,
 NumberTypes::none,
  double >;

 

 template class ScalarFunction< 3 ,
 NumberTypes::none,
  double >;

 

 template class VectorFunction< 3 ,
 NumberTypes::none,
  double >;

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace Differentiation
 {
 namespace AD
 {
 

 template class PointLevelFunctionsBase< 3 ,
 NumberTypes::none,
  float >;

 

 template class ScalarFunction< 3 ,
 NumberTypes::none,
  float >;

 

 template class VectorFunction< 3 ,
 NumberTypes::none,
  float >;

 }
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
