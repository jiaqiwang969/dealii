// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Differentiation
 {
 namespace AD
 {
 template struct NumberTraits< double ,NumberTypes::sacado_dfad>;
 template struct NumberTraits< double ,NumberTypes::sacado_dfad_dfad>;
 template struct NumberTraits< double ,NumberTypes::sacado_rad>;
 template struct NumberTraits< double ,NumberTypes::sacado_rad_dfad>;
 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Differentiation
 {
 namespace AD
 {
 template struct NumberTraits< float ,NumberTypes::sacado_dfad>;
 template struct NumberTraits< float ,NumberTypes::sacado_dfad_dfad>;
 template struct NumberTraits< float ,NumberTypes::sacado_rad>;
 template struct NumberTraits< float ,NumberTypes::sacado_rad_dfad>;
 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Differentiation
 {
 namespace AD
 {
 template struct NumberTraits< std::complex<double> ,NumberTypes::sacado_dfad>;
 template struct NumberTraits< std::complex<double> ,NumberTypes::sacado_dfad_dfad>;
 }
 }

#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Differentiation
 {
 namespace AD
 {
 template struct NumberTraits< std::complex<float> ,NumberTypes::sacado_dfad>;
 template struct NumberTraits< std::complex<float> ,NumberTypes::sacado_dfad_dfad>;
 }
 }

#endif

#undef SPLIT_INSTANTIATIONS_CHECK
