// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Physics
 {
 namespace Transformations
 {
 template Tensor<1,  1 ,  double >
 nansons_formula(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 namespace Contravariant
 {
 template Tensor<1,  1 ,  double >
 push_forward(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 push_forward(const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 push_forward(const SymmetricTensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<4,  1 ,  double >
 push_forward(const Tensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 push_forward(const SymmetricTensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<1,  1 ,  double >
 pull_back(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 pull_back(const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 pull_back(const SymmetricTensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<4,  1 ,  double >
 pull_back(const Tensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 pull_back(const SymmetricTensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);
 }

 namespace Covariant
 {
 template Tensor<1,  1 ,  double >
 push_forward(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 push_forward(const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 push_forward(const SymmetricTensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<4,  1 ,  double >
 push_forward(const Tensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 push_forward(const SymmetricTensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<1,  1 ,  double >
 pull_back(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 pull_back(const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 pull_back(const SymmetricTensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<4,  1 ,  double >
 pull_back(const Tensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 pull_back(const SymmetricTensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);
 }

 namespace Piola
 {
 template Tensor<1,  1 ,  double >
 push_forward(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 push_forward(const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 push_forward(const SymmetricTensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<4,  1 ,  double >
 push_forward(const Tensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 push_forward(const SymmetricTensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<1,  1 ,  double >
 pull_back(const Tensor<1,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 pull_back(const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 pull_back(const SymmetricTensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<4,  1 ,  double >
 pull_back(const Tensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 pull_back(const SymmetricTensor<4,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);
 }

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Physics
 {
 namespace Transformations
 {
 template Tensor<1,  1 ,  float >
 nansons_formula(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 namespace Contravariant
 {
 template Tensor<1,  1 ,  float >
 push_forward(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 push_forward(const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 push_forward(const SymmetricTensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<4,  1 ,  float >
 push_forward(const Tensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 push_forward(const SymmetricTensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<1,  1 ,  float >
 pull_back(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 pull_back(const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 pull_back(const SymmetricTensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<4,  1 ,  float >
 pull_back(const Tensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 pull_back(const SymmetricTensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);
 }

 namespace Covariant
 {
 template Tensor<1,  1 ,  float >
 push_forward(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 push_forward(const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 push_forward(const SymmetricTensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<4,  1 ,  float >
 push_forward(const Tensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 push_forward(const SymmetricTensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<1,  1 ,  float >
 pull_back(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 pull_back(const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 pull_back(const SymmetricTensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<4,  1 ,  float >
 pull_back(const Tensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 pull_back(const SymmetricTensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);
 }

 namespace Piola
 {
 template Tensor<1,  1 ,  float >
 push_forward(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 push_forward(const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 push_forward(const SymmetricTensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<4,  1 ,  float >
 push_forward(const Tensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 push_forward(const SymmetricTensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<1,  1 ,  float >
 pull_back(const Tensor<1,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 pull_back(const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 pull_back(const SymmetricTensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<4,  1 ,  float >
 pull_back(const Tensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 pull_back(const SymmetricTensor<4,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);
 }

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Physics
 {
 namespace Transformations
 {
 template Tensor<1,  2 ,  double >
 nansons_formula(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 namespace Contravariant
 {
 template Tensor<1,  2 ,  double >
 push_forward(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 push_forward(const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 push_forward(const SymmetricTensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<4,  2 ,  double >
 push_forward(const Tensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 push_forward(const SymmetricTensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<1,  2 ,  double >
 pull_back(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 pull_back(const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 pull_back(const SymmetricTensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<4,  2 ,  double >
 pull_back(const Tensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 pull_back(const SymmetricTensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);
 }

 namespace Covariant
 {
 template Tensor<1,  2 ,  double >
 push_forward(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 push_forward(const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 push_forward(const SymmetricTensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<4,  2 ,  double >
 push_forward(const Tensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 push_forward(const SymmetricTensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<1,  2 ,  double >
 pull_back(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 pull_back(const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 pull_back(const SymmetricTensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<4,  2 ,  double >
 pull_back(const Tensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 pull_back(const SymmetricTensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);
 }

 namespace Piola
 {
 template Tensor<1,  2 ,  double >
 push_forward(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 push_forward(const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 push_forward(const SymmetricTensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<4,  2 ,  double >
 push_forward(const Tensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 push_forward(const SymmetricTensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<1,  2 ,  double >
 pull_back(const Tensor<1,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 pull_back(const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 pull_back(const SymmetricTensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<4,  2 ,  double >
 pull_back(const Tensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 pull_back(const SymmetricTensor<4,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);
 }

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Physics
 {
 namespace Transformations
 {
 template Tensor<1,  2 ,  float >
 nansons_formula(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 namespace Contravariant
 {
 template Tensor<1,  2 ,  float >
 push_forward(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 push_forward(const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 push_forward(const SymmetricTensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<4,  2 ,  float >
 push_forward(const Tensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 push_forward(const SymmetricTensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<1,  2 ,  float >
 pull_back(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 pull_back(const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 pull_back(const SymmetricTensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<4,  2 ,  float >
 pull_back(const Tensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 pull_back(const SymmetricTensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);
 }

 namespace Covariant
 {
 template Tensor<1,  2 ,  float >
 push_forward(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 push_forward(const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 push_forward(const SymmetricTensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<4,  2 ,  float >
 push_forward(const Tensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 push_forward(const SymmetricTensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<1,  2 ,  float >
 pull_back(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 pull_back(const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 pull_back(const SymmetricTensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<4,  2 ,  float >
 pull_back(const Tensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 pull_back(const SymmetricTensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);
 }

 namespace Piola
 {
 template Tensor<1,  2 ,  float >
 push_forward(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 push_forward(const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 push_forward(const SymmetricTensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<4,  2 ,  float >
 push_forward(const Tensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 push_forward(const SymmetricTensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<1,  2 ,  float >
 pull_back(const Tensor<1,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 pull_back(const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 pull_back(const SymmetricTensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<4,  2 ,  float >
 pull_back(const Tensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 pull_back(const SymmetricTensor<4,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);
 }

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Physics
 {
 namespace Transformations
 {
 template Tensor<1,  3 ,  double >
 nansons_formula(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 namespace Contravariant
 {
 template Tensor<1,  3 ,  double >
 push_forward(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 push_forward(const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 push_forward(const SymmetricTensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<4,  3 ,  double >
 push_forward(const Tensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 push_forward(const SymmetricTensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<1,  3 ,  double >
 pull_back(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 pull_back(const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 pull_back(const SymmetricTensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<4,  3 ,  double >
 pull_back(const Tensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 pull_back(const SymmetricTensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);
 }

 namespace Covariant
 {
 template Tensor<1,  3 ,  double >
 push_forward(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 push_forward(const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 push_forward(const SymmetricTensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<4,  3 ,  double >
 push_forward(const Tensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 push_forward(const SymmetricTensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<1,  3 ,  double >
 pull_back(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 pull_back(const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 pull_back(const SymmetricTensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<4,  3 ,  double >
 pull_back(const Tensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 pull_back(const SymmetricTensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);
 }

 namespace Piola
 {
 template Tensor<1,  3 ,  double >
 push_forward(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 push_forward(const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 push_forward(const SymmetricTensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<4,  3 ,  double >
 push_forward(const Tensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 push_forward(const SymmetricTensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<1,  3 ,  double >
 pull_back(const Tensor<1,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 pull_back(const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 pull_back(const SymmetricTensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<4,  3 ,  double >
 pull_back(const Tensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 pull_back(const SymmetricTensor<4,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);
 }

 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Physics
 {
 namespace Transformations
 {
 template Tensor<1,  3 ,  float >
 nansons_formula(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 namespace Contravariant
 {
 template Tensor<1,  3 ,  float >
 push_forward(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 push_forward(const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 push_forward(const SymmetricTensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<4,  3 ,  float >
 push_forward(const Tensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 push_forward(const SymmetricTensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<1,  3 ,  float >
 pull_back(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 pull_back(const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 pull_back(const SymmetricTensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<4,  3 ,  float >
 pull_back(const Tensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 pull_back(const SymmetricTensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);
 }

 namespace Covariant
 {
 template Tensor<1,  3 ,  float >
 push_forward(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 push_forward(const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 push_forward(const SymmetricTensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<4,  3 ,  float >
 push_forward(const Tensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 push_forward(const SymmetricTensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<1,  3 ,  float >
 pull_back(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 pull_back(const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 pull_back(const SymmetricTensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<4,  3 ,  float >
 pull_back(const Tensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 pull_back(const SymmetricTensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);
 }

 namespace Piola
 {
 template Tensor<1,  3 ,  float >
 push_forward(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 push_forward(const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 push_forward(const SymmetricTensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<4,  3 ,  float >
 push_forward(const Tensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 push_forward(const SymmetricTensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<1,  3 ,  float >
 pull_back(const Tensor<1,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 pull_back(const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 pull_back(const SymmetricTensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<4,  3 ,  float >
 pull_back(const Tensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 pull_back(const SymmetricTensor<4,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);
 }

 }
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
