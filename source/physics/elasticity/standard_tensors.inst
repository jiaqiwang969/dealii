// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Physics
 {
 namespace Elasticity
 {
 template class StandardTensors< 1 >;
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Physics
 {
 namespace Elasticity
 {
 template class StandardTensors< 2 >;
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Physics
 {
 namespace Elasticity
 {
 template class StandardTensors< 3 >;
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Physics
 {
 namespace Elasticity
 {
 template SymmetricTensor<4,  1 ,  double >
 StandardTensors< 1 >::Dev_P< double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 StandardTensors< 1 >::Dev_P_T< double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 StandardTensors< 1 >::ddet_F_dC< double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<4,  1 ,  double >
 StandardTensors< 1 >::dC_inv_dC< double >(
 const Tensor<2,  1 ,  double > &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Physics
 {
 namespace Elasticity
 {
 template SymmetricTensor<4,  1 ,  float >
 StandardTensors< 1 >::Dev_P< float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 StandardTensors< 1 >::Dev_P_T< float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 StandardTensors< 1 >::ddet_F_dC< float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<4,  1 ,  float >
 StandardTensors< 1 >::dC_inv_dC< float >(
 const Tensor<2,  1 ,  float > &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Physics
 {
 namespace Elasticity
 {
 template SymmetricTensor<4,  2 ,  double >
 StandardTensors< 2 >::Dev_P< double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 StandardTensors< 2 >::Dev_P_T< double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 StandardTensors< 2 >::ddet_F_dC< double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<4,  2 ,  double >
 StandardTensors< 2 >::dC_inv_dC< double >(
 const Tensor<2,  2 ,  double > &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace Physics
 {
 namespace Elasticity
 {
 template SymmetricTensor<4,  2 ,  float >
 StandardTensors< 2 >::Dev_P< float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 StandardTensors< 2 >::Dev_P_T< float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 StandardTensors< 2 >::ddet_F_dC< float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<4,  2 ,  float >
 StandardTensors< 2 >::dC_inv_dC< float >(
 const Tensor<2,  2 ,  float > &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace Physics
 {
 namespace Elasticity
 {
 template SymmetricTensor<4,  3 ,  double >
 StandardTensors< 3 >::Dev_P< double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 StandardTensors< 3 >::Dev_P_T< double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 StandardTensors< 3 >::ddet_F_dC< double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<4,  3 ,  double >
 StandardTensors< 3 >::dC_inv_dC< double >(
 const Tensor<2,  3 ,  double > &);
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace Physics
 {
 namespace Elasticity
 {
 template SymmetricTensor<4,  3 ,  float >
 StandardTensors< 3 >::Dev_P< float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 StandardTensors< 3 >::Dev_P_T< float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 StandardTensors< 3 >::ddet_F_dC< float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<4,  3 ,  float >
 StandardTensors< 3 >::dC_inv_dC< float >(
 const Tensor<2,  3 ,  float > &);
 }
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
