// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Physics
 {
 namespace Elasticity
 {
 namespace Kinematics
 {
 template Tensor<2,  1 ,  double >
 F< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 F_iso< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 F_vol< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 C< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 b< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 E< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 epsilon< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 e< 1 ,  double >(
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 l< 1 ,  double >(
 const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template SymmetricTensor<2,  1 ,  double >
 d< 1 ,  double >(
 const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);

 template Tensor<2,  1 ,  double >
 w< 1 ,  double >(
 const Tensor<2,  1 ,  double > &,
 const Tensor<2,  1 ,  double > &);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Physics
 {
 namespace Elasticity
 {
 namespace Kinematics
 {
 template Tensor<2,  1 ,  float >
 F< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 F_iso< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 F_vol< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 C< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 b< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 E< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 epsilon< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 e< 1 ,  float >(
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 l< 1 ,  float >(
 const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template SymmetricTensor<2,  1 ,  float >
 d< 1 ,  float >(
 const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);

 template Tensor<2,  1 ,  float >
 w< 1 ,  float >(
 const Tensor<2,  1 ,  float > &,
 const Tensor<2,  1 ,  float > &);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Physics
 {
 namespace Elasticity
 {
 namespace Kinematics
 {
 template Tensor<2,  2 ,  double >
 F< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 F_iso< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 F_vol< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 C< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 b< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 E< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 epsilon< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 e< 2 ,  double >(
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 l< 2 ,  double >(
 const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template SymmetricTensor<2,  2 ,  double >
 d< 2 ,  double >(
 const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);

 template Tensor<2,  2 ,  double >
 w< 2 ,  double >(
 const Tensor<2,  2 ,  double > &,
 const Tensor<2,  2 ,  double > &);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Physics
 {
 namespace Elasticity
 {
 namespace Kinematics
 {
 template Tensor<2,  2 ,  float >
 F< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 F_iso< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 F_vol< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 C< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 b< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 E< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 epsilon< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 e< 2 ,  float >(
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 l< 2 ,  float >(
 const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template SymmetricTensor<2,  2 ,  float >
 d< 2 ,  float >(
 const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);

 template Tensor<2,  2 ,  float >
 w< 2 ,  float >(
 const Tensor<2,  2 ,  float > &,
 const Tensor<2,  2 ,  float > &);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Physics
 {
 namespace Elasticity
 {
 namespace Kinematics
 {
 template Tensor<2,  3 ,  double >
 F< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 F_iso< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 F_vol< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 C< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 b< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 E< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 epsilon< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 e< 3 ,  double >(
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 l< 3 ,  double >(
 const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template SymmetricTensor<2,  3 ,  double >
 d< 3 ,  double >(
 const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);

 template Tensor<2,  3 ,  double >
 w< 3 ,  double >(
 const Tensor<2,  3 ,  double > &,
 const Tensor<2,  3 ,  double > &);
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Physics
 {
 namespace Elasticity
 {
 namespace Kinematics
 {
 template Tensor<2,  3 ,  float >
 F< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 F_iso< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 F_vol< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 C< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 b< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 E< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 epsilon< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 e< 3 ,  float >(
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 l< 3 ,  float >(
 const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template SymmetricTensor<2,  3 ,  float >
 d< 3 ,  float >(
 const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);

 template Tensor<2,  3 ,  float >
 w< 3 ,  float >(
 const Tensor<2,  3 ,  float > &,
 const Tensor<2,  3 ,  float > &);
 }
 }
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
