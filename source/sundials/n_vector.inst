// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template SUNDIALS::internal::NVectorView< Vector < double >>
 SUNDIALS::internal::make_nvector_view<>( Vector < double > &);
 template SUNDIALS::internal::NVectorView<const  Vector < double >>
 SUNDIALS::internal::make_nvector_view<>(const  Vector < double > &);
 template  Vector < double > * SUNDIALS::internal::unwrap_nvector< Vector < double >>(N_Vector);
 template const  Vector < double > *SUNDIALS::internal::unwrap_nvector_const< Vector < double >>(
 N_Vector);

 template class SUNDIALS::internal::NVectorView< Vector < double >>;
 template class SUNDIALS::internal::NVectorView<const  Vector < double >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template SUNDIALS::internal::NVectorView< BlockVector < double >>
 SUNDIALS::internal::make_nvector_view<>( BlockVector < double > &);
 template SUNDIALS::internal::NVectorView<const  BlockVector < double >>
 SUNDIALS::internal::make_nvector_view<>(const  BlockVector < double > &);
 template  BlockVector < double > * SUNDIALS::internal::unwrap_nvector< BlockVector < double >>(N_Vector);
 template const  BlockVector < double > *SUNDIALS::internal::unwrap_nvector_const< BlockVector < double >>(
 N_Vector);

 template class SUNDIALS::internal::NVectorView< BlockVector < double >>;
 template class SUNDIALS::internal::NVectorView<const  BlockVector < double >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template SUNDIALS::internal::NVectorView< Vector < float >>
 SUNDIALS::internal::make_nvector_view<>( Vector < float > &);
 template SUNDIALS::internal::NVectorView<const  Vector < float >>
 SUNDIALS::internal::make_nvector_view<>(const  Vector < float > &);
 template  Vector < float > * SUNDIALS::internal::unwrap_nvector< Vector < float >>(N_Vector);
 template const  Vector < float > *SUNDIALS::internal::unwrap_nvector_const< Vector < float >>(
 N_Vector);

 template class SUNDIALS::internal::NVectorView< Vector < float >>;
 template class SUNDIALS::internal::NVectorView<const  Vector < float >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template SUNDIALS::internal::NVectorView< BlockVector < float >>
 SUNDIALS::internal::make_nvector_view<>( BlockVector < float > &);
 template SUNDIALS::internal::NVectorView<const  BlockVector < float >>
 SUNDIALS::internal::make_nvector_view<>(const  BlockVector < float > &);
 template  BlockVector < float > * SUNDIALS::internal::unwrap_nvector< BlockVector < float >>(N_Vector);
 template const  BlockVector < float > *SUNDIALS::internal::unwrap_nvector_const< BlockVector < float >>(
 N_Vector);

 template class SUNDIALS::internal::NVectorView< BlockVector < float >>;
 template class SUNDIALS::internal::NVectorView<const  BlockVector < float >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template SUNDIALS::internal::NVectorView<LinearAlgebra::distributed:: Vector < double >>
 SUNDIALS::internal::make_nvector_view<>(LinearAlgebra::distributed:: Vector < double > &);
 template SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: Vector < double >>
 SUNDIALS::internal::make_nvector_view<>(
 const LinearAlgebra::distributed:: Vector < double > &);
 template LinearAlgebra::distributed:: Vector < double >
 *SUNDIALS::internal::unwrap_nvector<LinearAlgebra::distributed:: Vector < double >>(
 N_Vector);
 template const LinearAlgebra::distributed:: Vector < double > *SUNDIALS::internal::
 unwrap_nvector_const<LinearAlgebra::distributed:: Vector < double >>(N_Vector);

 template class SUNDIALS::internal::NVectorView<
 LinearAlgebra::distributed:: Vector < double >>;
 template class SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: Vector < double >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template SUNDIALS::internal::NVectorView<LinearAlgebra::distributed:: BlockVector < double >>
 SUNDIALS::internal::make_nvector_view<>(LinearAlgebra::distributed:: BlockVector < double > &);
 template SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: BlockVector < double >>
 SUNDIALS::internal::make_nvector_view<>(
 const LinearAlgebra::distributed:: BlockVector < double > &);
 template LinearAlgebra::distributed:: BlockVector < double >
 *SUNDIALS::internal::unwrap_nvector<LinearAlgebra::distributed:: BlockVector < double >>(
 N_Vector);
 template const LinearAlgebra::distributed:: BlockVector < double > *SUNDIALS::internal::
 unwrap_nvector_const<LinearAlgebra::distributed:: BlockVector < double >>(N_Vector);

 template class SUNDIALS::internal::NVectorView<
 LinearAlgebra::distributed:: BlockVector < double >>;
 template class SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: BlockVector < double >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template SUNDIALS::internal::NVectorView<LinearAlgebra::distributed:: Vector < float >>
 SUNDIALS::internal::make_nvector_view<>(LinearAlgebra::distributed:: Vector < float > &);
 template SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: Vector < float >>
 SUNDIALS::internal::make_nvector_view<>(
 const LinearAlgebra::distributed:: Vector < float > &);
 template LinearAlgebra::distributed:: Vector < float >
 *SUNDIALS::internal::unwrap_nvector<LinearAlgebra::distributed:: Vector < float >>(
 N_Vector);
 template const LinearAlgebra::distributed:: Vector < float > *SUNDIALS::internal::
 unwrap_nvector_const<LinearAlgebra::distributed:: Vector < float >>(N_Vector);

 template class SUNDIALS::internal::NVectorView<
 LinearAlgebra::distributed:: Vector < float >>;
 template class SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: Vector < float >>;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template SUNDIALS::internal::NVectorView<LinearAlgebra::distributed:: BlockVector < float >>
 SUNDIALS::internal::make_nvector_view<>(LinearAlgebra::distributed:: BlockVector < float > &);
 template SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: BlockVector < float >>
 SUNDIALS::internal::make_nvector_view<>(
 const LinearAlgebra::distributed:: BlockVector < float > &);
 template LinearAlgebra::distributed:: BlockVector < float >
 *SUNDIALS::internal::unwrap_nvector<LinearAlgebra::distributed:: BlockVector < float >>(
 N_Vector);
 template const LinearAlgebra::distributed:: BlockVector < float > *SUNDIALS::internal::
 unwrap_nvector_const<LinearAlgebra::distributed:: BlockVector < float >>(N_Vector);

 template class SUNDIALS::internal::NVectorView<
 LinearAlgebra::distributed:: BlockVector < float >>;
 template class SUNDIALS::internal::NVectorView<
 const LinearAlgebra::distributed:: BlockVector < float >>;
 
#endif
#ifdef DEAL_II_WITH_TRILINOS
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template SUNDIALS::internal::NVectorView<TrilinosWrappers::MPI:: Vector >
 SUNDIALS::internal::make_nvector_view<>(TrilinosWrappers::MPI:: Vector  &);
 template SUNDIALS::internal::NVectorView<const TrilinosWrappers::MPI:: Vector >
 SUNDIALS::internal::make_nvector_view<>(const TrilinosWrappers::MPI:: Vector  &);
 template TrilinosWrappers::MPI:: Vector 
 *SUNDIALS::internal::unwrap_nvector<TrilinosWrappers::MPI:: Vector >(N_Vector);
 template const TrilinosWrappers::MPI:: Vector 
 *SUNDIALS::internal::unwrap_nvector_const<TrilinosWrappers::MPI:: Vector >(
 N_Vector);

 template class SUNDIALS::internal::NVectorView<TrilinosWrappers::MPI:: Vector >;
 template class SUNDIALS::internal::NVectorView<
 const TrilinosWrappers::MPI:: Vector >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template SUNDIALS::internal::NVectorView<TrilinosWrappers::MPI:: BlockVector >
 SUNDIALS::internal::make_nvector_view<>(TrilinosWrappers::MPI:: BlockVector  &);
 template SUNDIALS::internal::NVectorView<const TrilinosWrappers::MPI:: BlockVector >
 SUNDIALS::internal::make_nvector_view<>(const TrilinosWrappers::MPI:: BlockVector  &);
 template TrilinosWrappers::MPI:: BlockVector 
 *SUNDIALS::internal::unwrap_nvector<TrilinosWrappers::MPI:: BlockVector >(N_Vector);
 template const TrilinosWrappers::MPI:: BlockVector 
 *SUNDIALS::internal::unwrap_nvector_const<TrilinosWrappers::MPI:: BlockVector >(
 N_Vector);

 template class SUNDIALS::internal::NVectorView<TrilinosWrappers::MPI:: BlockVector >;
 template class SUNDIALS::internal::NVectorView<
 const TrilinosWrappers::MPI:: BlockVector >;
 
#endif
#endif
#ifdef DEAL_II_WITH_PETSC
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template SUNDIALS::internal::NVectorView<PETScWrappers::MPI:: Vector >
 SUNDIALS::internal::make_nvector_view<>(PETScWrappers::MPI:: Vector  &);
 template SUNDIALS::internal::NVectorView<const PETScWrappers::MPI:: Vector >
 SUNDIALS::internal::make_nvector_view<>(const PETScWrappers::MPI:: Vector  &);
 template PETScWrappers::MPI:: Vector 
 *SUNDIALS::internal::unwrap_nvector<PETScWrappers::MPI:: Vector >(N_Vector);
 template const PETScWrappers::MPI:: Vector  *
 SUNDIALS::internal::unwrap_nvector_const<PETScWrappers::MPI:: Vector >(N_Vector);

 template class SUNDIALS::internal::NVectorView<PETScWrappers::MPI:: Vector >;
 template class SUNDIALS::internal::NVectorView<const PETScWrappers::MPI:: Vector >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template SUNDIALS::internal::NVectorView<PETScWrappers::MPI:: BlockVector >
 SUNDIALS::internal::make_nvector_view<>(PETScWrappers::MPI:: BlockVector  &);
 template SUNDIALS::internal::NVectorView<const PETScWrappers::MPI:: BlockVector >
 SUNDIALS::internal::make_nvector_view<>(const PETScWrappers::MPI:: BlockVector  &);
 template PETScWrappers::MPI:: BlockVector 
 *SUNDIALS::internal::unwrap_nvector<PETScWrappers::MPI:: BlockVector >(N_Vector);
 template const PETScWrappers::MPI:: BlockVector  *
 SUNDIALS::internal::unwrap_nvector_const<PETScWrappers::MPI:: BlockVector >(N_Vector);

 template class SUNDIALS::internal::NVectorView<PETScWrappers::MPI:: BlockVector >;
 template class SUNDIALS::internal::NVectorView<const PETScWrappers::MPI:: BlockVector >;
 
#endif
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
