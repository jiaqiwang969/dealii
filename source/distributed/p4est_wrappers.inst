// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#ifdef DEAL_II_WITH_P4EST

 namespace internal
 {
 namespace p4est
 {
# if  1  > 1

 template void
 init_quadrant_children< 1 >(
 const types< 1 >::quadrant &p4est_cell,
 types< 1 >::quadrant (&p4est_children)
 [GeometryInfo< 1 >::max_children_per_cell]);

 template void
 init_coarse_quadrant< 1 >(
 types< 1 >::quadrant &quad);

 template bool
 quadrant_is_equal< 1 >(
 const types< 1 >::quadrant &q1,
 const types< 1 >::quadrant &q2);

 template bool
 quadrant_is_ancestor< 1 >(
 const types< 1 >::quadrant &q1,
 const types< 1 >::quadrant &q2);

 template bool
 tree_exists_locally< 1 >(
 const types< 1 >::forest *parallel_forest,
 const types< 1 >::topidx coarse_grid_cell);

# endif
 }
 }
#endif 
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#ifdef DEAL_II_WITH_P4EST

 namespace internal
 {
 namespace p4est
 {
# if  2  > 1

 template void
 init_quadrant_children< 2 >(
 const types< 2 >::quadrant &p4est_cell,
 types< 2 >::quadrant (&p4est_children)
 [GeometryInfo< 2 >::max_children_per_cell]);

 template void
 init_coarse_quadrant< 2 >(
 types< 2 >::quadrant &quad);

 template bool
 quadrant_is_equal< 2 >(
 const types< 2 >::quadrant &q1,
 const types< 2 >::quadrant &q2);

 template bool
 quadrant_is_ancestor< 2 >(
 const types< 2 >::quadrant &q1,
 const types< 2 >::quadrant &q2);

 template bool
 tree_exists_locally< 2 >(
 const types< 2 >::forest *parallel_forest,
 const types< 2 >::topidx coarse_grid_cell);

# endif
 }
 }
#endif 
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#ifdef DEAL_II_WITH_P4EST

 namespace internal
 {
 namespace p4est
 {
# if  3  > 1

 template void
 init_quadrant_children< 3 >(
 const types< 3 >::quadrant &p4est_cell,
 types< 3 >::quadrant (&p4est_children)
 [GeometryInfo< 3 >::max_children_per_cell]);

 template void
 init_coarse_quadrant< 3 >(
 types< 3 >::quadrant &quad);

 template bool
 quadrant_is_equal< 3 >(
 const types< 3 >::quadrant &q1,
 const types< 3 >::quadrant &q2);

 template bool
 quadrant_is_ancestor< 3 >(
 const types< 3 >::quadrant &q1,
 const types< 3 >::quadrant &q2);

 template bool
 tree_exists_locally< 3 >(
 const types< 3 >::forest *parallel_forest,
 const types< 3 >::topidx coarse_grid_cell);

# endif
 }
 }
#endif 
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
