// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace internal
 {
 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template std::pair< double ,  double >
 compute_global_min_and_max_at_root< double >(const dealii::Vector< double > &,
 const MPI_Comm &);

 namespace RefineAndCoarsenFixedNumber
 {
 template  double 
 compute_threshold< double >(const dealii::Vector< double > &,
 const std::pair<double, double> &,
 const types::global_cell_index,
 const MPI_Comm &);
 }
 namespace RefineAndCoarsenFixedFraction
 {
 template  double 
 compute_threshold< double >(const dealii::Vector< double > &,
 const std::pair<double, double> &,
 const double,
 const MPI_Comm &);
 }
 }
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace internal
 {
 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template std::pair< float ,  float >
 compute_global_min_and_max_at_root< float >(const dealii::Vector< float > &,
 const MPI_Comm &);

 namespace RefineAndCoarsenFixedNumber
 {
 template  float 
 compute_threshold< float >(const dealii::Vector< float > &,
 const std::pair<double, double> &,
 const types::global_cell_index,
 const MPI_Comm &);
 }
 namespace RefineAndCoarsenFixedFraction
 {
 template  float 
 compute_threshold< float >(const dealii::Vector< float > &,
 const std::pair<double, double> &,
 const double,
 const MPI_Comm &);
 }
 }
 }
 }
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void
 refine_and_coarsen_fixed_number< 1 ,
  double ,
  1 >(
 parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const types::global_cell_index);

 template void
 refine_and_coarsen_fixed_fraction< 1 ,
  double ,
  1 >(
 parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }


#if  1  == 3

 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void refine_and_coarsen_fixed_number< 1  - 1,
  double ,
  1 >(
 parallel::distributed::Triangulation< 1  - 1,
  1 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const types::global_cell_index);

 template void refine_and_coarsen_fixed_fraction< 1  - 1,
  double ,
  1 >(
 parallel::distributed::Triangulation< 1  - 1,
  1 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void
 refine_and_coarsen_fixed_number< 2 ,
  double ,
  2 >(
 parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const types::global_cell_index);

 template void
 refine_and_coarsen_fixed_fraction< 2 ,
  double ,
  2 >(
 parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }


#if  2  == 3

 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void refine_and_coarsen_fixed_number< 2  - 1,
  double ,
  2 >(
 parallel::distributed::Triangulation< 2  - 1,
  2 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const types::global_cell_index);

 template void refine_and_coarsen_fixed_fraction< 2  - 1,
  double ,
  2 >(
 parallel::distributed::Triangulation< 2  - 1,
  2 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void
 refine_and_coarsen_fixed_number< 3 ,
  double ,
  3 >(
 parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const types::global_cell_index);

 template void
 refine_and_coarsen_fixed_fraction< 3 ,
  double ,
  3 >(
 parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }


#if  3  == 3

 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void refine_and_coarsen_fixed_number< 3  - 1,
  double ,
  3 >(
 parallel::distributed::Triangulation< 3  - 1,
  3 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const types::global_cell_index);

 template void refine_and_coarsen_fixed_fraction< 3  - 1,
  double ,
  3 >(
 parallel::distributed::Triangulation< 3  - 1,
  3 > &,
 const dealii::Vector< double > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void
 refine_and_coarsen_fixed_number< 1 ,
  float ,
  1 >(
 parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const types::global_cell_index);

 template void
 refine_and_coarsen_fixed_fraction< 1 ,
  float ,
  1 >(
 parallel::distributed::Triangulation< 1 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }


#if  1  == 3

 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void refine_and_coarsen_fixed_number< 1  - 1,
  float ,
  1 >(
 parallel::distributed::Triangulation< 1  - 1,
  1 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const types::global_cell_index);

 template void refine_and_coarsen_fixed_fraction< 1  - 1,
  float ,
  1 >(
 parallel::distributed::Triangulation< 1  - 1,
  1 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void
 refine_and_coarsen_fixed_number< 2 ,
  float ,
  2 >(
 parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const types::global_cell_index);

 template void
 refine_and_coarsen_fixed_fraction< 2 ,
  float ,
  2 >(
 parallel::distributed::Triangulation< 2 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }


#if  2  == 3

 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void refine_and_coarsen_fixed_number< 2  - 1,
  float ,
  2 >(
 parallel::distributed::Triangulation< 2  - 1,
  2 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const types::global_cell_index);

 template void refine_and_coarsen_fixed_fraction< 2  - 1,
  float ,
  2 >(
 parallel::distributed::Triangulation< 2  - 1,
  2 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void
 refine_and_coarsen_fixed_number< 3 ,
  float ,
  3 >(
 parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const types::global_cell_index);

 template void
 refine_and_coarsen_fixed_fraction< 3 ,
  float ,
  3 >(
 parallel::distributed::Triangulation< 3 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }


#if  3  == 3

 namespace parallel
 {
 namespace distributed
 {
 namespace GridRefinement
 {
 template void refine_and_coarsen_fixed_number< 3  - 1,
  float ,
  3 >(
 parallel::distributed::Triangulation< 3  - 1,
  3 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const types::global_cell_index);

 template void refine_and_coarsen_fixed_fraction< 3  - 1,
  float ,
  3 >(
 parallel::distributed::Triangulation< 3  - 1,
  3 > &,
 const dealii::Vector< float > &,
 const double,
 const double,
 const VectorTools::NormType);
 }
 }
 }

#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
