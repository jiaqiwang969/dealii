// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  > 1
 
 template std::vector<TopoDS_Edge> create_curves_from_triangulation_boundary(
 const Triangulation<2,  1 > &triangulation,
 const Mapping<2,  1 > & mapping);

 template bool point_compare(const Point< 1 > & p1,
 const Point< 1 > & p2,
 const Tensor<1,  1 > &direction,
 const double tolerance);

 template Point< 1 > point(const gp_Pnt &p,
 const double tolerance);

 template gp_Pnt point(const Point< 1 > &p);

 template TopoDS_Edge interpolation_curve(
 std::vector<Point< 1 >> & curve_points,
 const Tensor<1,  1 > &direction,
 const bool closed,
 const double tolerance);

 template Point< 1 > push_forward(const TopoDS_Shape &in_shape,
 const double u,
 const double v);

 template Point< 1 > line_intersection(
 const TopoDS_Shape & in_shape,
 const Point< 1 > & origin,
 const Tensor<1,  1 > &direction,
 const double tolerance);

 template void create_triangulation(
 const TopoDS_Face &face, Triangulation<2,  1 > &tria);

 template std::tuple<Point< 1 >, TopoDS_Shape, double, double>
 project_point_and_pull_back(const TopoDS_Shape & in_shape,
 const Point< 1 > &origin,
 const double tolerance);

 template Point< 1 > closest_point(
 const TopoDS_Shape & in_shape,
 const Point< 1 > &origin,
 const double tolerance);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  2  > 1
 
 template std::vector<TopoDS_Edge> create_curves_from_triangulation_boundary(
 const Triangulation<2,  2 > &triangulation,
 const Mapping<2,  2 > & mapping);

 template bool point_compare(const Point< 2 > & p1,
 const Point< 2 > & p2,
 const Tensor<1,  2 > &direction,
 const double tolerance);

 template Point< 2 > point(const gp_Pnt &p,
 const double tolerance);

 template gp_Pnt point(const Point< 2 > &p);

 template TopoDS_Edge interpolation_curve(
 std::vector<Point< 2 >> & curve_points,
 const Tensor<1,  2 > &direction,
 const bool closed,
 const double tolerance);

 template Point< 2 > push_forward(const TopoDS_Shape &in_shape,
 const double u,
 const double v);

 template Point< 2 > line_intersection(
 const TopoDS_Shape & in_shape,
 const Point< 2 > & origin,
 const Tensor<1,  2 > &direction,
 const double tolerance);

 template void create_triangulation(
 const TopoDS_Face &face, Triangulation<2,  2 > &tria);

 template std::tuple<Point< 2 >, TopoDS_Shape, double, double>
 project_point_and_pull_back(const TopoDS_Shape & in_shape,
 const Point< 2 > &origin,
 const double tolerance);

 template Point< 2 > closest_point(
 const TopoDS_Shape & in_shape,
 const Point< 2 > &origin,
 const double tolerance);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  3  > 1
 
 template std::vector<TopoDS_Edge> create_curves_from_triangulation_boundary(
 const Triangulation<2,  3 > &triangulation,
 const Mapping<2,  3 > & mapping);

 template bool point_compare(const Point< 3 > & p1,
 const Point< 3 > & p2,
 const Tensor<1,  3 > &direction,
 const double tolerance);

 template Point< 3 > point(const gp_Pnt &p,
 const double tolerance);

 template gp_Pnt point(const Point< 3 > &p);

 template TopoDS_Edge interpolation_curve(
 std::vector<Point< 3 >> & curve_points,
 const Tensor<1,  3 > &direction,
 const bool closed,
 const double tolerance);

 template Point< 3 > push_forward(const TopoDS_Shape &in_shape,
 const double u,
 const double v);

 template Point< 3 > line_intersection(
 const TopoDS_Shape & in_shape,
 const Point< 3 > & origin,
 const Tensor<1,  3 > &direction,
 const double tolerance);

 template void create_triangulation(
 const TopoDS_Face &face, Triangulation<2,  3 > &tria);

 template std::tuple<Point< 3 >, TopoDS_Shape, double, double>
 project_point_and_pull_back(const TopoDS_Shape & in_shape,
 const Point< 3 > &origin,
 const double tolerance);

 template Point< 3 > closest_point(
 const TopoDS_Shape & in_shape,
 const Point< 3 > &origin,
 const double tolerance);

#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
