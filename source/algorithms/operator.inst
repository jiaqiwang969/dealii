// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template class OutputOperator< Vector<double> >;
 template class Newton< Vector<double> >;
 template class ThetaTimestepping< Vector<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template class OutputOperator< Vector<float> >;
 template class Newton< Vector<float> >;
 template class ThetaTimestepping< Vector<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template class OutputOperator< BlockVector<double> >;
 template class Newton< BlockVector<double> >;
 template class ThetaTimestepping< BlockVector<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template class OutputOperator< BlockVector<float> >;
 template class Newton< BlockVector<float> >;
 template class ThetaTimestepping< BlockVector<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template class OutputOperator< LinearAlgebra::Vector<double> >;
 template class Newton< LinearAlgebra::Vector<double> >;
 template class ThetaTimestepping< LinearAlgebra::Vector<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template class OutputOperator< LinearAlgebra::Vector<float> >;
 template class Newton< LinearAlgebra::Vector<float> >;
 template class ThetaTimestepping< LinearAlgebra::Vector<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template class OutputOperator< LinearAlgebra::distributed::Vector<double> >;
 template class Newton< LinearAlgebra::distributed::Vector<double> >;
 template class ThetaTimestepping< LinearAlgebra::distributed::Vector<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template class OutputOperator< LinearAlgebra::distributed::Vector<float> >;
 template class Newton< LinearAlgebra::distributed::Vector<float> >;
 template class ThetaTimestepping< LinearAlgebra::distributed::Vector<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template class OutputOperator< LinearAlgebra::distributed::BlockVector<double> >;
 template class Newton< LinearAlgebra::distributed::BlockVector<double> >;
 template class ThetaTimestepping< LinearAlgebra::distributed::BlockVector<double> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template class OutputOperator< LinearAlgebra::distributed::BlockVector<float> >;
 template class Newton< LinearAlgebra::distributed::BlockVector<float> >;
 template class ThetaTimestepping< LinearAlgebra::distributed::BlockVector<float> >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template class OutputOperator< Vector<std::complex<double> > >;
 template class Newton< Vector<std::complex<double> > >;
 template class ThetaTimestepping< Vector<std::complex<double> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template class OutputOperator< Vector<std::complex<float> > >;
 template class Newton< Vector<std::complex<float> > >;
 template class ThetaTimestepping< Vector<std::complex<float> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template class OutputOperator< BlockVector<std::complex<double> > >;
 template class Newton< BlockVector<std::complex<double> > >;
 template class ThetaTimestepping< BlockVector<std::complex<double> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template class OutputOperator< BlockVector<std::complex<float> > >;
 template class Newton< BlockVector<std::complex<float> > >;
 template class ThetaTimestepping< BlockVector<std::complex<float> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template class OutputOperator< LinearAlgebra::Vector<std::complex<double> > >;
 template class Newton< LinearAlgebra::Vector<std::complex<double> > >;
 template class ThetaTimestepping< LinearAlgebra::Vector<std::complex<double> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template class OutputOperator< LinearAlgebra::Vector<std::complex<float> > >;
 template class Newton< LinearAlgebra::Vector<std::complex<float> > >;
 template class ThetaTimestepping< LinearAlgebra::Vector<std::complex<float> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template class OutputOperator< LinearAlgebra::distributed::Vector<std::complex<double> > >;
 template class Newton< LinearAlgebra::distributed::Vector<std::complex<double> > >;
 template class ThetaTimestepping< LinearAlgebra::distributed::Vector<std::complex<double> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template class OutputOperator< LinearAlgebra::distributed::Vector<std::complex<float> > >;
 template class Newton< LinearAlgebra::distributed::Vector<std::complex<float> > >;
 template class ThetaTimestepping< LinearAlgebra::distributed::Vector<std::complex<float> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template class OutputOperator< LinearAlgebra::distributed::BlockVector<std::complex<double> > >;
 template class Newton< LinearAlgebra::distributed::BlockVector<std::complex<double> > >;
 template class ThetaTimestepping< LinearAlgebra::distributed::BlockVector<std::complex<double> > >;
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template class OutputOperator< LinearAlgebra::distributed::BlockVector<std::complex<float> > >;
 template class Newton< LinearAlgebra::distributed::BlockVector<std::complex<float> > >;
 template class ThetaTimestepping< LinearAlgebra::distributed::BlockVector<std::complex<float> > >;
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
