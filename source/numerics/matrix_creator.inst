// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const hp::MappingCollection< 1 ,  1 >
 & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const hp::MappingCollection< 1 ,  2 >
 & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const hp::MappingCollection< 1 ,  3 >
 & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const hp::MappingCollection< 2 ,  1 >
 & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const hp::MappingCollection< 2 ,  2 >
 & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const hp::MappingCollection< 2 ,  3 >
 & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const hp::MappingCollection< 3 ,  1 >
 & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const hp::MappingCollection< 3 ,  2 >
 & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const hp::MappingCollection< 3 ,  3 >
 & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const hp::MappingCollection< 1 ,  1 >
 & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const hp::MappingCollection< 1 ,  2 >
 & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const hp::MappingCollection< 1 ,  3 >
 & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  2  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const hp::MappingCollection< 2 ,  1 >
 & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  2  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const hp::MappingCollection< 2 ,  2 >
 & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  2  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const hp::MappingCollection< 2 ,  3 >
 & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  3  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const hp::MappingCollection< 3 ,  1 >
 & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  3  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const hp::MappingCollection< 3 ,  2 >
 & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  3  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const hp::MappingCollection< 3 ,  3 >
 & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  1  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const hp::MappingCollection< 1 ,  1 >
 & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  double >(
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  1  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const hp::MappingCollection< 1 ,  2 >
 & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  double >(
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  1  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const hp::MappingCollection< 1 ,  3 >
 & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  double >(
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  2  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const hp::MappingCollection< 2 ,  1 >
 & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  double >(
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  2  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const hp::MappingCollection< 2 ,  2 >
 & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  double >(
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  2  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const hp::MappingCollection< 2 ,  3 >
 & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  double >(
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const hp::MappingCollection< 3 ,  1 >
 & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  double >(
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 1 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 1 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const hp::MappingCollection< 3 ,  2 >
 & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  double >(
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 2 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 2 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const hp::MappingCollection< 3 ,  3 >
 & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  double >(
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< double > & matrix,
 const Function< 3 ,  double > & rhs,
 Vector< double > & rhs_vector,
 const Function< 3 ,  double > *const coefficient,
 const AffineConstraints< double > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
#if  1  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const hp::MappingCollection< 1 ,  1 >
 & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  float >(
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
#if  1  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const hp::MappingCollection< 1 ,  2 >
 & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  float >(
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
#if  1  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const hp::MappingCollection< 1 ,  3 >
 & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  float >(
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
#if  2  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const hp::MappingCollection< 2 ,  1 >
 & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  float >(
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
#if  2  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const hp::MappingCollection< 2 ,  2 >
 & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  float >(
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
#if  2  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const hp::MappingCollection< 2 ,  3 >
 & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  float >(
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
#if  3  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const hp::MappingCollection< 3 ,  1 >
 & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  float >(
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 1 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 1 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
#if  3  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const hp::MappingCollection< 3 ,  2 >
 & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  float >(
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 2 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 2 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
#if  3  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const hp::MappingCollection< 3 ,  3 >
 & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  float >(
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< float > & matrix,
 const Function< 3 ,  float > & rhs,
 Vector< float > & rhs_vector,
 const Function< 3 ,  float > *const coefficient,
 const AffineConstraints< float > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
#if  1  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<double> >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<double> >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<double> >(
 const hp::MappingCollection< 1 ,  1 >
 & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<double> >(
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
#if  1  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<double> >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<double> >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<double> >(
 const hp::MappingCollection< 1 ,  2 >
 & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<double> >(
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
#if  1  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<double> >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<double> >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<double> >(
 const hp::MappingCollection< 1 ,  3 >
 & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<double> >(
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
#if  2  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<double> >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<double> >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<double> >(
 const hp::MappingCollection< 2 ,  1 >
 & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<double> >(
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
#if  2  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<double> >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<double> >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<double> >(
 const hp::MappingCollection< 2 ,  2 >
 & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<double> >(
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
#if  2  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<double> >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<double> >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<double> >(
 const hp::MappingCollection< 2 ,  3 >
 & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<double> >(
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
#if  3  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<double> >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<double> >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<double> >(
 const hp::MappingCollection< 3 ,  1 >
 & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<double> >(
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 1 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 1 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
#if  3  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<double> >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<double> >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<double> >(
 const hp::MappingCollection< 3 ,  2 >
 & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<double> >(
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 2 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 2 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
#if  3  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<double> >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<double> >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<double> >(
 const hp::MappingCollection< 3 ,  3 >
 & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<double> >(
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<double> > & matrix,
 const Function< 3 ,  std::complex<double> > & rhs,
 Vector< std::complex<double> > & rhs_vector,
 const Function< 3 ,  std::complex<double> > *const coefficient,
 const AffineConstraints< std::complex<double> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
#if  1  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<float> >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<float> >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<float> >(
 const hp::MappingCollection< 1 ,  1 >
 & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  1 ,  std::complex<float> >(
 const DoFHandler< 1 ,  1 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
#if  1  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<float> >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<float> >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<float> >(
 const hp::MappingCollection< 1 ,  2 >
 & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  2 ,  std::complex<float> >(
 const DoFHandler< 1 ,  2 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
#if  1  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<float> >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<float> >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<float> >(
 const hp::MappingCollection< 1 ,  3 >
 & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 1 ,  3 ,  std::complex<float> >(
 const DoFHandler< 1 ,  3 > &dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
#if  2  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<float> >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<float> >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<float> >(
 const hp::MappingCollection< 2 ,  1 >
 & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  1 ,  std::complex<float> >(
 const DoFHandler< 2 ,  1 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
#if  2  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<float> >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<float> >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<float> >(
 const hp::MappingCollection< 2 ,  2 >
 & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  2 ,  std::complex<float> >(
 const DoFHandler< 2 ,  2 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
#if  2  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<float> >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<float> >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<float> >(
 const hp::MappingCollection< 2 ,  3 >
 & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 2 ,  3 ,  std::complex<float> >(
 const DoFHandler< 2 ,  3 > &dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
#if  3  <=  1 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<float> >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<float> >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<float> >(
 const hp::MappingCollection< 3 ,  1 >
 & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  1 ,  std::complex<float> >(
 const DoFHandler< 3 ,  1 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 1 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 1 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
#if  3  <=  2 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<float> >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<float> >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<float> >(
 const hp::MappingCollection< 3 ,  2 >
 & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  2 ,  std::complex<float> >(
 const DoFHandler< 3 ,  2 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 2 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 2 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
#if  3  <=  3 
 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<float> >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<float> >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 
 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<float> >(
 const hp::MappingCollection< 3 ,  3 >
 & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);

 template void MatrixCreator::
 create_mass_matrix< 3 ,  3 ,  std::complex<float> >(
 const DoFHandler< 3 ,  3 > &dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix< std::complex<float> > & matrix,
 const Function< 3 ,  std::complex<float> > & rhs,
 Vector< std::complex<float> > & rhs_vector,
 const Function< 3 ,  std::complex<float> > *const coefficient,
 const AffineConstraints< std::complex<float> > & constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
#if  1  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  double >(
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  double >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  double >(
 const hp::MappingCollection< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  double >(
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
#if  1  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  double >(
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  double >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  double >(
 const hp::MappingCollection< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  double >(
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
#if  1  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  double >(
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  double >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  double >(
 const hp::MappingCollection< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  double >(
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
#if  2  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  double >(
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  double >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  double >(
 const hp::MappingCollection< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  double >(
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
#if  2  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  double >(
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  double >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  double >(
 const hp::MappingCollection< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  double >(
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
#if  2  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  double >(
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  double >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  double >(
 const hp::MappingCollection< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  double >(
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
#if  3  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  double >(
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  double >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  double >(
 const hp::MappingCollection< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  double >(
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
#if  3  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  double >(
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  double >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  double >(
 const hp::MappingCollection< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  double >(
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
#if  3  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  double >(
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  double >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< double > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &rhs,
 Vector< double > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  double > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  double >(
 const hp::MappingCollection< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  double > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  double >(
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< double > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 Vector< double > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  double > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
#if  1  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  float >(
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  float >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  float >(
 const hp::MappingCollection< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  float >(
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
#if  1  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  float >(
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  float >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  float >(
 const hp::MappingCollection< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  float >(
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
#if  1  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  float >(
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  float >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  float >(
 const hp::MappingCollection< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  float >(
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
#if  2  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  float >(
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  float >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  float >(
 const hp::MappingCollection< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  float >(
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
#if  2  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  float >(
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  float >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  float >(
 const hp::MappingCollection< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  float >(
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
#if  2  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  float >(
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  float >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  float >(
 const hp::MappingCollection< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  float >(
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
#if  3  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  float >(
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  float >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  float >(
 const hp::MappingCollection< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  float >(
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
#if  3  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  float >(
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  float >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  float >(
 const hp::MappingCollection< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  float >(
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
#if  3  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  float >(
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  float >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< float > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &rhs,
 Vector< float > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  float > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  float >(
 const hp::MappingCollection< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  float > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  float >(
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< float > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 Vector< float > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  float > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
#if  1  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<double> >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<double> >(
 const hp::MappingCollection< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
#if  1  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<double> >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<double> >(
 const hp::MappingCollection< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
#if  1  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<double> >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<double> >(
 const hp::MappingCollection< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
#if  2  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<double> >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<double> >(
 const hp::MappingCollection< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
#if  2  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<double> >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<double> >(
 const hp::MappingCollection< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
#if  2  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<double> >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<double> >(
 const hp::MappingCollection< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
#if  3  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<double> >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<double> >(
 const hp::MappingCollection< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<double> >(
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
#if  3  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<double> >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<double> >(
 const hp::MappingCollection< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<double> >(
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
#if  3  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<double> >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<double> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &rhs,
 Vector< std::complex<double> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<double> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<double> >(
 const hp::MappingCollection< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<double> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<double> >(
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<double> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 Vector< std::complex<double> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<double> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
#if  1  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<float> >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<float> >(
 const hp::MappingCollection< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 1 ,  1 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
#if  1  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<float> >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<float> >(
 const hp::MappingCollection< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 1 ,  2 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
#if  1  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<float> >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > & dof,
 const Quadrature< 1  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<float> >(
 const hp::MappingCollection< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 1 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 1 ,  3 > &,
 const hp::QCollection< 1  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
#if  2  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<float> >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<float> >(
 const hp::MappingCollection< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 2 ,  1 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
#if  2  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<float> >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<float> >(
 const hp::MappingCollection< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 2 ,  2 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
#if  2  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<float> >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > & dof,
 const Quadrature< 2  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<float> >(
 const hp::MappingCollection< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 2 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 2 ,  3 > &,
 const hp::QCollection< 2  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
#if  3  <=  1 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<float> >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 1 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<float> >(
 const hp::MappingCollection< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  1 ,
  std::complex<float> >(
 const DoFHandler< 3 ,  1 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 1 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
#if  3  <=  2 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<float> >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 2 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<float> >(
 const hp::MappingCollection< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  2 ,
  std::complex<float> >(
 const DoFHandler< 3 ,  2 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 2 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
#if  3  <=  3 
 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<float> >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > & dof,
 const Quadrature< 3  - 1> & q,
 SparseMatrix< std::complex<float> > & matrix,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &rhs,
 Vector< std::complex<float> > & rhs_vector,
 std::vector<types::global_dof_index> &dof_to_boundary_mapping,
 const Function< 3 ,  std::complex<float> > *const a,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<float> >(
 const hp::MappingCollection< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<float> > *const,
 std::vector<unsigned int>);

 template void
 MatrixCreator::create_boundary_mass_matrix< 3 ,
  3 ,
  std::complex<float> >(
 const DoFHandler< 3 ,  3 > &,
 const hp::QCollection< 3  - 1> &,
 SparseMatrix< std::complex<float> > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 Vector< std::complex<float> > &,
 std::vector<types::global_dof_index> &,
 const Function< 3 ,  std::complex<float> > *const,
 std::vector<unsigned int>);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
#if  1  ==  1 

 
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > &q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const hp::MappingCollection< 1 > &mapping,
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const hp::MappingCollection< 1 > &mapping,
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > &q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
#if  1  ==  2 

 
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > &q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const hp::MappingCollection< 1 > &mapping,
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const hp::MappingCollection< 1 > &mapping,
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > &q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
#if  1  ==  3 

 
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > &q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const hp::MappingCollection< 1 > &mapping,
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const hp::MappingCollection< 1 > &mapping,
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 1 >(
 const DoFHandler< 1 > & dof,
 const hp::QCollection< 1 > &q,
 SparseMatrix<double> & matrix,
 const Function< 1 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
#if  2  ==  1 

 
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > &q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const hp::MappingCollection< 2 > &mapping,
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const hp::MappingCollection< 2 > &mapping,
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > &q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
#if  2  ==  2 

 
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > &q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const hp::MappingCollection< 2 > &mapping,
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const hp::MappingCollection< 2 > &mapping,
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > &q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
#if  2  ==  3 

 
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > &q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const hp::MappingCollection< 2 > &mapping,
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const hp::MappingCollection< 2 > &mapping,
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 2 >(
 const DoFHandler< 2 > & dof,
 const hp::QCollection< 2 > &q,
 SparseMatrix<double> & matrix,
 const Function< 2 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
#if  3  ==  1 

 
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > &q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const hp::MappingCollection< 3 > &mapping,
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const hp::MappingCollection< 3 > &mapping,
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > &q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
#if  3  ==  2 

 
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > &q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const hp::MappingCollection< 3 > &mapping,
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const hp::MappingCollection< 3 > &mapping,
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > &q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
#if  3  ==  3 

 
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);

 
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > &q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const hp::MappingCollection< 3 > &mapping,
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const hp::MappingCollection< 3 > &mapping,
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);
 template void MatrixCreator::create_laplace_matrix< 3 >(
 const DoFHandler< 3 > & dof,
 const hp::QCollection< 3 > &q,
 SparseMatrix<double> & matrix,
 const Function< 3 > & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 > *const coefficient,
 const AffineConstraints<double> & constraints);

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
#if  1  <  1 
 
 template void MatrixCreator::create_laplace_matrix< 1 ,
  1 >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  1 >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  1 >(
 const Mapping< 1 ,  1 > & mapping,
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  1 >(
 const DoFHandler< 1 ,  1 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
#if  1  <  2 
 
 template void MatrixCreator::create_laplace_matrix< 1 ,
  2 >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  2 >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  2 >(
 const Mapping< 1 ,  2 > & mapping,
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  2 >(
 const DoFHandler< 1 ,  2 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
#if  1  <  3 
 
 template void MatrixCreator::create_laplace_matrix< 1 ,
  3 >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  3 >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  3 >(
 const Mapping< 1 ,  3 > & mapping,
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 1 ,
  3 >(
 const DoFHandler< 1 ,  3 > &dof,
 const Quadrature< 1 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
#if  2  <  1 
 
 template void MatrixCreator::create_laplace_matrix< 2 ,
  1 >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  1 >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  1 >(
 const Mapping< 2 ,  1 > & mapping,
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  1 >(
 const DoFHandler< 2 ,  1 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
#if  2  <  2 
 
 template void MatrixCreator::create_laplace_matrix< 2 ,
  2 >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  2 >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  2 >(
 const Mapping< 2 ,  2 > & mapping,
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  2 >(
 const DoFHandler< 2 ,  2 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
#if  2  <  3 
 
 template void MatrixCreator::create_laplace_matrix< 2 ,
  3 >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  3 >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  3 >(
 const Mapping< 2 ,  3 > & mapping,
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 2 ,
  3 >(
 const DoFHandler< 2 ,  3 > &dof,
 const Quadrature< 2 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
#if  3  <  1 
 
 template void MatrixCreator::create_laplace_matrix< 3 ,
  1 >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  1 >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  1 >(
 const Mapping< 3 ,  1 > & mapping,
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  1 >(
 const DoFHandler< 3 ,  1 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 1 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 1 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
#if  3  <  2 
 
 template void MatrixCreator::create_laplace_matrix< 3 ,
  2 >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  2 >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  2 >(
 const Mapping< 3 ,  2 > & mapping,
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  2 >(
 const DoFHandler< 3 ,  2 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 2 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 2 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
#if  3  <  3 
 
 template void MatrixCreator::create_laplace_matrix< 3 ,
  3 >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  3 >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  3 >(
 const Mapping< 3 ,  3 > & mapping,
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
 template void MatrixCreator::create_laplace_matrix< 3 ,
  3 >(
 const DoFHandler< 3 ,  3 > &dof,
 const Quadrature< 3 > & q,
 SparseMatrix<double> & matrix,
 const Function< 3 , double> & rhs,
 Vector<double> & rhs_vector,
 const Function< 3 , double> *const coefficient,
 const AffineConstraints<double> &constraints);
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
