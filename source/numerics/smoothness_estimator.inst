// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  Vector<double> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  Vector<double> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  Vector<double> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  Vector<double> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  Vector<float> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  Vector<float> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  Vector<float> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  Vector<float> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  BlockVector<double> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  BlockVector<double> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  BlockVector<double> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  BlockVector<double> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  BlockVector<float> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  BlockVector<float> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  BlockVector<float> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  BlockVector<float> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  1 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  Vector<double> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  Vector<double> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  Vector<double> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  Vector<double> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  Vector<float> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  Vector<float> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  Vector<float> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  Vector<float> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  BlockVector<double> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  BlockVector<double> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  BlockVector<double> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  BlockVector<double> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  BlockVector<float> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  BlockVector<float> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  BlockVector<float> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  BlockVector<float> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  1  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  2 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  Vector<double> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  Vector<double> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  Vector<double> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  Vector<double> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  Vector<float> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  Vector<float> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  Vector<float> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  Vector<float> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  BlockVector<double> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  BlockVector<double> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  BlockVector<double> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  BlockVector<double> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  BlockVector<float> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  BlockVector<float> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  BlockVector<float> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  BlockVector<float> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
#if  1  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 1 ,  3 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  1 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  Vector<double> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  Vector<double> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  Vector<double> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  Vector<double> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  Vector<float> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  Vector<float> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  Vector<float> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  Vector<float> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  BlockVector<double> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  BlockVector<double> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  BlockVector<double> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  BlockVector<double> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  BlockVector<float> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  BlockVector<float> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  BlockVector<float> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  BlockVector<float> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
#if  2  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  1 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  Vector<double> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  Vector<double> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  Vector<double> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  Vector<double> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  Vector<float> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  Vector<float> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  Vector<float> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  Vector<float> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  BlockVector<double> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  BlockVector<double> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  BlockVector<double> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  BlockVector<double> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  BlockVector<float> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  BlockVector<float> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  BlockVector<float> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  BlockVector<float> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
#if  2  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  2 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  Vector<double> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  Vector<double> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  Vector<double> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  Vector<double> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  Vector<float> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  Vector<float> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  Vector<float> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  Vector<float> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  BlockVector<double> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  BlockVector<double> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  BlockVector<double> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  BlockVector<double> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  BlockVector<float> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  BlockVector<float> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  BlockVector<float> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  BlockVector<float> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
#if  2  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 2 ,  3 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  2 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  Vector<double> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  Vector<double> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  Vector<double> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  Vector<double> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  Vector<float> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  Vector<float> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  Vector<float> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  Vector<float> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  BlockVector<double> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  BlockVector<double> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  BlockVector<double> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  BlockVector<double> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  BlockVector<float> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  BlockVector<float> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  BlockVector<float> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  BlockVector<float> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
#if  3  <=  1 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  1 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  Vector<double> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  Vector<double> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  Vector<double> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  Vector<double> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  Vector<float> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  Vector<float> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  Vector<float> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  Vector<float> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  BlockVector<double> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  BlockVector<double> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  BlockVector<double> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  BlockVector<double> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  BlockVector<float> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  BlockVector<float> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  BlockVector<float> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  BlockVector<float> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
#if  3  <=  2 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  2 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  Vector<double> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  Vector<double> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  Vector<double> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  Vector<double> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  Vector<float> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  Vector<float> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  Vector<float> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  Vector<float> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  BlockVector<double> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  BlockVector<double> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  BlockVector<double> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  BlockVector<double> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  BlockVector<float> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  BlockVector<float> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  BlockVector<float> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  BlockVector<float> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::Vector<double> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::Vector<double> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::Vector<double> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::Vector<double> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::Vector<float> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::Vector<float> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::Vector<float> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::Vector<float> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::Vector<double> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::Vector<float> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::BlockVector<double> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
#if  3  <=  3 
 template void SmoothnessEstimator::Legendre::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void
 SmoothnessEstimator::Legendre::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Legendre< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);

 template void SmoothnessEstimator::Fourier::
 coefficient_decay< 3 ,  3 ,  LinearAlgebra::distributed::BlockVector<float> >(
 FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const VectorTools::NormType,
 const double,
 const bool);
 template void SmoothnessEstimator::Fourier::coefficient_decay_per_direction<
  3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> >(FESeries::Fourier< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 Vector<float> &,
 const ComponentMask &,
 const double,
 const bool);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
#if  1  <=  1 
 template FESeries::Legendre< 1 ,  1 >
 SmoothnessEstimator::Legendre::default_fe_series< 1 ,
  1 >(
 const hp::FECollection< 1 ,  1 > &,
 const unsigned int);

 template FESeries::Fourier< 1 ,  1 >
 SmoothnessEstimator::Fourier::default_fe_series< 1 ,
  1 >(
 const hp::FECollection< 1 ,  1 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
#if  1  <=  2 
 template FESeries::Legendre< 1 ,  2 >
 SmoothnessEstimator::Legendre::default_fe_series< 1 ,
  2 >(
 const hp::FECollection< 1 ,  2 > &,
 const unsigned int);

 template FESeries::Fourier< 1 ,  2 >
 SmoothnessEstimator::Fourier::default_fe_series< 1 ,
  2 >(
 const hp::FECollection< 1 ,  2 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
#if  1  <=  3 
 template FESeries::Legendre< 1 ,  3 >
 SmoothnessEstimator::Legendre::default_fe_series< 1 ,
  3 >(
 const hp::FECollection< 1 ,  3 > &,
 const unsigned int);

 template FESeries::Fourier< 1 ,  3 >
 SmoothnessEstimator::Fourier::default_fe_series< 1 ,
  3 >(
 const hp::FECollection< 1 ,  3 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
#if  2  <=  1 
 template FESeries::Legendre< 2 ,  1 >
 SmoothnessEstimator::Legendre::default_fe_series< 2 ,
  1 >(
 const hp::FECollection< 2 ,  1 > &,
 const unsigned int);

 template FESeries::Fourier< 2 ,  1 >
 SmoothnessEstimator::Fourier::default_fe_series< 2 ,
  1 >(
 const hp::FECollection< 2 ,  1 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
#if  2  <=  2 
 template FESeries::Legendre< 2 ,  2 >
 SmoothnessEstimator::Legendre::default_fe_series< 2 ,
  2 >(
 const hp::FECollection< 2 ,  2 > &,
 const unsigned int);

 template FESeries::Fourier< 2 ,  2 >
 SmoothnessEstimator::Fourier::default_fe_series< 2 ,
  2 >(
 const hp::FECollection< 2 ,  2 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
#if  2  <=  3 
 template FESeries::Legendre< 2 ,  3 >
 SmoothnessEstimator::Legendre::default_fe_series< 2 ,
  3 >(
 const hp::FECollection< 2 ,  3 > &,
 const unsigned int);

 template FESeries::Fourier< 2 ,  3 >
 SmoothnessEstimator::Fourier::default_fe_series< 2 ,
  3 >(
 const hp::FECollection< 2 ,  3 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
#if  3  <=  1 
 template FESeries::Legendre< 3 ,  1 >
 SmoothnessEstimator::Legendre::default_fe_series< 3 ,
  1 >(
 const hp::FECollection< 3 ,  1 > &,
 const unsigned int);

 template FESeries::Fourier< 3 ,  1 >
 SmoothnessEstimator::Fourier::default_fe_series< 3 ,
  1 >(
 const hp::FECollection< 3 ,  1 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
#if  3  <=  2 
 template FESeries::Legendre< 3 ,  2 >
 SmoothnessEstimator::Legendre::default_fe_series< 3 ,
  2 >(
 const hp::FECollection< 3 ,  2 > &,
 const unsigned int);

 template FESeries::Fourier< 3 ,  2 >
 SmoothnessEstimator::Fourier::default_fe_series< 3 ,
  2 >(
 const hp::FECollection< 3 ,  2 > &,
 const unsigned int);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
#if  3  <=  3 
 template FESeries::Legendre< 3 ,  3 >
 SmoothnessEstimator::Legendre::default_fe_series< 3 ,
  3 >(
 const hp::FECollection< 3 ,  3 > &,
 const unsigned int);

 template FESeries::Fourier< 3 ,  3 >
 SmoothnessEstimator::Fourier::default_fe_series< 3 ,
  3 >(
 const hp::FECollection< 3 ,  3 > &,
 const unsigned int);
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
