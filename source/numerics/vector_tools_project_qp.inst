// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace VectorTools
 {

 template void
 project< 1 ,  Vector<double> ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const Quadrature< 1 > &,
 const std::function< Vector<double> ::value_type(
 const DoFHandler< 1 ,
  1 >::active_cell_iterator &,
 const unsigned int)> &,
  Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace VectorTools
 {

 template void
 project< 2 ,  Vector<double> ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const Quadrature< 2 > &,
 const std::function< Vector<double> ::value_type(
 const DoFHandler< 2 ,
  2 >::active_cell_iterator &,
 const unsigned int)> &,
  Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace VectorTools
 {

 template void
 project< 3 ,  Vector<double> ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const Quadrature< 3 > &,
 const std::function< Vector<double> ::value_type(
 const DoFHandler< 3 ,
  3 >::active_cell_iterator &,
 const unsigned int)> &,
  Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace VectorTools
 {

 template void
 project< 1 ,  Vector<float> ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const Quadrature< 1 > &,
 const std::function< Vector<float> ::value_type(
 const DoFHandler< 1 ,
  1 >::active_cell_iterator &,
 const unsigned int)> &,
  Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace VectorTools
 {

 template void
 project< 2 ,  Vector<float> ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const Quadrature< 2 > &,
 const std::function< Vector<float> ::value_type(
 const DoFHandler< 2 ,
  2 >::active_cell_iterator &,
 const unsigned int)> &,
  Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace VectorTools
 {

 template void
 project< 3 ,  Vector<float> ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const Quadrature< 3 > &,
 const std::function< Vector<float> ::value_type(
 const DoFHandler< 3 ,
  3 >::active_cell_iterator &,
 const unsigned int)> &,
  Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace VectorTools
 {

 template void
 project< 1 ,  LinearAlgebra::Vector<double> ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const Quadrature< 1 > &,
 const std::function< LinearAlgebra::Vector<double> ::value_type(
 const DoFHandler< 1 ,
  1 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace VectorTools
 {

 template void
 project< 2 ,  LinearAlgebra::Vector<double> ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const Quadrature< 2 > &,
 const std::function< LinearAlgebra::Vector<double> ::value_type(
 const DoFHandler< 2 ,
  2 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace VectorTools
 {

 template void
 project< 3 ,  LinearAlgebra::Vector<double> ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const Quadrature< 3 > &,
 const std::function< LinearAlgebra::Vector<double> ::value_type(
 const DoFHandler< 3 ,
  3 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace VectorTools
 {

 template void
 project< 1 ,  LinearAlgebra::Vector<float> ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const Quadrature< 1 > &,
 const std::function< LinearAlgebra::Vector<float> ::value_type(
 const DoFHandler< 1 ,
  1 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace VectorTools
 {

 template void
 project< 2 ,  LinearAlgebra::Vector<float> ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const Quadrature< 2 > &,
 const std::function< LinearAlgebra::Vector<float> ::value_type(
 const DoFHandler< 2 ,
  2 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace VectorTools
 {

 template void
 project< 3 ,  LinearAlgebra::Vector<float> ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const Quadrature< 3 > &,
 const std::function< LinearAlgebra::Vector<float> ::value_type(
 const DoFHandler< 3 ,
  3 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace VectorTools
 {

 template void
 project< 1 ,  LinearAlgebra::distributed::Vector<double> ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const Quadrature< 1 > &,
 const std::function< LinearAlgebra::distributed::Vector<double> ::value_type(
 const DoFHandler< 1 ,
  1 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::distributed::Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace VectorTools
 {

 template void
 project< 2 ,  LinearAlgebra::distributed::Vector<double> ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const Quadrature< 2 > &,
 const std::function< LinearAlgebra::distributed::Vector<double> ::value_type(
 const DoFHandler< 2 ,
  2 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::distributed::Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace VectorTools
 {

 template void
 project< 3 ,  LinearAlgebra::distributed::Vector<double> ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const Quadrature< 3 > &,
 const std::function< LinearAlgebra::distributed::Vector<double> ::value_type(
 const DoFHandler< 3 ,
  3 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::distributed::Vector<double>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace VectorTools
 {

 template void
 project< 1 ,  LinearAlgebra::distributed::Vector<float> ,  1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const Quadrature< 1 > &,
 const std::function< LinearAlgebra::distributed::Vector<float> ::value_type(
 const DoFHandler< 1 ,
  1 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::distributed::Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace VectorTools
 {

 template void
 project< 2 ,  LinearAlgebra::distributed::Vector<float> ,  2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const Quadrature< 2 > &,
 const std::function< LinearAlgebra::distributed::Vector<float> ::value_type(
 const DoFHandler< 2 ,
  2 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::distributed::Vector<float>  &);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace VectorTools
 {

 template void
 project< 3 ,  LinearAlgebra::distributed::Vector<float> ,  3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const Quadrature< 3 > &,
 const std::function< LinearAlgebra::distributed::Vector<float> ::value_type(
 const DoFHandler< 3 ,
  3 >::active_cell_iterator &,
 const unsigned int)> &,
  LinearAlgebra::distributed::Vector<float>  &);

 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
