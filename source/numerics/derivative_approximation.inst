// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<double> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<double> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<double> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<double> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<double> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<double> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<float> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<float> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<float> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<float> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<float> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  Vector<float> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<double> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<double> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<double> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<double> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<double> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<double> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<float> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<float> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<float> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<float> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<float> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  BlockVector<float> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<double> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<double> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<double> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<double> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<double> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<double> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<float> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<float> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<float> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<float> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<float> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::Vector<float> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<double> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::Vector<float> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 1 >(
 const DoFHandler< 1 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 1>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 2>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 3>(
 const Mapping< 1 > & mapping,
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 1>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<1,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 2>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<2,  1 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 1 ,
  1 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 3>(
 const DoFHandler< 1 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 1 >::active_cell_iterator &cell,
 Tensor<3,  1 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<double> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<double> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<double> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<double> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<double> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<double> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<float> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<float> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<float> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<float> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<float> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  Vector<float> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<double> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<double> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<double> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<double> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<double> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<double> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<float> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<float> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<float> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<float> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<float> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  BlockVector<float> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<double> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<double> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<double> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<double> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<double> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<double> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<float> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<float> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<float> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<float> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<float> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::Vector<float> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<double> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::Vector<float> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 2 >(
 const DoFHandler< 2 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 1>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 2>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 3>(
 const Mapping< 2 > & mapping,
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 1>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<1,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 2>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<2,  2 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 2 ,
  2 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 3>(
 const DoFHandler< 2 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 2 >::active_cell_iterator &cell,
 Tensor<3,  2 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<double> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<double> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<double> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<double> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<double> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<double> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<float> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<float> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<float> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<float> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<float> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  Vector<float> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<double> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<double> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<double> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<double> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<double> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<double> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<float> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<float> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<float> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<float> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<float> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  BlockVector<float> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<double> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<double> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<double> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<double> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<double> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<double> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<float> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<float> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<float> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<float> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<float> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::Vector<float> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<double> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::Vector<float> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::Vector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<double> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<double>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
namespace DerivativeApproximation
 {
 template void
 approximate_gradient< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_gradient< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_second_derivative< 3 >(
 const DoFHandler< 3 > &dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 Vector<float> & derivative_norm,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 1>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 2>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 3>(
 const Mapping< 3 > & mapping,
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);


 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 1>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<1,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 2>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<2,  3 > & derivative,
 const unsigned int component);

 template void
 approximate_derivative_tensor< 3 ,
  3 ,
  LinearAlgebra::distributed::BlockVector<float> ,
 3>(
 const DoFHandler< 3 > & dof_handler,
 const  LinearAlgebra::distributed::BlockVector<float>  & solution,
 const DoFHandler< 3 >::active_cell_iterator &cell,
 Tensor<3,  3 > & derivative,
 const unsigned int component);

 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
namespace DerivativeApproximation
 {
 template double
 derivative_norm(const Tensor<1,  1 > &derivative);

 template double
 derivative_norm(const Tensor<2,  1 > &derivative);

 template double
 derivative_norm(const Tensor<3,  1 > &derivative);
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
namespace DerivativeApproximation
 {
 template double
 derivative_norm(const Tensor<1,  2 > &derivative);

 template double
 derivative_norm(const Tensor<2,  2 > &derivative);

 template double
 derivative_norm(const Tensor<3,  2 > &derivative);
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
namespace DerivativeApproximation
 {
 template double
 derivative_norm(const Tensor<1,  3 > &derivative);

 template double
 derivative_norm(const Tensor<2,  3 > &derivative);

 template double
 derivative_norm(const Tensor<3,  3 > &derivative);
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
