// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  BlockVector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  BlockVector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  BlockVector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  BlockVector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  BlockVector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  BlockVector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::Vector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::Vector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::BlockVector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::BlockVector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::BlockVector<double> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::BlockVector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::BlockVector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::BlockVector<float> >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  BlockVector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  BlockVector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  BlockVector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  BlockVector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  BlockVector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  BlockVector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
namespace Functions
 {
 template class FEFieldFunction< 1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
namespace Functions
 {
 template class FEFieldFunction< 2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > >;
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
namespace Functions
 {
 template class FEFieldFunction< 3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > >;
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
