// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  < 3
 template class DataOutStack< 1 ,  1 >;

 template void
 DataOutStack< 1 ,  1 >::add_data_vector<double>(
 const Vector<double> &, const std::string &);
 template void
 DataOutStack< 1 ,  1 >::add_data_vector<float>(
 const Vector<float> &, const std::string &);

 template void
 DataOutStack< 1 ,  1 >::add_data_vector<double>(
 const Vector<double> &, const std::vector<std::string> &);
 template void
 DataOutStack< 1 ,  1 >::add_data_vector<float>(
 const Vector<float> &, const std::vector<std::string> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  2  < 3
 template class DataOutStack< 2 ,  2 >;

 template void
 DataOutStack< 2 ,  2 >::add_data_vector<double>(
 const Vector<double> &, const std::string &);
 template void
 DataOutStack< 2 ,  2 >::add_data_vector<float>(
 const Vector<float> &, const std::string &);

 template void
 DataOutStack< 2 ,  2 >::add_data_vector<double>(
 const Vector<double> &, const std::vector<std::string> &);
 template void
 DataOutStack< 2 ,  2 >::add_data_vector<float>(
 const Vector<float> &, const std::vector<std::string> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  3  < 3
 template class DataOutStack< 3 ,  3 >;

 template void
 DataOutStack< 3 ,  3 >::add_data_vector<double>(
 const Vector<double> &, const std::string &);
 template void
 DataOutStack< 3 ,  3 >::add_data_vector<float>(
 const Vector<float> &, const std::string &);

 template void
 DataOutStack< 3 ,  3 >::add_data_vector<double>(
 const Vector<double> &, const std::vector<std::string> &);
 template void
 DataOutStack< 3 ,  3 >::add_data_vector<float>(
 const Vector<float> &, const std::vector<std::string> &);
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
