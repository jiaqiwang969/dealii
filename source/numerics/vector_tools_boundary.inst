// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  1  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  1  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  1  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  1  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  1  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  1  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  2  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  2  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  2  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  2  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  2  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  2  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  2  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  2  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  2  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  2  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  2  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  2  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
#if  3  <=  1 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
#if  3  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
#if  3  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
#if  3  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
#if  3  <=  2 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
#if  3  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 std::map<types::global_dof_index,  double > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
#if  3  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 std::map<types::global_dof_index,  float > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
#if  3  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
#if  3  <=  3 
 namespace VectorTools
 {
 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 const ComponentMask &);
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const types::boundary_id,
 const Function< 1 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const types::boundary_id,
 const Function< 2 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  double > &,
 AffineConstraints< double > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 AffineConstraints< double > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  float > &,
 AffineConstraints< float > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 AffineConstraints< float > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<double> > &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 AffineConstraints< std::complex<double> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const types::boundary_id,
 const Function< 3 ,  std::complex<float> > &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 template void
 interpolate_boundary_values(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 AffineConstraints< std::complex<float> > &,
 const ComponentMask &);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
#if  1  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  1 > &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  1 >
 &,
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
#if  1  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  2 > &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  2 >
 &,
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
#if  1  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 1 >(
 const Mapping< 1 ,  3 > &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const hp::MappingCollection< 1 ,  3 >
 &,
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const hp::QCollection< 1  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
#if  2  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  1 > &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  1 >
 &,
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
#if  2  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  2 > &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  2 >
 &,
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
#if  2  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 2 >(
 const Mapping< 2 ,  3 > &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const hp::MappingCollection< 2 ,  3 >
 &,
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const hp::QCollection< 2  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
#if  3  <=  1 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  1 > &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  1 >
 &,
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
#if  3  <=  2 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  2 > &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  2 >
 &,
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  double > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  float > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<double> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
#if  3  <=  3 
 namespace VectorTools
 {

 template void
 project_boundary_values< 3 >(
 const Mapping< 3 ,  3 > &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const hp::MappingCollection< 3 ,  3 >
 &,
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const hp::QCollection< 3  - 1> &,
 std::map<types::global_dof_index,  std::complex<float> > &,
 std::vector<unsigned int>);

 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
namespace VectorTools
 {
#if  1  ==  1 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
namespace VectorTools
 {
#if  1  ==  1 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
namespace VectorTools
 {
#if  1  ==  1 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
namespace VectorTools
 {
#if  1  ==  1 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
namespace VectorTools
 {
#if  1  ==  2 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
namespace VectorTools
 {
#if  1  ==  2 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
namespace VectorTools
 {
#if  1  ==  2 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
namespace VectorTools
 {
#if  1  ==  2 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
namespace VectorTools
 {
#if  1  ==  3 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  double > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
namespace VectorTools
 {
#if  1  ==  3 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  float > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
namespace VectorTools
 {
#if  1  ==  3 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<double> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
namespace VectorTools
 {
#if  1  ==  3 


 template void
 project_boundary_values< 1 >(
 const Mapping< 1 > &,
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 1 >(
 const DoFHandler< 1 > &,
 const std::map<types::boundary_id,
 const Function< 1 ,  std::complex<float> > *> &,
 const Quadrature< 1  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
namespace VectorTools
 {
#if  2  ==  1 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
namespace VectorTools
 {
#if  2  ==  1 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
namespace VectorTools
 {
#if  2  ==  1 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
namespace VectorTools
 {
#if  2  ==  1 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
namespace VectorTools
 {
#if  2  ==  2 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
namespace VectorTools
 {
#if  2  ==  2 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
namespace VectorTools
 {
#if  2  ==  2 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
namespace VectorTools
 {
#if  2  ==  2 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
namespace VectorTools
 {
#if  2  ==  3 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  double > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
namespace VectorTools
 {
#if  2  ==  3 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  float > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
namespace VectorTools
 {
#if  2  ==  3 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<double> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
namespace VectorTools
 {
#if  2  ==  3 


 template void
 project_boundary_values< 2 >(
 const Mapping< 2 > &,
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 2 >(
 const DoFHandler< 2 > &,
 const std::map<types::boundary_id,
 const Function< 2 ,  std::complex<float> > *> &,
 const Quadrature< 2  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(132))
namespace VectorTools
 {
#if  3  ==  1 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(133))
namespace VectorTools
 {
#if  3  ==  1 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(134))
namespace VectorTools
 {
#if  3  ==  1 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(135))
namespace VectorTools
 {
#if  3  ==  1 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(136))
namespace VectorTools
 {
#if  3  ==  2 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(137))
namespace VectorTools
 {
#if  3  ==  2 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(138))
namespace VectorTools
 {
#if  3  ==  2 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(139))
namespace VectorTools
 {
#if  3  ==  2 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(140))
namespace VectorTools
 {
#if  3  ==  3 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  double > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< double > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(141))
namespace VectorTools
 {
#if  3  ==  3 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  float > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< float > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(142))
namespace VectorTools
 {
#if  3  ==  3 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<double> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<double> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(143))
namespace VectorTools
 {
#if  3  ==  3 


 template void
 project_boundary_values< 3 >(
 const Mapping< 3 > &,
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);

 template void
 project_boundary_values< 3 >(
 const DoFHandler< 3 > &,
 const std::map<types::boundary_id,
 const Function< 3 ,  std::complex<float> > *> &,
 const Quadrature< 3  - 1> &,
 AffineConstraints< std::complex<float> > &,
 std::vector<unsigned int>);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(144))
namespace VectorTools
 {
#if  1  ==  1 

# if  1  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 1 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 1 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 1 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 1 > &);
# endif
 template void
 project_boundary_values_div_conforming< 1 >(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 1 > &);
 template void
 project_boundary_values_div_conforming< 1 >(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 1 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(145))
namespace VectorTools
 {
#if  1  ==  2 

# if  1  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 1 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 1 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 1 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 1 > &);
# endif
 template void
 project_boundary_values_div_conforming< 1 >(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 1 > &);
 template void
 project_boundary_values_div_conforming< 1 >(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 1 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(146))
namespace VectorTools
 {
#if  1  ==  3 

# if  1  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 1 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 1 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 1 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 1 > &);
# endif
 template void
 project_boundary_values_div_conforming< 1 >(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 1 > &);
 template void
 project_boundary_values_div_conforming< 1 >(
 const DoFHandler< 1 > &,
 const unsigned int,
 const Function< 1 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 1 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(147))
namespace VectorTools
 {
#if  2  ==  1 

# if  2  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 2 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 2 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 2 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 2 > &);
# endif
 template void
 project_boundary_values_div_conforming< 2 >(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 2 > &);
 template void
 project_boundary_values_div_conforming< 2 >(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 2 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(148))
namespace VectorTools
 {
#if  2  ==  2 

# if  2  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 2 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 2 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 2 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 2 > &);
# endif
 template void
 project_boundary_values_div_conforming< 2 >(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 2 > &);
 template void
 project_boundary_values_div_conforming< 2 >(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 2 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(149))
namespace VectorTools
 {
#if  2  ==  3 

# if  2  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 2 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 2 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 2 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 2 > &);
# endif
 template void
 project_boundary_values_div_conforming< 2 >(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 2 > &);
 template void
 project_boundary_values_div_conforming< 2 >(
 const DoFHandler< 2 > &,
 const unsigned int,
 const Function< 2 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 2 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(150))
namespace VectorTools
 {
#if  3  ==  1 

# if  3  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 3 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 3 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 3 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 3 > &);
# endif
 template void
 project_boundary_values_div_conforming< 3 >(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 3 > &);
 template void
 project_boundary_values_div_conforming< 3 >(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 3 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(151))
namespace VectorTools
 {
#if  3  ==  2 

# if  3  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 3 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 3 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 3 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 3 > &);
# endif
 template void
 project_boundary_values_div_conforming< 3 >(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 3 > &);
 template void
 project_boundary_values_div_conforming< 3 >(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 3 > &);
# endif
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(152))
namespace VectorTools
 {
#if  3  ==  3 

# if  3  != 1
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 3 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const Mapping< 3 > &);
# endif
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , double> &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 3 > &);
# ifdef DEAL_II_WITH_COMPLEX_VALUES
 template void
 project_boundary_values_curl_conforming_l2(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 , std::complex<double>> &,
 const types::boundary_id,
 AffineConstraints<std::complex<double>> &,
 const hp::MappingCollection< 3 > &);
# endif
 template void
 project_boundary_values_div_conforming< 3 >(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const Mapping< 3 > &);
 template void
 project_boundary_values_div_conforming< 3 >(
 const DoFHandler< 3 > &,
 const unsigned int,
 const Function< 3 > &,
 const types::boundary_id,
 AffineConstraints<double> &,
 const hp::MappingCollection< 3 > &);
# endif
#endif
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
