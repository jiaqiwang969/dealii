// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  > 1
 DEAL_II_NAMESPACE_OPEN
 namespace ArborXWrappers
 {
 template PointIntersectPredicate::PointIntersectPredicate(
 const std::vector<dealii::Point< 1 ,  double >> &points);
 template PointNearestPredicate::PointNearestPredicate(
 const std::vector<dealii::Point< 1 ,  double >> &points,
 const unsigned int n_nearest_neighbors);

 template BoundingBoxIntersectPredicate::BoundingBoxIntersectPredicate(
 const std::vector<dealii::BoundingBox< 1 ,  double >> &bb);
 template BoundingBoxNearestPredicate::BoundingBoxNearestPredicate(
 const std::vector<dealii::BoundingBox< 1 ,  double >> &bb,
 const unsigned int n_nearest_neighbors);
 }
 DEAL_II_NAMESPACE_CLOSE

 namespace ArborX
 {
 template struct AccessTraits<std::vector<dealii::Point< 1 ,  double >>,
 PrimitivesTag>;
 template struct AccessTraits<
 std::vector<dealii::BoundingBox< 1 ,  double >>,
 PrimitivesTag>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  > 1
 DEAL_II_NAMESPACE_OPEN
 namespace ArborXWrappers
 {
 template PointIntersectPredicate::PointIntersectPredicate(
 const std::vector<dealii::Point< 1 ,  float >> &points);
 template PointNearestPredicate::PointNearestPredicate(
 const std::vector<dealii::Point< 1 ,  float >> &points,
 const unsigned int n_nearest_neighbors);

 template BoundingBoxIntersectPredicate::BoundingBoxIntersectPredicate(
 const std::vector<dealii::BoundingBox< 1 ,  float >> &bb);
 template BoundingBoxNearestPredicate::BoundingBoxNearestPredicate(
 const std::vector<dealii::BoundingBox< 1 ,  float >> &bb,
 const unsigned int n_nearest_neighbors);
 }
 DEAL_II_NAMESPACE_CLOSE

 namespace ArborX
 {
 template struct AccessTraits<std::vector<dealii::Point< 1 ,  float >>,
 PrimitivesTag>;
 template struct AccessTraits<
 std::vector<dealii::BoundingBox< 1 ,  float >>,
 PrimitivesTag>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  2  > 1
 DEAL_II_NAMESPACE_OPEN
 namespace ArborXWrappers
 {
 template PointIntersectPredicate::PointIntersectPredicate(
 const std::vector<dealii::Point< 2 ,  double >> &points);
 template PointNearestPredicate::PointNearestPredicate(
 const std::vector<dealii::Point< 2 ,  double >> &points,
 const unsigned int n_nearest_neighbors);

 template BoundingBoxIntersectPredicate::BoundingBoxIntersectPredicate(
 const std::vector<dealii::BoundingBox< 2 ,  double >> &bb);
 template BoundingBoxNearestPredicate::BoundingBoxNearestPredicate(
 const std::vector<dealii::BoundingBox< 2 ,  double >> &bb,
 const unsigned int n_nearest_neighbors);
 }
 DEAL_II_NAMESPACE_CLOSE

 namespace ArborX
 {
 template struct AccessTraits<std::vector<dealii::Point< 2 ,  double >>,
 PrimitivesTag>;
 template struct AccessTraits<
 std::vector<dealii::BoundingBox< 2 ,  double >>,
 PrimitivesTag>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  > 1
 DEAL_II_NAMESPACE_OPEN
 namespace ArborXWrappers
 {
 template PointIntersectPredicate::PointIntersectPredicate(
 const std::vector<dealii::Point< 2 ,  float >> &points);
 template PointNearestPredicate::PointNearestPredicate(
 const std::vector<dealii::Point< 2 ,  float >> &points,
 const unsigned int n_nearest_neighbors);

 template BoundingBoxIntersectPredicate::BoundingBoxIntersectPredicate(
 const std::vector<dealii::BoundingBox< 2 ,  float >> &bb);
 template BoundingBoxNearestPredicate::BoundingBoxNearestPredicate(
 const std::vector<dealii::BoundingBox< 2 ,  float >> &bb,
 const unsigned int n_nearest_neighbors);
 }
 DEAL_II_NAMESPACE_CLOSE

 namespace ArborX
 {
 template struct AccessTraits<std::vector<dealii::Point< 2 ,  float >>,
 PrimitivesTag>;
 template struct AccessTraits<
 std::vector<dealii::BoundingBox< 2 ,  float >>,
 PrimitivesTag>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  3  > 1
 DEAL_II_NAMESPACE_OPEN
 namespace ArborXWrappers
 {
 template PointIntersectPredicate::PointIntersectPredicate(
 const std::vector<dealii::Point< 3 ,  double >> &points);
 template PointNearestPredicate::PointNearestPredicate(
 const std::vector<dealii::Point< 3 ,  double >> &points,
 const unsigned int n_nearest_neighbors);

 template BoundingBoxIntersectPredicate::BoundingBoxIntersectPredicate(
 const std::vector<dealii::BoundingBox< 3 ,  double >> &bb);
 template BoundingBoxNearestPredicate::BoundingBoxNearestPredicate(
 const std::vector<dealii::BoundingBox< 3 ,  double >> &bb,
 const unsigned int n_nearest_neighbors);
 }
 DEAL_II_NAMESPACE_CLOSE

 namespace ArborX
 {
 template struct AccessTraits<std::vector<dealii::Point< 3 ,  double >>,
 PrimitivesTag>;
 template struct AccessTraits<
 std::vector<dealii::BoundingBox< 3 ,  double >>,
 PrimitivesTag>;
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  3  > 1
 DEAL_II_NAMESPACE_OPEN
 namespace ArborXWrappers
 {
 template PointIntersectPredicate::PointIntersectPredicate(
 const std::vector<dealii::Point< 3 ,  float >> &points);
 template PointNearestPredicate::PointNearestPredicate(
 const std::vector<dealii::Point< 3 ,  float >> &points,
 const unsigned int n_nearest_neighbors);

 template BoundingBoxIntersectPredicate::BoundingBoxIntersectPredicate(
 const std::vector<dealii::BoundingBox< 3 ,  float >> &bb);
 template BoundingBoxNearestPredicate::BoundingBoxNearestPredicate(
 const std::vector<dealii::BoundingBox< 3 ,  float >> &bb,
 const unsigned int n_nearest_neighbors);
 }
 DEAL_II_NAMESPACE_CLOSE

 namespace ArborX
 {
 template struct AccessTraits<std::vector<dealii::Point< 3 ,  float >>,
 PrimitivesTag>;
 template struct AccessTraits<
 std::vector<dealii::BoundingBox< 3 ,  float >>,
 PrimitivesTag>;
 }
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
