// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  Vector<double>  &, Vector< Vector<double> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  Vector<float>  &, Vector< Vector<float> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  BlockVector<double>  &, Vector< BlockVector<double> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  BlockVector<float>  &, Vector< BlockVector<float> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::Vector<double>  &, Vector< LinearAlgebra::Vector<double> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::Vector<float>  &, Vector< LinearAlgebra::Vector<float> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::Vector<double>  &, Vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::Vector<float>  &, Vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::BlockVector<double>  &, Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::BlockVector<float>  &, Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  Vector<std::complex<double> >  &, Vector< Vector<std::complex<double> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  Vector<std::complex<float> >  &, Vector< Vector<std::complex<float> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  BlockVector<std::complex<double> >  &, Vector< BlockVector<std::complex<double> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  BlockVector<std::complex<float> >  &, Vector< BlockVector<std::complex<float> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::Vector<std::complex<double> >  &, Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::Vector<std::complex<float> >  &, Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
template <int dim, int spacedim>
 void
 FEValuesBase<dim, spacedim>::TriaCellIterator::get_interpolated_dof_values(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const
 { 
 Assert(false, ExcMessage(message_string));
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
