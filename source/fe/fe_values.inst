// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 template class FEValuesBase< 1 ,  1 >;
 template class FEValues< 1 ,  1 >;
 template class FEValuesBase< 1 ,  1 >::
 CellIterator<
 DoFHandler< 1 ,  1 >::cell_iterator>;

 template class FEFaceValuesBase< 1 ,  1 >;
 template class FEFaceValues< 1 ,  1 >;
 template class FESubfaceValues< 1 ,  1 >;


 namespace FEValuesViews
 {
 template class Scalar< 1 ,  1 >;
 template class Vector< 1 ,  1 >;
 template class SymmetricTensor<2,
  1 ,
  1 >;
 template class Tensor<2,  1 ,  1 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 1 ,
  1 >;
 template class FiniteElementRelatedData< 1 ,
  1 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 template class FEValuesBase< 1 ,  2 >;
 template class FEValues< 1 ,  2 >;
 template class FEValuesBase< 1 ,  2 >::
 CellIterator<
 DoFHandler< 1 ,  2 >::cell_iterator>;

 template class FEFaceValuesBase< 1 ,  2 >;
 template class FEFaceValues< 1 ,  2 >;
 template class FESubfaceValues< 1 ,  2 >;


 namespace FEValuesViews
 {
 template class Scalar< 1 ,  2 >;
 template class Vector< 1 ,  2 >;
 template class SymmetricTensor<2,
  1 ,
  2 >;
 template class Tensor<2,  1 ,  2 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 1 ,
  2 >;
 template class FiniteElementRelatedData< 1 ,
  2 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 template class FEValuesBase< 1 ,  3 >;
 template class FEValues< 1 ,  3 >;
 template class FEValuesBase< 1 ,  3 >::
 CellIterator<
 DoFHandler< 1 ,  3 >::cell_iterator>;

 template class FEFaceValuesBase< 1 ,  3 >;
 template class FEFaceValues< 1 ,  3 >;
 template class FESubfaceValues< 1 ,  3 >;


 namespace FEValuesViews
 {
 template class Scalar< 1 ,  3 >;
 template class Vector< 1 ,  3 >;
 template class SymmetricTensor<2,
  1 ,
  3 >;
 template class Tensor<2,  1 ,  3 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 1 ,
  3 >;
 template class FiniteElementRelatedData< 1 ,
  3 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 template class FEValuesBase< 2 ,  1 >;
 template class FEValues< 2 ,  1 >;
 template class FEValuesBase< 2 ,  1 >::
 CellIterator<
 DoFHandler< 2 ,  1 >::cell_iterator>;

 template class FEFaceValuesBase< 2 ,  1 >;
 template class FEFaceValues< 2 ,  1 >;
 template class FESubfaceValues< 2 ,  1 >;


 namespace FEValuesViews
 {
 template class Scalar< 2 ,  1 >;
 template class Vector< 2 ,  1 >;
 template class SymmetricTensor<2,
  2 ,
  1 >;
 template class Tensor<2,  2 ,  1 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 2 ,
  1 >;
 template class FiniteElementRelatedData< 2 ,
  1 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 template class FEValuesBase< 2 ,  2 >;
 template class FEValues< 2 ,  2 >;
 template class FEValuesBase< 2 ,  2 >::
 CellIterator<
 DoFHandler< 2 ,  2 >::cell_iterator>;

 template class FEFaceValuesBase< 2 ,  2 >;
 template class FEFaceValues< 2 ,  2 >;
 template class FESubfaceValues< 2 ,  2 >;


 namespace FEValuesViews
 {
 template class Scalar< 2 ,  2 >;
 template class Vector< 2 ,  2 >;
 template class SymmetricTensor<2,
  2 ,
  2 >;
 template class Tensor<2,  2 ,  2 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 2 ,
  2 >;
 template class FiniteElementRelatedData< 2 ,
  2 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 template class FEValuesBase< 2 ,  3 >;
 template class FEValues< 2 ,  3 >;
 template class FEValuesBase< 2 ,  3 >::
 CellIterator<
 DoFHandler< 2 ,  3 >::cell_iterator>;

 template class FEFaceValuesBase< 2 ,  3 >;
 template class FEFaceValues< 2 ,  3 >;
 template class FESubfaceValues< 2 ,  3 >;


 namespace FEValuesViews
 {
 template class Scalar< 2 ,  3 >;
 template class Vector< 2 ,  3 >;
 template class SymmetricTensor<2,
  2 ,
  3 >;
 template class Tensor<2,  2 ,  3 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 2 ,
  3 >;
 template class FiniteElementRelatedData< 2 ,
  3 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 template class FEValuesBase< 3 ,  1 >;
 template class FEValues< 3 ,  1 >;
 template class FEValuesBase< 3 ,  1 >::
 CellIterator<
 DoFHandler< 3 ,  1 >::cell_iterator>;

 template class FEFaceValuesBase< 3 ,  1 >;
 template class FEFaceValues< 3 ,  1 >;
 template class FESubfaceValues< 3 ,  1 >;


 namespace FEValuesViews
 {
 template class Scalar< 3 ,  1 >;
 template class Vector< 3 ,  1 >;
 template class SymmetricTensor<2,
  3 ,
  1 >;
 template class Tensor<2,  3 ,  1 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 3 ,
  1 >;
 template class FiniteElementRelatedData< 3 ,
  1 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 template class FEValuesBase< 3 ,  2 >;
 template class FEValues< 3 ,  2 >;
 template class FEValuesBase< 3 ,  2 >::
 CellIterator<
 DoFHandler< 3 ,  2 >::cell_iterator>;

 template class FEFaceValuesBase< 3 ,  2 >;
 template class FEFaceValues< 3 ,  2 >;
 template class FESubfaceValues< 3 ,  2 >;


 namespace FEValuesViews
 {
 template class Scalar< 3 ,  2 >;
 template class Vector< 3 ,  2 >;
 template class SymmetricTensor<2,
  3 ,
  2 >;
 template class Tensor<2,  3 ,  2 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 3 ,
  2 >;
 template class FiniteElementRelatedData< 3 ,
  2 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 template class FEValuesBase< 3 ,  3 >;
 template class FEValues< 3 ,  3 >;
 template class FEValuesBase< 3 ,  3 >::
 CellIterator<
 DoFHandler< 3 ,  3 >::cell_iterator>;

 template class FEFaceValuesBase< 3 ,  3 >;
 template class FEFaceValues< 3 ,  3 >;
 template class FESubfaceValues< 3 ,  3 >;


 namespace FEValuesViews
 {
 template class Scalar< 3 ,  3 >;
 template class Vector< 3 ,  3 >;
 template class SymmetricTensor<2,
  3 ,
  3 >;
 template class Tensor<2,  3 ,  3 >;
 }

 namespace internal
 {
 namespace FEValuesImplementation
 {
 template class MappingRelatedData< 3 ,
  3 >;
 template class FiniteElementRelatedData< 3 ,
  3 >;
 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
#if  1  <=  1 
 template void FEValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
#if  1  <=  1 
 template void FEValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &);
 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  1 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
#if  1  <=  2 
 template void FEValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
#if  1  <=  2 
 template void FEValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &);
 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  2 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
#if  1  <=  3 
 template void FEValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
#if  1  <=  3 
 template void FEValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &);
 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 1 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 1 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 1  - 1,
  1 ,
  3 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
#if  2  <=  1 
 template void FEValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
#if  2  <=  1 
 template void FEValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &);
 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  1 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
#if  2  <=  2 
 template void FEValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
#if  2  <=  2 
 template void FEValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &);
 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  2 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
#if  2  <=  3 
 template void FEValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
#if  2  <=  3 
 template void FEValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &);
 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 2 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 2 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 2  - 1,
  2 ,
  3 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
#if  3  <=  1 
 template void FEValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
#if  3  <=  1 
 template void FEValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &);
 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  1 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  1 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  1 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
#if  3  <=  2 
 template void FEValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
#if  3  <=  2 
 template void FEValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &);
 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  2 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  2 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  2 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
#if  3  <=  3 
 template void FEValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  true >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
#if  3  <=  3 
 template void FEValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &);
 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 unsigned int);

 template void
 FEFaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const unsigned int,
 const unsigned int);

 template void
 FESubfaceValues< 3 ,  3 >::reinit(
 const TriaIterator<
 DoFCellAccessor< 3 ,  3 ,  false >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &,
 const TriaIterator<TriaAccessor< 3  - 1,
  3 ,
  3 >> &);
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<dealii:: Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<ProductType<
 dealii:: Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: Vector<double> >(
 const dealii:: Vector<double>  &,
 std::vector<
 ProductType<dealii:: Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<dealii:: Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<ProductType<
 dealii:: Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: Vector<float> >(
 const dealii:: Vector<float>  &,
 std::vector<
 ProductType<dealii:: Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<dealii:: BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<double> >(
 const dealii:: BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<dealii:: BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<float> >(
 const dealii:: BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<double> >(
 const dealii:: LinearAlgebra::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<float> >(
 const dealii:: LinearAlgebra::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<double> >(
 const dealii:: LinearAlgebra::distributed::Vector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<float> >(
 const dealii:: LinearAlgebra::distributed::Vector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<double> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<double> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<float> >(
 const dealii:: LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<float> ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<double> > >(
 const dealii:: Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(132))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(133))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(134))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: Vector<std::complex<float> > >(
 const dealii:: Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(135))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(136))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(137))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(138))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(139))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(140))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(141))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(142))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(143))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<double> > >(
 const dealii:: BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(144))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(145))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(146))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(147))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(148))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(149))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(150))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(151))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(152))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: BlockVector<std::complex<float> > >(
 const dealii:: BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(153))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(154))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(155))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(156))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(157))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(158))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(159))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(160))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(161))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(162))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(163))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(164))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(165))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(166))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(167))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(168))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(169))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(170))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(171))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(172))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(173))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(174))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(175))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(176))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(177))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(178))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(179))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(180))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(181))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(182))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(183))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(184))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(185))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(186))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(187))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(188))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(189))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(190))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(191))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(192))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(193))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(194))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(195))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(196))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(197))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(198))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(199))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(200))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(201))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(202))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(203))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(204))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  1 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  1 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  1 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  1 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(205))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  2 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  2 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  2 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  2 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(206))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, value_type>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, double>::type> &)
 const;
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, curl_type>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type, divergence_type>::type>
 &) const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<4,  3 >>::type> &)
 const;

 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<ProductType<
 dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::SymmetricTensor<2,  3 >>::type> &) const;
 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<2,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<1,  3 >>::type> &)
 const;
 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<
 ProductType<dealii:: LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type,
 dealii::Tensor<3,  3 >>::type> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(207))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(208))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(209))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(210))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(211))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(212))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(213))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(214))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(215))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < double >>(
 const  std::vector < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(216))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(217))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(218))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(219))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(220))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(221))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(222))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(223))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(224))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < float >>(
 const  std::vector < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(225))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(226))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(227))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(228))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(229))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(230))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(231))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(232))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(233))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<double> >>(
 const  std::vector < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(234))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(235))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(236))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(237))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(238))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(239))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(240))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(241))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(242))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< std::vector < std::complex<float> >>(
 const  std::vector < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(243))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(244))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(245))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(246))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(247))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(248))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(249))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(250))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(251))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_symmetric_gradient_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_curl_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_hessian_type< double >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &,
 std::vector<solution_third_derivative_type< double >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_value_type< double >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_divergence_type< double >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < double >>(
 const  ArrayView < double > &, std::vector<solution_gradient_type< double >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(252))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(253))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(254))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(255))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(256))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(257))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(258))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(259))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(260))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_symmetric_gradient_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_curl_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_hessian_type< float >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &,
 std::vector<solution_third_derivative_type< float >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_value_type< float >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_divergence_type< float >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < float >>(
 const  ArrayView < float > &, std::vector<solution_gradient_type< float >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(261))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(262))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(263))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(264))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(265))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(266))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(267))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(268))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(269))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_curl_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_hessian_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &,
 std::vector<solution_third_derivative_type< std::complex<double> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_value_type< std::complex<double> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_divergence_type< std::complex<double> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<double> >>(
 const  ArrayView < std::complex<double> > &, std::vector<solution_gradient_type< std::complex<double> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(270))
#if  1  <=  1 
 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(271))
#if  1  <=  2 
 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(272))
#if  1  <=  3 
 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 1 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  1 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  1 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(273))
#if  2  <=  1 
 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(274))
#if  2  <=  2 
 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(275))
#if  2  <=  3 
 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 2 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  2 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  2 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(276))
#if  3  <=  1 
 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  1 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  1 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(277))
#if  3  <=  2 
 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  2 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  2 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(278))
#if  3  <=  3 
 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Scalar< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_symmetric_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_symmetric_gradient_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_curls_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_curl_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_hessians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_hessian_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_laplacians_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Vector< 3 ,  3 >::
 get_function_third_derivatives_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &,
 std::vector<solution_third_derivative_type< std::complex<float> >> &) const;



 template void FEValuesViews::SymmetricTensor<2,
  3 ,
  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void FEValuesViews::
 SymmetricTensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;



 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_values_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_value_type< std::complex<float> >> &) const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_divergences_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_divergence_type< std::complex<float> >> &)
 const;

 template void
 FEValuesViews::Tensor<2,  3 ,  3 >::
 get_function_gradients_from_local_dof_values< ArrayView < std::complex<float> >>(
 const  ArrayView < std::complex<float> > &, std::vector<solution_gradient_type< std::complex<float> >> &)
 const;
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(279))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(280))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(281))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(282))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(283))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(284))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(285))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(286))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(287))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<double> >(const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &, std::vector< Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(const  Vector<double>  &,
 std::vector<Vector< Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<double> >(
 const  Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(288))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(289))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(290))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(291))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(292))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(293))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(294))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(295))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(296))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<float> >(const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &, std::vector< Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(const  Vector<float>  &,
 std::vector<Vector< Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<float> >(
 const  Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(297))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(298))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(299))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(300))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(301))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(302))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(303))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(304))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(305))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<double> >(const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &, std::vector< BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(const  BlockVector<double>  &,
 std::vector<Vector< BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<double> >(
 const  BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(306))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(307))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(308))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(309))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(310))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(311))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(312))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(313))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(314))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<float> >(const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &, std::vector< BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(const  BlockVector<float>  &,
 std::vector<Vector< BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<float> >(
 const  BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(315))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(316))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(317))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(318))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(319))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(320))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(321))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(322))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(323))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &, std::vector< LinearAlgebra::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(const  LinearAlgebra::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<double> >(
 const  LinearAlgebra::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(324))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(325))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(326))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(327))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(328))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(329))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(330))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(331))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(332))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &, std::vector< LinearAlgebra::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(const  LinearAlgebra::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<float> >(
 const  LinearAlgebra::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(333))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(334))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(335))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(336))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(337))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(338))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(339))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(340))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(341))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &, std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<double> >(
 const  LinearAlgebra::distributed::Vector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(342))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(343))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(344))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(345))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(346))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(347))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(348))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(349))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(350))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &, std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<float> >(
 const  LinearAlgebra::distributed::Vector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(351))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(352))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(353))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(354))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(355))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(356))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(357))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(358))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(359))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &, std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<double> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<double> >(
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<double> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(360))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(361))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(362))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(363))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(364))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(365))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(366))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(367))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(368))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &, std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<float> ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<float> >(
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<float> ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(369))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(370))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(371))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(372))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(373))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(374))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(375))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(376))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(377))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &, std::vector< Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(const  Vector<std::complex<double> >  &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<double> > >(
 const  Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(378))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(379))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(380))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(381))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(382))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(383))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(384))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(385))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(386))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &, std::vector< Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(const  Vector<std::complex<float> >  &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< Vector<std::complex<float> > >(
 const  Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(387))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(388))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(389))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(390))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(391))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(392))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(393))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(394))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(395))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &, std::vector< BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(const  BlockVector<std::complex<double> >  &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<double> > >(
 const  BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(396))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(397))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(398))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(399))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(400))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(401))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(402))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(403))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(404))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &, std::vector< BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(const  BlockVector<std::complex<float> >  &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< BlockVector<std::complex<float> > >(
 const  BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(405))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(406))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(407))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(408))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(409))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(410))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(411))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(412))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(413))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<double> > >(
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(414))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(415))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(416))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(417))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(418))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(419))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(420))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(421))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(422))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::Vector<std::complex<float> > >(
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(423))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(424))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(425))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(426))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(427))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(428))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(429))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(430))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(431))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<double> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(432))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(433))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(434))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(435))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(436))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(437))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(438))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(439))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(440))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::Vector<std::complex<float> > >(
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(441))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(442))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(443))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(444))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(445))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(446))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(447))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(448))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(449))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<double> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(450))
#if  1  <=  1 

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(451))
#if  1  <=  2 

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(452))
#if  1  <=  3 

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 1 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(453))
#if  2  <=  1 

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(454))
#if  2  <=  2 

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(455))
#if  2  <=  3 

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 2 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(456))
#if  3  <=  1 

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  1 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  1 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(457))
#if  3  <=  2 

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  2 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  2 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(458))
#if  3  <=  3 

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_values< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_gradients< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<1,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_hessians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<2,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &, std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &)
 const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &)
 const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<Vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_laplacians< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<std::vector< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>> &,
 bool) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 std::vector<dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>
 &) const;

 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 std::vector<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>> &,
 bool) const;
 template void FEValuesBase< 3 ,  3 >::
 get_function_third_derivatives< LinearAlgebra::distributed::BlockVector<std::complex<float> > >(
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const ArrayView<const types::global_dof_index> &,
 ArrayView<std::vector<
 dealii::Tensor<3,  3 ,  LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type>>>,
 bool) const;

#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
