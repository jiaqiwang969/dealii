// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 ,  1 > &,
  Vector<double>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 ,  1 > &,
  Vector<float>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 ,  1 > &,
  BlockVector<double>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 ,  1 > &,
  BlockVector<float>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(9))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(10))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(11))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(12))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(13))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(14))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(15))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(16))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(17))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(18))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(19))
namespace FETools
 {

#if  1  <=  1 
 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  1 >(
 const DoFHandler< 1 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(20))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 ,  2 > &,
  Vector<double>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(21))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 ,  2 > &,
  Vector<float>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(22))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 ,  2 > &,
  BlockVector<double>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(23))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 ,  2 > &,
  BlockVector<float>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(24))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(25))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(26))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(27))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(28))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(29))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(30))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(31))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(32))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(33))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(34))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(35))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(36))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(37))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(38))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(39))
namespace FETools
 {

#if  1  <=  2 
 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  2 >(
 const DoFHandler< 1 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(40))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 ,  3 > &,
  Vector<double>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(41))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 ,  3 > &,
  Vector<float>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(42))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 ,  3 > &,
  BlockVector<double>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(43))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 ,  3 > &,
  BlockVector<float>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(44))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(45))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(46))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(47))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(48))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(49))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(50))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(51))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(52))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(53))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(54))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(55))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(56))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(57))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(58))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(59))
namespace FETools
 {

#if  1  <=  3 
 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 1 ,  3 >(
 const DoFHandler< 1 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(60))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 ,  1 > &,
  Vector<double>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(61))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 ,  1 > &,
  Vector<float>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(62))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 ,  1 > &,
  BlockVector<double>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(63))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 ,  1 > &,
  BlockVector<float>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(64))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(65))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(66))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(67))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(68))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(69))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(70))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(71))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(72))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(73))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(74))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(75))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(76))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(77))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(78))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(79))
namespace FETools
 {

#if  2  <=  1 
 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  1 >(
 const DoFHandler< 2 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(80))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 ,  2 > &,
  Vector<double>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(81))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 ,  2 > &,
  Vector<float>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(82))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 ,  2 > &,
  BlockVector<double>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(83))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 ,  2 > &,
  BlockVector<float>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(84))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(85))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(86))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(87))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(88))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(89))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(90))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(91))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(92))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(93))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(94))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(95))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(96))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(97))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(98))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(99))
namespace FETools
 {

#if  2  <=  2 
 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  2 >(
 const DoFHandler< 2 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(100))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 ,  3 > &,
  Vector<double>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(101))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 ,  3 > &,
  Vector<float>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(102))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 ,  3 > &,
  BlockVector<double>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(103))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 ,  3 > &,
  BlockVector<float>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(104))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(105))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(106))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(107))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(108))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(109))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(110))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(111))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(112))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(113))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(114))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(115))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(116))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(117))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(118))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(119))
namespace FETools
 {

#if  2  <=  3 
 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 2 ,  3 >(
 const DoFHandler< 2 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(120))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 ,  1 > &,
  Vector<double>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(121))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 ,  1 > &,
  Vector<float>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(122))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 ,  1 > &,
  BlockVector<double>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(123))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 ,  1 > &,
  BlockVector<float>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(124))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(125))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(126))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(127))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(128))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(129))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(130))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(131))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(132))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(133))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(134))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(135))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(136))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(137))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(138))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(139))
namespace FETools
 {

#if  3  <=  1 
 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  1 >(
 const DoFHandler< 3 ,  1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(140))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 ,  2 > &,
  Vector<double>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(141))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 ,  2 > &,
  Vector<float>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(142))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 ,  2 > &,
  BlockVector<double>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(143))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 ,  2 > &,
  BlockVector<float>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(144))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(145))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(146))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(147))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(148))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(149))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(150))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(151))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(152))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(153))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(154))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(155))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(156))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(157))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(158))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(159))
namespace FETools
 {

#if  3  <=  2 
 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  2 >(
 const DoFHandler< 3 ,  2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(160))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 ,  3 > &,
  Vector<double>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(161))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 ,  3 > &,
  Vector<float>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(162))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 ,  3 > &,
  BlockVector<double>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(163))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 ,  3 > &,
  BlockVector<float>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(164))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(165))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(166))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(167))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(168))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(169))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(170))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(171))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(172))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(173))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(174))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(175))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(176))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(177))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(178))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(179))
namespace FETools
 {

#if  3  <=  3 
 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolate< 3 ,  3 >(
 const DoFHandler< 3 ,  3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 ,  3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(180))
namespace FETools
 {
#if  1  ==  1 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(181))
namespace FETools
 {
#if  1  ==  2 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(182))
namespace FETools
 {
#if  1  ==  3 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(183))
namespace FETools
 {
#if  2  ==  1 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(184))
namespace FETools
 {
#if  2  ==  2 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(185))
namespace FETools
 {
#if  2  ==  3 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(186))
namespace FETools
 {
#if  3  ==  1 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(187))
namespace FETools
 {
#if  3  ==  2 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(188))
namespace FETools
 {
#if  3  ==  3 
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(189))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const FiniteElement< 1 > &,
  Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const FiniteElement< 1 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(190))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const FiniteElement< 1 > &,
  Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const FiniteElement< 1 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(191))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 1 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 1 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(192))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 1 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 1 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(193))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(194))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(195))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(196))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(197))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(198))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(199))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(200))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(201))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(202))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(203))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(204))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(205))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(206))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(207))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(208))
namespace FETools
 {
#if  1  ==  1 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(209))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const FiniteElement< 1 > &,
  Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const FiniteElement< 1 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(210))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const FiniteElement< 1 > &,
  Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const FiniteElement< 1 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(211))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 1 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 1 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(212))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 1 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 1 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(213))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(214))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(215))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(216))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(217))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(218))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(219))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(220))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(221))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(222))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(223))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(224))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(225))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(226))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(227))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(228))
namespace FETools
 {
#if  1  ==  2 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(229))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const FiniteElement< 1 > &,
  Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const FiniteElement< 1 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<double>  &,
 const DoFHandler< 1 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(230))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const FiniteElement< 1 > &,
  Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const FiniteElement< 1 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<float>  &,
 const DoFHandler< 1 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(231))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 1 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 1 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 1 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(232))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 1 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 1 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 1 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(233))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(234))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(235))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(236))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(237))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(238))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(239))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(240))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(241))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(242))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(243))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(244))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(245))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(246))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(247))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(248))
namespace FETools
 {
#if  1  ==  3 
 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 1 >(
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 1 >(const DoFHandler< 1 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 1 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(249))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const FiniteElement< 2 > &,
  Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const FiniteElement< 2 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(250))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const FiniteElement< 2 > &,
  Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const FiniteElement< 2 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(251))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 2 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 2 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(252))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 2 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 2 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(253))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(254))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(255))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(256))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(257))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(258))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(259))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(260))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(261))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(262))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(263))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(264))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(265))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(266))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(267))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(268))
namespace FETools
 {
#if  2  ==  1 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(269))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const FiniteElement< 2 > &,
  Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const FiniteElement< 2 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(270))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const FiniteElement< 2 > &,
  Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const FiniteElement< 2 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(271))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 2 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 2 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(272))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 2 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 2 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(273))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(274))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(275))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(276))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(277))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(278))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(279))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(280))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(281))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(282))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(283))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(284))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(285))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(286))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(287))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(288))
namespace FETools
 {
#if  2  ==  2 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(289))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const FiniteElement< 2 > &,
  Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const FiniteElement< 2 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<double>  &,
 const DoFHandler< 2 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(290))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const FiniteElement< 2 > &,
  Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const FiniteElement< 2 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<float>  &,
 const DoFHandler< 2 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(291))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 2 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 2 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 2 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(292))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 2 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 2 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 2 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(293))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(294))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(295))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(296))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(297))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(298))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(299))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(300))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(301))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(302))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(303))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(304))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(305))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(306))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(307))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(308))
namespace FETools
 {
#if  2  ==  3 
 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 2 >(
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 2 >(const DoFHandler< 2 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 2 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(309))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const FiniteElement< 3 > &,
  Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const FiniteElement< 3 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(310))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const FiniteElement< 3 > &,
  Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const FiniteElement< 3 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(311))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 3 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 3 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(312))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 3 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 3 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(313))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(314))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(315))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(316))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(317))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(318))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(319))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(320))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(321))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(322))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(323))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(324))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(325))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(326))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(327))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(328))
namespace FETools
 {
#if  3  ==  1 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(329))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const FiniteElement< 3 > &,
  Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const FiniteElement< 3 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(330))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const FiniteElement< 3 > &,
  Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const FiniteElement< 3 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(331))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 3 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 3 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(332))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 3 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 3 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(333))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(334))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(335))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(336))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(337))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(338))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(339))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(340))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(341))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(342))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(343))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(344))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(345))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(346))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(347))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(348))
namespace FETools
 {
#if  3  ==  2 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(349))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const FiniteElement< 3 > &,
  Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const FiniteElement< 3 > &,
  Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<double> ::value_type> &,
  Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<double>  &,
 const DoFHandler< 3 > &,
  Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(350))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const FiniteElement< 3 > &,
  Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const FiniteElement< 3 > &,
  Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<float> ::value_type> &,
  Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<float>  &,
 const DoFHandler< 3 > &,
  Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(351))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 3 > &,
  BlockVector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const FiniteElement< 3 > &,
  BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<double> ::value_type> &,
  BlockVector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<double>  &,
 const DoFHandler< 3 > &,
  BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(352))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 3 > &,
  BlockVector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const FiniteElement< 3 > &,
  BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<float> ::value_type> &,
  BlockVector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<float>  &,
 const DoFHandler< 3 > &,
  BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(353))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<double> ::value_type> &,
  LinearAlgebra::Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(354))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<float> ::value_type> &,
  LinearAlgebra::Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(355))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<double> ::value_type> &,
  LinearAlgebra::distributed::Vector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(356))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<float> ::value_type> &,
  LinearAlgebra::distributed::Vector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(357))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<double> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<double>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<double>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<double>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(358))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<float> ::value_type> &,
  LinearAlgebra::distributed::BlockVector<float>  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<float>  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<float>  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(359))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<double> > ::value_type> &,
  Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(360))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< Vector<std::complex<float> > ::value_type> &,
  Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(361))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<double> > ::value_type> &,
  BlockVector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(362))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< BlockVector<std::complex<float> > ::value_type> &,
  BlockVector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(363))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(364))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(365))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(366))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::Vector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::Vector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::Vector<std::complex<float> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(367))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<double> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<double> >  &);
#endif
 }
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(368))
namespace FETools
 {
#if  3  ==  3 
 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 back_interpolate< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const FiniteElement< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 interpolation_difference< 3 >(
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
 const AffineConstraints< LinearAlgebra::distributed::BlockVector<std::complex<float> > ::value_type> &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);

 template void
 project_dg< 3 >(const DoFHandler< 3 > &,
 const  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &,
 const DoFHandler< 3 > &,
  LinearAlgebra::distributed::BlockVector<std::complex<float> >  &);
#endif
 }
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
