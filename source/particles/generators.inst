// This file is automatically generated from corresponding .inst.in, do not edit.

#ifdef SPLIT_INSTANTIATIONS_COUNT
  #define SPLIT_INSTANTIATIONS_CHECK(C) (((C) % SPLIT_INSTANTIATIONS_COUNT) == SPLIT_INSTANTIATIONS_INDEX)
#else
  #define SPLIT_INSTANTIATIONS_CHECK(C) (1)
#endif

#if (SPLIT_INSTANTIATIONS_CHECK(0))
#if  1  <=  1 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 1 ,  1 >(
 const Triangulation< 1 ,  1 >
 &triangulation,
 const std::vector<Point< 1 >>
 &particle_reference_locations,
 ParticleHandler< 1 ,  1 >
 &particle_handler,
 const Mapping< 1 ,  1 > &mapping);

 template Particle< 1 ,  1 >
 random_particle_in_cell(
 const typename Triangulation<
  1 ,
  1 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 1 ,  1 > &mapping);

 template void
 probabilistic_locations< 1 ,  1 >(
 const Triangulation< 1 ,  1 >
 & triangulation,
 const Function< 1 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 1 ,  1 >
 &particle_handler,
 const Mapping< 1 ,  1 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 1 ,  1 >(
 const DoFHandler< 1 ,  1 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 1 >>>
 &global_bounding_boxes,
 ParticleHandler< 1 ,  1 >
 &particle_handler,
 const Mapping< 1 ,  1 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 1 ,  1 >(
 const Triangulation< 1 ,  1 >
 & particle_tria,
 const Quadrature< 1 > &quadrature,
 const std::vector<std::vector<BoundingBox< 1 >>>
 &global_bounding_boxes,
 ParticleHandler< 1 ,  1 >
 &particle_handler,
 const Mapping< 1 ,  1 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(1))
#if  1  <=  2 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 1 ,  2 >(
 const Triangulation< 1 ,  2 >
 &triangulation,
 const std::vector<Point< 1 >>
 &particle_reference_locations,
 ParticleHandler< 1 ,  2 >
 &particle_handler,
 const Mapping< 1 ,  2 > &mapping);

 template Particle< 1 ,  2 >
 random_particle_in_cell(
 const typename Triangulation<
  1 ,
  2 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 1 ,  2 > &mapping);

 template void
 probabilistic_locations< 1 ,  2 >(
 const Triangulation< 1 ,  2 >
 & triangulation,
 const Function< 2 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 1 ,  2 >
 &particle_handler,
 const Mapping< 1 ,  2 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 1 ,  2 >(
 const DoFHandler< 1 ,  2 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 2 >>>
 &global_bounding_boxes,
 ParticleHandler< 1 ,  2 >
 &particle_handler,
 const Mapping< 1 ,  2 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 1 ,  2 >(
 const Triangulation< 1 ,  2 >
 & particle_tria,
 const Quadrature< 1 > &quadrature,
 const std::vector<std::vector<BoundingBox< 2 >>>
 &global_bounding_boxes,
 ParticleHandler< 1 ,  2 >
 &particle_handler,
 const Mapping< 1 ,  2 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(2))
#if  1  <=  3 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 1 ,  3 >(
 const Triangulation< 1 ,  3 >
 &triangulation,
 const std::vector<Point< 1 >>
 &particle_reference_locations,
 ParticleHandler< 1 ,  3 >
 &particle_handler,
 const Mapping< 1 ,  3 > &mapping);

 template Particle< 1 ,  3 >
 random_particle_in_cell(
 const typename Triangulation<
  1 ,
  3 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 1 ,  3 > &mapping);

 template void
 probabilistic_locations< 1 ,  3 >(
 const Triangulation< 1 ,  3 >
 & triangulation,
 const Function< 3 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 1 ,  3 >
 &particle_handler,
 const Mapping< 1 ,  3 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 1 ,  3 >(
 const DoFHandler< 1 ,  3 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 3 >>>
 &global_bounding_boxes,
 ParticleHandler< 1 ,  3 >
 &particle_handler,
 const Mapping< 1 ,  3 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 1 ,  3 >(
 const Triangulation< 1 ,  3 >
 & particle_tria,
 const Quadrature< 1 > &quadrature,
 const std::vector<std::vector<BoundingBox< 3 >>>
 &global_bounding_boxes,
 ParticleHandler< 1 ,  3 >
 &particle_handler,
 const Mapping< 1 ,  3 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(3))
#if  2  <=  1 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 2 ,  1 >(
 const Triangulation< 2 ,  1 >
 &triangulation,
 const std::vector<Point< 2 >>
 &particle_reference_locations,
 ParticleHandler< 2 ,  1 >
 &particle_handler,
 const Mapping< 2 ,  1 > &mapping);

 template Particle< 2 ,  1 >
 random_particle_in_cell(
 const typename Triangulation<
  2 ,
  1 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 2 ,  1 > &mapping);

 template void
 probabilistic_locations< 2 ,  1 >(
 const Triangulation< 2 ,  1 >
 & triangulation,
 const Function< 1 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 2 ,  1 >
 &particle_handler,
 const Mapping< 2 ,  1 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 2 ,  1 >(
 const DoFHandler< 2 ,  1 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 1 >>>
 &global_bounding_boxes,
 ParticleHandler< 2 ,  1 >
 &particle_handler,
 const Mapping< 2 ,  1 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 2 ,  1 >(
 const Triangulation< 2 ,  1 >
 & particle_tria,
 const Quadrature< 2 > &quadrature,
 const std::vector<std::vector<BoundingBox< 1 >>>
 &global_bounding_boxes,
 ParticleHandler< 2 ,  1 >
 &particle_handler,
 const Mapping< 2 ,  1 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(4))
#if  2  <=  2 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 2 ,  2 >(
 const Triangulation< 2 ,  2 >
 &triangulation,
 const std::vector<Point< 2 >>
 &particle_reference_locations,
 ParticleHandler< 2 ,  2 >
 &particle_handler,
 const Mapping< 2 ,  2 > &mapping);

 template Particle< 2 ,  2 >
 random_particle_in_cell(
 const typename Triangulation<
  2 ,
  2 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 2 ,  2 > &mapping);

 template void
 probabilistic_locations< 2 ,  2 >(
 const Triangulation< 2 ,  2 >
 & triangulation,
 const Function< 2 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 2 ,  2 >
 &particle_handler,
 const Mapping< 2 ,  2 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 2 ,  2 >(
 const DoFHandler< 2 ,  2 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 2 >>>
 &global_bounding_boxes,
 ParticleHandler< 2 ,  2 >
 &particle_handler,
 const Mapping< 2 ,  2 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 2 ,  2 >(
 const Triangulation< 2 ,  2 >
 & particle_tria,
 const Quadrature< 2 > &quadrature,
 const std::vector<std::vector<BoundingBox< 2 >>>
 &global_bounding_boxes,
 ParticleHandler< 2 ,  2 >
 &particle_handler,
 const Mapping< 2 ,  2 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(5))
#if  2  <=  3 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 2 ,  3 >(
 const Triangulation< 2 ,  3 >
 &triangulation,
 const std::vector<Point< 2 >>
 &particle_reference_locations,
 ParticleHandler< 2 ,  3 >
 &particle_handler,
 const Mapping< 2 ,  3 > &mapping);

 template Particle< 2 ,  3 >
 random_particle_in_cell(
 const typename Triangulation<
  2 ,
  3 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 2 ,  3 > &mapping);

 template void
 probabilistic_locations< 2 ,  3 >(
 const Triangulation< 2 ,  3 >
 & triangulation,
 const Function< 3 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 2 ,  3 >
 &particle_handler,
 const Mapping< 2 ,  3 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 2 ,  3 >(
 const DoFHandler< 2 ,  3 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 3 >>>
 &global_bounding_boxes,
 ParticleHandler< 2 ,  3 >
 &particle_handler,
 const Mapping< 2 ,  3 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 2 ,  3 >(
 const Triangulation< 2 ,  3 >
 & particle_tria,
 const Quadrature< 2 > &quadrature,
 const std::vector<std::vector<BoundingBox< 3 >>>
 &global_bounding_boxes,
 ParticleHandler< 2 ,  3 >
 &particle_handler,
 const Mapping< 2 ,  3 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(6))
#if  3  <=  1 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 3 ,  1 >(
 const Triangulation< 3 ,  1 >
 &triangulation,
 const std::vector<Point< 3 >>
 &particle_reference_locations,
 ParticleHandler< 3 ,  1 >
 &particle_handler,
 const Mapping< 3 ,  1 > &mapping);

 template Particle< 3 ,  1 >
 random_particle_in_cell(
 const typename Triangulation<
  3 ,
  1 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 3 ,  1 > &mapping);

 template void
 probabilistic_locations< 3 ,  1 >(
 const Triangulation< 3 ,  1 >
 & triangulation,
 const Function< 1 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 3 ,  1 >
 &particle_handler,
 const Mapping< 3 ,  1 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 3 ,  1 >(
 const DoFHandler< 3 ,  1 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 1 >>>
 &global_bounding_boxes,
 ParticleHandler< 3 ,  1 >
 &particle_handler,
 const Mapping< 3 ,  1 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 3 ,  1 >(
 const Triangulation< 3 ,  1 >
 & particle_tria,
 const Quadrature< 3 > &quadrature,
 const std::vector<std::vector<BoundingBox< 1 >>>
 &global_bounding_boxes,
 ParticleHandler< 3 ,  1 >
 &particle_handler,
 const Mapping< 3 ,  1 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(7))
#if  3  <=  2 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 3 ,  2 >(
 const Triangulation< 3 ,  2 >
 &triangulation,
 const std::vector<Point< 3 >>
 &particle_reference_locations,
 ParticleHandler< 3 ,  2 >
 &particle_handler,
 const Mapping< 3 ,  2 > &mapping);

 template Particle< 3 ,  2 >
 random_particle_in_cell(
 const typename Triangulation<
  3 ,
  2 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 3 ,  2 > &mapping);

 template void
 probabilistic_locations< 3 ,  2 >(
 const Triangulation< 3 ,  2 >
 & triangulation,
 const Function< 2 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 3 ,  2 >
 &particle_handler,
 const Mapping< 3 ,  2 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 3 ,  2 >(
 const DoFHandler< 3 ,  2 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 2 >>>
 &global_bounding_boxes,
 ParticleHandler< 3 ,  2 >
 &particle_handler,
 const Mapping< 3 ,  2 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 3 ,  2 >(
 const Triangulation< 3 ,  2 >
 & particle_tria,
 const Quadrature< 3 > &quadrature,
 const std::vector<std::vector<BoundingBox< 2 >>>
 &global_bounding_boxes,
 ParticleHandler< 3 ,  2 >
 &particle_handler,
 const Mapping< 3 ,  2 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif
#if (SPLIT_INSTANTIATIONS_CHECK(8))
#if  3  <=  3 
 namespace Particles
 {
 namespace Generators
 {
 template void
 regular_reference_locations< 3 ,  3 >(
 const Triangulation< 3 ,  3 >
 &triangulation,
 const std::vector<Point< 3 >>
 &particle_reference_locations,
 ParticleHandler< 3 ,  3 >
 &particle_handler,
 const Mapping< 3 ,  3 > &mapping);

 template Particle< 3 ,  3 >
 random_particle_in_cell(
 const typename Triangulation<
  3 ,
  3 >::active_cell_iterator &cell,
 const types::particle_index id,
 std::mt19937 &random_number_generator,
 const Mapping< 3 ,  3 > &mapping);

 template void
 probabilistic_locations< 3 ,  3 >(
 const Triangulation< 3 ,  3 >
 & triangulation,
 const Function< 3 > &probability_density_function,
 const bool random_cell_selection,
 const types::particle_index n_particles_to_create,
 ParticleHandler< 3 ,  3 >
 &particle_handler,
 const Mapping< 3 ,  3 > &mapping,
 const unsigned int random_number_seed);

 template void
 dof_support_points< 3 ,  3 >(
 const DoFHandler< 3 ,  3 >
 &particle_dof_handler,
 const std::vector<std::vector<BoundingBox< 3 >>>
 &global_bounding_boxes,
 ParticleHandler< 3 ,  3 >
 &particle_handler,
 const Mapping< 3 ,  3 > &mapping,
 const ComponentMask & components,
 const std::vector<std::vector<double>> &properties);

 template void
 quadrature_points< 3 ,  3 >(
 const Triangulation< 3 ,  3 >
 & particle_tria,
 const Quadrature< 3 > &quadrature,
 const std::vector<std::vector<BoundingBox< 3 >>>
 &global_bounding_boxes,
 ParticleHandler< 3 ,  3 >
 &particle_handler,
 const Mapping< 3 ,  3 > &mapping,
 const std::vector<std::vector<double>> &properties);

 }
 }
#endif
 
#endif

#undef SPLIT_INSTANTIATIONS_CHECK
