[0.x.0]*
   A namespace for exceptions that are used throughout the DataOut*
   collection of classes.  
* [0.x.1]*
     Exception    
* [0.x.2]*
     Exception    
* [0.x.3]*
     Exception    
* [0.x.4]*
     Exception    
* [0.x.5]*
     Exception    
* [0.x.6]*
     Exception    
* [0.x.7]*
     Exception    
* [0.x.8]*
     Exception    
* [0.x.9]*
     Exception    
* [0.x.10]*
     The DataEntry classes abstract away the concrete data type of vectors     users can attach to DataOut (and similar) objects and allow the     underlying DataOut functions to query for individual elements of solution     vectors without having to know the concrete vector type. This avoids that     DataOut has to know what vectors are being used, but it has the downside     that DataOut also doesn't know the underlying scalar type of these     vectors.         If the underlying scalar types all represent real numbers (in the     mathematical sense
* 
*  -  i.e., the scalar type would be  [2.x.0]       [2.x.1]  etc) then that is not a problem
* 
*  -  DataOut simply     receives the values of individual vector components as  [2.x.2]      objects. On the other hand, if the vector type uses a  [2.x.3]      scalar type, then DataEntry returning a  [2.x.4]  for a vector     entry is not sufficient
* 
*  -  we need to provide DataOut with a way     to query both the real and the imaginary part, so that they can     be written into output files separately.         This enum allows DataOut to tell a DataEntry function which component     of a vector entry it wants to query, i.e., whether it wants the real     or the imaginary part of a vector entry.    
* [0.x.11]*
     For each vector that has been added through the add_data_vector()     functions, we need to keep track of a pointer to it, and allow data     extraction from it when we generate patches. Unfortunately, we need to     do this for a number of different vector types. Fortunately, they all     have the same interface. So the way we go is to have a base class that     provides the functions to access the vector's information, and to have     a derived template class that can be instantiated for each vector type.     Since the vectors all have the same interface, this is no big problem,     as they can all use the same general templatized code.        
*  [2.x.5]  This class is an example of the     [1.x.0] design pattern.    
* [0.x.12]*
       Constructor. Give a list of names for the individual components of       the vector and their interpretation as scalar or vector data. This       constructor assumes that no postprocessor is going to be used.      
* [0.x.13]*
       Constructor when a data postprocessor is going to be used. In that       case, the names and vector declarations are going to be acquired from       the postprocessor.      
* [0.x.14]*
       Destructor made virtual.      
* [0.x.15]*
       Assuming that the stored vector is a cell vector, extract the given       element from it.      
* [0.x.16]*
       Given a FEValuesBase object, extract the values on the present cell       from the vector we actually store.      
* [0.x.17]*
       Given a FEValuesBase object, extract the values on the present cell       from the vector we actually store. This function does the same as the       one above but for vector-valued finite elements.      
* [0.x.18]*
       Given a FEValuesBase object, extract the gradients on the present       cell from the vector we actually store.      
* [0.x.19]*
       Given a FEValuesBase object, extract the gradients on the present       cell from the vector we actually store. This function does the same       as the one above but for vector-valued finite elements.      
* [0.x.20]*
       Given a FEValuesBase object, extract the second derivatives on the       present cell from the vector we actually store.      
* [0.x.21]*
       Given a FEValuesBase object, extract the second derivatives on the       present cell from the vector we actually store. This function does       the same as the one above but for vector-valued finite elements.      
* [0.x.22]*
       Return whether the data represented by (a derived class of) this object       represents a complex-valued (as opposed to real-valued) information.      
* [0.x.23]*
       Clear all references to the vectors.      
* [0.x.24]*
       Determine an estimate for the memory consumption (in bytes) of this       object.      
* [0.x.25]*
       Pointer to the DoFHandler object that the vector is based on.      
* [0.x.26]*
       Names of the components of this data vector.      
* [0.x.27]*
       A vector that for each of the n_output_variables variables of the       current data set indicates whether they are scalar fields, parts of a       vector-field, or any of the other supported kinds of data.      
* [0.x.28]*
       Pointer to a DataPostprocessing object which shall be applied to this       data vector.      
* [0.x.29]*
       Number of output variables this dataset provides (either number of       components in vector valued function / data vector or number of       computed quantities, if DataPostprocessor is applied). This variable       is determined via and thus equivalent to <tt>names.size()</tt>.      
* [0.x.30]*
     A data structure that holds all data needed in one thread when building     patches in parallel. These data structures are created globally rather     than on each cell to avoid allocation of memory in the threads. This is     a base class for the AdditionalData kind of data structure discussed in     the documentation of the WorkStream class.         The  [2.x.6]  is an array that stores for     index <tt>[i][j]</tt> the number of the patch that associated with the     cell with index  [2.x.7]  on level  [2.x.8]  This information is set up prior to     generation of the patches, and is needed to generate neighborship     information.         This structure is used by several of the DataOut* classes, which     derived their own ParallelData classes from it for additional fields.    
* [0.x.31]*
 This is an abstract class which provides the functionality to generate patches for output by base classes from data vectors on a grid. It allows to attach one or more pointers to a DoFHandler and attached node and cell data denoting functions on the grid which shall later be written in any of the implemented data formats.
* 

*  [1.x.1]
*  The user visible interface of this class allows the user to specify data in two different ways. One is to make a DoFHandler object known to this class and to add data vectors that all correspond to this DoFHandler or the grid cells which will later be written to a file in some format. The second approach is to pass a DoFHandler object along with the vector. This allows setting data from different DoFHandlers in a neat way (of course, they both need to be based on the same triangulation). Instead of pondering about the different functions, an example for the first kind is probably the best explanation:

* 
* [1.x.2]
* 
*  attach_dof_handler() tells this class that all future operations are to take place with the DoFHandler object and the triangulation it lives on. We then add the solution vector and the error estimator; note that they have different dimensions, because the solution is a nodal vector, here consisting of two components ("x-displacement" and "y-displacement") while the error estimator probably is a vector holding cell data. When attaching a data vector, you have to give a name to each component of the vector, which is done through an object of type <tt>vector<string></tt> as second argument; if only one component is in the vector, for example if we are adding cell data as in the second case, or if the finite element used by the DoFHandler has only one component, then you can use the second add_data_vector() function which takes a  [2.x.9]  instead of the <tt>vector<string></tt>.
*  The add_data_vector() functions have additional arguments (with default values) that can be used to specify certain transformations. In particular, it allows to attach DataPostprocessor arguments to compute derived information from a data vector at each point at which the field will be evaluated so that it can be written to a file (for example, the Mach number in hypersonic flow can be computed from density and velocities;  [2.x.10]  also shows an example); another piece of information specified through arguments with default values is how certain output components should be interpreted, i.e. whether each component of the data is logically an independent scalar field, or whether some of them together form logically a vector-field (see the  [2.x.11]  enum, and the  [2.x.12]  " [2.x.13] " tutorial program).
*  This class does not copy the vector given to it through the add_data_vector() functions, for memory consumption reasons. It only stores a reference to it, so it is in your responsibility to make sure that the data vectors exist long enough.
*  After adding all data vectors, you need to call a function which generates the patches (i.e., some intermediate data representation) for output from the stored data. Derived classes name this function build_patches(). Finally, you write() the data in one format or other, to a file.
*  In the example above, an object of type DataOut was used, i.e. an object of a derived class. This is necessary since the current class does not provide means to actually generate the patches, only aids to store and access data. Any real functionality is implemented in derived classes such as DataOut.
*  Note that the base class of this class, DataOutInterface offers several functions to ease programming with run-time determinable output formats (i.e. you need not use a fixed format by calling  [2.x.14]  in the above example, but you can select it by a run-time parameter without having to write the <tt>if () ... else ...</tt> clauses yourself), and also functions and classes offering ways to control the appearance of the output by setting flags for each output format.
* 

*  [1.x.3]
*  What this class lacks is a way to produce the patches for output itself, from the stored data and degree of freedom information. Since this task is often application dependent it is left to derived classes. For example, in many applications, it might be wanted to limit the depth of output to a certain number of refinement levels and write data from finer cells only in a way interpolated to coarser cells, to reduce the amount of output. Also, it might be wanted to use different numbers of subdivisions on different cells when forming a patch, for example to accomplish for different polynomial degrees of the trial space on different cells. Also, the output need not necessarily consist of a patch for each cell, but might be made up of patches for faces, of other things. Take a look at derived classes to what is possible in this respect.
*  For this reason, it is left to a derived class to provide a function, named usually build_patches() or the like, which fills the #patches array of this class.
*  Regarding the templates of this class, it needs three values: first the space dimension in which the triangulation and the DoF handler operate, second the dimension of the objects which the patches represent.  Although in most cases they are equal, there are also classes for which this does not hold, for example if one outputs the result of a computation exploiting rotational symmetry in the original domain (in which the space dimension of the output would be one higher than that of the DoF handler, see the DataOut_Rotation() class), or one might conceive that one could write a class that only outputs the solution on a cut through the domain, in which case the space dimension of the output is less than that of the DoF handler. The last template argument denotes the dimension of the space into which the patches are embedded; usually, this dimension is the same as the dimensio of the patches themselves (which is also the default value of the template parameter), but there might be cases where this is not so. For example, in the DataOut_Faces() class, patches are generated from faces of the triangulation. Thus, the dimension of the patch is one less than the dimension of the embedding space, which is, in this case, equal to the dimension of the triangulation and DoF handler. However, for the cut through the domain mentioned above, if the cut is a straight one, then the cut can be embedded into a space of one dimension lower than the dimension of the triangulation, so that the last template parameter has the same value as the second one.
* 

* 
*  [2.x.15] 

* 
* [0.x.32]*
   Typedef to the iterator type of the dof handler class under   consideration.  
* [0.x.33]*
   Type describing what the vector given to add_data_vector() is: a vector   that has one entry per degree of freedom in a DoFHandler object (such as   solution vectors), or one entry per cell in the triangulation underlying   the DoFHandler object (such as error per cell data). The value   #type_automatic tells add_data_vector() to find out itself (see the   documentation of add_data_vector() for the method used).  
* [0.x.34]*
     Data vector entries are associated to degrees of freedom    
* [0.x.35]*
     Data vector entries are one per grid cell    
* [0.x.36]*
     Find out automatically    
* [0.x.37]*
   Constructor  
* [0.x.38]*
   Destructor.  
* [0.x.39]*
   Designate a dof handler to be used to extract geometry data and the   mapping between nodes and node values. This call is not necessary if all   added data vectors are supplemented with a DoFHandler argument.     This call is optional: If you add data vectors with specified DoFHandler   object, then that contains all information needed to generate the output.  
* [0.x.40]*
   Designate a triangulation to be used to extract geometry data and the   mapping between nodes and node values.     This call is optional: If you add data vectors with specified DoFHandler   object, then that contains all information needed to generate the output.   This call is useful when you only output cell vectors and no DoFHandler   at all, in which case it provides the geometry.  
* [0.x.41]*
   Add a data vector together with its name.     A pointer to the vector is stored, so you have to make sure the vector   exists at that address at least as long as you call the <tt>write_*</tt>   functions.     It is assumed that the vector has the same number of components as there   are degrees of freedom in the dof handler, in which case it is assumed to   be a vector storing nodal data; or the size may be the number of active   cells on the present grid, in which case it is assumed to be a cell data   vector. As the number of degrees of freedom and of cells is usually not   equal, the function can determine itself which type of vector it is   given. However, there are corner cases where this automatic determination   does not work.  One example is if you compute with piecewise constant   elements and have a scalar solution, then there are as many cells as   there are degrees of freedom (though they may be numbered differently).   Another possibility is if you have a 1d mesh embedded in 2d space and the   mesh consists of a closed curve of cells; in this case, there are as many   nodes as there are cells, and when using a Q1 element you will have as   many degrees of freedom as there are cells.  In these cases, you can   change the last argument of the function from its default value   #type_automatic to either #type_dof_data or #type_cell_data, depending on   what the vector represents. Apart from such corner cases, you can leave   the argument at its default value and let the function determine the type   of the vector itself.     If it is a vector holding DoF data, the names given shall be one for each   component of the underlying finite element.  If it is a finite element   composed of only one subelement, then there is another function following   which takes a single name instead of a vector of names.     The data_component_interpretation argument contains information about how   the individual components of output files that consist of more than one   data set are to be interpreted.     For example, if one has a finite element for the Stokes equations in 2d,   representing components (u,v,p), one would like to indicate that the   first two, u and v, represent a logical vector so that later on when we   generate graphical output we can hand them off to a visualization program   that will automatically know to render them as a vector field, rather   than as two separate and independent scalar fields.     The default value of this argument (i.e. an empty vector) corresponds is   equivalent to a vector of values    [2.x.16]  indicating that all   output components are independent scalar fields. However, if the given   data vector represents logical vectors, you may pass a vector that   contains values  [2.x.17]    In the example above, one would pass in a vector with components    [2.x.18]     [2.x.19]     [2.x.20]  for (u,v,p).     The names of a data vector shall only contain characters which are   letters, underscore and a few other ones. Refer to the   ExcInvalidCharacter exception declared in this class to see which   characters are valid and which are not.    
*  [2.x.21]  The actual type for the vector argument may be any vector type from   which FEValues can extract values on a cell using the    [2.x.22]  function.    
*  [2.x.23]  When working in parallel, the vector to be written needs to be ghosted   with read access to all degrees of freedom on the locally owned cells, see   the  [2.x.24]  or  [2.x.25]  tutorial programs for details, i.e., it might be   necessary to call data.update_ghost_values().  
* [0.x.42]*
   This function is an abbreviation to the above one (see there for a   discussion of the various arguments), intended for use with finite   elements that are not composed of subelements. In this case, only one   name per data vector needs to be given, which is what this function   takes. It simply relays its arguments after a conversion of the  [2.x.26]    to a vector of strings, to the other add_data_vector() function above.     If  [2.x.27]  is a vector with multiple components this function will   generate distinct names for all components by appending an underscore and   the number of each component to  [2.x.28]      The actual type for the template argument may be any vector type from   which FEValues can extract values on a cell using the    [2.x.29]  function.  
* [0.x.43]*
   This function is an extension of the above one (see there for a   discussion of the arguments except the first one) and allows to set a   vector with its own DoFHandler object. This DoFHandler needs to be   compatible with the other DoFHandler objects assigned with calls to  [2.x.30]    add_data_vector or  [2.x.31]  in the sense that all of the   DoFHandler objects need to be based on the same triangulation. This   function allows you to export data from multiple DoFHandler objects that   describe different solution components. An example of using this function   is given in  [2.x.32] .     Since this function takes a DoFHandler object and hence naturally   represents dof data, the data vector type argument present in the other   methods above is not necessary.  
* [0.x.44]*
   This function is an abbreviation of the function above with only a scalar    [2.x.33]  given and a single data name.  
* [0.x.45]*
   This function is an alternative to the above ones, allowing the output of   derived quantities instead of the given data. This conversion has to be   done in a class derived from DataPostprocessor. This function is used in    [2.x.34] . Other uses are shown in  [2.x.35]  and  [2.x.36] .     The names for these derived quantities are provided by the  [2.x.37]    data_postprocessor argument. Likewise, the data_component_interpretation   argument of the other add_data_vector() functions is provided by the   data_postprocessor argument. As only data of type  [2.x.38]  can be   transformed, this type is also known implicitly and does not have to be   given.    
*  [2.x.39]  The actual type for the vector argument may be any vector type from   which FEValues can extract values on a cell using the    [2.x.40]  function.    
*  [2.x.41]  The DataPostprocessor object (i.e., in reality the object of your   derived class) has to live until the DataOut object is destroyed as the   latter keeps a pointer to the former and will complain if the object   pointed to is destroyed while the latter still has a pointer to it. If   both the data postprocessor and DataOut objects are local variables of a   function (as they are, for example, in  [2.x.42] ), then you can avoid this   error by declaring the data postprocessor variable before the DataOut   variable as objects are destroyed in reverse order of declaration.  
* [0.x.46]*
   Same function as above, but with a DoFHandler object that does not need   to coincide with the DoFHandler initially set. Note that the   postprocessor can only read data from the given DoFHandler and solution   vector, not other solution vectors or DoFHandlers.  
* [0.x.47]*
   Add a multilevel data vector.     This function adds the vector-valued multilevel vector  [2.x.43]  in the   form of a vector on each level that belongs to the DoFHandler  [2.x.44]    dof_handler to the graphical output. This function is typically used in   conjunction with a call to set_cell_selection() that selects cells on a   specific level and not the active cells (the default).     A vector  [2.x.45]  can be obtained in several ways, for example by using    [2.x.46]  or  [2.x.47]  during or after a multigrid   cycle or by interpolating a solution via    [2.x.48]      The handling of  [2.x.49]  and  [2.x.50]  is identical   to the add_data_vector() function.  
* [0.x.48]*
   Scalar version of the function above.  
* [0.x.49]*
   Release the pointers to the data vectors. This allows output of a new set   of vectors without supplying the DoF handler again. Therefore, the   DataOut object can be used in an algebraic context. Note that besides the   data vectors also the patches already computed are deleted.  
* [0.x.50]*
   Release pointers to all input data elements, i.e. pointers to data   vectors and to the DoF handler object. This function may be useful when   you have called the  [2.x.51]  function of derived class, since   then the patches are built and the input data is no more needed, nor is   there a need to reference it. You can then output the patches detached   from the main thread and need not make sure anymore that the DoF handler   object and vectors must not be deleted before the output thread is   finished.  
* [0.x.51]*
   This function can be used to merge the patches that were created using   the  [2.x.52]  function of the object given as argument into the   list of patches created by this object. This is sometimes handy if one   has, for example, a domain decomposition algorithm where each block is   represented by a DoFHandler of its own, but one wants to output the   solution on all the blocks at the same time.     For this to work, the given argument and this object need to have the   same number of output vectors, and they need to use the same number of   subdivisions per patch. The output will probably look rather funny if   patches in both objects overlap in space.     If you call build_patches() for this object after merging in patches, the   previous state is overwritten, and the merged-in patches are lost.     The second parameter allows to shift each node of the patches in the   object passed in in the first parameter by a certain amount. This is   sometimes useful to generate "exploded" views of a collection of blocks.     This function will fail if either this or the other object did not yet   set up any patches.  
* [0.x.52]*
    [2.x.53]  Use merge_patches() without the DoFHandlerType2 template   instead.  
* [0.x.53]*
   Release the pointers to the data vectors and the DoF handler. You have to   set all data entries again using the add_data_vector() function. The   pointer to the dof handler is cleared as well, along with all other data.   In effect, this function resets everything to a virgin state.  
* [0.x.54]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.55]*
   Abbreviate the somewhat lengthy name for the Patch class.  
* [0.x.56]*
   Pointer to the triangulation object.  
* [0.x.57]*
   Pointer to the optional handler object.  
* [0.x.58]*
   List of data elements with vectors of values for each degree of freedom.  
* [0.x.59]*
   List of data elements with vectors of values for each cell.  
* [0.x.60]*
   This is a list of patches that is created each time build_patches() is   called. These patches are used in the output routines of the base   classes.  
* [0.x.61]*
   %Function by which the base class's functions get to know what patches   they shall write to a file.  
* [0.x.62]*
   Virtual function through which the names of data sets are obtained by the   output functions of the base class.  
* [0.x.63]*
   Extracts the finite elements stored in the dof_data object, including a   dummy object of FE_DGQ<dim>(0) in case only the triangulation is used.  
* [0.x.64]*
   Overload of the respective  [2.x.54]    function. See there for a more extensive documentation.  
* [0.x.65]*
   Common function called by the four public add_data_vector methods.  
* [0.x.66]*
    [2.x.55]  Use  [2.x.56]  without the DoFHandlerType   template instead.  
* [0.x.67]