[0.x.0]*


* 
*  [2.x.0] 
*  Classes and functions that have to do with hp-finite elements. The  [2.x.1]  tutorial program gives an overview of how to use the classes in this namespace. A slightly more exotic application is given in  [2.x.2] .
*  The hp-namespace implements the algorithms and data structures used for the hp-framework in deal.II. An overview over the details of how these algorithms work and what data structures are used is given in the  [2.x.3]  "hp-paper".

* 
* [0.x.1]*


* 
*  [2.x.4] 
*  In the implementation of the hp-finite element method, each cell might have a different finite element associated with it. To handle this, the  [2.x.5]  must have a whole set of finite element classes associated with it. This concept is represented by the  [2.x.6]  class: Objects of this type act as containers that hold a whole set of finite element objects. Instead of storing pointers to finite element objects on each cell, we then only store an index for each cell that identifies the finite element object within the collection that should be used by this cell. The DoFHandler object associated with the given cell can then assign degrees of freedom to each cell in accordance with the finite element used for it.
*  A similar situation arises when integrating terms on a cell: one may want to use different quadrature formulas for different finite elements. For example, on cells where we use a Q1 element, a QGauss(2) object (i.e. a quadrature formula with two points in each space direction) may be sufficient, but on another cell where a Q3 element is used, this would lead to underintegration and we should use a QGauss(4) formula instead. Just as above, there exists a class  [2.x.7]  that acts as a collection of quadrature formulas.
*  Finally, one may want to use different orders for the boundary approximation for cells with different orders for the finite element. The  [2.x.8]  class allows to do this.
*  All of these three classes, the  [2.x.9]   [2.x.10]  and  [2.x.11]  classes, implement an interface very similar to that of  [2.x.12] . They have functions  [2.x.13]  to add a finite element, quadrature formula, or mapping to the collection. They have an  [2.x.14]  function that allows to retrieve a reference to a given element of the collection. And they have a  [2.x.15]  function that returns the number of elements in the collection. Some of the classes, in particular that holding finite element objects, also implement other functions specific to their purpose.
*  The similarity goes beyond the interface: When adding an element to the collection, all of the classes create a copy of the argument. This allows to pass a temporary object to the function adding the element. For example, the following works:

* 
* [1.x.0]
* 
*  This way, one can add elements of polynomial degree 1 through 4 to the collection. It is not necessary to retain the added object: the collection makes a copy of it, it does not only store a pointer to the given finite element object. This same observation also holds for the other collection classes.
*  It is customary that within an hp-finite element program, one keeps collections of finite elements and quadrature formulas with the same number of elements, each element of the one collection matching the element in the other. This is not necessary, but it often makes coding a lot simpler. If a collection of mappings is used, the same holds for  [2.x.16]  objects as well.
*  Whenever p-adaptivity is considered in an hp-finite element program, a hierarchy of finite elements needs to be established to determine succeeding finite elements for refinement and preceding ones for coarsening. Typically, this hierarchy considers how finite element spaces are nested: for example, a  [2.x.17]  element describes a sub-space of a  [2.x.18]  element, and so doing  [2.x.19]  refinement usually means using a larger (more accurate) finite element space. In other words, the hierarchy of finite elements is built by considering whether some elements of the collection are sub- or super-spaces of others.
*  By default, we assume that finite elements are stored in an ascending order based on their polynomial degree. If the order of elements differs, a corresponding hierarchy needs to be supplied to the collection via the  [2.x.20]  member function.
* 

* 
*  [2.x.21] 

* 
* [0.x.2]*
 A namespace for the implementation of hp-finite element specific algorithms and data structures.
* 

* 
*  [2.x.22] 

* 
* [0.x.3]