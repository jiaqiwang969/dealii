[0.x.0]*
     Transfer a discrete FE function (like a solution vector) by     interpolation while refining and/or coarsening a distributed grid and     handles the necessary communication.        
*  [2.x.0]  It is important to note, that if you use more than one     SolutionTransfer object at the same time, that the calls to prepare_*()     and interpolate()/deserialize() need to be in the same order.         [1.x.0] In a parallel computation PETSc or     Trilinos vector may contain ghost elements or not. For reading in     information with prepare_for_coarsening_and_refinement() or     prepare_for_serialization() you need to supply vectors with ghost     elements, so that all locally_active elements can be read. On the other     hand, ghosted vectors are generally not writable, so for calls to     interpolate() or deserialize() you need to supply distributed vectors     without ghost elements. More precisely, during interpolation the     current algorithm writes into all locally active degrees of freedom.         [1.x.1] Here VectorType is your favorite     vector type, e.g.  [2.x.1]       [2.x.2]  or corresponding block vectors.    
* [1.x.2]
*          As the grid is distributed, it is important to note that the old     solution(s) must be copied to one that also provides access to the     locally relevant DoF values (these values required for the interpolation     process):    
* [1.x.3]
*          Different from PETSc and Trilinos vectors,      [2.x.3]  allows writing into ghost elements.     For a ghosted vector the interpolation step can be accomplished via    
* [1.x.4]
*          [1.x.5]         This class can be used to serialize and later deserialize a distributed     mesh with solution vectors to a file. If you use more than one     DoFHandler and therefore more than one SolutionTransfer object, they     need to be serialized and deserialized in the same order.         If vector has the locally relevant DoFs, serialization works as     follows:    
* [1.x.6]
*      For deserialization the vector needs to be a distributed vector     (without ghost elements):    
* [1.x.7]
*              [1.x.8]         Since data on DoFHandler objects with hp-capabilities is associated with     many different FiniteElement objects, each cell's data has to be     processed with its corresponding `future_fe_index`. Further, if     refinement is involved, data will be packed on the parent cell with its     `future_fe_index` and unpacked later with the same index on its children.     If cells get coarsened into one, data will be packed on the children with     the least dominant finite element of their common subspace, and unpacked     on the parent with this particular finite element (consult      [2.x.4]  for more information).         Transferring a solution across refinement works exactly like in the     non-hp-case. However, when considering serialization, we also have to     store the active FE indices in an additional step. A code snippet     demonstrating serialization with the      [2.x.5]  class with DoFHandler objects     with hp-capabilities is provided in the following. Here VectorType is     your favorite vector type, e.g.  [2.x.6]       [2.x.7]  or corresponding block vectors.         If vector has the locally relevant DoFs, serialization works as follows:    
* [1.x.9]
*          For deserialization the vector needs to be a distributed vector     (without ghost elements):    
* [1.x.10]
*              [1.x.11]         In essence, this class implements the same steps as does      [2.x.8]  (though the implementation is entirely     separate). Consequently, the same issue with hanging nodes and     coarsening can happen with this class as happens with      [2.x.9]  See there for an extended discussion.        
*  [2.x.10]     
* [0.x.1]*
       Constructor.              [2.x.11]  dof The DoFHandler on which all operations will happen.         At the time when this constructor is called, the DoFHandler still         points to the Triangulation before the refinement in question         happens.      
* [0.x.2]*
       Destructor.      
* [0.x.3]*
       Prepare the current object for coarsening and refinement. It       stores the dof indices of each cell and stores the dof values of the       vectors in  [2.x.12]  in each cell that'll be coarsened.  [2.x.13]        includes all vectors that are to be interpolated onto the new       (refined and/or coarsened) grid.      
* [0.x.4]*
       Same as the previous function but for only one discrete function to be       interpolated.      
* [0.x.5]*
       Interpolate the data previously stored in this object before the mesh       was refined or coarsened onto the current set of cells. Do so for       each of the vectors provided to       prepare_for_coarsening_and_refinement() and write the result into the       given set of vectors.      
* [0.x.6]*
       Same as the previous function. It interpolates only one function. It       assumes the vectors having the right sizes (i.e.       <tt>in.size()==n_dofs_old</tt>, <tt>out.size()==n_dofs_refined</tt>)             Multiple calling of this function is NOT allowed. Interpolating       several functions can be performed in one step by using       <tt>interpolate (all_in, all_out)</tt>      
* [0.x.7]*
       Prepare the serialization of the given vector. The serialization is       done by  [2.x.14]  The given vector needs all information       on the locally active DoFs (it must be ghosted). See documentation of       this class for more information.      
* [0.x.8]*
       Same as the function above, only for a list of vectors.      
* [0.x.9]*
       Execute the deserialization of the given vector. This needs to be       done after calling  [2.x.15]  The given vector must be a       fully distributed vector without ghost elements. See documentation of       this class for more information.      
* [0.x.10]*
       Same as the function above, only for a list of vectors.      
* [0.x.11]*
       Pointer to the degree of freedom handler to work with.      
* [0.x.12]*
       A vector that stores pointers to all the vectors we are supposed to       copy over from the old to the new mesh.      
* [0.x.13]*
       The handle that the Triangulation has assigned to this object       with which we can access our memory offset and our pack function.      
* [0.x.14]*
       A callback function used to pack the data on the current mesh into       objects that can later be retrieved after refinement, coarsening and       repartitioning.      
* [0.x.15]*
       A callback function used to unpack the data on the current mesh that       has been packed up previously on the mesh before refinement,       coarsening and repartitioning.      
* [0.x.16]*
       Registers the pack_callback() function to the        [2.x.16]  that has been assigned to the       DoFHandler class member and stores the returning handle.      
* [0.x.17]*
        [2.x.17]  Use  [2.x.18]        without the DoFHandlerType template instead.      
* [0.x.18]