[0.x.0]*
   Operator class performing Newton's iteration with standard step size   control and adaptive matrix generation.     This class performs a Newton iteration up to convergence determined by   #control. If after an update the norm of the residual has become larger,   then step size control is activated and the update is subsequently   divided by two until the residual actually becomes smaller (or the   minimal scaling factor determined by #n_stepsize_iterations is reached).     Since assembling matrices, depending on the implementation, tends to be   costly, this method applies an adaptive reassembling strategy. Only if   the reduction factor for the residual is more than #threshold, the event    [2.x.0]  is submitted to #inverse_derivative. It is up   to this object to implement reassembling accordingly.     [1.x.0]     The only value used by the Newton method is the first vector in the   parameter <tt>out</tt> of operator()(). It serves as the start vector of   Newton's method and in the end contains the solution. All other vectors   of <tt>out</tt> are ignored by Newton's method and its inner Operator   objects. All vectors of <tt>in</tt> are forwarded to the inner Operator   objects, with additional information added as follows.     When calling (*#residual)(), the AnyData <tt>in</tt> given to the Newton   iteration is prepended by a vector <tt>"Newton iterate"</tt>, the current   value of the Newton iterate, which can be used to evaluate the residual   at this point.     For the call to (*#inverse_derivative), the vector <tt>"Newton   residual"</tt> is inserted before <tt>"Newton iterate"</tt>.  
* [0.x.1]*
     Constructor, receiving the applications computing the residual and     solving the linear problem, respectively.    
* [0.x.2]*
     Declare the parameters applicable to Newton's method.    
* [0.x.3]*
     Read the parameters in the ParameterHandler.    
* [0.x.4]*
     Initialize the pointer data_out for debugging.    
* [0.x.5]*
     The actual Newton iteration. The initial value is in <tt>out(0)</tt>,     which also contains the result after convergence. Values in <tt>in</tt>     are not used by Newton, but will be handed down to the objects     #residual and #inverse_derivative.    
* [0.x.6]*
     Set the maximal residual reduction allowed without triggering     assembling in the next step. Return the previous value.    
* [0.x.7]*
     Control object for the Newton iteration.    
* [0.x.8]*
     The operator computing the residual.    
* [0.x.9]*
     The operator applying the inverse derivative to the residual.    
* [0.x.10]*
     The operator handling the output in case the debug_vectors is true.     Call the initialize function first.    
* [0.x.11]*
     This flag is set by the function assemble(), indicating that the matrix     must be assembled anew upon start.    
* [0.x.12]*
     A flag used to decide how many stepsize iteration should be made.     Default is the original value of 21.         Enter zero here to turn off stepsize control.        
*  [2.x.1]  Controlled by <tt>Stepsize iterations</tt> in parameter file    
* [0.x.13]*
     Threshold for re-assembling matrix.         If the quotient of two consecutive residuals is smaller than this     threshold, the system matrix is not assembled in this step.        
*  [2.x.2]  This parameter should be adjusted to the residual gain of the     inner solver.         The default values is zero, resulting in reassembling in every Newton     step.    
* [0.x.14]*
     Print residual, update and updated solution after each step into file     <tt>Newton_NNN</tt>?    
* [0.x.15]*
     Write debug output to  [2.x.3]  the higher the number, the more     output.    
* [0.x.16]