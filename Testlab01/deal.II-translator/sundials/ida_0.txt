[0.x.0]*
   Interface to SUNDIALS Implicit Differential-Algebraic (IDA) solver.     The class IDA is a wrapper to SUNDIALS Implicit Differential-Algebraic   solver which is a general purpose solver for systems of   Differential-Algebraic Equations (DAEs).     The user has to provide the implementation of the following  [2.x.0] 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - reinit_vector;
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - residual;
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - setup_jacobian;
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - solve_jacobian_system/solve_with_jacobian;     The function `solve_jacobian_system` should be implemented for SUNDIALS   < 4.0.0. For later versions, you should use   `solve_with_jacobian` to leverage better non-linear   algorithms.     Optionally, also the following functions could be provided. By default   they do nothing, or are not required. If you call the constructor in a way   that requires a not-implemented function, an Assertion will be   thrown.
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - solver_should_restart;
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - differential_components;
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - get_local_tolerances;     To output steps, connect a function to the signal
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - output_step;     Citing from the SUNDIALS documentation:       Consider a system of Differential-Algebraic Equations written in the     general form     [1.x.0]     where  [2.x.1]  are vectors in  [2.x.2] ,  [2.x.3]  is often the time (but   can also be a parametric quantity), and    [2.x.4] .   Such problem is solved using Newton iteration augmented with a line search   global strategy. The integration method used in IDA is the variable-order,   variable-coefficient BDF (Backward Differentiation Formula), in   fixed-leading-coefficient. The method order ranges from 1 to 5, with   the BDF of order  [2.x.5]  given by the multistep formula     [1.x.1]     where  [2.x.6]  and  [2.x.7]  are the computed approximations of  [2.x.8]    and  [2.x.9] , respectively, and the step size is    [2.x.10] . The coefficients  [2.x.11]  are uniquely   determined by the order  [2.x.12] , and the history of the step sizes. The   application of the BDF method to the DAE system results in a nonlinear  algebraic system to be solved at each time step:     [1.x.2]   The Newton method leads to a linear system of the form   [1.x.3]    where  [2.x.13]  is the  [2.x.14] -th approximation to  [2.x.15] , and  [2.x.16]  is the  approximation of the system Jacobian     [1.x.4]     and  [2.x.17] . It is worth mentioning that the   scalar  [2.x.18]  changes whenever the step size or method order   changes.     To provide a simple example, consider the following harmonic oscillator  problem: [1.x.5]     We write it in terms of a first order ode:  [1.x.6]     That is  [2.x.19]    where   [1.x.7]   and  [2.x.20] ,  [2.x.21] .     The exact solution is  [2.x.22] ,  [2.x.23] ,  [2.x.24] .     The Jacobian to assemble is the following:   [2.x.25] .     This is achieved by the following snippet of code:  
* [1.x.8]
*   
* [0.x.1]*
     Additional parameters that can be passed to the IDA class.    
* [0.x.2]*
       IDA is a Differential Algebraic solver. As such, it requires initial       conditions also for the first order derivatives. If you do not provide       consistent initial conditions, (i.e., conditions for which F(y_dot(0),       y(0), 0) = 0), you can ask SUNDIALS to compute initial conditions for       you by specifying InitialConditionCorrection for the initial       conditions both at the `initial_time` (`ic_type`) and after a reset       has occurred (`reset_type`).      
* [0.x.3]*
         Do not try to make initial conditions consistent.        
* [0.x.4]*
         Compute the algebraic components of y and differential         components of y_dot, given the differential components of y.            This option requires that the user specifies differential and            algebraic components in the function get_differential_components.        
* [0.x.5]*
         Compute all components of y, given y_dot.        
* [0.x.6]*
       Initialization parameters for IDA.             Global parameters:              [2.x.26]  initial_time Initial time        [2.x.27]  final_time Final time        [2.x.28]  initial_step_size Initial step size        [2.x.29]  output_period Time interval between each output             Running parameters:              [2.x.30]  minimum_step_size Minimum step size        [2.x.31]  maximum_order Maximum BDF order        [2.x.32]  maximum_non_linear_iterations Maximum number of nonlinear       iterations        [2.x.33]  ls_norm_factor Converting factor from the integrator tolerance       to the linear solver tolerance       iterations             Error parameters:              [2.x.34]  absolute_tolerance Absolute error tolerance        [2.x.35]  relative_tolerance Relative error tolerance        [2.x.36]  ignore_algebraic_terms_for_errors Ignore algebraic terms for       error computations             Initial condition correction parameters:              [2.x.37]  ic_type Initial condition correction type        [2.x.38]  reset_type Initial condition correction type after restart        [2.x.39]  maximum_non_linear_iterations_ic Initial condition Newton max       iterations      
* [0.x.7]*
       Add all AdditionalData() parameters to the given ParameterHandler       object. When the parameters are parsed from a file, the internal       parameters are automatically updated.             The following parameters are declared:            
* [1.x.9]
*              These are one-to-one with the options you can pass at construction       time.             The options you pass at construction time are set as default values in       the ParameterHandler object `prm`. You can later modify them by parsing       a parameter file using `prm`. The values of the parameter will be       updated whenever the content of `prm` is updated.             Make sure that this class lives longer than `prm`. Undefined behavior       will occur if you destroy this class, and then parse a parameter file       using `prm`.      
* [0.x.8]*
       Initial time for the DAE.      
* [0.x.9]*
       Final time.      
* [0.x.10]*
       Initial step size.      
* [0.x.11]*
       Minimum step size.      
* [0.x.12]*
       Absolute error tolerance for adaptive time stepping.      
* [0.x.13]*
       Relative error tolerance for adaptive time stepping.      
* [0.x.14]*
       Maximum order of BDF.      
* [0.x.15]*
       Time period between each output.      
* [0.x.16]*
       Ignore algebraic terms for errors.      
* [0.x.17]*
       Type of correction for initial conditions.             If you do not provide consistent initial conditions, (i.e., conditions       for which  [2.x.40] ), you can ask SUNDIALS to compute       initial conditions for you by using the `ic_type` parameter at       construction time.             Notice that you could in principle use this capabilities to solve for       steady state problems by setting y_dot to zero, and asking to compute        [2.x.41]  that satisfies  [2.x.42] , however the nonlinear solver       used inside IDA may not be robust enough for complex problems with       several millions unknowns.      
* [0.x.18]*
       Type of correction for initial conditions to be used after a solver       restart.             If you do not have consistent initial conditions after a restart,       (i.e., conditions for which F(y_dot(t_restart), y(t_restart),       t_restart) = 0), you can ask SUNDIALS to compute the new initial       conditions for you by using the `reset_type` parameter at construction       time.      
* [0.x.19]*
       Maximum number of iterations for Newton method in IC calculation.      
* [0.x.20]*
       Maximum number of iterations for Newton method during time advancement.      
* [0.x.21]*
       Factor to use when converting from the integrator tolerance to the       linear solver tolerance      
* [0.x.22]*
     Constructor. It is possible to fine tune the SUNDIALS IDA solver by     passing an AdditionalData() object that sets all of the solver     parameters.         IDA is a Differential Algebraic solver. As such, it requires initial     conditions also for the first order derivatives. If you do not provide     consistent initial conditions, (i.e., conditions for which F(y_dot(0),     y(0), 0) = 0), you can ask SUNDIALS to compute initial conditions for you     by using the `ic_type` parameter at construction time.         You have three options
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  -  none: do not try to make initial conditions consistent.
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  -  use_y_diff: compute the algebraic components of y and differential        components of y_dot, given the differential components of y.        This option requires that the user specifies differential and        algebraic components in the function get_differential_components.
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  -  use_y_dot: compute all components of y, given y_dot.         By default, this class assumes that all components are differential, and     that you want to solve a standard ode. In this case, the initial     component type is set to `use_y_diff`, so that the `y_dot` at time     t=`initial_time` is computed by solving the nonlinear problem  [2.x.43]  in the variable `y_dot`.         Notice that a Newton solver is used for this computation. The Newton     solver parameters can be tweaked by acting on `ic_alpha` and     `ic_max_iter`.         If you reset the solver at some point, you may want to select a different     computation for the initial conditions after reset. Say, for example,     that you have refined a grid, and after transferring the solution to the     new grid, the initial conditions are no longer consistent. Then you can     choose how these are made consistent, using the same three options that     you used for the initial conditions in `reset_type`.         The MPI communicator is simply ignored in the serial case.          [2.x.44]  data IDA configuration data      [2.x.45]  mpi_comm MPI communicator    
* [0.x.23]*
     Destructor.    
* [0.x.24]*
     Integrate differential-algebraic equations. This function returns the     final number of computed steps.    
* [0.x.25]*
     Clear internal memory and start with clean objects. This function is     called when the simulation start and when the user returns true to a     call to solver_should_restart().         By default solver_should_restart() returns false. If the user needs to     implement, for example, local adaptivity in space, he or she may assign     a different function to solver_should_restart() that performs all mesh     changes, transfers the solution and the solution dot to the new mesh,     and returns true.         During reset(), both y and yp are checked for consistency, and according     to what was specified as ic_type (if t==initial_time) or reset_type (if     t>initial_time), yp, y, or both are modified to obtain a consistent set     of initial data.          [2.x.46]  t  The new starting time      [2.x.47]  h  The new (tentative) starting time step      [2.x.48]  y   The new (tentative) initial solution      [2.x.49]  yp  The new (tentative) initial solution_dot    
* [0.x.26]*
     Reinit vector to have the right size, MPI communicator, etc.    
* [0.x.27]*
     Compute residual. Return  [2.x.50] .         This function should return:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - 0: Success
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - >0: Recoverable error (IDAReinit will be called if this happens, and           then last function will be attempted again
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - <0: Unrecoverable error the computation will be aborted and an     assertion will be thrown.    
* [0.x.28]*
     Compute Jacobian. This function is called by IDA any time a Jacobian     update is required. The user should compute the Jacobian (or update all     the variables that allow the application of the Jacobian). This function     is called by IDA once, before any call to solve_jacobian_system() (for     SUNDIALS < 4.0.0) or solve_with_jacobian() (for     SUNDIALS >= 4.0.0).         The Jacobian  [2.x.51]  should be a (possibly inexact) computation of     [1.x.10]         If the user uses a matrix based computation of the Jacobian, than this     is the right place where an assembly routine should be called to     assemble both a matrix and a preconditioner for the Jacobian system.     Subsequent calls (possibly more than one) to solve_jacobian_system() or     solve_with_jacobian() can assume that this function has     been called at least once.         Notice that no assumption is made by this interface on what the user     should do in this function. IDA only assumes that after a call to     setup_jacobian() it is possible to call solve_jacobian_system() or     solve_with_jacobian() to obtain a solution  [2.x.52]  to the     system  [2.x.53] .         This function should return:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - 0: Success
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - >0: Recoverable error (IDAReinit will be called if this happens, and           then last function will be attempted again
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - <0: Unrecoverable error the computation will be aborted and an     assertion will be thrown.    
* [0.x.29]*
     Solve the Jacobian linear system. This function will be called by IDA     (possibly several times) after setup_jacobian() has been called at least     once. IDA tries to do its best to call setup_jacobian() the minimum     amount of times. If convergence can be achieved without updating the     Jacobian, then IDA does not call setup_jacobian() again. If, on the     contrary, internal IDA convergence tests fail, then IDA calls again     setup_jacobian() with updated vectors and coefficients so that successive     calls to solve_jacobian_systems() lead to better convergence in the     Newton process.         The jacobian  [2.x.54]  should be (an approximation of) the system Jacobian     [1.x.11]         A call to this function should store in `dst` the result of  [2.x.55]      applied to `src`, i.e., `J*dst = src`. It is the users responsibility     to set up proper solvers and preconditioners inside this function.         This function should return:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - 0: Success
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - >0: Recoverable error (IDAReinit will be called if this happens, and           then last function will be attempted again
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - <0: Unrecoverable error the computation will be aborted and an     assertion will be thrown.          [2.x.56]  Starting with SUNDIALS 4.1, SUNDIALS provides the possibility of     specifying the tolerance for the resolution. A part from the tolerance     only `rhs` is provided and `dst` needs to be returned.    
* [0.x.30]*
     Solve the Jacobian linear system up to a specified tolerance. This     function will be called by IDA (possibly several times) after     setup_jacobian() has been called at least once. IDA tries to do its best     to call setup_jacobian() the minimum number of times. If convergence can     be achieved without updating the Jacobian, then IDA does not call     setup_jacobian() again. If, on the contrary, internal IDA convergence     tests fail, then IDA calls again setup_jacobian() with updated vectors     and coefficients so that successive calls to     solve_with_jacobian() lead to better convergence in the     Newton process.         The Jacobian  [2.x.57]  should be (an approximation of) the system Jacobian     [1.x.12]         Arguments to the function are:          [2.x.58]  rhs The system right hand side to solve for.      [2.x.59]  dst The solution of  [2.x.60] .      [2.x.61]  tolerance The tolerance with which to solve the linear system       of equations.         A call to this function should store in `dst` the result of  [2.x.62]      applied to `src`, i.e., the solution of the linear system `J*dst = src`.     It is the user's responsibility to set up proper solvers and     preconditioners either inside this function, or already within the     `setup_jacobian()` function. (The latter is, for example, what the      [2.x.63]  program does: All expensive operations happen in     `setup_jacobian()`, given that that function is called far less often     than the current one.)         This function should return:
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - 0: Success
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - >0: Recoverable error (IDAReinit will be called if this happens, and           then the last function will be attempted again).
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - <0: Unrecoverable error the computation will be aborted and an     assertion will be thrown.    
* [0.x.31]*
     Process solution. This function is called by IDA at fixed time steps,     every `output_period` seconds, and it is passed a polynomial     interpolation of the solution and of its time derivative, computed using     the current BDF order and the (internally stored) previously computed     solution steps.         Notice that it is well possible that internally IDA computes a time step     which is much larger than the `output_period` step, and therefore calls     this function consecutively several times by simply performing all     intermediate interpolations. There is no relationship between how many     times this function is called and how many time steps have actually been     computed.    
* [0.x.32]*
     Evaluate whether the solver should be restarted (for example because the     number of degrees of freedom has changed).         This function is supposed to perform all operations that are necessary in     `sol` and `sol_dot` to make sure that the resulting vectors are     consistent, and of the correct final size.         For example, one may decide that a local refinement is necessary at time     t. This function should then return true, and change the dimension of     both sol and sol_dot to reflect the new dimension. Since IDA does not     know about the new dimension, an internal reset is necessary.         The default implementation simply returns `false`, i.e., no restart is     performed during the evolution.    
* [0.x.33]*
     Return an index set containing the differential components.     Implementation of this function is optional. The default is to return a     complete index set. If your equation is also algebraic (i.e., it     contains algebraic constraints, or Lagrange multipliers), you should     overwrite this function in order to return only the differential     components of your system.         When running in parallel, every process will call this function     independently, and synchronization will happen at the end of the     initialization setup to communicate what components are local. Make sure     you only return the locally owned (or locally relevant) components, in     order to minimize communication between processes.    
* [0.x.34]*
     Return a vector whose components are the weights used by IDA to compute     the vector norm. The implementation of this function is optional. If the     user does not provide an implementation, the weights are assumed to be     all ones.    
* [0.x.35]*
     Handle IDA exceptions.    
* [0.x.36]*
     Throw an exception when a function with the given name is not     implemented.    
* [0.x.37]*
     This function is executed at construction time to set the      [2.x.64]  above to trigger an assert if they are not     implemented.    
* [0.x.38]*
     IDA configuration data.    
* [0.x.39]*
     IDA memory object.    
* [0.x.40]*
     MPI communicator. SUNDIALS solver runs happily in     parallel. Note that if the library is compiled without MPI     support, MPI_Comm is aliased as int.    
* [0.x.41]*
     Memory pool of vectors.    
* [0.x.42]