[0.x.0]*
     Create a NVectorView of the given  [2.x.0]          This call is intended to be used as        
* [1.x.0]
*          The resulting object `view` must be kept around as long as any other     object will use the internally viewed N_Vector.          [2.x.1]  VectorType Type of the viewed vector. This parameter can be       deduced automatically and will respect a potential const-qualifier.      [2.x.2]  vector The vector to view.      [2.x.3]  A NVectorView of the  [2.x.4]           [2.x.5]  NVectorView    
* [0.x.1]*
     Retrieve the underlying vector attached to N_Vector  [2.x.6]  This call will     only succeed if the underlying vector is not const. Use     unwrap_nvector_const() for this case.        
*  [2.x.7]  Users must ensure that they ask for the correct VectorType when       calling this function and there are no type-safety checks in place.          [2.x.8]  VectorType Type of the vector that is stored in  [2.x.9]       [2.x.10]  v Vector to unwrap      [2.x.11]  The vector that is stored inside  [2.x.12]     
* [0.x.2]*
     Retrieve the underlying vector attached to N_Vector  [2.x.13]  as a constant     pointer.        
*  [2.x.14]  Users must ensure that they ask for the correct VectorType when       calling this function and there are no type-safety checks in place.          [2.x.15]  VectorType Type of the vector that is stored in  [2.x.16]       [2.x.17]  v Vector to unwrap      [2.x.18]  The vector that is stored inside  [2.x.19]     
* [0.x.3]*
     A view to a vector which can be used whenever a N_Vector is required.         Objects of this class should preferably be created by     make_nvector_view() as        
* [1.x.1]
*          The resulting N_Vector is a view of the actual vector and not owning     memory. Also, N_VDestroy() cannot be called on the resulting N_Vector     since this would lead to a double delete in the destructor.        
*  [2.x.20]  SUNDIALS will never call N_VDestroy() on a vector it didn't create       itself and thus the above constraint is not limiting the user.          [2.x.21]  VectorType Type of the vector that is stored in  [2.x.22]     
* [0.x.4]*
       Default constructor.             The object is not actually viewing anything and needs to be assigned to       with operator=(NVectorView &&).      
* [0.x.5]*
       Constructor. Create view of  [2.x.23]       
* [0.x.6]*
       Move assignment.      
* [0.x.7]*
       Move constructor.      
* [0.x.8]*
       Explicitly delete copy ctor. This class is move-only.      
* [0.x.9]*
       Explicitly delete copy assignment. This class is move-only.      
* [0.x.10]*
       Destructor.            
*  [2.x.24]  This will not destroy the viewed vector.      
* [0.x.11]*
       Implicit conversion to N_Vector. This operator makes the NVectorView       look like an actual N_Vector and it can be used directly as an       argument in many SUNDIALS functions.      
* [0.x.12]*
       Access the N_Vector that is viewed by this object.      
* [0.x.13]*
       Actual pointer to a vector viewed by this class.      
* [0.x.14]