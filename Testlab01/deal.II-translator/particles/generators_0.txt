[0.x.0]*
   A namespace that contains all classes that are related to the particle   generation.  
* [0.x.1]*
     A function that generates particles in every cell at specified  [2.x.0]      The total number of particles that is added to the  [2.x.1]  object is     the number of locally owned cells of the  [2.x.2]  times the number of     locations in  [2.x.3]  An optional  [2.x.4]  argument     can be used to map from  [2.x.5]  to the real particle locations.          [2.x.6]  triangulation The triangulation associated with the  [2.x.7]           [2.x.8]  particle_reference_locations A vector of positions in the unit cell.     Particles will be generated in every cell at these locations.          [2.x.9]  particle_handler The particle handler that will take ownership     of the generated particles.          [2.x.10]  mapping An optional mapping object that is used to map reference     location in the unit cell to the real cells of the triangulation. If no     mapping is provided a MappingQ1 is assumed.    
* [0.x.2]*
     A function that generates one particle at a random location in cell  [2.x.11]  and with     index  [2.x.12]  The function expects a random number generator to avoid the expensive generation     and destruction of a generator for every particle and optionally takes     into account a mapping for the cell. The algorithm implemented in the     function is described in  [2.x.13] . In short, the algorithm     generates     random locations within the bounding box of the  [2.x.14]  It then inverts the mapping     to check if the generated particle is within the cell itself. This makes     sure the algorithm produces statistically random locations even for     nonlinear mappings and distorted cells. However, if the ratio between     bounding box and cell volume becomes very large
* 
*  -  i.e. the cells become     strongly deformed, for example a pencil shaped cell that lies diagonally     in the domain
* 
*  -  then the algorithm can become very inefficient.     Therefore, it only tries to find a location ni the cell a fixed number of     times before throwing an error message.          [2.x.15]  cell The cell in which a particle is generated.          [2.x.16]  id The particle index that will be assigned to the new     particle.          [2.x.17]  random_number_generator A random number generator that     will be used for the creation of th particle.          [2.x.18]  mapping An optional mapping object that is used to map     reference location in the unit cell to the real cell. If no mapping is     provided a MappingQ1 is assumed.    
* [0.x.3]*
     A function that generates particles randomly in the domain with a     particle density     according to a provided probability density function  [2.x.19]      The total number of particles that is added to the  [2.x.20]  object is      [2.x.21]  An optional  [2.x.22]  argument     can be used to map from  [2.x.23]  to the real particle locations.     The function can compute the number of particles per cell either     deterministically by computing the integral of the probability density     function for each cell and creating     particles accordingly (if option  [2.x.24]  set to false), or it can     select cells randomly based on the probability density function and the     cell size     (if option  [2.x.25]  set to true). In either case the position of     individual particles inside the cell is computed randomly.         The algorithm implemented in the function is described in      [2.x.26] .          [2.x.27]  triangulation The triangulation associated with the  [2.x.28]           [2.x.29]  probability_density_function A function with non-negative     values that determines the probability density of a particle to be     generated in this location. The function does not need to be normalized.          [2.x.30]  random_cell_selection A bool that determines, how the number     of particles per cell is computed (see the description above).          [2.x.31]  n_particles_to_create The number of particles that will be     created by this function.          [2.x.32]  particle_handler The particle handler that will take     ownership of the generated particles.          [2.x.33]  mapping An optional mapping object that is used to map     reference location in the unit cell to the real cells of the     triangulation. If no mapping is provided a MappingQ1 is assumed.          [2.x.34]  random_number_seed An optional seed that determines the     initial state of the random number generator. Use the same number to get     a reproducible particle distribution, or a changing number (e.g. based on     system time) to generate different particle distributions for each call     to this function.    
* [0.x.4]*
     A function that generates particles at the locations of the support     points of a DoFHandler, possibly based on a different Triangulation with     respect to the one used to construct the ParticleHandler.     The total number of particles that is added to the  [2.x.35]  object is     the number of dofs of the DoFHandler that is passed that are within the     triangulation and whose components are within the ComponentMask.     This function uses insert_global_particles and consequently may induce     considerable mpi communication overhead.         This function is used in  [2.x.36] .          [2.x.37]  dof_handler A DOF handler that may live on another     triangulation that is used to establsh the positions of the particles.          [2.x.38]  global_bounding_boxes A vector that contains all the bounding     boxes for all processors. This vector can be established by first using      [2.x.39]  and gathering all the     bounding boxes using  [2.x.40]           [2.x.41]  particle_handler The particle handler that will take     ownership of the generated particles. The particles that are generated     will be appended to the particles currently owned by the particle     handler.          [2.x.42]  mapping An optional mapping object that is used to map     the DOF locations. If no mapping is provided a MappingQ1 is assumed.          [2.x.43]  components Component mask that decides which subset of the     support points of the dof_handler are used to generate the particles.          [2.x.44]  properties An optional vector of vector of properties     for each particle to be inserted.    
* [0.x.5]*
     A function that generates particles at the locations of the quadrature     points of a Triangulation. This Triangulation can be different     from the one used to construct the ParticleHandler.     The total number of particles that is added to the  [2.x.45]  object is the     number of cells multiplied by the number of particle reference locations     which are generally constructed using a quadrature.     This function uses insert_global_particles and consequently may     induce considerable mpi communication overhead.          [2.x.46]  triangulation The possibly non-matching triangulation which is     used to insert the particles into the domain.          [2.x.47]  quadrature A quadrature whose reference location are used to     insert the particles within the cells.          [2.x.48]  global_bounding_boxes A vector that contains all the bounding     boxes for all processors. This vector can be established by first using      [2.x.49]  and gathering all the     bounding boxes using  [2.x.50]           [2.x.51]  particle_handler The particle handler that will take     ownership of the generated particles.          [2.x.52]  mapping An optional mapping object that is used to map     the quadrature locations. If no mapping is provided a MappingQ1 is     assumed.          [2.x.53]  properties An optional vector of vector of properties     for each particle to be inserted.    
* [0.x.6]