[0.x.0]*
   A namespace for functions offering tools to handle ParticleHandler objects   and their coupling with DoFHandler objects.  
* [0.x.1]*
     Create an interpolation sparsity pattern for particles.         Given a triangulation representing the domain  [2.x.0] , a particle     handler of particles in  [2.x.1] , and a scalar finite element space      [2.x.2] , compute the sparsity pattern     that would be necessary to assemble the matrix     [1.x.0]     where  [2.x.3]  is the finite element space associated with the     `space_dh`, and the index `i` is given by the particle id whose position     is `x_i`.         In the case of vector valued finite element spaces, the components on     which interpolation must be performed can be selected using a component     mask. Only primitive finite element spaces are supported.         When selecting more than one component, the resulting sparsity will have     dimension equal to `particle_handler.n_global_particles()     mask.n_selected_components()` times `space_dh.n_dofs()`, and the     corresponding matrix entries are given by     [1.x.1]     where `comp_j` is the only non zero component of the vector valued basis     function `v_j` (equal to `fe.system_to_component_index(j).first`),     `k` corresponds to its index within the selected components of the mask,     and  [2.x.4]  is the unit vector in the direction `comp_j`.         The `sparsity` is filled by locating the position of the particle with     index `i` within the particle handler with respect to the embedding     triangulation  [2.x.5] , and coupling it with all the local degrees of     freedom specified in the component mask  [2.x.6]  following the     ordering in which they are selected in the mask  [2.x.7]          If a particle does not fall within  [2.x.8] , it is ignored, and the     corresponding rows of the sparsity will be empty.         Constraints of the form supported by the AffineConstraints class may be     supplied with the  [2.x.9]  argument. The method      [2.x.10]  is used to fill the     final sparsity pattern.    
* [0.x.2]*
     Create an interpolation matrix for particles.         Given a triangulation representing the domains  [2.x.11] , a particle     handler of particles in  [2.x.12] , and a scalar finite element space      [2.x.13] , compute the matrix     [1.x.2]     where  [2.x.14]  is the finite element space associated with the     `space_dh`, and the index `i` is given by the particle id whose position     is `x_i`.         In the case of vector valued finite element spaces, the components on     which interpolation must be performed can be selected using a component     mask. Only primitive finite element spaces are supported.         When selecting more than one component, the resulting sparsity will have     dimension equal to `particle_handler.n_global_particles()     mask.n_selected_components()` times `space_dh.n_dofs()`, and the     corresponding matrix entries are given by     [1.x.3]     where `comp_j` is the only non zero component of the vector valued basis     function `v_j` (equal to `fe.system_to_component_index(j).first`),     `k` corresponds to its index within the selected components of the mask,     and  [2.x.15]  is the unit vector in the direction `comp_j`.         The matrix is filled by locating the position of the particle with     index `i` within the particle handler with respect to the embedding     triangulation  [2.x.16] , and coupling it with all the local degrees of     freedom specified in the component mask  [2.x.17]  following the     ordering in which they are selected in the mask  [2.x.18]          If a particle does not fall within  [2.x.19] , it is ignored, and the     corresponding rows of the matrix will be zero.         Constraints of the form supported by the AffineConstraints class may be     supplied with the  [2.x.20]  argument. The method      [2.x.21]  is used to distribute     the entries of the matrix to respect the given constraints.    
* [0.x.3]*
     Given a DoFHandler and a ParticleHandler, interpolate a vector field     at the position of the particles. The result is stored in an output     vector whose size corresponds to the number of locally owned particles     number of active components          [2.x.22]  field_dh The DOF Handler which was used to generate the     field vector that is to be interpolated.          [2.x.23]  particle_handler The particle handler whose particle serve as     the interpolation points.          [2.x.24]  field_vector The vector of the field to be interpolated. This     vector must be coherent with the dof_handler provided          [2.x.25]  interpolated_field The interpolated value of the field at     the position of the particles. The size of the vector must be     n_locally_owned_particles times the n_components          [2.x.26]  field_comps An optional component mask that decides which     subset of the vector fields are interpolated    
* [0.x.4]