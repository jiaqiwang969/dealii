[0.x.0]*
   Multilevel matrix. This matrix stores an MGLevelObject of   LinearOperator objects. It implements the interface defined in   MGMatrixBase, so that it can be used as a matrix in Multigrid.  
* [0.x.1]*
     Default constructor for an empty object.    
* [0.x.2]*
     Constructor setting up pointers to the matrices in <tt>M</tt> by     calling initialize().    
* [0.x.3]*
     Initialize the object such that the level multiplication uses the     matrices in <tt>M</tt>    
* [0.x.4]*
     Reset the object.    
* [0.x.5]*
     Access matrix on a level.    
* [0.x.6]*
     Memory used by this object.    
* [0.x.7]*
 Multilevel matrix selecting from block matrices. This class implements the interface defined by MGMatrixBase.  The template parameter  [2.x.0]  should be a block matrix class like BlockSparseMatrix or  [2.x.1]  BlockSparseMatrixEZ. Then, this class stores a pointer to a MGLevelObject of this matrix class. In each  [2.x.2]  the block selected on initialization will be multiplied with the vector provided.

* 
* [0.x.8]*
   Constructor.  [2.x.3]  and  [2.x.4]  are the coordinate of the selected block.   The other argument is handed over to the  [2.x.5]  constructor.  
* [0.x.9]*
   Set the matrix object to be used. The matrix object must exist longer as   the  [2.x.6]  object, since only a pointer is stored.  
* [0.x.10]*
   Select the block for multiplication.  
* [0.x.11]*
   Matrix-vector-multiplication on a certain level.  
* [0.x.12]*
   Adding matrix-vector-multiplication on a certain level.  
* [0.x.13]*
   Transpose matrix-vector-multiplication on a certain level.  
* [0.x.14]*
   Adding transpose matrix-vector-multiplication on a certain level.  
* [0.x.15]*
   Pointer to the matrix objects on each level.  
* [0.x.16]*
   Row coordinate of selected block.  
* [0.x.17]*
   Column coordinate of selected block.  
* [0.x.18]