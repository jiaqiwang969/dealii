[0.x.0]*
   A structure containing  [2.x.0]  objects for optional processing in   multigrid solvers.     Each of these signals is called twice, once before and once after   the action is performed. The two function calls differ in the   boolean argument  [2.x.1]  which is true the first time and   false the second.  
* [0.x.1]*
     This signal is triggered before ( [2.x.2]  is true) and after ( [2.x.3]      is false) the call to  [2.x.4]  which transfers the vector     given to it to a multi-level vector.    
* [0.x.2]*
     This signal is triggered before ( [2.x.5]  is true) and after ( [2.x.6]      is false) the call to  [2.x.7]  which transfers the     multi-level vector given to it to a normal vector.    
* [0.x.3]*
     This signal is triggered before ( [2.x.8]  is true) and after ( [2.x.9]      is     false) the call to the coarse solver on  [2.x.10]          The coarse solve will be done with ``defect[leve]`` and returned in     ``solution[level]``, which can be inspected by the user using this     signal.    
* [0.x.4]*
     This signal is triggered before ( [2.x.11]  is true) and after ( [2.x.12]      is false) the call to  [2.x.13]  which restricts a     vector from  [2.x.14]  to the next coarser one ( [2.x.15] 
* 
*  - 1).         The vector ``defect[level-1]`` will be updated between these two     triggers and can be inspected by the user using this signal.    
* [0.x.5]*
     This signal is triggered before ( [2.x.16]  is true) and after ( [2.x.17]      is false) the call to  [2.x.18]  which prolongs a vector to      [2.x.19]  from the next coarser one ( [2.x.20] 
* 
*  - 1).    
* [0.x.6]*
     This signal is triggered before ( [2.x.21]  is true) and after ( [2.x.22]      is false) the call to a pre-smoothing step via  [2.x.23]  on      [2.x.24]          The smoother result will be stored in ``solution[level]`` and can be     inspected by the user using this signal.    
* [0.x.7]*
     This signal is triggered before ( [2.x.25]  is true) and after ( [2.x.26]      is false) the call to a post-smoothing step via  [2.x.27]      on      [2.x.28]     
* [0.x.8]*
 Implementation of the multigrid method. The implementation supports both continuous and discontinuous elements and follows the procedure described in the  [2.x.29]  "multigrid paper by Janssen and Kanschat".
*  The function which starts a multigrid cycle on the finest level is cycle(). Depending on the cycle type chosen with the constructor (see enum Cycle), this function triggers one of the cycles level_v_step() or level_step(), where the latter one can do different types of cycles.
*  Using this class, it is expected that the right hand side has been converted from a vector living on the locally finest level to a multilevel vector. This is a nontrivial operation, usually initiated automatically by the class PreconditionMG and performed by the classes derived from MGTransferBase.
* 

* 
*  [2.x.30]  The interface of this class is still very clumsy. In particular, you will have to set up quite a few auxiliary objects before you can use it. Unfortunately, it seems that this can be avoided only be restricting the flexibility of this class in an unacceptable way.

* 
* [0.x.9]*
   List of implemented cycle types.  
* [0.x.10]*
   Constructor. <tt>transfer</tt> is an object performing prolongation and   restriction. For levels in [minlevel, maxlevel] matrix has to contain   valid matrices. By default the maxlevel is set to the maximal valid level.     This function already initializes the vectors which will be used later in   the course of the computations. You should therefore create objects of   this type as late as possible.  
* [0.x.11]*
   Reinit this class according to #minlevel and #maxlevel.  
* [0.x.12]*
   Execute one multigrid cycle. The type of cycle is selected by the   constructor argument cycle. See the enum Cycle for available types.  
* [0.x.13]*
   Execute one step of the V-cycle algorithm.  This function assumes, that   the multilevel vector #defect is filled with the residual of an outer   defect correction scheme. This is usually taken care of by   PreconditionMG). After vcycle(), the result is in the multilevel vector   #solution. See <tt>copy_*_mg</tt> in the MGTools namespace if you want to   use these vectors yourself.     The actual work for this function is done in level_v_step().  
* [0.x.14]*
   Set additional matrices to correct residual computation at refinement   edges. Since we only smoothen in the interior of the refined part of the   mesh, the coupling across the refinement edge is missing. This coupling   is provided by these two matrices.    
*  [2.x.31]  While <tt>edge_out.vmult</tt> is used, for the second argument, we   use <tt>edge_in.Tvmult</tt>. Thus, <tt>edge_in</tt> should be assembled   in transposed form. This saves a second sparsity pattern for   <tt>edge_in</tt>. In particular, for symmetric operators, both arguments   can refer to the same matrix, saving assembling of one of them.  
* [0.x.15]*
   Set additional matrices to correct residual computation at refinement   edges. These matrices originate from discontinuous Galerkin methods (see   FE_DGQ etc.), where they correspond to the edge fluxes at the refinement   edge between two levels.    
*  [2.x.32]  While <tt>edge_down.vmult</tt> is used, for the second argument, we   use <tt>edge_up.Tvmult</tt>. Thus, <tt>edge_up</tt> should be assembled   in transposed form. This saves a second sparsity pattern for   <tt>edge_up</tt>. In particular, for symmetric operators, both arguments   can refer to the same matrix, saving assembling of one of them.  
* [0.x.16]*
   Return the finest level for multigrid.  
* [0.x.17]*
   Return the coarsest level for multigrid.  
* [0.x.18]*
   Set the highest level for which the multilevel method is performed. By   default, this is the finest level of the Triangulation. Accepted are   values not smaller than the current #minlevel.  
* [0.x.19]*
   Set the coarsest level for which the multilevel method is performed. By   default, this is zero. Accepted are non-negative values not larger than   the current #maxlevel.     If <tt>relative</tt> is <tt>true</tt>, then this function determines the   number of levels used, that is, it sets #minlevel to   #maxlevel-<tt>level</tt>.    
*  [2.x.33]  The mesh on the coarsest level must cover the whole domain. There   may not be hanging nodes on #minlevel.    
*  [2.x.34]  If #minlevel is set to a nonzero value, do not forget to adjust   your coarse grid solver!  
* [0.x.20]*
   Chance #cycle_type used in cycle().  
* [0.x.21]*
   Connect a function to  [2.x.35]   
* [0.x.22]*
   Connect a function to  [2.x.36]   
* [0.x.23]*
   Connect a function to  [2.x.37]   
* [0.x.24]*
   Connect a function to  [2.x.38]   
* [0.x.25]*
   Connect a function to  [2.x.39]   
* [0.x.26]*
   Signals for the various actions that the Multigrid algorithm uses.  
* [0.x.27]*
   The V-cycle multigrid method. <tt>level</tt> is the level the function   starts on. It will usually be called for the highest level from outside,   but will then call itself recursively for <tt>level-1</tt>, unless we are   on #minlevel where the coarse grid solver solves the problem exactly.  
* [0.x.28]*
   The actual W-cycle or F-cycle multigrid method. <tt>level</tt> is the   level the function starts on. It will usually be called for the highest   level from outside, but will then call itself recursively for   <tt>level-1</tt>, unless we are on #minlevel where the coarse grid solver   solves the problem exactly.  
* [0.x.29]*
   Cycle type performed by the method cycle().  
* [0.x.30]*
   Level for coarse grid solution.  
* [0.x.31]*
   Highest level of cells.  
* [0.x.32]*
   Input vector for the cycle. Contains the defect of the outer method   projected to the multilevel vectors.  
* [0.x.33]*
   The solution update after the multigrid step.  
* [0.x.34]*
   Auxiliary vector.  
* [0.x.35]*
   Auxiliary vector for W- and F-cycles. Left uninitialized in V-cycle.  
* [0.x.36]*
   The matrix for each level.  
* [0.x.37]*
   The matrix for each level.  
* [0.x.38]*
   Object for grid transfer.  
* [0.x.39]*
   The pre-smoothing object.  
* [0.x.40]*
   The post-smoothing object.  
* [0.x.41]*
   Edge matrix from the interior of the refined part to the refinement edge.    
*  [2.x.40]  Only <tt>vmult</tt> is used for these matrices.  
* [0.x.42]*
   Transpose edge matrix from the refinement edge to the interior of the   refined part.    
*  [2.x.41]  Only <tt>Tvmult</tt> is used for these matrices.  
* [0.x.43]*
   Edge matrix from fine to coarse.    
*  [2.x.42]  Only <tt>vmult</tt> is used for these matrices.  
* [0.x.44]*
   Transpose edge matrix from coarse to fine.    
*  [2.x.43]  Only <tt>Tvmult</tt> is used for these matrices.  
* [0.x.45]*
 Multi-level preconditioner. Here, we collect all information needed for multi-level preconditioning and provide the standard interface for LAC iterative methods.
*  Furthermore, it needs functions <tt>void copy_to_mg(const VectorType&)</tt> to store  [2.x.44]  in the right hand side of the multi-level method and <tt>void copy_from_mg(VectorType&)</tt> to store the result of the v-cycle in  [2.x.45] 
*  If VectorType is in fact a block vector and the TRANSFER object supports use of a separate DoFHandler for each block, this class also allows to be initialized with a separate DoFHandler for each block.

* 
* [0.x.46]*
   Constructor. Arguments are the multigrid object, pre-smoother, post-   smoother and coarse grid solver.  
* [0.x.47]*
   Same as above in case every component of a block vector   uses its own DoFHandler.  
* [0.x.48]*
   Dummy function needed by other classes.  
* [0.x.49]*
   Preconditioning operator. Calls the  [2.x.46]  function of the  [2.x.47]    object passed to the constructor.     This is the operator used by LAC iterative solvers.  
* [0.x.50]*
   Preconditioning operator. Calls the  [2.x.48]  function of the  [2.x.49]    object passed to the constructor.  
* [0.x.51]*
   Transposed preconditioning operator.     Not implemented, but the definition may be needed.  
* [0.x.52]*
   Transposed preconditioning operator.     Not implemented, but the definition may be needed.  
* [0.x.53]*
   Return the partitioning of the range space of this preconditioner, i.e.,   the partitioning of the vectors that are result from matrix-vector   products. By default, the respective information for the first DoFHandler   object are returned.  
* [0.x.54]*
   Return the partitioning of the domain space of this preconditioner, i.e.,   the partitioning of the vectors this matrix has to be multiplied with.   By default, the respective information for the first DoFHandler object   are returned.  
* [0.x.55]*
   Return the MPI communicator object in use with this preconditioner.  
* [0.x.56]*
   Connect a function to  [2.x.50]   
* [0.x.57]*
   Connect a function to  [2.x.51]   
* [0.x.58]*
   Associated  [2.x.52]   
* [0.x.59]*
   Storage for the pointers to the DoFHandler objects   without SmartPointer wrapper.  
* [0.x.60]*
   The multigrid object.  
* [0.x.61]*
   Object for grid transfer.  
* [0.x.62]*
   Flag to indicate if the object is initialized with a single DoFHandler   or with one for each block.  
* [0.x.63]*
   Signals used by this object  
* [0.x.64]