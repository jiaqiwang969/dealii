[0.x.0]*
 A base class for iterative linear solvers. This class provides interfaces to a memory pool and the objects that determine whether a solver has converged.
* 

*  [1.x.0]
*  In general, iterative solvers do not rely on any special structure of matrices or the format of storage. Rather, they only require that matrices and vectors define certain operations such as matrix-vector products, or scalar products between vectors. Consequently, this class as well as the derived classes and their member functions implementing concrete linear solvers are templated on the types of matrices and vectors. However, there are some common requirements a matrix or vector type must fulfill to qualify as an acceptable type for the solvers in this hierarchy. These requirements are listed below.
*  The classes we show below are not any concrete class. Rather, they are intended to form a "signature" which a concrete class has to conform to. Note that the matrix and vector classes within this library of course conform to this interface; therefore, SparseMatrix and Vector are good examples for these classes as they provide the necessary signatures of member functions (although they also provide many more interfaces that solvers do not in fact need
* 
*  -  for example, element access). In addition, you may want to take a look at  [2.x.0] ,  [2.x.1] , or a number of classes in the LinearSolvers namespace for examples of how one can define matrix-like classes that can serve as linear operators for linear solvers.
*  Concretely, matrix and vector classes that can be passed to a linear solver need to provide the following interfaces:

* 
* [1.x.1]
* 
*  In addition, for some solvers there has to be a global function <tt>swap(VectorType &a, VectorType &b)</tt> that exchanges the values of the two vectors.
*  Finally, the solvers also expect an instantiation of GrowingVectorMemory [2.x.2]  These instantiations are provided by the deal.II library for the built-in vector types, but must be explicitly added for user-provided vector classes. Otherwise, the linker will complain that it cannot find the constructors and destructors of GrowingVectorMemory that happen in the  [2.x.3]  class.
* 

* 
* [1.x.2]
* 
*  The preconditioners used must have the same interface as matrices, i.e. in particular they have to provide a member function  [2.x.4]  which denotes the application of the preconditioner.
* 

*  [1.x.3]
*  Several solvers need additional data, like the damping parameter  [2.x.5]  of the  [2.x.6]  class or the maximum number of temporary vectors of  [2.x.7]   To have a standardized way of constructing solvers, each solver class has a <tt>struct AdditionalData</tt> as a member, and constructors of all solver classes take such an argument. Some solvers need no additional data, or may not at the current time. For these solvers the struct  [2.x.8]  is empty and calling the constructor may be done without giving the additional structure as an argument as a default  [2.x.9]  AdditionalData is set by default.
*  With this, creating a solver looks like one of the following blocks:

* 
* [1.x.4]
* 
*  Using a unified constructor parameter list for all solvers supports the  [2.x.10]  SolverSelector class; the unified interface enables us to use this class unchanged even if the number of types of parameters to a certain solver changes and it is still possible in a simple way to give these additional data to the  [2.x.11]  object for each solver which it may use.
* 

*  [1.x.5]
*  The SolverBase class, being the base class for all of the iterative solvers such as SolverCG, SolverGMRES, etc, provides the facilities by which actual solver implementations determine whether the iteration is converged, not yet converged, or has failed. Typically, this is done using an object of type SolverControl that is passed to the solver classes's constructors and from them down to the constructor of this base class. Every one of the tutorial programs that solves a linear problem (starting with  [2.x.12] ) uses this method and it is described in detail there. However, the underlying mechanism is more general and allows for many other uses to observe how the linear solver iterations progress.
*  The basic approach is that the iterative solvers invoke a [1.x.6] at the end of each iteration to determine whether the solution is converged. A signal is a class that has, conceptually, a list of pointers to functions and every time the signal is invoked, each of these functions are called. In the language of signals, the functions called are called [1.x.7] and one can attach any number of slots to a signal. (The implementation of signals and slots we use here is the one from the BOOST.signals2 library.) A number of details may clarify what is happening underneath:
* 

* 
* 
*  - In reality, the signal object does not store pointers to functions, but function objects as slots. Each slot must conform to a particular signature: here, it is an object that can be called with three arguments (the number of the current linear iteration, the current residual, and the current iterate; more specifics are discussed in the documentation of the connect() function). A pointer to a function with this argument list satisfies the requirements, but you can also pass a member function whose  [2.x.13]  argument has been bound using a lambda function (see the example below).
* 

* 
* 
*  - Each of the slots will return a value that indicates whether the iteration should continue, should stop because it has succeeded, or stop because it has failed. The return type of slots is therefore of type  [2.x.14]  The returned values from all of the slots will then have to be combined before they are returned to the iterative solver that invoked the signal. The way this works is that if at least one slot returned  [2.x.15]  then the combined value is  [2.x.16]  otherwise, if at least one slot returned  [2.x.17]  then this is going to be the return value of the signal; finally, only if all slots return  [2.x.18]  will the signal's return value be  [2.x.19] 
* 

* 
* 
*  - It may of course be that a particular slot has been connected to the signal only to observe how the solution or a specific part of it converges, but has no particular opinion on whether the iteration should continue or not. In such cases, the slot should just return  [2.x.20]  which is the weakest of all return values according to the rules laid out above.
*  Given all this, it should now be obvious how the SolverControl object fits into this scheme: when a SolverControl object is passed to the constructor of the current class, we simply connect the  [2.x.21]  function of that object as a slot to the signal we maintain here. In other words, since a SolverBase object is always constructed using a SolverControl object, there is always at least one slot associated with the signal, namely the one that determines convergence.
*  On the other hand, using the connect() member function, it is possible to connect any number of other slots to the signal to observe whatever it is you want to observe. The connect() function also returns an object that describes the connection from the signal to the slot, and the corresponding BOOST functions then allow you to disconnect the slot if you want.
*  An example may illuminate these issues. In the  [2.x.22]  tutorial program, let us add a member function as follows to the main class:

* 
* [1.x.8]
*  The function satisfies the signature necessary to be a slot for the signal discussed above, with the exception that it is a member function and consequently requires a  [2.x.23]  pointer. What the function does is to take the vector given as last argument and write it into a file in VTU format with a file name derived from the number of the iteration.
*  This function can then be hooked into the CG solver by modifying the  [2.x.24]  function as follows:

* 
* [1.x.9]
*  The use of a lambda function here ensures that we convert the member function with its three arguments plus the  [2.x.25]  pointer, to a function that only takes three arguments, by fixing the implicit  [2.x.26]  argument of the function to the  [2.x.27]  pointer in the current function.
*  It is well understood that the CG method is a smoothing iteration (in the same way as the more commonly used Jacobi or SSOR iterations are smoothers). The code above therefore allows to observe how the solution becomes smoother and smoother in every iteration. This is best observed by initializing the solution vector with randomly distributed numbers in  [2.x.28] , using code such as

* 
* [1.x.10]
*  Using this, the slot will then generate files that when visualized look like this over the course of iterations zero to five:  [2.x.29] 
* 

* 
*  [2.x.30] 

* 
* [0.x.1]*
   An alias for the underlying vector type  
* [0.x.2]*
   Constructor. Takes a control object which evaluates the conditions for   convergence, and an object that allows solvers to allocate memory for   temporary objects.     Of both objects, a reference is stored, so it is the user's   responsibility to guarantee that the lifetime of the two arguments is at   least as long as that of the solver object.  
* [0.x.3]*
   Constructor. Takes a control object which evaluates the conditions for   convergence. In contrast to the other constructor, this constructor   designates an internal object of type GrowingVectorMemory to allocate   memory.     A reference to the control object is stored, so it is the user's   responsibility to guarantee that the lifetime of the argument is at least   as long as that of the solver object.  
* [0.x.4]*
   Connect a function object that will be called periodically within   iterative solvers. This function is used to attach monitors to iterative   solvers, either to determine when convergence has happened, or simply to   observe the progress of an iteration. See the documentation of this class   for more information.      [2.x.31]  slot A function object specified here will, with each call,   receive the number of the current iteration, the value that is used to   check for convergence (typically the residual of the current iterate with   respect to the linear system to be solved) and the currently best   available guess for the current iterate. Note that some solvers do not   update the approximate solution in every iteration but only after   convergence or failure has been determined (GMRES is an example); in such   cases, the vector passed as the last argument to the signal is simply the   best approximate at the time the signal is called, but not the vector   that will be returned if the signal's return value indicates that the   iteration should be terminated. The function object must return a    [2.x.32]  value that indicates whether the iteration should   continue, has failed, or has succeeded. The results of all connected   functions will then be combined to determine what should happen with the   iteration.      [2.x.33]  A connection object that represents the connection from the   signal to the function object. It can be used to disconnect the function   object again from the signal. See the documentation of the BOOST Signals2   library for more information on connection management.  
* [0.x.5]*
   A static vector memory object to be used whenever no such object has been   given to the constructor.  
* [0.x.6]*
   A reference to an object that provides memory for auxiliary vectors.  
* [0.x.7]*
   A class whose operator() combines two states indicating whether we should   continue iterating or stop, and returns a state that dominates. The rules   are:
* 

* 
* 

* 
* 

* 
* 
*  - If one of the two states indicates failure, return failure.
* 

* 
* 

* 
* 

* 
* 
*  - Otherwise, if one of the two states indicates to continue iterating, then   continue iterating.
* 

* 
* 

* 
* 

* 
* 
*  - Otherwise, return success.  
* [0.x.8]*
   A signal that iterative solvers can execute at the end of every iteration   (or in an otherwise periodic fashion) to find out whether we should   continue iterating or not. The signal may call one or more slots that   each will make this determination by themselves, and the result over all   slots (function calls) will be determined by the StateCombiner object.     The arguments passed to the signal are (i) the number of the current   iteration; (ii) the value that is used to determine convergence   (oftentimes the residual, but in other cases other quantities may be used   as long as they converge to zero as the iterate approaches the solution   of the linear system); and (iii) a vector that corresponds to the current   best guess for the solution at the point where the signal is called. Note   that some solvers do not update the approximate solution in every   iteration but only after convergence or failure has been determined   (GMRES is an example); in such cases, the vector passed as the last   argument to the signal is simply the best approximate at the time the   signal is called, but not the vector that will be returned if the   signal's return value indicates that the iteration should be terminated.  
* [0.x.9]