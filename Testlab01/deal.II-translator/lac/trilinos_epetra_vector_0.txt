[0.x.0]*
   A namespace for classes that provide wrappers for Trilinos' Epetra vectors.     This namespace provides wrappers for the Epetra_FEVector class from the   Epetra package (https://trilinos.github.io/epetra.html) that is part of   Trilinos.  
* [0.x.1]*
     This class implements a wrapper to the Trilinos distributed vector     class Epetra_FEVector. This class is derived from the      [2.x.0]  class. Note however that Epetra only     works with Number = double. This class requires Trilinos to be compiled     with MPI support.        
*  [2.x.1]     
*  [2.x.2]     
* [0.x.2]*
       Constructor. Create a vector of dimension zero.      
* [0.x.3]*
       Copy constructor. Sets the dimension and the partitioning to that of       the given vector and copies all elements.      
* [0.x.4]*
       This constructor takes an IndexSet that defines how to distribute the       individual components among the MPI processors. Since it also       includes information about the size of the vector, this is all we       need to generate a %parallel vector.      
* [0.x.5]*
       Reinit functionality. This function destroys the old vector content       and generates a new one based on the input partitioning. The flag       <tt>omit_zeroing_entries</tt> determines whether the vector should be       filled with zero (false) or left untouched (true).      
* [0.x.6]*
       Change the dimension to that of the vector  [2.x.3]  The elements of  [2.x.4]  are not       copied.      
* [0.x.7]*
       Copy function. This function takes a Vector and copies all the       elements. The Vector will have the same parallel distribution as  [2.x.5]        V.      
* [0.x.8]*
       Sets all elements of the vector to the scalar  [2.x.6]  This operation is       only allowed if  [2.x.7]  is equal to zero.      
* [0.x.9]*
       Imports all the elements present in the vector's IndexSet from the       input vector  [2.x.8]   [2.x.9]   [2.x.10]  is used to decide if       the elements in  [2.x.11]  should be added to the current vector or replace the       current elements. The last parameter can be used if the same       communication pattern is used multiple times. This can be used to       improve performance.      
* [0.x.10]*
       Multiply the entire vector by a fixed factor.      
* [0.x.11]*
       Divide the entire vector by a fixed factor.      
* [0.x.12]*
       Add the vector  [2.x.12]  to the present one.      
* [0.x.13]*
       Subtract the vector  [2.x.13]  from the present one.      
* [0.x.14]*
       Return the scalar product of two vectors. The vectors need to have the       same layout.      
* [0.x.15]*
       Add  [2.x.14]  to all components. Note that  [2.x.15]  a scalar not a vector.      
* [0.x.16]*
       Simple addition of a multiple of a vector, i.e. <tt>*this +=       a*V</tt>. The vectors need to have the same layout.      
* [0.x.17]*
       Multiple addition of multiple of a vector, i.e. <tt>*this> +=       a*V+b*W</tt>. The vectors need to have the same layout.      
* [0.x.18]*
       Scaling and simple addition of a multiple of a vector, i.e. <tt>*this       = s*(*this)+a*V</tt>.      
* [0.x.19]*
       Scale each element of this vector by the corresponding element in the       argument. This function is mostly meant to simulate multiplication       (and immediate re-assignment) by a diagonal scaling matrix. The       vectors need to have the same layout.      
* [0.x.20]*
       Assignment <tt>*this = a*V</tt>.      
* [0.x.21]*
       Return whether the vector contains only elements with value zero.      
* [0.x.22]*
       Return the mean value of the element of this vector.      
* [0.x.23]*
       Return the l<sub>1</sub> norm of the vector (i.e., the sum of the       absolute values of all entries among all processors).      
* [0.x.24]*
       Return the l<sub>2</sub> norm of the vector (i.e., the square root of       the sum of the square of all entries among all processors).      
* [0.x.25]*
       Return the maximum norm of the vector (i.e., the maximum absolute value       among all entries and among all processors).      
* [0.x.26]*
       Performs a combined operation of a vector addition and a subsequent       inner product, returning the value of the inner product. In other       words, the result of this function is the same as if the user called      
* [1.x.0]
*              The reason this function exists is that this operation involves less       memory transfer than calling the two functions separately. This       method only needs to load three vectors,  [2.x.16]   [2.x.17]   [2.x.18]  whereas       calling separate methods means to load the calling vector  [2.x.19]        twice. Since most vector operations are memory transfer limited, this       reduces the time by 25\% (or 50\% if  [2.x.20]  equals  [2.x.21]              The vectors need to have the same layout.             For complex-valued vectors, the scalar product in the second step is       implemented as        [2.x.22] .      
* [0.x.27]*
       This function always returns false and is present only for backward       compatibility.      
* [0.x.28]*
       Return the global size of the vector, equal to the sum of the number of       locally owned indices among all processors.      
* [0.x.29]*
       Return the local size of the vector, i.e., the number of indices       owned locally.      
* [0.x.30]*
       Return the MPI communicator object in use with this object.      
* [0.x.31]*
       Return an index set that describes which elements of this vector are       owned by the current processor. As a consequence, the index sets       returned on different processors if this is a distributed vector will       form disjoint sets that add up to the complete index set. Obviously, if       a vector is created on only one processor, then the result would       satisfy      
* [1.x.1]
*       
* [0.x.32]*
       Return a const reference to the underlying Trilinos       Epetra_FEVector class.      
* [0.x.33]*
       Return a (modifiable) reference to the underlying Trilinos       Epetra_FEVector class.      
* [0.x.34]*
       Prints the vector to the output stream  [2.x.23]       
* [0.x.35]*
       Return the memory consumption of this class in bytes.      
* [0.x.36]*
       The vectors have different partitioning, i.e. their IndexSet objects       don't represent the same indices.      
* [0.x.37]*
       Attempt to perform an operation between two incompatible vector types.            
*  [2.x.24]       
* [0.x.38]*
       Exception thrown by an error in Trilinos.            
*  [2.x.25]       
* [0.x.39]*
       Create the CommunicationPattern for the communication between the       IndexSet  [2.x.26]  and the current vector based       on the communicator  [2.x.27]       
* [0.x.40]*
       Pointer to the actual Epetra vector object.      
* [0.x.41]*
       IndexSet of the elements of the last imported vector.      
* [0.x.42]*
       CommunicationPattern for the communication between the       source_stored_elements IndexSet and the current vector.      
* [0.x.43]*
 Declare  [2.x.28]  as distributed vector.

* 
* [0.x.44]