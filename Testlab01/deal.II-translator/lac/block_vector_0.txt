[0.x.0]!  [2.x.0]  Vectors [2.x.1] 

* 
* [0.x.1]*
 An implementation of block vectors based on deal.II vectors. While the base class provides for most of the interface, this class handles the actual allocation of vectors and provides functions that are specific to the underlying vector type.
* 

* 
*  [2.x.2]  Instantiations for this template are provided for <tt> [2.x.3]  and  [2.x.4]  others can be generated in application programs (see the section on  [2.x.5]  in the manual).
*   [2.x.6]   [2.x.7]  "Block (linear algebra)"

* 
* [0.x.2]*
   Typedef the base class for simpler access to its own alias.  
* [0.x.3]*
   Typedef the type of the underlying vector.  
* [0.x.4]*
   Import the alias from the base class.  
* [0.x.5]*
   Constructor. There are three ways to use this constructor. First, without   any arguments, it generates an object with no blocks. Given one argument,   it initializes <tt>n_blocks</tt> blocks, but these blocks have size zero.   The third variant finally initializes all blocks to the same size   <tt>block_size</tt>.     Confer the other constructor further down if you intend to use blocks of   different sizes.  
* [0.x.6]*
   Copy Constructor. Dimension set to that of  [2.x.8]  all components are   copied from  [2.x.9]   
* [0.x.7]*
   Move constructor. Creates a new vector by stealing the internal data of   the given argument vector.  
* [0.x.8]*
   Copy constructor taking a BlockVector of another data type. This will   fail if there is no conversion path from <tt>OtherNumber</tt> to   <tt>Number</tt>. Note that you may lose accuracy when copying to a   BlockVector with data elements with less accuracy.     Older versions of gcc did not honor the  [2.x.10]  keyword on template   constructors. In such cases, it is easy to accidentally write code that   can be very inefficient, since the compiler starts performing hidden   conversions. To avoid this, this function is disabled if we have detected   a broken compiler during configuration.  
* [0.x.9]*
   A copy constructor taking a (parallel) Trilinos block vector and copying   it into the deal.II own format.  
* [0.x.10]*
   Constructor. Set the number of blocks to <tt>block_sizes.size()</tt> and   initialize each block with <tt>block_sizes[i]</tt> zero elements.  
* [0.x.11]*
   Constructor. Initialize vector to the structure found in the BlockIndices   argument.  
* [0.x.12]*
   Constructor. Set the number of blocks to <tt>block_sizes.size()</tt>.   Initialize the vector with the elements pointed to by the range of   iterators given as second and third argument. Apart from the first   argument, this constructor is in complete analogy to the respective   constructor of the  [2.x.11]  class, but the first argument is   needed in order to know how to subdivide the block vector into different   blocks.  
* [0.x.13]*
   Destructor. Clears memory  
* [0.x.14]*
   Call the compress() function on all the subblocks.     This functionality only needs to be called if using MPI based vectors and   exists in other objects for compatibility.     See    [2.x.12]  "Compressing distributed objects"   for more information.  
* [0.x.15]*
   Returns `false` as this is a serial block vector.     This functionality only needs to be called if using MPI based vectors and   exists in other objects for compatibility.  
* [0.x.16]*
   Copy operator: fill all components of the vector with the given scalar   value.  
* [0.x.17]*
   Copy operator for arguments of the same type. Resize the present vector   if necessary.  
* [0.x.18]*
   Move the given vector. This operator replaces the present vector with   the contents of the given argument vector.  
* [0.x.19]*
   Copy operator for template arguments of different types. Resize the   present vector if necessary.  
* [0.x.20]*
   Copy a regular vector into a block vector.  
* [0.x.21]*
   A copy constructor from a Trilinos block vector to a deal.II block   vector.  
* [0.x.22]*
   Reinitialize the BlockVector to contain <tt>n_blocks</tt> blocks of size   <tt>block_size</tt> each.     If the second argument is left at its default value, then the block   vector allocates the specified number of blocks but leaves them at zero   size. You then need to later reinitialize the individual blocks, and call   collect_sizes() to update the block system's knowledge of its individual   block's sizes.     If <tt>omit_zeroing_entries==false</tt>, the vector is filled with zeros.  
* [0.x.23]*
   Reinitialize the BlockVector such that it contains   <tt>block_sizes.size()</tt> blocks. Each block is reinitialized to   dimension <tt>block_sizes[i]</tt>.     If the number of blocks is the same as before this function was called,   all vectors remain the same and reinit() is called for each vector.     If <tt>omit_zeroing_entries==false</tt>, the vector is filled with zeros.     Note that you must call this (or the other reinit() functions) function,   rather than calling the reinit() functions of an individual block, to   allow the block vector to update its caches of vector sizes. If you call   reinit() on one of the blocks, then subsequent actions on this object may   yield unpredictable results since they may be routed to the wrong block.  
* [0.x.24]*
   Reinitialize the BlockVector to reflect the structure found in   BlockIndices.     If the number of blocks is the same as before this function was called,   all vectors remain the same and reinit() is called for each vector.     If <tt>omit_zeroing_entries==false</tt>, the vector is filled with zeros.  
* [0.x.25]*
   Change the dimension to that of the vector <tt>V</tt>. The same applies   as for the other reinit() function.     The elements of <tt>V</tt> are not copied, i.e.  this function is the   same as calling <tt>reinit (V.size(), omit_zeroing_entries)</tt>.     Note that you must call this (or the other reinit() functions) function,   rather than calling the reinit() functions of an individual block, to   allow the block vector to update its caches of vector sizes. If you call   reinit() of one of the blocks, then subsequent actions of this object may   yield unpredictable results since they may be routed to the wrong block.  
* [0.x.26]*
   Multiply each element of this vector by the corresponding element of   <tt>v</tt>.  
* [0.x.27]*
   Swap the contents of this vector and the other vector <tt>v</tt>. One   could do this operation with a temporary variable and copying over the   data elements, but this function is significantly more efficient since it   only swaps the pointers to the data of the two vectors and therefore does   not need to allocate temporary storage and move data around.     This function is analogous to the swap() function of all C++ standard   containers. Also, there is a global function swap(u,v) that simply calls   <tt>u.swap(v)</tt>, again in analogy to standard functions.  
* [0.x.28]*
   Print to a stream.  
* [0.x.29]*
   Write the vector en bloc to a stream. This is done in a binary mode, so   the output is neither readable by humans nor (probably) by other   computers using a different operating system or number format.  
* [0.x.30]*
   Read a vector en block from a file. This is done using the inverse   operations to the above function, so it is reasonably fast because the   bitstream is not interpreted.     The vector is resized if necessary.     A primitive form of error checking is performed which will recognize the   bluntest attempts to interpret some data as a vector stored bitwise to a   file, but not more.  
* [0.x.31]*
    [2.x.13]  Exceptions    [2.x.14]   
* [0.x.32]*
   Exception  
* [0.x.33]*
 Global function which overloads the default implementation of the C++ standard library which uses a temporary object. The function simply exchanges the data of the two vectors.
*   [2.x.15]  BlockVector

* 
* [0.x.34]*
     A helper class used internally in linear_operator.h. Specialization for     BlockVector<number>.    
* [0.x.35]*
 Declare  [2.x.16]  as serial vector.

* 
* [0.x.36]