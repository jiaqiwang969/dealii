[0.x.0]!  [2.x.0]  Matrix1 [2.x.1] 

* 
* [0.x.1]*
 A quadratic tridiagonal matrix. That is, a matrix where all entries are zero, except the diagonal and the entries left and right of it.
*  The matrix has an additional symmetric mode, in which case only the upper triangle of the matrix is stored and mirrored to the lower one for matrix vector operations.
* 

* 
*  [2.x.2] 

* 
* [0.x.2]*
   Declare type for container size.  
* [0.x.3]*
    [2.x.3]  Constructors and initialization  
* [0.x.4]*
   Constructor generating an empty matrix of dimension <tt>n</tt>.  
* [0.x.5]*
   Reinitialize the matrix to a new size and reset all entries to zero. The   symmetry properties may be set as well.  
* [0.x.6]*
   Number of rows of this matrix. Note that the matrix is an [1.x.0] matrix.  
* [0.x.7]*
   Number of columns of this matrix. Note that the matrix is an [1.x.1] matrix.  
* [0.x.8]*
   Return whether the matrix contains only elements with value zero. This   function is mainly for internal consistency checks and should seldom be   used when not in debug mode since it uses quite some time.  
* [0.x.9]*
   Read-only access to a value. This is restricted to the case where   [1.x.2].  
* [0.x.10]*
   Read-write access to a value. This is restricted to the case where   [1.x.3].    
*  [2.x.4]  In case of symmetric storage technique, the entries [1.x.4]   and [1.x.5] are identified and [1.x.6] exist. This must be taken   into account if adding up is used for matrix assembling in order not to   obtain doubled entries.  
* [0.x.11]*
   Matrix-vector-multiplication. Multiplies <tt>v</tt> from the right and   stores the result in <tt>w</tt>.     If the optional parameter <tt>adding</tt> is <tt>true</tt>, the result is   added to <tt>w</tt>.     Source and destination must not be the same vector.  
* [0.x.12]*
   Adding Matrix-vector-multiplication. Same as vmult() with parameter   <tt>adding=true</tt>, but widely used in <tt>deal.II</tt> classes.     Source and destination must not be the same vector.  
* [0.x.13]*
   Transpose matrix-vector-multiplication. Multiplies <tt>v<sup>T</sup></tt>   from the left and stores the result in <tt>w</tt>.     If the optional parameter <tt>adding</tt> is <tt>true</tt>, the result is   added to <tt>w</tt>.     Source and destination must not be the same vector.  
* [0.x.14]*
   Adding transpose matrix-vector-multiplication. Same as Tvmult() with   parameter <tt>adding=true</tt>, but widely used in <tt>deal.II</tt>   classes.     Source and destination must not be the same vector.  
* [0.x.15]*
   Build the matrix scalar product <tt>u^T M v</tt>. This function is mostly   useful when building the cellwise scalar product of two functions in the   finite element context.  
* [0.x.16]*
   Return the square of the norm of the vector <tt>v</tt> with respect to   the norm induced by this matrix, i.e. [1.x.7]. This is useful, e.g.   in the finite element context, where the [1.x.8] norm of a   function equals the matrix norm with respect to the mass matrix of the   vector representing the nodal values of the finite element function.     Obviously, the matrix needs to be quadratic for this operation.  
* [0.x.17]*
   Compute the eigenvalues of the symmetric tridiagonal matrix.    
*  [2.x.5]  This function requires configuration of deal.II with LAPACK   support. Additionally, the matrix must use symmetric storage technique.  
* [0.x.18]*
   After calling compute_eigenvalues(), you can access each eigenvalue here.  
* [0.x.19]*
   Output of the matrix in user-defined format.  
* [0.x.20]*
   The diagonal entries.  
* [0.x.21]*
   The entries left of the diagonal. The entry with index zero is always   zero, since the first row has no entry left of the diagonal. Therefore,   the length of this vector is the same as that of #diagonal.     The length of this vector is zero for symmetric storage. In this case,   the second element of #left is identified with the first element of   #right.  
* [0.x.22]*
   The entries right of the diagonal. The last entry is always zero, since   the last row has no entry right of the diagonal. Therefore, the length of   this vector is the same as that of #diagonal.  
* [0.x.23]*
   If this flag is true, only the entries to the right of the diagonal are   stored and the matrix is assumed symmetric.  
* [0.x.24]*
   The state of the matrix. Normally, the state is  [2.x.6]    indicating that the object can be used for regular matrix operations.     See explanation of this data type for details.  
* [0.x.25]