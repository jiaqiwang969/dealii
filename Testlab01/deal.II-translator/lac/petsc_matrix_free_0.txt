[0.x.0]*
   Implementation of a parallel matrix class based on PETSc   <tt>MatShell</tt> matrix-type. This base class implements only the   interface to the PETSc matrix object, while all the functionality is   contained in the matrix-vector multiplication which must be reimplemented   in derived classes.     This interface is an addition to the  [2.x.0]  class to realize   user-defined matrix-classes together with PETSc solvers and   functionalities. See also the documentation of  [2.x.1]  class   and  [2.x.2]  and  [2.x.3] .     Similar to other matrix classes in namespaces PETScWrappers and    [2.x.4]  the MatrixFree class provides the usual matrix-vector   multiplication <tt>vmult(VectorBase &dst, const VectorBase &src)</tt>   which is pure virtual and must be reimplemented in derived classes.   Besides the usual interface, this class has a matrix-vector   multiplication <tt>vmult(Vec &dst, const Vec &src)</tt> taking PETSc Vec   objects, which will be called by <tt>matrix_free_mult(Mat A, Vec src, Vec   dst)</tt> registered as matrix-vector multiplication of this PETSc matrix   object. The default implementation of the vmult function in the base   class wraps the given PETSc vectors with the  [2.x.5]    class and then calls the usual vmult function with the usual interface.    
*  [2.x.6]   
*  [2.x.7]   
* [0.x.1]*
     Default constructor. Create an empty matrix object.    
* [0.x.2]*
     Create a matrix object of dimensions  [2.x.8]  times  [2.x.9]  with communication     happening over the provided  [2.x.10]          For the meaning of the  [2.x.11]  and  [2.x.12]  parameters,     see the  [2.x.13]  class documentation.         As other PETSc matrices, also the matrix-free object needs to have     a size and to perform matrix vector multiplications efficiently in     parallel also  [2.x.14]  and  [2.x.15]  But in contrast to      [2.x.16]  classes a PETSc matrix-free object does not need     any estimation of non_zero entries and has no option     <tt>is_symmetric</tt>.    
* [0.x.3]*
     Create a matrix object of dimensions  [2.x.17]  times  [2.x.18]  with communication     happening over the provided  [2.x.19]          As other PETSc matrices, also the matrix-free object needs to have     a size and to perform matrix vector multiplications efficiently in     parallel also  [2.x.20]  and  [2.x.21]  But in contrast to      [2.x.22]  classes a PETSc matrix-free object does not need     any estimation of non_zero entries and has no option     <tt>is_symmetric</tt>.    
* [0.x.4]*
     Constructor for the serial case: Same function as     <tt>MatrixFree()</tt>, see above, with <tt>communicator =     MPI_COMM_WORLD</tt>.    
* [0.x.5]*
     Constructor for the serial case: Same function as     <tt>MatrixFree()</tt>, see above, with <tt>communicator =     MPI_COMM_WORLD</tt>.    
* [0.x.6]*
     Throw away the present matrix and generate one that has the same     properties as if it were created by the constructor of this class with     the same argument list as the present function.    
* [0.x.7]*
     Throw away the present matrix and generate one that has the same     properties as if it were created by the constructor of this class with     the same argument list as the present function.    
* [0.x.8]*
     Call the  [2.x.23]  function above with <tt>communicator =     MPI_COMM_WORLD</tt>.    
* [0.x.9]*
     Call the  [2.x.24]  function above with <tt>communicator =     MPI_COMM_WORLD</tt>.    
* [0.x.10]*
     Release all memory and return to a state just like after having called     the default constructor.    
* [0.x.11]*
     Return a reference to the MPI communicator object in use with this     matrix.    
* [0.x.12]*
     Matrix-vector multiplication: let [1.x.0] with [1.x.1]     being this matrix.         Source and destination must not be the same vector.         Note that if the current object represents a parallel distributed     matrix (of type  [2.x.25]  then both vectors     have to be distributed vectors as well. Conversely, if the matrix is     not distributed, then neither of the vectors may be.    
* [0.x.13]*
     Matrix-vector multiplication: let [1.x.2] with     [1.x.3] being this matrix. This function does the same as  [2.x.26]      but takes the transposed matrix.         Source and destination must not be the same vector.         Note that if the current object represents a parallel distributed     matrix then both vectors have to be distributed vectors as well.     Conversely, if the matrix is not distributed, then neither of the     vectors may be.    
* [0.x.14]*
     Adding Matrix-vector multiplication. Add [1.x.4] on [1.x.5]     with [1.x.6] being this matrix.         Source and destination must not be the same vector.         Note that if the current object represents a parallel distributed     matrix then both vectors have to be distributed vectors as well.     Conversely, if the matrix is not distributed, then neither of the     vectors may be.    
* [0.x.15]*
     Adding Matrix-vector multiplication. Add [1.x.7] to     [1.x.8] with [1.x.9] being this matrix. This function does the same     as  [2.x.27]  but takes the transposed matrix.         Source and destination must not be the same vector.         Note that if the current object represents a parallel distributed     matrix then both vectors have to be distributed vectors as well.     Conversely, if the matrix is not distributed, then neither of the     vectors may be.    
* [0.x.16]*
     The matrix-vector multiplication called by  [2.x.28]  This     function can be reimplemented in derived classes for efficiency. The     default implementation copies the given vectors into      [2.x.29]  and calls <tt>vmult(VectorBase &dst, const     VectorBase &src)</tt> which is purely virtual and must be reimplemented     in derived classes.    
* [0.x.17]*
     Copy of the communicator object to be used for this parallel matrix-     free object.    
* [0.x.18]*
     Callback-function registered as the matrix-vector multiplication of     this matrix-free object called by PETSc routines. This function must be     static and takes a PETSc matrix  [2.x.30]  and vectors  [2.x.31]  and  [2.x.32]      where [1.x.10]         Source and destination must not be the same vector.         This function calls <tt>vmult(Vec &dst, const Vec &src)</tt> which     should be reimplemented in derived classes.    
* [0.x.19]*
     Do the actual work for the respective  [2.x.33]  function and the     matching constructor, i.e. create a matrix object. Getting rid of the     previous matrix is left to the caller.    
* [0.x.20]