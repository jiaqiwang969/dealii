[0.x.0]!  [2.x.0]  Matrix1 [2.x.1] 

* 
* [0.x.1]*
 Implementation of a classical rectangular scheme of numbers. The data type of the entries is provided in the template argument <tt>number</tt>.  The interface is quite fat and in fact has grown every time a new feature was needed. So, a lot of functions are provided.
*  Internal calculations are usually done with the accuracy of the vector argument to functions. If there is no argument with a number type, the matrix number type is used.
* 

* 
*  [2.x.2]  Instantiations for this template are provided for <tt> [2.x.3]   [2.x.4]   [2.x.5]   [2.x.6]  Others can be generated in application programs, see  [2.x.7]  for details.

* 
* [0.x.2]*
   A type of used to index into this container.  
* [0.x.3]*
   Type of matrix entries. This alias is analogous to <tt>value_type</tt>   in the standard library containers.  
* [0.x.4]*
   Use the base class mutable iterator type.  
* [0.x.5]*
   Use the base class constant iterator type.  
* [0.x.6]*
   Use the base class iterator functions.  
* [0.x.7]*
   Use the base class iterator functions  
* [0.x.8]*
   Declare a type that has holds real-valued numbers with the same precision   as the template argument to this class. If the template argument of this   class is a real data type, then real_type equals the template argument.   If the template argument is a  [2.x.8]  type then real_type equals the   type underlying the complex numbers.     This alias is used to represent the return type of norms.  
* [0.x.9]*
    [2.x.9]  Constructors and initialization.  See also the base class Table.  
* [0.x.10]*
   Constructor. Initialize the matrix as a square matrix with dimension   <tt>n</tt>.     In order to avoid the implicit conversion of integers and other types to   a matrix, this constructor is declared <tt>explicit</tt>.     By default, no memory is allocated.  
* [0.x.11]*
   Constructor. Initialize the matrix as a rectangular matrix.  
* [0.x.12]*
   Constructor initializing from an array of numbers. The array is arranged   line by line. No range checking is performed.  
* [0.x.13]*
   Construct a full matrix that equals the identity matrix of the size of   the argument. Using this constructor, one can easily create an identity   matrix of size  [2.x.10]  by saying  
* [1.x.0]
*   
* [0.x.14]*
    [2.x.11]   
* [0.x.15]*
    [2.x.12]  Copying into and out of other matrices  
* [0.x.16]*
    [2.x.13]   
* [0.x.17]*
   Variable assignment operator.  
* [0.x.18]*
   This operator assigns a scalar to a matrix. To avoid confusion with the   semantics of this function, zero is the only value allowed for   <tt>d</tt>, allowing you to clear a matrix in an intuitive way.      [2.x.14]   
* [0.x.19]*
   Copy operator to create a full matrix that equals the identity matrix of   the size of the argument. This way, one can easily create an identity   matrix of size  [2.x.15]  by saying  
* [1.x.1]
*   
* [0.x.20]*
   Assignment operator for a LapackFullMatrix. The calling matrix must be of   the same size as the LAPACK matrix.  
* [0.x.21]*
   Assignment from different matrix classes. This assignment operator uses   iterators of the typename MatrixType. Therefore, sparse matrices are   possible sources.  
* [0.x.22]*
   Transposing assignment from different matrix classes. This assignment   operator uses iterators of the typename MatrixType. Therefore, sparse   matrices are possible sources.  
* [0.x.23]*
   Fill matrix with elements extracted from a tensor, taking rows included   between <tt>r_i</tt> and <tt>r_j</tt> and columns between <tt>c_i</tt>   and <tt>c_j</tt>. The resulting matrix is then inserted in the   destination matrix at position <tt>(dst_r, dst_c)</tt> Checks on the   indices are made.  
* [0.x.24]*
   Insert a submatrix (also rectangular) into a tensor, putting its upper   left element at the specified position <tt>(dst_r, dst_c)</tt> and the   other elements consequently. Default values are chosen so that no   parameter needs to be specified if the size of the tensor and that of the   matrix coincide.  
* [0.x.25]*
   Copy a subset of the rows and columns of another matrix into the current   object.      [2.x.16]  matrix The matrix from which a subset is to be taken from.    [2.x.17]  row_index_set The set of rows of  [2.x.18]  from which to extract.    [2.x.19]  column_index_set The set of columns of  [2.x.20]  from which to   extract.  [2.x.21]  The number of elements in  [2.x.22]  and  [2.x.23]    column_index_set shall be equal to the number of rows and columns in the   current object. In other words, the current object is not resized for   this operation.  
* [0.x.26]*
   Copy the elements of the current matrix object into a specified set of   rows and columns of another matrix. Thus, this is a scatter operation.      [2.x.24]  row_index_set The rows of  [2.x.25]  into which to write.    [2.x.26]  column_index_set The columns of  [2.x.27]  into which to write.    [2.x.28]  matrix The matrix within which certain elements are to be   replaced.  [2.x.29]  The number of elements in  [2.x.30]  and  [2.x.31]    column_index_set shall be equal to the number of rows and columns in the   current object. In other words, the current object is not resized for   this operation.  
* [0.x.27]*
   Fill rectangular block.     A rectangular block of the matrix <tt>src</tt> is copied into   <tt>this</tt>. The upper left corner of the block being copied is   <tt>(src_offset_i,src_offset_j)</tt>.  The upper left corner of the   copied block is <tt>(dst_offset_i,dst_offset_j)</tt>.  The size of the   rectangular block being copied is the maximum size possible, determined   either by the size of <tt>this</tt> or <tt>src</tt>.  
* [0.x.28]*
   Make function of base class available.  
* [0.x.29]*
   Fill with permutation of another matrix.     The matrix <tt>src</tt> is copied into the target. The two permutation   <tt>p_r</tt> and <tt>p_c</tt> operate in a way, such that <tt>result(i,j)   = src(p_r[i], p_c[j])</tt>.     The vectors may also be a selection from a larger set of integers, if the   matrix <tt>src</tt> is bigger. It is also possible to duplicate rows or   columns by this method.  
* [0.x.30]*
   Set a particular entry of the matrix to a value. Thus, calling    [2.x.32]  is entirely equivalent to the operation    [2.x.33] . This function exists for compatibility with   the various sparse matrix objects.      [2.x.34]  i The row index of the element to be set.    [2.x.35]  j The columns index of the element to be set.    [2.x.36]  value The value to be written into the element.  
* [0.x.31]*
    [2.x.37]   
* [0.x.32]*
    [2.x.38]  Non-modifying operators  
* [0.x.33]*
    [2.x.39]   
* [0.x.34]*
   Comparison operator. Be careful with this thing, it may eat up huge   amounts of computing time! It is most commonly used for internal   consistency checks of programs.  
* [0.x.35]*
   Number of rows of this matrix.  Note that the matrix is of dimension [1.x.2].  
* [0.x.36]*
   Number of columns of this matrix.  Note that the matrix is of dimension   [1.x.3].  
* [0.x.37]*
   Return whether the matrix contains only elements with value zero. This   function is mainly for internal consistency checks and should seldom be   used when not in debug mode since it uses quite some time.  
* [0.x.38]*
   Return the square of the norm of the vector <tt>v</tt> induced by this   matrix, i.e. [1.x.4]. This is useful, e.g. in the finite element   context, where the [1.x.5] norm of a function equals the   matrix norm with respect to the mass matrix of the vector representing   the nodal values of the finite element function.     Obviously, the matrix needs to be quadratic for this operation, and for   the result to actually be a norm it also needs to be either real   symmetric or complex hermitian.     The underlying template types of both this matrix and the given vector   should either both be real or complex-valued, but not mixed, for this   function to make sense.  
* [0.x.39]*
   Build the matrix scalar product <tt>u<sup>T</sup> M v</tt>. This function   is mostly useful when building the cellwise scalar product of two   functions in the finite element context.     The underlying template types of both this matrix and the given vector   should either both be real or complex-valued, but not mixed, for this   function to make sense.  
* [0.x.40]*
   Return the [1.x.6]-norm of the matrix, where  [2.x.40]  (maximum of the sums over columns).  
* [0.x.41]*
   Return the  [2.x.41] -norm of the matrix, where  [2.x.42]  (maximum of the sums over rows).  
* [0.x.42]*
   Compute the Frobenius norm of the matrix.  Return value is the root of   the square sum of all matrix entries.    
*  [2.x.43]  For the timid among us: this norm is not the norm compatible with   the [1.x.7]-norm of the vector space.  
* [0.x.43]*
   Compute the relative norm of the skew-symmetric part. The return value is   the Frobenius norm of the skew-symmetric part of the matrix divided by   that of the matrix.     Main purpose of this function is to check, if a matrix is symmetric   within a certain accuracy, or not.  
* [0.x.44]*
   Compute the determinant of a matrix.  This is only implemented for one,   two, and three dimensions, since for higher dimensions the numerical work   explodes.  Obviously, the matrix needs to be quadratic for this function.  
* [0.x.45]*
   Return the trace of the matrix, i.e. the sum of the diagonal values   (which happens to also equal the sum of the eigenvalues of a matrix).   Obviously, the matrix needs to be quadratic for this function.  
* [0.x.46]*
   Output of the matrix in user-defined format given by the specified   precision and width. This function saves width and precision of the   stream before setting these given values for output, and restores the   previous values after output.  
* [0.x.47]*
   Print the matrix and allow formatting of entries.     The parameters allow for a flexible setting of the output format:      [2.x.44]  <tt>precision</tt> denotes the number of trailing digits.      [2.x.45]  <tt>scientific</tt> is used to determine the number format, where   <tt>scientific</tt> = <tt>false</tt> means fixed point notation.      [2.x.46]  <tt>width</tt> denotes the with of each column. A zero entry for   <tt>width</tt> makes the function compute a width, but it may be changed   to a positive value, if output is crude.      [2.x.47]  <tt>zero_string</tt> specifies a string printed for zero entries.      [2.x.48]  <tt>denominator</tt> Multiply the whole matrix by this common   denominator to get nicer numbers.      [2.x.49]  <tt>threshold</tt>: all entries with absolute value smaller than   this are considered zero.  
* [0.x.48]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.49]*
   Mutable iterator starting at the first entry of row <tt>r</tt>.  
* [0.x.50]*
   One past the end mutable iterator of row <tt>r</tt>.  
* [0.x.51]*
   Constant iterator starting at the first entry of row <tt>r</tt>.  
* [0.x.52]*
   One past the end constant iterator of row <tt>r</tt>.  
* [0.x.53]*
   Scale the entire matrix by a fixed factor.  
* [0.x.54]*
   Scale the entire matrix by the inverse of the given factor.  
* [0.x.55]*
   Simple addition of a scaled matrix, i.e. <tt>*this += a*A</tt>.     The matrix <tt>A</tt> may be a full matrix over an arbitrary underlying   scalar type, as long as its data type is convertible to the data type of   this matrix.  
* [0.x.56]*
   Multiple addition of scaled matrices, i.e. <tt>*this += a*A + b*B</tt>.     The matrices <tt>A</tt> and <tt>B</tt> may be a full matrix over an   arbitrary underlying scalar type, as long as its data type is convertible   to the data type of this matrix.  
* [0.x.57]*
   Multiple addition of scaled matrices, i.e. <tt>*this += a*A + b*B +   c*C</tt>.     The matrices <tt>A</tt>, <tt>B</tt> and <tt>C</tt> may be a full matrix   over an arbitrary underlying scalar type, as long as its data type is   convertible to the data type of this matrix.  
* [0.x.58]*
   Add rectangular block.     A rectangular block of the matrix <tt>src</tt> is added to <tt>this</tt>.   The upper left corner of the block being copied is   <tt>(src_offset_i,src_offset_j)</tt>.  The upper left corner of the   copied block is <tt>(dst_offset_i,dst_offset_j)</tt>.  The size of the   rectangular block being copied is the maximum size possible, determined   either by the size of <tt>this</tt> or <tt>src</tt> and the given   offsets.  
* [0.x.59]*
   Weighted addition of the transpose of <tt>B</tt> to <tt>this</tt>.     [1.x.8]  
* [0.x.60]*
   Add transpose of a rectangular block.     A rectangular block of the matrix <tt>src</tt> is transposed and   addedadded to <tt>this</tt>. The upper left corner of the block being   copied is <tt>(src_offset_i,src_offset_j)</tt> in the coordinates of the   [1.x.9]-transposed matrix.  The upper left corner of the copied block   is <tt>(dst_offset_i,dst_offset_j)</tt>.  The size of the rectangular   block being copied is the maximum size possible, determined either by the   size of <tt>this</tt> or <tt>src</tt>.  
* [0.x.61]*
   Add a single element at the given position.  
* [0.x.62]*
   Add an array of values given by <tt>values</tt> in the given global   matrix row at columns specified by col_indices in the full matrix. This   function is present for compatibility with the various sparse matrices in   deal.II. In particular, the two boolean fields  [2.x.50]  and    [2.x.51]  do not impact the performance of this routine,   as opposed to the sparse matrix case and are indeed ignored in the   implementation.  
* [0.x.63]*
   [1.x.10].  Simple addition of rows of this  
* [0.x.64]*
   [1.x.11].  Multiple addition of   rows of this.  
* [0.x.65]*
   [1.x.12].  Simple addition of columns of this.  
* [0.x.66]*
   [1.x.13].  Multiple addition of   columns of this.  
* [0.x.67]*
   Swap [1.x.14].  Swap rows i and j of this  
* [0.x.68]*
   Swap [1.x.15].  Swap columns i and j of this  
* [0.x.69]*
   Add constant to diagonal elements of this, i.e. add a multiple of the   identity matrix.  
* [0.x.70]*
   Assignment <tt>*this = a*A</tt>.  
* [0.x.71]*
   Assignment <tt>*this = a*A + b*B</tt>.  
* [0.x.72]*
   Assignment <tt>*this = a*A + b*B + c*C</tt>.  
* [0.x.73]*
   Symmetrize the matrix by forming the mean value between the existing   matrix and its transpose, [1.x.16].     Obviously the matrix must be quadratic for this operation.  
* [0.x.74]*
   A=Inverse(A). A must be a square matrix.  Inversion of this matrix by   Gauss-Jordan algorithm with partial pivoting.  This process is well-   behaved for positive definite matrices, but be aware of round-off errors   in the indefinite case.     In case deal.II was configured with LAPACK, the functions Xgetrf and   Xgetri build an LU factorization and invert the matrix upon that   factorization, providing best performance up to matrices with a few   hundreds rows and columns.     The numerical effort to invert an <tt>n x n</tt> matrix is of the order   <tt>n**3</tt>.  
* [0.x.75]*
   Assign the inverse of the given matrix to <tt>*this</tt>. This function   is hardcoded for quadratic matrices of dimension one to four. However,   since the amount of code needed grows quickly, the method gauss_jordan()   is invoked implicitly if the dimension is larger.  
* [0.x.76]*
   Assign the Cholesky decomposition  [2.x.52]  of the given matrix  [2.x.53]  to   <tt>*this</tt>, where  [2.x.54]  is lower triangular matrix. The given matrix must   be symmetric positive definite.     ExcMatrixNotPositiveDefinite will be thrown in the case that the matrix   is not positive definite.  
* [0.x.77]*
   <tt>*this(i,j)</tt> =  [2.x.55]  where  [2.x.56]  are vectors of the same   length.  
* [0.x.78]*
   Assign the left_inverse of the given matrix to <tt>*this</tt>. The   calculation being performed is [1.x.17].  
* [0.x.79]*
   Assign the right_inverse of the given matrix to <tt>*this</tt>. The   calculation being performed is [1.x.18].  
* [0.x.80]*
   Matrix-matrix-multiplication.     The optional parameter <tt>adding</tt> determines, whether the result is   stored in <tt>C</tt> or added to <tt>C</tt>.     if (adding) [1.x.19]     if (!adding) [1.x.20]     Assumes that <tt>A</tt> and <tt>B</tt> have compatible sizes and that   <tt>C</tt> already has the right size.     This function uses the BLAS function Xgemm if the product of the three   matrix dimensions is larger than 300 and BLAS was detected during   configuration. Using BLAS usually results in considerable performance   gains.  
* [0.x.81]*
   Matrix-matrix-multiplication using transpose of <tt>this</tt>.     The optional parameter <tt>adding</tt> determines, whether the result is   stored in <tt>C</tt> or added to <tt>C</tt>.     if (adding) [1.x.21]     if (!adding) [1.x.22]     Assumes that <tt>A</tt> and <tt>B</tt> have compatible sizes and that   <tt>C</tt> already has the right size.     This function uses the BLAS function Xgemm if the product of the three   matrix dimensions is larger than 300 and BLAS was detected during   configuration. Using BLAS usually results in considerable performance   gains.  
* [0.x.82]*
   Matrix-matrix-multiplication using transpose of <tt>B</tt>.     The optional parameter <tt>adding</tt> determines, whether the result is   stored in <tt>C</tt> or added to <tt>C</tt>.     if (adding) [1.x.23]     if (!adding) [1.x.24]     Assumes that <tt>A</tt> and <tt>B</tt> have compatible sizes and that   <tt>C</tt> already has the right size.     This function uses the BLAS function Xgemm if the product of the three   matrix dimensions is larger than 300 and BLAS was detected during   configuration. Using BLAS usually results in considerable performance   gains.  
* [0.x.83]*
   Matrix-matrix-multiplication using transpose of <tt>this</tt> and   <tt>B</tt>.     The optional parameter <tt>adding</tt> determines, whether the result is   stored in <tt>C</tt> or added to <tt>C</tt>.     if (adding) [1.x.25]     if (!adding) [1.x.26]     Assumes that <tt>A</tt> and <tt>B</tt> have compatible sizes and that   <tt>C</tt> already has the right size.     This function uses the BLAS function Xgemm if the product of the three   matrix dimensions is larger than 300 and BLAS was detected during   configuration. Using BLAS usually results in considerable performance   gains.  
* [0.x.84]*
   Add to the current matrix the triple product [1.x.27]. Optionally,   use the transposes of the matrices [1.x.28] and [1.x.29]. The scaling   factor scales the whole product, which is helpful when adding a multiple   of the triple product to the matrix.     This product was written with the Schur complement [1.x.30] in mind.  Note that in this case the argument for   <tt>A</tt> must be the inverse of the matrix [1.x.31].  
* [0.x.85]*
   Matrix-vector-multiplication.     The optional parameter <tt>adding</tt> determines, whether the result is   stored in <tt>w</tt> or added to <tt>w</tt>.     if (adding) [1.x.32]     if (!adding) [1.x.33]     Source and destination must not be the same vector.  
* [0.x.86]*
   Adding Matrix-vector-multiplication.  [1.x.34]     Source and destination must not be the same vector.  
* [0.x.87]*
   Transpose matrix-vector-multiplication.     The optional parameter <tt>adding</tt> determines, whether the result is   stored in <tt>w</tt> or added to <tt>w</tt>.     if (adding) [1.x.35]     if (!adding) [1.x.36]       Source and destination must not be the same vector.  
* [0.x.88]*
   Adding transpose matrix-vector-multiplication.  [1.x.37]     Source and destination must not be the same vector.  
* [0.x.89]*
   Apply the Jacobi preconditioner, which multiplies every element of the   <tt>src</tt> vector by the inverse of the respective diagonal element and   multiplies the result with the damping factor <tt>omega</tt>.  
* [0.x.90]*
   [1.x.38]. Residual calculation, returns the   [1.x.39]-norm |[1.x.40]|.     Source [1.x.41] and destination [1.x.42] must not be the same vector.  
* [0.x.91]*
   Forward elimination of lower triangle.  Inverts the lower triangle of a   rectangular matrix for a given right hand side.     If the matrix has more columns than rows, this function only operates on   the left quadratic submatrix. If there are more rows, the upper quadratic   part of the matrix is considered.    
*  [2.x.57]  It is safe to use the same object for  [2.x.58]  and  [2.x.59]   
* [0.x.92]*
   Backward elimination of upper triangle.     See forward()    
*  [2.x.60]  It is safe to use the same object for  [2.x.61]  and  [2.x.62]   
* [0.x.93]*
    [2.x.63]  Exceptions    [2.x.64]   
* [0.x.94]*
   Exception  
* [0.x.95]*
   Exception  
* [0.x.96]*
   Exception  
* [0.x.97]*
   Exception  
* [0.x.98]*
   Exception  
* [0.x.99]