[0.x.0]!  [2.x.0]  PETScWrappers     [2.x.1]     
* [0.x.1]*
     Blocked sparse matrix based on the  [2.x.2]      class. This class implements the functions that are specific to the     PETSc SparseMatrix base objects for a blocked sparse matrix, and leaves     the actual work relaying most of the calls to the individual blocks to     the functions implemented in the base class. See there also for a     description of when this class is useful.         In contrast to the deal.II-type SparseMatrix class, the PETSc matrices     do not have external objects for the sparsity patterns. Thus, one does     not determine the size of the individual blocks of a block matrix of     this type by attaching a block sparsity pattern, but by calling     reinit() to set the number of blocks and then by setting the size of     each block separately. In order to fix the data structures of the block     matrix, it is then necessary to let it know that we have changed the     sizes of the underlying matrices. For this, one has to call the     collect_sizes() function, for much the same reason as is documented     with the BlockSparsityPattern class.        
*  [2.x.3]       [2.x.4]  "Block (linear algebra)"    
* [0.x.2]*
       Typedef the base class for simpler access to its own alias.      
* [0.x.3]*
       Typedef the type of the underlying matrix.      
* [0.x.4]*
       Import the alias from the base class.      
* [0.x.5]*
       Constructor; initializes the matrix to be empty, without any       structure, i.e.  the matrix is not usable at all. This constructor is       therefore only useful for matrices which are members of a class. All       other matrices should be created at a point in the data flow where       all necessary information is available.             You have to initialize the matrix before usage with       reinit(BlockSparsityPattern). The number of blocks per row and column       are then determined by that function.      
* [0.x.6]*
       Destructor.      
* [0.x.7]*
       Pseudo copy operator only copying empty objects. The sizes of the       block matrices need to be the same.      
* [0.x.8]*
       This operator assigns a scalar to a matrix. Since this does usually       not make much sense (should we set all matrix entries to this value?       Only the nonzero entries of the sparsity pattern?), this operation is       only allowed if the actual value to be assigned is zero. This       operator only exists to allow for the obvious notation       <tt>matrix=0</tt>, which sets all elements of the matrix to zero, but       keep the sparsity pattern previously used.      
* [0.x.9]*
       Resize the matrix, by setting the number of block rows and columns.       This deletes all blocks and replaces them with uninitialized ones,       i.e.  ones for which also the sizes are not yet set. You have to do       that by calling the  [2.x.5]  functions of the blocks themselves. Do       not forget to call collect_sizes() after that on this object.             The reason that you have to set sizes of the blocks yourself is that       the sizes may be varying, the maximum number of elements per row may       be varying, etc. It is simpler not to reproduce the interface of the       SparsityPattern class here but rather let the user call whatever       function they desire.      
* [0.x.10]*
       Efficiently reinit the block matrix for a parallel computation. Only       the BlockSparsityPattern of the Simple type can efficiently store       large sparsity patterns in parallel, so this is the only supported       argument. The IndexSets describe the locally owned range of DoFs for       each block. Note that the IndexSets needs to be ascending and 1:1.       For a symmetric structure hand in the same vector for the first two       arguments.      
* [0.x.11]*
       Same as above but for a symmetric structure only.      
* [0.x.12]*
       Matrix-vector multiplication: let  [2.x.6]  with  [2.x.7]  being this       matrix.      
* [0.x.13]*
       Matrix-vector multiplication. Just like the previous function, but       only applicable if the matrix has only one block column.      
* [0.x.14]*
       Matrix-vector multiplication. Just like the previous function, but       only applicable if the matrix has only one block row.      
* [0.x.15]*
       Matrix-vector multiplication. Just like the previous function, but       only applicable if the matrix has only one block.      
* [0.x.16]*
       Matrix-vector multiplication: let  [2.x.8]  with  [2.x.9]  being this       matrix. This function does the same as vmult() but takes the       transposed matrix.      
* [0.x.17]*
       Matrix-vector multiplication. Just like the previous function, but       only applicable if the matrix has only one block row.      
* [0.x.18]*
       Matrix-vector multiplication. Just like the previous function, but       only applicable if the matrix has only one block column.      
* [0.x.19]*
       Matrix-vector multiplication. Just like the previous function, but       only applicable if the matrix has only one block.      
* [0.x.20]*
       This function collects the sizes of the sub-objects and stores them       in internal arrays, in order to be able to relay global indices into       the matrix to indices into the subobjects. Youmust* call this       function each time after you have changed the size of the sub-       objects.      
* [0.x.21]*
       Return the partitioning of the domain space of this matrix, i.e., the       partitioning of the vectors this matrix has to be multiplied with.      
* [0.x.22]*
       Return the partitioning of the range space of this matrix, i.e., the       partitioning of the vectors that are result from matrix-vector       products.      
* [0.x.23]*
       Return a reference to the MPI communicator object in use with this       matrix.      
* [0.x.24]*
       Make the clear() function in the base class visible, though it is       protected.      
* [0.x.25]