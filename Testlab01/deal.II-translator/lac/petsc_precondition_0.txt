[0.x.0]*
   Base class for preconditioner classes using the PETSc functionality. The   classes in this hierarchy don't do a whole lot, except for providing a   function that sets the preconditioner and certain parameters on the   preconditioning context of the solver. These classes are basically here   only to allow a similar interface as already used for the deal.II solver   and preconditioner classes.     Note that derived classes only provide interfaces to the relevant   functionality of PETSc. PETSc does not implement all preconditioners for   all matrix types. In particular, some preconditioners are not going to   work for parallel jobs, such as for example the ILU preconditioner.    
*  [2.x.0]   
* [0.x.1]*
     Constructor.    
* [0.x.2]*
     Destructor.    
* [0.x.3]*
     Destroys the preconditioner, leaving an object like just after having     called the constructor.    
* [0.x.4]*
     Apply the preconditioner once to the given src vector.    
* [0.x.5]*
     Apply the transpose preconditioner once to the given src vector.    
* [0.x.6]*
     Give access to the underlying PETSc object.    
* [0.x.7]*
     the PETSc preconditioner object    
* [0.x.8]*
     A pointer to the matrix that acts as a preconditioner.    
* [0.x.9]*
     Internal function to create the PETSc preconditioner object. Fails if     called twice.    
* [0.x.10]*
     Conversion operator to get a representation of the matrix that     represents this preconditioner. We use this inside the actual solver,     where we need to pass this matrix to the PETSc solvers.    
* [0.x.11]*
   A class that implements the interface to use the PETSc Jacobi   preconditioner.     See the comment in the base class    [2.x.1]    for when this preconditioner may or may not work.    
*  [2.x.2]   
* [0.x.12]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.13]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.14]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.15]*
     Same as above but without setting a matrix to form the preconditioner.     Intended to be used with SLEPc objects.    
* [0.x.16]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.17]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.18]*
     Initialize the preconditioner object without knowing a particular     matrix. This function sets up appropriate parameters to the underlying     PETSc object after it has been created.    
* [0.x.19]*
   A class that implements the interface to use the PETSc Block Jacobi   preconditioner. PETSc defines the term "block Jacobi" as a preconditioner   in which it looks at a number of diagonal blocks of the matrix and then   defines a preconditioner in which the preconditioner matrix has the same   block structure as only these diagonal blocks, and each diagonal block   of the preconditioner is an approximation of the inverse of the   corresponding block of the original matrix.   The blocking structure of the matrix is determined by the   association of degrees of freedom to the individual processors in an   MPI-parallel job. If you use this preconditioner on a sequential job (or an   MPI job with only one process) then the entire matrix is the only block.     By default, PETSc uses an ILU(0) decomposition of each diagonal block of   the matrix for preconditioning. This can be changed, as is explained in   the relevant section of the PETSc manual, but is not implemented here.     See the comment in the base class    [2.x.3]    for when this preconditioner may or may not work.    
*  [2.x.4]   
* [0.x.20]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.21]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.22]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.23]*
     Same as above but without setting a matrix to form the preconditioner.     Intended to be used with SLEPc objects.    
* [0.x.24]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.25]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.26]*
     Initialize the preconditioner object without knowing a particular     matrix. This function sets up appropriate parameters to the underlying     PETSc object after it has been created.    
* [0.x.27]*
   A class that implements the interface to use the PETSc SOR   preconditioner.    
*  [2.x.5]  Only works in serial with a  [2.x.6]     
*  [2.x.7]   
* [0.x.28]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.29]*
       Constructor. By default, set the damping parameter to one.      
* [0.x.30]*
       Relaxation parameter.      
* [0.x.31]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.32]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.33]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.34]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.35]*
   A class that implements the interface to use the PETSc SSOR   preconditioner.    
*  [2.x.8]  Only works in serial with a  [2.x.9]     
*  [2.x.10]   
* [0.x.36]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.37]*
       Constructor. By default, set the damping parameter to one.      
* [0.x.38]*
       Relaxation parameter.      
* [0.x.39]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.40]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.41]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.42]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.43]*
   A class that implements the interface to use the PETSc Eisenstat   preconditioner, which implements SSOR on the diagonal block owned by   each processor.     See the comment in the base class    [2.x.11]    for when this preconditioner may or may not work.    
*  [2.x.12]   
* [0.x.44]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.45]*
       Constructor. By default, set the damping parameter to one.      
* [0.x.46]*
       Relaxation parameter.      
* [0.x.47]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.48]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.49]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.50]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.51]*
   A class that implements the interface to use the PETSc Incomplete   Cholesky preconditioner.    
*  [2.x.13]  Only works in serial with a  [2.x.14]     
*  [2.x.15]   
* [0.x.52]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.53]*
       Constructor. By default, set the fill-in parameter to zero.      
* [0.x.54]*
       Fill-in parameter.      
* [0.x.55]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.56]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.57]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.58]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.59]*
   A class that implements the interface to use the PETSc ILU   preconditioner.    
*  [2.x.16]  Only works in serial with a  [2.x.17]     
*  [2.x.18]   
* [0.x.60]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.61]*
       Constructor. By default, set the fill-in parameter to zero.      
* [0.x.62]*
       Fill-in parameter.      
* [0.x.63]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.64]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.65]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.66]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.67]*
   A class that implements the interface to use the PETSc LU preconditioner   ( [2.x.19]  Unlike classes like PreconditionILU, this class usually   (depending on the settings) performs an exact factorization of the   matrix, so it is not necessary to wrap it in an iterative solver. This   class is typically used with SolverPreOnly to get a direct   solver. Alternatively, you can use  [2.x.20]  directly.    
*  [2.x.21]  This is not a parallel preconditioner so it only works in serial   computations with a single processor.    
*  [2.x.22]   
* [0.x.68]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.69]*
       Constructor. (Default values taken from function PCCreate_LU of the       PETSc lib.)      
* [0.x.70]*
       Determines, when Pivoting is done during LU decomposition. 0.0       indicates no pivoting, and 1.0 complete pivoting. Confer PETSc manual       for more details.      
* [0.x.71]*
       Size at which smaller pivots are declared to be zero. Confer PETSc       manual for more details.      
* [0.x.72]*
       This quantity is added to the diagonal of the matrix during       factorization.      
* [0.x.73]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.74]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.75]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.76]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.77]*
   A class that implements the interface to use the BoomerAMG algebraic   multigrid preconditioner from the HYPRE suite. Note that PETSc has to be   configured with HYPRE (e.g. with \--download-hypre=1).     The preconditioner does support parallel distributed computations. See    [2.x.23]  for an example.    
*  [2.x.24]   
* [0.x.78]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.79]*
       Defines the available relaxation types for BoomerAMG.      
* [0.x.80]*
       Constructor. Note that BoomerAMG offers a lot more options to set       than what is exposed here.      
* [0.x.81]*
       Set this flag to true if you have a symmetric system matrix and you       want to use a solver which assumes a symmetric preconditioner like       CG.      
* [0.x.82]*
       Threshold of when nodes are considered strongly connected. See       HYPRE_BoomerAMGSetStrongThreshold(). Recommended values are 0.25 for       2d and 0.5 for 3d problems, but it is problem dependent.      
* [0.x.83]*
       If set to a value smaller than 1.0 then diagonally dominant parts of       the matrix are treated as having no strongly connected nodes. If the       row sum weighted by the diagonal entry is bigger than the given       value, it is considered diagonally dominant. This feature is turned       of by setting the value to 1.0. This is the default as some matrices       can result in having only diagonally dominant entries and thus no       multigrid levels are constructed. The default in BoomerAMG for this       is 0.9. When you try this, check for a reasonable number of levels       created.      
* [0.x.84]*
       Number of levels of aggressive coarsening. Increasing this value       reduces the construction time and memory requirements but may       decrease effectiveness.      
* [0.x.85]*
       Setting this flag to true produces debug output from HYPRE, when the       preconditioner is constructed.      
* [0.x.86]*
       Choose relaxation type up.      
* [0.x.87]*
       Choose relaxation type down.      
* [0.x.88]*
       Choose relaxation type coarse.      
* [0.x.89]*
       Choose number of sweeps on coarse grid.      
* [0.x.90]*
       Choose BommerAMG tolerance.      
* [0.x.91]*
       Choose BommerAMG maximum number of cycles.      
* [0.x.92]*
       Defines whether a w-cycle should be used instead of the standard       setting of a v-cycle.      
* [0.x.93]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.94]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.95]*
     Same as above but without setting a matrix to form the preconditioner.     Intended to be used with SLEPc objects.    
* [0.x.96]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.97]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.98]*
     Initialize the preconditioner object without knowing a particular     matrix. This function sets up appropriate parameters to the underlying     PETSc object after it has been created.    
* [0.x.99]*
   A class that implements the interface to use the ParaSails sparse   approximate inverse preconditioner from the HYPRE suite. Note that PETSc   has to be configured with HYPRE (e.g. with \--download-hypre=1).     ParaSails uses least-squares minimization to compute a sparse approximate   inverse. The sparsity pattern used is the pattern of a power of a   sparsified matrix. ParaSails also uses a post-filtering technique to   reduce the cost of applying the preconditioner.     ParaSails solves symmetric positive definite (SPD) problems using a   factorized SPD preconditioner and can also solve general (nonsymmetric   and/or indefinite) problems with a nonfactorized preconditioner. The   problem type has to be set in  [2.x.25]      The preconditioner does support parallel distributed computations.    
*  [2.x.26]   
* [0.x.100]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.101]*
       Constructor.      
* [0.x.102]*
       This parameter specifies the type of problem to solve:        [2.x.27]         [2.x.28]   [2.x.29]  nonsymmetric and/or indefinite problem, and nonsymmetric       preconditioner        [2.x.30]   [2.x.31]  SPD problem, and SPD (factored) preconditioner        [2.x.32]   [2.x.33]  nonsymmetric, definite problem, and SPD (factored)       preconditioner        [2.x.34]        Default is <tt>symmetric = 1</tt>.      
* [0.x.103]*
       The sparsity pattern used for the approximate inverse is the pattern       of a power <tt>B^m</tt> where <tt>B</tt> has been sparsified from the       given matrix <tt>A</tt>, <tt>n_level</tt> is equal to <tt>m+1</tt>.       Default value is <tt>n_levels = 1</tt>.      
* [0.x.104]*
       Sparsification is performed by dropping nonzeros which are smaller       than <tt>thresh</tt> in magnitude. Lower values of <tt>thresh</tt>       lead to more accurate, but also more expensive preconditioners.       Default value is <tt>thresh = 0.1</tt>. Setting <tt>thresh < 0</tt> a       threshold is selected automatically, such that <tt>-thresh</tt>       represents the fraction of nonzero elements that are dropped. For       example, if <tt>thresh =
* 
*  - .9</tt>, then <tt>B</tt> will contain       about ten percent of the nonzeros of the given matrix <tt>A</tt>.      
* [0.x.105]*
       Filtering is a post-processing procedure, <tt>filter</tt> represents       a fraction of nonzero elements that are dropped after creating the       approximate inverse sparsity pattern. Default value is <tt>filter =       0.05</tt>. Setting <tt>filter < 0</tt> a value is selected       automatically, such that <tt>-filter</tt> represents the fraction of       nonzero elements that are dropped. For example, if <tt>thresh =
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 

* 
* 
*  - .9</tt>, then about 90 percent of the entries in the computed       approximate inverse are dropped.      
* [0.x.106]*
       Setting this flag to true produces output from HYPRE, when the       preconditioner is constructed.      
* [0.x.107]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.108]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any.    
* [0.x.109]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments.    
* [0.x.110]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.111]*
   A class that implements a non-preconditioned method.    
*  [2.x.35]   
* [0.x.112]*
     Standardized data struct to pipe additional flags to the     preconditioner.    
* [0.x.113]*
     Empty Constructor. You need to call initialize() before using this     object.    
* [0.x.114]*
     Constructor. Take the matrix which is used to form the preconditioner,     and additional flags if there are any. The matrix is completely ignored     in computations.    
* [0.x.115]*
     Initialize the preconditioner object and calculate all data that is     necessary for applying it in a solver. This function is automatically     called when calling the constructor with the same arguments and is only     used if you create the preconditioner without arguments. The matrix is     completely ignored in computations.    
* [0.x.116]*
     Store a copy of the flags for this particular preconditioner.    
* [0.x.117]*
   Alias for backwards-compatibility.    [2.x.36]  Use  [2.x.37]  instead.  
* [0.x.118]