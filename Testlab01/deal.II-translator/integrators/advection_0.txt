[0.x.0]*
  
*  [2.x.0]    its DG formulations     All advection operators depend on an advection velocity denoted by   [1.x.0] in the formulas below. It is denoted as <tt>velocity</tt> in the   parameter lists.     The functions cell_matrix() and both upwind_value_matrix() are taking the   equation in weak form, that is, the directional derivative is on the test   function.    
*  [2.x.1]   
* [0.x.1]*
     Advection along the direction [1.x.1] in weak form with derivative on     the test function [1.x.2]         The FiniteElement in <tt>fe</tt> may be scalar or vector valued. In the     latter case, the advection operator is applied to each component     separately.          [2.x.2]  M: The advection matrix obtained as result      [2.x.3]  fe: The FEValues object describing the local trial function     space. #update_values and #update_gradients, and #update_JxW_values     must be set.      [2.x.4]  fetest: The FEValues object describing the local test function     space. #update_values and #update_gradients must be set.      [2.x.5]  velocity: The advection velocity, a vector of dimension     <tt>dim</tt>. Each component may either contain a vector of length one,     in which case a constant velocity is assumed, or a vector with as many     entries as quadrature points if the velocity is not constant.      [2.x.6]  factor is an optional multiplication factor for the result.    
* [0.x.2]*
     Scalar advection residual operator in strong form         [1.x.3]         \warning This is not the residual consistent with cell_matrix(), but     with its transpose.    
* [0.x.3]*
     Vector-valued advection residual operator in strong form             [1.x.4]         \warning This is not the residual consistent with cell_matrix(), but     with its transpose.    
* [0.x.4]*
     Scalar advection residual operator in weak form         [1.x.5]    
* [0.x.5]*
     Vector-valued advection residual operator in weak form             [1.x.6]    
* [0.x.6]*
     Upwind flux at the boundary for weak advection operator. This is the     value of the trial function at the outflow boundary and zero else:     [1.x.7]         The <tt>velocity</tt> is provided as an ArrayView, having <tt>dim</tt>     vectors, one for each velocity component. Each of the vectors must     either have only a single entry, if the advection velocity is constant,     or have an entry for each quadrature point.         The finite element can have several components, in which case each     component is advected by the same velocity.    
* [0.x.7]*
     Scalar case: Residual for upwind flux at the boundary for weak     advection operator. This is the value of the trial function at the     outflow boundary and the value of the incoming boundary condition on     the inflow boundary:     [1.x.8]         Here, the numerical flux  [2.x.7]  is the upwind value at the face,     namely the finite element function whose values are given in the     argument `input` on the outflow boundary. On the inflow boundary, it is     the inhomogeneous boundary value in the argument `data`.         The <tt>velocity</tt> is provided as an ArrayView, having <tt>dim</tt>     vectors, one for each velocity component. Each of the vectors must     either have only a single entry, if the advection velocity is constant,     or have an entry for each quadrature point.         The finite element can have several components, in which case each     component is advected by the same velocity.    
* [0.x.8]*
     Vector-valued case: Residual for upwind flux at the boundary for weak     advection operator. This is the value of the trial function at the     outflow boundary and the value of the incoming boundary condition on     the inflow boundary:     [1.x.9]         Here, the numerical flux  [2.x.8]  is the upwind value at the face,     namely the finite element function whose values are given in the     argument `input` on the outflow boundary. On the inflow boundary, it is     the inhomogeneous boundary value in the argument `data`.         The <tt>velocity</tt> is provided as an ArrayView, having <tt>dim</tt>     vectors, one for each velocity component. Each of the vectors must     either have only a single entry, if the advection velocity is constant,     or have an entry for each quadrature point.         The finite element can have several components, in which case each     component is advected by the same velocity.    
* [0.x.9]*
     Upwind flux in the interior for weak advection operator. Matrix entries     correspond to the upwind value of the trial function, multiplied by the     jump of the test functions     [1.x.10]         The <tt>velocity</tt> is provided as an ArrayView, having <tt>dim</tt>     vectors, one for each velocity component. Each of the vectors must     either have only a single entry, if the advection velocity is constant,     or have an entry for each quadrature point.         The finite element can have several components, in which case each     component is advected the same way.    
* [0.x.10]*
     Scalar case: Upwind flux in the interior for weak advection operator.     Matrix entries correspond to the upwind value of the trial function,     multiplied by the jump of the test functions     [1.x.11]         The <tt>velocity</tt> is provided as an ArrayView, having <tt>dim</tt>     vectors, one for each velocity component. Each of the vectors must     either have only a single entry, if the advection velocity is constant,     or have an entry for each quadrature point.         The finite element can have several components, in which case each     component is advected the same way.    
* [0.x.11]*
     Vector-valued case: Upwind flux in the interior for weak advection     operator. Matrix entries correspond to the upwind value of the trial     function, multiplied by the jump of the test functions     [1.x.12]         The <tt>velocity</tt> is provided as an ArrayView, having <tt>dim</tt>     vectors, one for each velocity component. Each of the vectors must     either have only a single entry, if the advection velocity is constant,     or have an entry for each quadrature point.         The finite element can have several components, in which case each     component is advected the same way.    
* [0.x.12]