[0.x.0]*
 Implementation of a number of renumbering algorithms for the degrees of freedom on a triangulation. The functions in this namespace compute new indices for each degree of freedom of a DoFHandler object, and then call  [2.x.0] 
* 

*  [1.x.0]
*  Within this class, the Cuthill-McKee algorithm is implemented. It starts at a degree of freedom, searches the other DoFs for those which are coupled with the one we started with and numbers these in a certain way. It then finds the second level of DoFs, namely those that couple with those of the previous level (which were those that coupled with the initial DoF) and numbers these. And so on. For the details of the algorithm, especially the numbering within each level, please see H. R. Schwarz: "Methode der finiten Elemente". The reverse Cuthill-McKee algorithm does the same job, but numbers all elements in the reverse order.
*  These algorithms have one major drawback: they require a good starting point, i.e. the degree of freedom index that will get a new index of zero. The renumbering functions therefore allow the caller to specify such an initial DoF, e.g. by exploiting knowledge of the actual topology of the domain. It is also possible to give several starting indices, which may be used to simulate a simple upstream numbering (by giving the inflow dofs as starting values) or to make preconditioning faster (by letting the Dirichlet boundary indices be starting points).
*  If no starting index is given, one is chosen automatically, namely one with the smallest coordination number (the coordination number is the number of other dofs this dof couples with). This dof is usually located on the boundary of the domain. There is, however, large ambiguity in this when using the hierarchical meshes used in this library, since in most cases the computational domain is not approximated by tilting and deforming elements and by plugging together variable numbers of elements at vertices, but rather by hierarchical refinement. There is therefore a large number of dofs with equal coordination numbers. The renumbering algorithms will therefore not give optimal results.
*  In the book of Schwarz (H.R.Schwarz: Methode der finiten Elemente), it is advised to test many starting points, if possible all with the smallest coordination number and also those with slightly higher numbers. However, this seems only possible for meshes with at most several dozen or a few hundred elements found in small engineering problems of the early 1980s (the second edition was published in 1984), but certainly not with those used in this library, featuring several 10,000 to a few 100,000 elements.
* 

*  [1.x.1]
*  The renumbering algorithms need quite a lot of memory, since they have to store for each dof with which other dofs it couples. This is done using a SparsityPattern object used to store the sparsity pattern of matrices. It is not useful for the user to do anything between distributing the dofs and renumbering, i.e. the calls to  [2.x.1]  and  [2.x.2]  should follow each other immediately. If you try to create a sparsity pattern or anything else in between, these will be invalid afterwards.
*  The renumbering may take care of dof-to-dof couplings only induced by eliminating constraints. In addition to the memory consumption mentioned above, this also takes quite some computational time, but it may be switched off upon calling the  [2.x.3]  function. This will then give inferior results, since knots in the graph (representing dofs) are not found to be neighbors even if they would be after condensation.
*  The renumbering algorithms work on a purely algebraic basis, due to the isomorphism between the graph theoretical groundwork underlying the algorithms and binary matrices (matrices of which the entries are binary values) represented by the sparsity patterns. In special, the algorithms do not try to exploit topological knowledge (e.g. corner detection) to find appropriate starting points. This way, however, they work in arbitrary space dimension.
*  If you want to give starting points, you may give a list of dof indices which will form the first step of the renumbering. The dofs of the list will be consecutively numbered starting with zero, i.e. this list is not renumbered according to the coordination number of the nodes. Indices not in the allowed range are deleted. If no index is allowed, the algorithm will search for its own starting point.
* 

*  [1.x.2]
*  The renumbering schemes mentioned above do not lead to optimal results. However, after all there is no algorithm that accomplishes this within reasonable time. There are situations where the lack of optimality even leads to worse results than with the original, crude, levelwise numbering scheme; one of these examples is a mesh of four cells of which always those cells are refined which are neighbors to the center (you may call this mesh a `zoom in' mesh). In one such example the bandwidth was increased by about 50 per cent.
*  In most other cases, the bandwidth is reduced significantly. The reduction is the better the less structured the grid is. With one grid where the cells were refined according to a random driven algorithm, the bandwidth was reduced by a factor of six.
*  Using the constraint information usually leads to reductions in bandwidth of 10 or 20 per cent, but may for some very unstructured grids also lead to an increase. You have to weigh the decrease in your case with the time spent to use the constraint information, which usually is several times longer than the `pure' renumbering algorithm.
*  In almost all cases, the renumbering scheme finds a corner to start with. Since there is more than one corner in most grids and since even an interior degree of freedom may be a better starting point, giving the starting point by the user may be a viable way if you have a simple scheme to derive a suitable point (e.g. by successively taking the third child of the cell top left of the coarsest level, taking its third vertex and the dof index thereof, if you want the top left corner vertex). If you do not know beforehand what your grid will look like (e.g. when using adaptive algorithms), searching a best starting point may be difficult, however, and in many cases will not justify the effort.
* 

*  [1.x.3]
*  For finite elements composed of several base elements using the FESystem class, or for elements which provide several components themselves, it may be of interest to sort the DoF indices by component. This will then bring out the block matrix structure, since otherwise the degrees of freedom are numbered cell-wise without taking into account that they may belong to different components. For example, one may want to sort degree of freedom for a Stokes discretization so that we first get all velocities and then all the pressures so that the resulting matrix naturally decomposes into a  [2.x.4]  system.
*  This kind of numbering may be obtained by calling the component_wise() function of this class. Since it does not touch the order of indices within each component, it may be worthwhile to first renumber using the Cuthill- McKee or a similar algorithm and afterwards renumbering component-wise. This will bring out the matrix structure and additionally have a good numbering within each block.
*  The component_wise() function allows not only to honor enumeration based on vector components, but also allows to group together vector components into "blocks" using a defaulted argument to the various  [2.x.5]  functions (see  [2.x.6]  vs  [2.x.7]  for a description of the difference). The blocks designated through this argument may, but do not have to be, equal to the blocks that the finite element reports. For example, a typical Stokes element would be

* 
* [1.x.4]
*  This element has  [2.x.8]  vector components and equally many blocks. However, one may want to consider the velocities as one logical block so that all velocity degrees of freedom are enumerated the same way, independent of whether they are  [2.x.9] - or  [2.x.10] -velocities. This is done, for example, in  [2.x.11]  and  [2.x.12]  as well as several other tutorial programs.
*  On the other hand, if you really want to use block structure reported by the finite element itself (a case that is often the case if you have finite elements that have multiple vector components, e.g. the FE_RaviartThomas or FE_Nedelec elements) then you can use the  [2.x.13]  instead of the  [2.x.14]  functions.
* 

*  [1.x.5]
*  Given an ordered vector of cells, the function cell_wise() sorts the degrees of freedom such that degrees on earlier cells of this vector will occur before degrees on later cells.
*  This rule produces a well-defined ordering for discontinuous Galerkin methods (FE_DGP, FE_DGQ). For continuous methods, we use the additional rule that each degree of freedom is ordered according to the first cell in the ordered vector it belongs to.
*  Applications of this scheme are downstream() and clock_wise_dg(). The first orders the cells according to a downstream direction and then applies cell_wise().
* 

* 
*  [2.x.15]  For DG elements, the internal numbering in each cell remains unaffected. This cannot be guaranteed for continuous elements anymore, since degrees of freedom shared with an earlier cell will be accounted for by the other cell.
* 

*  [1.x.6]
*  The random() function renumbers degrees of freedom randomly. This function is probably seldom of use, except to check the dependence of solvers (iterative or direct ones) on the numbering of the degrees of freedom.
* 

*  [1.x.7]
*  As a benchmark of comparison, let us consider what the different sparsity patterns produced by the various algorithms when using the  [2.x.16]  element combination typically employed in the discretization of Stokes equations, when used on the mesh obtained in  [2.x.17]  after one adaptive mesh refinement in 3d. The space dimension together with the coupled finite element leads to a rather dense system matrix with, on average around 180 nonzero entries per row. After applying each of the reordering strategies shown below, the degrees of freedom are also sorted using  [2.x.18]  into velocity and pressure groups; this produces the  [2.x.19]  block structure seen below with the large velocity-velocity block at top left, small pressure-pressure block at bottom right, and coupling blocks at top right and bottom left.
*  The goal of reordering strategies is to improve the preconditioner. In  [2.x.20]  we use a SparseILU to preconditioner for the velocity-velocity block at the top left. The quality of the preconditioner can then be measured by the number of CG iterations required to solve a linear system with this block. For some of the reordering strategies below we record this number for adaptive refinement cycle 3, with 93176 degrees of freedom; because we solve several linear systems with the same matrix in the Schur complement, the average number of iterations is reported. The lower the number the better the preconditioner and consequently the better the renumbering of degrees of freedom is suited for this task. We also state the run-time of the program, in part determined by the number of iterations needed, for the first 4 cycles on one of our machines. Note that the reported times correspond to the run time of the entire program, not just the affected solver; if a program runs twice as fast with one particular ordering than with another one, then this means that the actual solver is actually several times faster.
*   [2.x.21] 
* 

*  [1.x.8]
*  Most of the algorithms listed above also work on multigrid degree of freedom numberings. Refer to the actual function declarations to get more information on this.
* 

* 
*  [2.x.22] 

* 
* [0.x.1]*
   Direction based comparator for cell iterators: it returns  [2.x.23]  if the   center of the second cell is downstream of the center of the first one   with respect to the direction given to the constructor.  
* [0.x.2]*
     Constructor.    
* [0.x.3]*
     Return true if c1 less c2.    
* [0.x.4]*
     Flow direction.    
* [0.x.5]*
   Point based comparator for downstream directions: it returns  [2.x.24]  if   the second point is downstream of the first one with respect to the   direction given to the constructor. If the points are the same with   respect to the downstream direction, the point with the lower DoF number   is considered smaller.  
* [0.x.6]*
     Constructor.    
* [0.x.7]*
     Return true if c1 less c2.    
* [0.x.8]*
     Flow direction.    
* [0.x.9]*
   A namespace for the implementation of some renumbering algorithms based   on algorithms implemented in the Boost Graph Library (BGL) by Jeremy Siek   and others.     While often slightly slower to compute, the algorithms using BOOST often   lead to matrices with smaller bandwidths and sparse ILUs based on this   numbering are therefore more efficient.     For a comparison of these algorithms with the ones defined in   DoFRenumbering, see the comparison section in the documentation of the   DoFRenumbering namespace.  
* [0.x.10]*
     Renumber the degrees of freedom according to the Cuthill-McKee method,     eventually using the reverse numbering scheme.         See the general documentation of the parent class for details on the     different methods.         As an example of the results of this algorithm, take a look at the     comparison of various algorithms in the documentation of the     DoFRenumbering namespace.    
* [0.x.11]*
     Compute the renumbering vector needed by the Cuthill_McKee() function.     Does not perform the renumbering on the DoFHandler dofs but returns the     renumbering vector.    
* [0.x.12]*
     Renumber the degrees of freedom based on the BOOST implementation of     the King algorithm. This often results in slightly larger (by a few     percent) bandwidths than the Cuthill-McKee algorithm, but sparse ILUs     are often slightly (also by a few percent) better preconditioners.         As an example of the results of this algorithm, take a look at the     comparison of various algorithms in the documentation of the     DoFRenumbering namespace.         This algorithm is used in  [2.x.25] .    
* [0.x.13]*
     Compute the renumbering for the King algorithm but do not actually     renumber the degrees of freedom in the DoF handler argument.    
* [0.x.14]*
     Renumber the degrees of freedom based on the BOOST implementation of     the minimum degree algorithm. Unlike the Cuthill-McKee algorithm, this     algorithm does not attempt to minimize the bandwidth of a matrix but to     minimize the amount of fill-in when doing an LU decomposition. It may     sometimes yield better ILUs because of this property.         As an example of the results of this algorithm, take a look at the     comparison of various algorithms in the documentation of the     DoFRenumbering namespace.    
* [0.x.15]*
     Compute the renumbering for the minimum degree algorithm but do not     actually renumber the degrees of freedom in the DoF handler argument.    
* [0.x.16]*
   Renumber the degrees of freedom according to the Cuthill-McKee method,   possibly using the reverse numbering scheme.     See the general documentation of this class for details on the different   methods.     As an example of the results of this algorithm, take a look at the   comparison of various algorithms in the documentation of the   DoFRenumbering namespace.      [2.x.26]  dof_handler The DoFHandler object to work on.    [2.x.27]  reversed_numbering Whether to use the original Cuthill-McKee     algorithm, or to reverse the ordering.    [2.x.28]  use_constraints Whether or not to use hanging node constraints in     determining the reordering of degrees of freedom.    [2.x.29]  starting_indices A set of degrees of freedom that form the first     level of renumbered degrees of freedom. If the set is empty, then a     single starting entry is chosen automatically among those that have the     smallest number of others that couple with it.     [1.x.9]     If the given DoFHandler uses a distributed triangulation (i.e., if   dof_handler.locally_owned() is not the complete index set), the   renumbering is performed on each processor's degrees of freedom   individually, without any communication between processors. In other   words, the resulting renumbering is an attempt at minimizing the bandwidth   of [1.x.10]   separately, without making an attempt at minimizing the bandwidth of   the global matrix. Furthermore, the renumbering reuses exactly the   same set of DoF indices that each processor used before. In other words,   if the previous numbering of DoFs on one processor used a contiguous   range of DoF indices, then so will the DoFs on that processor after   the renumbering, and they will occupy the same range. The same is true   if the previous numbering of DoFs on a processor consisted of a number   of index ranges or single indices: after renumbering, the locally owned   DoFs on that processor will use the exact same indices, just in a   different order.     In addition, if the DoFHandler is built on a parallel triangulation, then   on every processor, the starting indices for renumbering need to be a   (possibly empty) subset of the    [2.x.30]  "locally active degrees of freedom". In   general, these starting indices will be different on each processor   (unless of course you pass an empty list as is the default),   and each processor will use them as starting indices for the local   renumbering on that processor.     The starting indices must be locally active degrees of freedom, but   the function will only renumber the locally owned subset of the   locally owned DoFs. The function accepts starting indices from the   largest set of locally active degrees of freedom because a typical   renumbering operation with this function starts with indices that   are located on the boundary
* 
*  -  in the case of the current function,   that would be the boundary between processor subdomains. Since the   degrees of freedom that are located on subdomain interfaces may   be owned by either one of the two processors that own the adjacent   subdomains, it is not always easy to identify starting indices that   are locally owned. On the other hand, all degrees of freedom on subdomain   interfaces are locally active, and so the function accepts them as   starting indices even though it can only renumber them on a given   processor if they are also locally owned.  
* [0.x.17]*
   Compute the renumbering vector needed by the Cuthill_McKee() function.   This function does not perform the renumbering on the DoFHandler DoFs but   only returns the renumbering vector.     If a valid level is passed as parameter, the renumbering vector for this   grid level is returned.   See the Cuthill_McKee() function for an explanation of the other arguments.  
* [0.x.18]*
   Renumber the degrees of freedom according to the Cuthill-McKee method,   eventually using the reverse numbering scheme, in this case for a   multigrid numbering of degrees of freedom.     You can give a triangulation level to which this function is to be   applied.  Since with a level-wise numbering there are no hanging nodes,   no constraints can be used, so the respective parameter of the previous   function is omitted.     See the general documentation of this class for details on the different   methods.  
* [0.x.19]*
    [2.x.31]  Component-wise numberings    [2.x.32]   
* [0.x.20]*
   Sort the degrees of freedom by vector component. The numbering within   each component is not touched, so a degree of freedom with index  [2.x.33] ,   belonging to some component, and another degree of freedom with index  [2.x.34]    belonging to the same component will be assigned new indices  [2.x.35]  and    [2.x.36]  with  [2.x.37]  if  [2.x.38]  and  [2.x.39]  if  [2.x.40] .     You can specify that the components are ordered in a different way than   suggested by the FESystem object you use. To this end, set up the vector    [2.x.41]  such that the entry at index  [2.x.42]  denotes the number   of the target component for dofs with component  [2.x.43]  in the FESystem.   Naming the same target component more than once is possible and results   in a blocking of several components into one. This is discussed in    [2.x.44] . If you omit this argument, the same order as given by the finite   element is used.     If one of the base finite elements from which the global finite element   under consideration here, is a non-primitive one, i.e. its shape   functions have more than one non-zero component, then it is not possible   to associate these degrees of freedom with a single vector component. In   this case, they are associated with the first vector component to which   they belong.     For finite elements with only one component, or a single non-primitive   base element, this function is the identity operation.  
* [0.x.21]*
   Sort the degrees of freedom by component. It does the same thing as the   above function, only that it does this for one single level of a   multilevel discretization. The non-multigrid part of the DoFHandler   is not touched.  
* [0.x.22]*
   Compute the renumbering vector needed by the component_wise() functions.   Does not perform the renumbering on the DoFHandler dofs but returns the   renumbering vector.  
* [0.x.23]*
    [2.x.45]   
* [0.x.24]*
    [2.x.46]  Block-wise numberings    [2.x.47]   
* [0.x.25]*
   Sort the degrees of freedom by vector block. The numbering within each   block is not touched, so a degree of freedom with index  [2.x.48] , belonging to   some block, and another degree of freedom with index  [2.x.49]  belonging to the   same block will be assigned new indices  [2.x.50]  and  [2.x.51]  with    [2.x.52]  if  [2.x.53]  and  [2.x.54]  if  [2.x.55] .    
*  [2.x.56]  This function only succeeds if each of the elements in the    [2.x.57]  attached to the DoFHandler argument has exactly the   same number of blocks (see    [2.x.58]  "the glossary"   for more information). Note that this is not always given: while the    [2.x.59]  class ensures that all of its elements have the same   number of vector components, they need not have the same number of   blocks. At the same time, this function here needs to match individual   blocks across elements and therefore requires that elements have the same   number of blocks and that subsequent blocks in one element have the same   meaning as in another element.  
* [0.x.26]*
   Sort the degrees of freedom by vector block. It does the same thing as   the above function, only that it does this for one single level of a   multilevel discretization. The non-multigrid part of the DoFHandler   is not touched.  
* [0.x.27]*
   Compute the renumbering vector needed by the block_wise() functions.   Does not perform the renumbering on the DoFHandler dofs but returns the   renumbering vector.  
* [0.x.28]*
    [2.x.60]   
* [0.x.29]*
    [2.x.61]  Various cell-wise numberings    [2.x.62]   
* [0.x.30]*
   Renumber the degrees cell by cell by traversing the cells in    [2.x.63]  "Z order".     There are two reasons to use this function:
* 

* 
* 

* 
* 

* 
* 
*  - It produces a predictable ordering of degrees of freedom     that is independent of how exactly you arrived at a mesh.     In particular, in general the order of cells of a mesh     depends on the order in which cells were marked for     refinement and coarsening during the refinement cycles     the mesh has undergone. On the other hand, the z-order     of cells is independent of the mesh's history, and so yields a     predictable DoF numbering.
* 

* 
* 

* 
* 

* 
* 
*  - For meshes based on  [2.x.64]      the      [2.x.65]  "locally owned cells"     of     each MPI process are contiguous in Z order. That means that     numbering degrees of freedom by visiting cells in Z order yields      [2.x.66]  "locally owned DoF indices"     that consist     of contiguous ranges for each process. This is also true for the     default ordering of DoFs on such triangulations, but the default     ordering creates an enumeration that also depends on how many     processors participate in the mesh, whereas the one generated     by this function enumerates the degrees of freedom on a particular     cell with indices that will be the same regardless of how many     processes the mesh is split up between.     For meshes based on  [2.x.67]  the situation is   more complex. Here, the set of locally owned cells is determined by   a partitioning algorithm (selected by passing an object of type    [2.x.68]  to the constructor of the   triangulation), and in general these partitioning algorithms may   assign cells to    [2.x.69]  "subdomains"   based on   decisions that may have nothing to do with the Z order. (Though it   is possible to select these flags in a way so that partitioning   uses the Z order.) As a consequence, the cells of one subdomain   are not contiguous in Z order, and if one renumbered degrees of freedom   based on the Z order of cells, one would generally end up with DoF   indices that on each processor do not form a contiguous range.   This is often inconvenient (for example, because PETSc cannot store   vectors and matrices for which the locally owned set of indices   is not contiguous), and consequently this function uses the following   algorithm for  [2.x.70]  objects:
* 

* 
* 

* 
* 

* 
* 
*  - It determines how many degrees of freedom each processor owns.     This is an invariant under renumbering, and consequently we can     use how many DoFs each processor owns at the beginning of the current     function. Let us call this number  [2.x.71]  for processor  [2.x.72] .
* 

* 
* 

* 
* 

* 
* 
*  - It determines for each processor a contiguous range of new     DoF indices  [2.x.73]  so that  [2.x.74] ,  [2.x.75] , and      [2.x.76] .
* 

* 
* 

* 
* 

* 
* 
*  - It traverses the [1.x.11] in Z order and     renumbers the locally owned degrees of freedom on these cells     so that the new numbers fit within the interval  [2.x.77] .   In other words, the [1.x.12] on each   processor are sorted according to the Z order of the locally   owned cells they are on, but this property may not hold globally,   across cells. This is because the partitioning algorithm may have   decided that, for example, processor 0 owns a cell that comes   [1.x.13] in Z order than one of the cells assigned to processor 1.   On the other hand, the algorithm described above assigns the   degrees of freedom on this cell [1.x.14] indices than   all of the indices owned by processor 1.    
*  [2.x.78]  This function generates an ordering that is independent of the previous   numbering of degrees of freedom. In other words, any information that may   have been produced by a previous call to a renumbering function is   ignored.  
* [0.x.31]*
   Renumber degrees of freedom by cell. The function takes a vector of cell   iterators (which needs to list [1.x.15] locally owned active cells of the   DoF handler objects) and will give degrees of freedom new indices based on   where in the given list of cells the cell is on which the degree of freedom   is located. Degrees of freedom that exist at the interface between two or   more cells will be numbered when they are encountered first.     Degrees of freedom that are encountered first on the same cell retain   their original ordering before the renumbering step.      [2.x.79]  dof_handler The DoFHandler whose degrees of freedom are to   be renumbered.    [2.x.80]  cell_order A vector that contains the order of the cells that   defines the order in which degrees of freedom should be renumbered.      [2.x.81]  for serial triangulation  [2.x.82]  must have size    [2.x.83] , whereas   in case of parallel triangulation its size should be    [2.x.84]  Every active   cell   iterator of that triangulation needs to be present in  [2.x.85]  exactly   once.  
* [0.x.32]*
   Compute a renumbering of degrees of freedom by cell. The function takes a   vector of cell iterators (which needs to list [1.x.16] locally owned   active cells of the DoF handler objects) and will give degrees of freedom   new indices based on where in the given list of cells the cell is on which   the degree of freedom is located. Degrees of freedom that exist at the   interface between two or more cells will be numbered when they are   encountered first.     Degrees of freedom that are encountered first on the same cell retain   their original ordering before the renumbering step.      [2.x.86]  renumbering A vector of length    [2.x.87]  that contains for each   degree of freedom (in their current numbering) their future DoF index. This   vector therefore presents a (very particular) [1.x.17] of the   current DoF indices.    [2.x.88]  inverse_renumbering The reverse of the permutation returned   in the previous argument. In case of  [2.x.89]  the   inverse is within locally owned DoFs.    [2.x.90]  dof_handler The DoFHandler whose degrees of freedom are to be   renumbered.    [2.x.91]  cell_order A vector that contains the order of the cells that   defines the order in which degrees of freedom should be renumbered.      [2.x.92]  for serial triangulation  [2.x.93]  must have size    [2.x.94] , whereas   in case of parallel triangulation its size should be    [2.x.95]  Every active   cell iterator of that triangulation needs to be present in  [2.x.96]    cell_order exactly once.  [2.x.97]  For each  [2.x.98]  between zero and    [2.x.99] , the condition   <code>renumbering[inverse_renumbering[i]] ==   dof_handler.locally_owned_dofs().nth_index_in_set(i)</code> will hold.  
* [0.x.33]*
   Like the other cell_wise() function, but for one level of a multilevel   enumeration of degrees of freedom.  
* [0.x.34]*
   Like the other compute_cell_wise() function, but for one level of a   multilevel enumeration of degrees of freedom.  
* [0.x.35]*
    [2.x.100]   
* [0.x.36]*
    [2.x.101]  Directional numberings    [2.x.102]   
* [0.x.37]*
   Downstream numbering with respect to a constant flow direction. If the   additional argument  [2.x.103]  is set to  [2.x.104]  the   numbering is performed cell-wise, otherwise it is performed based on the   location of the support points.     The cells are sorted such that the centers of cells numbered higher are   further   downstream with respect to the constant vector  [2.x.105]  than the   centers of cells numbered lower. Even if this yields a downstream numbering   with respect to the flux on the edges for fairly general grids, this might   not be guaranteed for all meshes.     If the  [2.x.106]  argument is set to  [2.x.107]  this function   produces a downstream ordering of the mesh cells and calls cell_wise().   Therefore, the output only makes sense for Discontinuous Galerkin Finite   Elements (all degrees of freedom have to be associated with the interior   of the cell in that case) in that case.     If  [2.x.108]  is set to  [2.x.109]  the degrees of freedom are   renumbered based on the support point location of the individual degrees   of freedom (obviously, the finite element needs to define support points   for this to work). The numbering of points with the same position in   downstream location (e.g. those parallel to the flow direction, or   several dofs within a FESystem) will be unaffected.  
* [0.x.38]*
   Cell-wise downstream numbering with respect to a constant flow direction   on one level of a multigrid hierarchy. See the other function with the same   name.  
* [0.x.39]*
   Compute the set of renumbering indices needed by the downstream() function.   Does not perform the renumbering on the DoFHandler dofs but returns the   renumbering vector.  
* [0.x.40]*
   Compute the set of renumbering indices needed by the downstream() function.   Does not perform the renumbering on the DoFHandler dofs but returns the   renumbering vector.  
* [0.x.41]*
   Cell-wise clockwise numbering.     This function produces a (counter)clockwise ordering of the mesh cells   with respect to the hub  [2.x.110]  and calls cell_wise().  Therefore, it   only works with Discontinuous Galerkin Finite Elements, i.e. all degrees   of freedom have to be associated with the interior of the cell.  
* [0.x.42]*
   Cell-wise clockwise numbering on one level of a multigrid   hierarchy. See the other function with the same name.  
* [0.x.43]*
   Compute the renumbering vector needed by the clockwise_dg() functions.   Does not perform the renumbering on the DoFHandler dofs but returns the   renumbering vector.  
* [0.x.44]*
    [2.x.111]   
* [0.x.45]*
    [2.x.112]  Selective and random numberings    [2.x.113]   
* [0.x.46]*
   Sort those degrees of freedom which are tagged with  [2.x.114]  in the  [2.x.115]    selected_dofs array to the back of the DoF numbers. The sorting is   stable, i.e. the relative order within the tagged degrees of freedom is   preserved, as is the relative order within the untagged ones.      [2.x.116]  The  [2.x.117]  array must have as many elements as the  [2.x.118]    dof_handler has degrees of freedom.  
* [0.x.47]*
   Sort those degrees of freedom which are tagged with  [2.x.119]  in the  [2.x.120]    selected_dofs array on the level  [2.x.121]  to the back of the DoF numbers.   The sorting is stable, i.e. the relative order within the tagged degrees   of freedom is preserved, as is the relative order within the untagged   ones.      [2.x.122]  The  [2.x.123]  array must have as many elements as the  [2.x.124]    dof_handler has degrees of freedom on the given level.  
* [0.x.48]*
   Compute the renumbering vector needed by the sort_selected_dofs_back()   function. Does not perform the renumbering on the DoFHandler dofs but   returns the renumbering vector.      [2.x.125]  The  [2.x.126]  array must have as many elements as the  [2.x.127]    dof_handler has degrees of freedom.  
* [0.x.49]*
   This function computes the renumbering vector on each level needed by the   sort_selected_dofs_back() function. Does not perform the renumbering on   the DoFHandler dofs but only computes the renumbering and returns the   renumbering vector.      [2.x.128]  The  [2.x.129]  array must have as many elements as the  [2.x.130]    dof_handler has degrees of freedom on the given level.  
* [0.x.50]*
   Renumber the degrees of freedom in a random way. The result of this   function is repeatable in that two runs of the same program will yield   the same result. This is achieved by creating a new random number   generator with a fixed seed every time this function is entered. In   particular, the function therefore does not rely on an external random   number generator for which it would matter how often it has been called   before this function (or, for that matter, whether other threads running   concurrently to this function also draw random numbers).  
* [0.x.51]*
   Renumber the degrees of freedom in a random way. It does the same thing as   the above function, only that it does this for one single level of a   multilevel discretization. The non-multigrid part of the DoFHandler   is not touched.  
* [0.x.52]*
   Compute the renumbering vector needed by the random() function. See   there for more information on the computed random renumbering.     This function does not perform the renumbering on the DoFHandler dofs but   returns the renumbering vector.  
* [0.x.53]*
   Compute the renumbering vector needed by the random() function. Same   as the above function but for a single level of a multilevel   discretization.  
* [0.x.54]*
    [2.x.131]   
* [0.x.55]*
    [2.x.132]  Numberings based on cell attributes    [2.x.133]   
* [0.x.56]*
   Renumber the degrees of freedom such that they are associated with the   subdomain id of the cells they are living on, i.e. first all degrees of   freedom that belong to cells with subdomain zero, then all with subdomain   one, etc. This is useful when doing parallel computations with a standard   Triangulation after assigning subdomain ids using a partitioner (see the    [2.x.134]  function for this). Calling this   function is unnecessary when using a  [2.x.135]  or    [2.x.136]  as the degrees of freedom are   already enumerated according to the MPI process id. Therefore, if the   underlying triangulation is of this type then an error will be thrown.     Note that degrees of freedom associated with faces, edges, and vertices   may be associated with multiple subdomains if they are sitting on   partition boundaries. It would therefore be undefined with which   subdomain they have to be associated. For this, we use what we get from   the  [2.x.137]  function.     The algorithm is stable, i.e. if two dofs i,j have <tt>i<j</tt> and   belong to the same subdomain, then they will be in this order also after   reordering.  
* [0.x.57]*
   Compute the renumbering vector needed by the subdomain_wise() function.   Does not perform the renumbering on the  [2.x.138]  dofs but returns   the renumbering vector.  
* [0.x.58]*
    [2.x.139]   
* [0.x.59]*
   Exception    
*  [2.x.140]   
* [0.x.60]*
   Exception    
*  [2.x.141]   
* [0.x.61]*
   The function is only implemented for Discontinuous Galerkin Finite   elements.    
*  [2.x.142]   
* [0.x.62]