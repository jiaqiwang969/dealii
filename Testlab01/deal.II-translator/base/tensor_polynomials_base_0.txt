[0.x.0]*
 This class provides a framework for the finite element polynomial classes for use with finite element classes that are derived from FE_PolyTensor. An object of this type (or rather of a type derived from this class) is stored as a member variable in each object of type FE_PolyTensor.
*  [1.x.0]
*  Any derived class must provide the most basic properties for shape functions evaluated on the reference cell. This includes, but is not limited to, implementing the evaluate(), name(), and clone() member functions. These functions are necessary to store the most basic information of how the polynomials in the derived class evaluate at a given point on the reference cell. More information on each function can be found in the corresponding function's documentation.
*  Some classes that derive from this class include  [2.x.0]     [2.x.1]  <tt>PolynomialsABF</tt>    [2.x.2]  <tt>PolynomialsBDM</tt>    [2.x.3]  <tt>PolynomialsBernardiRaugel</tt>    [2.x.4]  <tt>PolynomialsNedelec</tt>    [2.x.5]  <tt>PolynomialsRaviartThomas</tt>    [2.x.6]  <tt>PolynomialsRT_Bubbles</tt>  [2.x.7] 
* 

* 
*  [2.x.8] 

* 
* [0.x.1]*
   Constructor. This takes the degree of the space,  [2.x.9]  from the finite element   class, and  [2.x.10]  the number of polynomials for the space.  
* [0.x.2]*
   Move constructor.  
* [0.x.3]*
   Copy constructor.  
* [0.x.4]*
   Virtual destructor. Makes sure that pointers to this class are deleted   properly.  
* [0.x.5]*
   Compute the value and the derivatives of the polynomials at    [2.x.11]      The size of the vectors must either be zero or equal <tt>n()</tt>.  In   the first case, the function will not compute these values.     If you need values or derivatives of all polynomials then use this   function, rather than using any of the <tt>compute_value</tt>,   <tt>compute_grad</tt> or <tt>compute_grad_grad</tt> functions, see below,   in a loop over all tensor product polynomials.  
* [0.x.6]*
   Return the number of polynomials.  
* [0.x.7]*
   Return the highest polynomial degree of polynomials represented by this   class. A derived class may override this if its value is different from    [2.x.12]   
* [0.x.8]*
   A sort of virtual copy constructor, this function returns a copy of   the polynomial space object. Derived classes need to override the function   here in this base class and return an object of the same type as the   derived class.     Some places in the library, for example the constructors of FE_PolyTensor,   need to make copies of polynomial spaces without knowing their exact type.   They do so through this function.  
* [0.x.9]*
   Return the name of the space.  
* [0.x.10]*
   The highest polynomial degree of this functions represented by this object.  
* [0.x.11]*
   The number of polynomials represented by this object.  
* [0.x.12]