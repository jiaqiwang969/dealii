[0.x.0]*
 This class is a helper class to facilitate the usage of quadrature formulae on faces or subfaces of cells. It computes the locations of quadrature points on the unit cell from a quadrature object for a manifold of one dimension less than that of the cell and the number of the face. For example, giving the Simpson rule in one dimension and using the project_to_face() function with face number 1, the returned points will be (1,0), (1,0.5) and (1,1). Note that faces have an orientation, so when projecting to face 3, you will get (0,0), (0,0.5) and (0,1), which is in clockwise sense, while for face 1 the points were in counterclockwise sense.
*  For the projection to subfaces (i.e. to the children of a face of the unit cell), the same applies as above. Note the order in which the children of a face are numbered, which in two dimensions coincides with the orientation of the face.
*  The second set of functions generates a quadrature formula by projecting a given quadrature rule on [1.x.0] faces and subfaces. This is used in the FEFaceValues and FESubfaceValues classes. Since we now have the quadrature points of all faces and subfaces in one array, we need to have a way to find the starting index of the points and weights corresponding to one face or subface within this array. This is done through the DataSetDescriptor member class.
*  The different functions are grouped into a common class to avoid putting them into global namespace. However, since they have no local data, all functions are declared <tt>static</tt> and can be called without creating an object of this class.
*  For the 3d case, you should note that the orientation of faces is even more intricate than for two dimensions. Quadrature formulae are projected upon the faces in their standard orientation, not to the inside or outside of the hexahedron. To make things more complicated, in 3d we allow faces in two orientations (which can be identified using <tt>cell->face_orientation(face)</tt>), so we have to project quadrature formula onto faces and subfaces in two orientations. (Refer to the documentation of the Triangulation class for a description of the orientation of the different faces, as well as to  [2.x.0]  "the glossary entry on face orientation" for more information on this.) The DataSetDescriptor member class is used to identify where each dataset starts.

* 
* [0.x.1]*
   Define an alias for a quadrature that acts on an object of one dimension   less. For cells, this would then be a face quadrature.  
* [0.x.2]*
   Compute the quadrature points on the cell if the given quadrature formula   is used on face <tt>face_no</tt>. For further details, see the general   doc for this class.    
*  [2.x.1]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.3]*
   Compute the quadrature points on the cell if the given quadrature formula   is used on face <tt>face_no</tt>. For further details, see the general   doc for this class.  
* [0.x.4]*
   Compute the cell quadrature formula corresponding to using   <tt>quadrature</tt> on face <tt>face_no</tt>. For further details, see   the general doc for this class.    
*  [2.x.2]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.5]*
   Compute the cell quadrature formula corresponding to using   <tt>quadrature</tt> on face <tt>face_no</tt>. For further details, see   the general doc for this class.  
* [0.x.6]*
   Compute the quadrature points on the cell if the given quadrature formula   is used on face <tt>face_no</tt>, subface number <tt>subface_no</tt>   corresponding to  [2.x.3]  <tt>ref_case</tt>. The last argument is   only used in 3D.    
*  [2.x.4]  Only the points are transformed. The quadrature weights are the   same as those of the original rule.    
*  [2.x.5]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.7]*
   Compute the quadrature points on the cell if the given quadrature formula   is used on face <tt>face_no</tt>, subface number <tt>subface_no</tt>   corresponding to  [2.x.6]  <tt>ref_case</tt>. The last argument is   only used in 3D.    
*  [2.x.7]  Only the points are transformed. The quadrature weights are the   same as those of the original rule.  
* [0.x.8]*
   Compute the cell quadrature formula corresponding to using   <tt>quadrature</tt> on subface <tt>subface_no</tt> of face   <tt>face_no</tt> with RefinementCase<dim-1> <tt>ref_case</tt>. The last   argument is only used in 3D.    
*  [2.x.8]  Only the points are transformed. The quadrature weights are the   same as those of the original rule.    
*  [2.x.9]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.9]*
   Compute the cell quadrature formula corresponding to using   <tt>quadrature</tt> on subface <tt>subface_no</tt> of face   <tt>face_no</tt> with RefinementCase<dim-1> <tt>ref_case</tt>. The last   argument is only used in 3D.    
*  [2.x.10]  Only the points are transformed. The quadrature weights are the   same as those of the original rule.    
*  [2.x.11]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.10]*
   Take a face quadrature formula and generate a cell quadrature formula   from it where the quadrature points of the given argument are projected   on all faces.     The weights of the new rule are replications of the original weights.   Thus, the sum of the weights is not one, but the number of faces, which   is the surface of the reference cell.     This in particular allows us to extract a subset of points corresponding   to a single face and use it as a quadrature on this face, as is done in   FEFaceValues.    
*  [2.x.12]  In 3D, this function produces eight sets of quadrature points for   each face, in order to cope possibly different orientations of the mesh.    
*  [2.x.13]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.11]*
   Take a collection of face quadrature formulas and generate a cell   quadrature formula from it where the quadrature points of the given   argument are projected on all faces.     The weights of the new rule are replications of the original weights.   Thus, the sum of the weights is not one, but the number of faces, which   is the surface of the reference cell.     This in particular allows us to extract a subset of points corresponding   to a single face and use it as a quadrature on this face, as is done in   FEFaceValues.    
*  [2.x.14]  In 3D, this function produces eight sets of quadrature points for   each face, in order to cope possibly different orientations of the mesh.  
* [0.x.12]*
   Like the above function, applying the same face quadrature   formula on all faces.  
* [0.x.13]*
   Take a face quadrature formula and generate a cell quadrature formula   from it where the quadrature points of the given argument are projected   on all subfaces.     Like in project_to_all_faces(), the weights of the new rule sum up to the   number of faces (not subfaces), which is the surface of the reference   cell.     This in particular allows us to extract a subset of points corresponding   to a single subface and use it as a quadrature on this face, as is done   in FESubfaceValues.    
*  [2.x.15]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.14]*
   Take a face quadrature formula and generate a cell quadrature formula   from it where the quadrature points of the given argument are projected   on all subfaces.     Like in project_to_all_faces(), the weights of the new rule sum up to the   number of faces (not subfaces), which is the surface of the reference   cell.     This in particular allows us to extract a subset of points corresponding   to a single subface and use it as a quadrature on this face, as is done   in FESubfaceValues.  
* [0.x.15]*
   Project a given quadrature formula to a child of a cell. You may want to   use this function in case you want to extend an integral only over the   area which a potential child would occupy. The child numbering is the   same as the children would be numbered upon refinement of the cell.     As integration using this quadrature formula now only extends over a   fraction of the cell, the weights of the resulting object are divided by    [2.x.16]     
*  [2.x.17]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.16]*
   Project a given quadrature formula to a child of a cell. You may want to   use this function in case you want to extend an integral only over the   area which a potential child would occupy. The child numbering is the   same as the children would be numbered upon refinement of the cell.     As integration using this quadrature formula now only extends over a   fraction of the cell, the weights of the resulting object are divided by    [2.x.18]   
* [0.x.17]*
   Project a quadrature rule to all children of a cell. Similarly to   project_to_all_subfaces(), this function replicates the formula generated   by project_to_child() for all children, such that the weights sum up to   one, the volume of the total cell again.     The child numbering is the same as the children would be numbered upon   refinement of the cell.    
*  [2.x.19]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.18]*
   Project a quadrature rule to all children of a cell. Similarly to   project_to_all_subfaces(), this function replicates the formula generated   by project_to_child() for all children, such that the weights sum up to   one, the volume of the total cell again.     The child numbering is the same as the children would be numbered upon   refinement of the cell.  
* [0.x.19]*
   Project the one dimensional rule <tt>quadrature</tt> to the straight line   connecting the points <tt>p1</tt> and <tt>p2</tt>.    
*  [2.x.20]  This function is deprecated since it makes an implicit assumption   that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other   version of this function that takes the reference cell type instead.  
* [0.x.20]*
   Project the one dimensional rule <tt>quadrature</tt> to the straight line   connecting the points <tt>p1</tt> and <tt>p2</tt>.  
* [0.x.21]*
   Since the project_to_all_faces() and project_to_all_subfaces() functions   chain together the quadrature points and weights of all projections of a   face quadrature formula to the faces or subfaces of a cell, we need a way   to identify where the starting index of the points and weights for a   particular face or subface is. This class provides this: there are static   member functions that generate objects of this type, given face or   subface indices, and you can then use the generated object in place of an   integer that denotes the offset of a given dataset.  
* [0.x.22]*
     Default constructor. This doesn't do much except generating an invalid     index, since you didn't give a valid descriptor of the cell, face, or     subface you wanted.    
* [0.x.23]*
     Static function to generate the offset of a cell. Since we only have     one cell per quadrature object, this offset is of course zero, but we     carry this function around for consistency with the other static     functions.    
* [0.x.24]*
     Static function to generate an offset object for a given face of a cell     with the given face orientation, flip and rotation. This function of     course is only allowed if <tt>dim>=2</tt>, and the face orientation,     flip and rotation are ignored if the space dimension equals 2.         The last argument denotes the number of quadrature points the lower-     dimensional face quadrature formula (the one that has been projected     onto the faces) has.        
*  [2.x.21]  This function is deprecated since it makes an implicit assumption     that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other     version of this function that takes the reference cell type instead.    
* [0.x.25]*
     Static function to generate an offset object for a given face of a cell     with the given face orientation, flip and rotation. This function of     course is only allowed if <tt>dim>=2</tt>, and the face orientation,     flip and rotation are ignored if the space dimension equals 2.         The last argument denotes the number of quadrature points the lower-     dimensional face quadrature formula (the one that has been projected     onto the faces) has.    
* [0.x.26]*
     Like the above function but taking a quadrature collection, enabling     that each face might have different number of quadrature points.    
* [0.x.27]*
     Static function to generate an offset object for a given subface of a     cell with the given face orientation, flip and rotation. This function     of course is only allowed if <tt>dim>=2</tt>, and the face orientation,     flip and rotation are ignored if the space dimension equals 2.         The last but one argument denotes the number of quadrature points the     lower-dimensional face quadrature formula (the one that has been     projected onto the faces) has.         Through the last argument anisotropic refinement can be respected.        
*  [2.x.22]  This function is deprecated since it makes an implicit assumption     that the cell is a line (1D), a quad (2D), or a hex (3D). Use the other     version of this function that takes the reference cell type instead.    
* [0.x.28]*
     Static function to generate an offset object for a given subface of a     cell with the given face orientation, flip and rotation. This function     of course is only allowed if <tt>dim>=2</tt>, and the face orientation,     flip and rotation are ignored if the space dimension equals 2.         The last but one argument denotes the number of quadrature points the     lower-dimensional face quadrature formula (the one that has been     projected onto the faces) has.         Through the last argument anisotropic refinement can be respected.    
* [0.x.29]*
     Conversion operator to an integer denoting the offset of the first     element of this dataset in the set of quadrature formulas all projected     onto faces and subfaces. This conversion operator allows us to use     offset descriptor objects in place of integer offsets.    
* [0.x.30]*
     Store the integer offset for a given cell, face, or subface.    
* [0.x.31]*
     This is the real constructor, but it is private and thus only available     to the static member functions above.    
* [0.x.32]