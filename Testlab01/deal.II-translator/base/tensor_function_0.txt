[0.x.0]*
 This class is a model for a tensor valued function. The interface of the class is mostly the same as that for the Function class, with the exception that it does not support vector-valued functions with several components, but that the return type is always tensor-valued. The returned values of the evaluation of objects of this type are always whole tensors, while for the <tt>Function</tt> class, one can ask for a specific component only, or use the <tt>vector_value</tt> function, which however does not return the value, but rather writes it into the address provided by its second argument. The reason for the different behavior of the classes is that in the case of tensor valued functions, the size of the argument is known to the compiler a priori, such that the correct amount of memory can be allocated on the stack for the return value; on the other hand, for the vector valued functions, the size is not known to the compiler, so memory has to be allocated on the heap, resulting in relatively expensive copy operations. One can therefore consider this class a specialization of the <tt>Function</tt> class for which the size is known. An additional benefit is that tensors of arbitrary rank can be returned, not only vectors, as for them the size can be determined similarly simply.
* 

* 
*  [2.x.0] 

* 
* [0.x.1]*
   Alias for the return types of the <tt>value</tt> function.  
* [0.x.2]*
   Alias for the return types of the <tt>gradient</tt> functions.  
* [0.x.3]*
   The scalar-valued real type used for representing time.  
* [0.x.4]*
   Constructor. May take an initial value for the time variable, which   defaults to zero.  
* [0.x.5]*
   Virtual destructor; absolutely necessary in this case, as classes are   usually not used by their true type, but rather through pointers to this   base class.  
* [0.x.6]*
   Return the value of the function at the given point.  
* [0.x.7]*
   Set <tt>values</tt> to the point values of the function at the   <tt>points</tt>.  It is assumed that <tt>values</tt> already has the   right size, i.e.  the same size as the <tt>points</tt> array.  
* [0.x.8]*
   Return the gradient of the function at the given point.  
* [0.x.9]*
   Set <tt>gradients</tt> to the gradients of the function at the   <tt>points</tt>.  It is assumed that <tt>values</tt> already has the   right size, i.e.  the same size as the <tt>points</tt> array.  
* [0.x.10]*
 Provide a tensor valued function which always returns a constant tensor value. Obviously, all derivates of this function are zero.
* 

* 
*  [2.x.1] 

* 
* [0.x.11]*
   The scalar-valued real type used for representing time.  
* [0.x.12]*
   Constructor; takes the constant tensor value as an argument. The   reference value is copied internally.     An initial value for the time variable may be specified, otherwise it   defaults to zero.  
* [0.x.13]*
 Provide a tensor valued function which always returns zero. Obviously, all derivates of this function are zero.
* 

* 
*  [2.x.2] 

* 
* [0.x.14]*
   The scalar-valued real type used for representing time.  
* [0.x.15]*
   Constructor.     An initial value for the time variable may be specified, otherwise it   defaults to zero.  
* [0.x.16]