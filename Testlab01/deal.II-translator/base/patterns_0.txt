[0.x.0]*
 Namespace for a few classes that act as patterns for the ParameterHandler class. These classes implement an interface that checks whether a parameter in an input file matches a certain pattern, such as "being boolean", "an integer value", etc.
* 

* 
*  [2.x.0] 

* 
* [0.x.1]*
   Base class to declare common interface. The purpose of this class is   mostly to define the interface of patterns, and to force derived classes   to have a <tt>clone</tt> function. It is thus, in the languages of the   "Design Patterns" book (Gamma et al.), a "prototype".  
* [0.x.2]*
     Make destructor of this and all derived classes virtual.    
* [0.x.3]*
     Return <tt>true</tt> if the given string matches the pattern.    
* [0.x.4]*
     List of possible description output formats.         Capitalization chosen for similarity to  [2.x.1]     
* [0.x.5]*
       Simple text suitable for machine parsing in the static public member       functions for all of the built in inheriting classes.             Preferably human readable, but machine parsing is more critical.      
* [0.x.6]*
       Easily human readable plain text format suitable for plain text       documentation.      
* [0.x.7]*
       Easily human readable LaTeX format suitable for printing in manuals.      
* [0.x.8]*
     Return a string describing the pattern.    
* [0.x.9]*
     Return a pointer to an exact copy of the object. This is necessary     since we want to store objects of this type in containers, were we need     to copy objects without knowledge of their actual data type (we only     have pointers to the base class).         Ownership of the objects returned by this function is passed to the     caller of this function.    
* [0.x.10]*
     Determine an estimate for the memory consumption (in bytes) of this     object. To avoid unnecessary overhead, we do not force derived classes     to provide this function as a virtual overloaded one, but rather try to     cast the present object to one of the known derived classes and if that     fails then take the size of this base class instead and add 32 byte     (this value is arbitrary, it should account for virtual function     tables, and some possible data elements). Since there are usually not     many thousands of objects of this type around, and since the     memory_consumption mechanism is used to find out where memory in the     range of many megabytes is, this seems like a reasonable approximation.         On the other hand, if you know that your class deviates from this     assumption significantly, you can still overload this function.    
* [0.x.11]*
   Return pointer to the correct derived class based on description.  
* [0.x.12]*
     Escape the string  [2.x.2]  for the specified  [2.x.3]  so that characters     will appear as intended. For example, characters like _ can not be     written as is in LateX and have to be escaped as \_.    
* [0.x.13]*
   Test for the string being an integer. If bounds are given to the   constructor, then the integer given also needs to be within the interval   specified by these bounds. Note that unlike common convention in the C++   standard library, both bounds of this interval are inclusive; the reason   is that in practice in most cases, one needs closed intervals, but these   can only be realized with inclusive bounds for non-integer values. We   thus stay consistent by always using closed intervals.     If the upper bound given to the constructor is smaller than the   lower bound, then every integer is allowed.     Giving bounds may be useful if for example a value can only be positive   and less than a reasonable upper bound (for example the number of   refinement steps to be performed), or in many other cases.  
* [0.x.14]*
     Minimal integer value. If the numeric_limits class is available use     this information to obtain the extremal values, otherwise set it so     that this class understands that all values are allowed.    
* [0.x.15]*
     Maximal integer value. If the numeric_limits class is available use     this information to obtain the extremal values, otherwise set it so     that this class understands that all values are allowed.    
* [0.x.16]*
     Constructor. Bounds can be specified within which a valid     parameter has to be. If the upper bound is smaller than the     lower bound, then the entire set of integers is implied. The     default values are chosen such that no bounds are enforced on     parameters.         Note that the range implied by an object of the current type     is inclusive of both bounds values, i.e., the  [2.x.4]  is     an allowed value, rather than indicating a half-open value as     is often done in other contexts.    
* [0.x.17]*
     Return <tt>true</tt> if the string is an integer and its value is     within the specified range.    
* [0.x.18]*
     Return a description of the pattern that valid strings are expected to     match. If bounds were specified to the constructor, then include them     into this description.    
* [0.x.19]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.20]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.21]*
     Value of the lower bound. A number that satisfies the      [2.x.5]      operation of this class must be equal to this value or larger, if the     bounds of the interval for a valid range.    
* [0.x.22]*
     Value of the upper bound. A number that satisfies the      [2.x.6]      operation of this class must be equal to this value or less, if the     bounds of the interval for a valid range.    
* [0.x.23]*
     Initial part of description    
* [0.x.24]*
   Test for the string being a <tt>double</tt>. If bounds are given to the   constructor, then the integer given also needs to be within the interval   specified by these bounds. Note that unlike common convention in the C++   standard library, both bounds of this interval are inclusive; the reason   is that in practice in most cases, one needs closed intervals, but these   can only be realized with inclusive bounds for non-integer values. We   thus stay consistent by always using closed intervals.     If the upper bound given to the constructor is smaller than the   lower bound, then every double precision number is allowed.     Giving bounds may be useful if for example a value can only be positive   and less than a reasonable upper bound (for example damping parameters   are frequently only reasonable if between zero and one), or in many other   cases.  
* [0.x.25]*
     Minimal double value used as default value, taken from      [2.x.7]     
* [0.x.26]*
     Maximal double value used as default value, taken from      [2.x.8]     
* [0.x.27]*
     Constructor. Bounds can be specified within which a valid     parameter has to be. If the upper bound is smaller than the     lower bound, then the entire set of double precision numbers is     implied. The default values are chosen such that no bounds are     enforced on parameters.    
* [0.x.28]*
     Return <tt>true</tt> if the string is a number and its value is within     the specified range.    
* [0.x.29]*
     Return a description of the pattern that valid strings are expected to     match. If bounds were specified to the constructor, then include them     into this description.    
* [0.x.30]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.31]*
     Creates a new object on the heap using  [2.x.9]  if the given      [2.x.10]  is a valid format (for example created by calling     description() on an existing object), or  [2.x.11]  otherwise. Ownership     of the returned object is transferred to the caller of this function,     which should be freed using  [2.x.12]     
* [0.x.32]*
     Value of the lower bound. A number that satisfies the      [2.x.13]      operation of this class must be equal to this value or larger, if the     bounds of the interval form a valid range.    
* [0.x.33]*
     Value of the upper bound. A number that satisfies the      [2.x.14]      operation of this class must be equal to this value or less, if the     bounds of the interval form a valid range.    
* [0.x.34]*
     Initial part of description    
* [0.x.35]*
   Test for the string being one of a sequence of values given like a   regular expression. For example, if the string given to the constructor   is <tt>"red|blue|black"</tt>, then the    [2.x.15]    function returns <tt>true</tt> exactly if the string is either "red" or   "blue" or "black". Spaces around the pipe signs do not matter and are   eliminated.  
* [0.x.36]*
     Constructor. Take the given parameter as the specification of valid     strings.    
* [0.x.37]*
     Return <tt>true</tt> if the string is an element of the description     list passed to the constructor.    
* [0.x.38]*
     Return a description of the pattern that valid strings are expected to     match. Here, this is the list of valid strings passed to the     constructor.    
* [0.x.39]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.40]*
     Determine an estimate for the memory consumption (in bytes) of this     object.    
* [0.x.41]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.42]*
     List of valid strings as passed to the constructor. We don't make this     string constant, as we process it somewhat in the constructor.    
* [0.x.43]*
     Initial part of description    
* [0.x.44]*
   This pattern matches a list of values separated by commas (or another   string), each of which have to match a pattern given to the constructor.   With two additional parameters, the number of elements this list has to   have can be specified. If none is specified, the list may have zero or   more entries.  
* [0.x.45]*
     Maximal integer value. If the numeric_limits class is available use     this information to obtain the extremal values, otherwise set it so     that this class understands that all values are allowed.    
* [0.x.46]*
     Constructor. Take the given parameter as the specification of valid     elements of the list.         The three other arguments can be used to denote minimal and maximal     allowable lengths of the list, and the string that is used as a     separator between elements of the list.    
* [0.x.47]*
     Return the internally stored separator.    
* [0.x.48]*
     Return the internally stored base pattern.    
* [0.x.49]*
     Copy constructor.    
* [0.x.50]*
     Return <tt>true</tt> if the string is a comma-separated list of strings     each of which match the pattern given to the constructor.    
* [0.x.51]*
     Return a description of the pattern that valid strings are expected to     match.    
* [0.x.52]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.53]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.54]*
     Determine an estimate for the memory consumption (in bytes) of this     object.    
* [0.x.55]*
      [2.x.16]  Exceptions      [2.x.17]     
* [0.x.56]*
     Exception.    
* [0.x.57]*
     Copy of the pattern that each element of the list has to satisfy.    
* [0.x.58]*
     Minimum number of elements the list must have.    
* [0.x.59]*
     Maximum number of elements the list must have.    
* [0.x.60]*
     Separator between elements of the list.    
* [0.x.61]*
     Initial part of description    
* [0.x.62]*
   This pattern matches a list of comma-separated values each of which   denotes a pair of key and value. Both key and value have to match a   pattern given to the constructor. For each entry of the map, parameters   have to be entered in the form  [2.x.18] . In other words, a   map is described in the form <code>key1: value1, key2: value2, key3:   value3, ...</code>. Two constructor arguments allow to choose a delimiter   between pairs other than the comma, and a delimiter between key and value   other than colon.     With two additional parameters, the number of elements this list has to   have can be specified. If none is specified, the map may have zero or   more entries.  
* [0.x.63]*
     Maximal integer value. If the numeric_limits class is available use     this information to obtain the extremal values, otherwise set it so     that this class understands that all values are allowed.    
* [0.x.64]*
     Constructor. Take the given parameter as the specification of valid     elements of the list.         The four other arguments can be used to denote minimal and maximal     allowable lengths of the list as well as the separators used to delimit     pairs of the map and the symbol used to separate keys and values.    
* [0.x.65]*
     Copy constructor.    
* [0.x.66]*
     Return <tt>true</tt> if the string is a comma-separated list of strings     each of which match the pattern given to the constructor.    
* [0.x.67]*
     Return a description of the pattern that valid strings are expected to     match.    
* [0.x.68]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.69]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.70]*
     Determine an estimate for the memory consumption (in bytes) of this     object.    
* [0.x.71]*
     Return a reference to the key pattern.    
* [0.x.72]*
     Return a reference to the value pattern.    
* [0.x.73]*
     Return the separator of the map entries.    
* [0.x.74]*
     Return the key-value separator.    
* [0.x.75]*
      [2.x.19]  Exceptions      [2.x.20]     
* [0.x.76]*
     Exception.    
* [0.x.77]*
     Copy of the patterns that each key and each value of the map has to     satisfy.    
* [0.x.78]*
     Minimum number of elements the list must have.    
* [0.x.79]*
     Maximum number of elements the list must have.    
* [0.x.80]*
     Separator between elements of the list.    
* [0.x.81]*
     Separator between keys and values.    
* [0.x.82]*
     Initial part of description    
* [0.x.83]*
   This pattern matches colon-separated values of arbitrary types. Each type   has to match a pattern given to the constructor.     An example usage is the following:    
* [1.x.0]
*      or, if you want to exploit  [2.x.21]     
* [1.x.1]
*      The constructor expects a vector of Patterns, and optionally a string   specifying the separator to use when parsing the Tuple from a string.     The default separator is a colon, owing to the fact that a pair is in fact   a tuple with two elements.  
* [0.x.84]*
     Constructor. Use a vector of unique pointers to Patterns to construct     the tuple.          [2.x.22]  patterns The pattern each object of the Tuple should match      [2.x.23]  separator An optional string used to delimit each element     Constructor.    
* [0.x.85]*
     Constructor. Same as above, specialized for const char. This is     necessary to avoid compilers errors due to the variadic constructors     provided below.    
* [0.x.86]*
     Constructor. Creates a Tuple from more than one class derived from     PatternBase.          [2.x.24]  separator What separator to use.      [2.x.25]  patterns The list of patterns to use    
* [0.x.87]*
     Constructor. This is needed to allow users to specify     directly the separator without using  [2.x.26]          Since we support a pure variadic templates version, without this     specialization, the compiler will fail with cryptic errors.    
* [0.x.88]*
     Constructor. Same as above, using the default separator.          [2.x.27]  patterns The list of patterns to use    
* [0.x.89]*
     Copy constructor.    
* [0.x.90]*
     Return <tt>true</tt> if the string is a list of strings     each of which matches the patterns given to the constructor.    
* [0.x.91]*
     Return a description of the pattern that valid strings are expected to     match.    
* [0.x.92]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.93]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.94]*
     Determine an estimate for the memory consumption (in bytes) of this     object.    
* [0.x.95]*
     Return a reference to the i-th pattern in the tuple.    
* [0.x.96]*
     Return the separator of the tuple entries.    
* [0.x.97]*
     Copy of the patterns stored in the Tuple.    
* [0.x.98]*
     Separator between elements of the list.    
* [0.x.99]*
     Initial part of description.    
* [0.x.100]*
   This class is much like the Selection class, but it allows the input to   be a comma-separated list of values which each have to be given in the   constructor argument. The input is allowed to be empty or contain values   more than once and have an arbitrary number of spaces around commas. Of   course commas are not allowed inside the values given to the constructor.     For example, if the string to the constructor was <tt>"ucd|gmv|eps"</tt>,   then the following would be legal inputs: "eps", "gmv, eps", or "".  
* [0.x.101]*
     Constructor.  [2.x.28]  is a list of valid options separated by "|".    
* [0.x.102]*
     Return <tt>true</tt> if the string is an element of the description     list passed to the constructor.    
* [0.x.103]*
     Return a description of the pattern that valid strings are expected to     match. Here, this is the list of valid strings passed to the     constructor.    
* [0.x.104]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.105]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.106]*
     Determine an estimate for the memory consumption (in bytes) of this     object.    
* [0.x.107]*
      [2.x.29]  Exceptions      [2.x.30]     
* [0.x.108]*
     Exception.    
* [0.x.109]*
     List of valid strings as passed to the constructor. We don't make this     string constant, as we process it somewhat in the constructor.    
* [0.x.110]*
     Initial part of description    
* [0.x.111]*
   Test for the string being either "true" or "false". This is mapped to the   Selection class.  
* [0.x.112]*
     Constructor.    
* [0.x.113]*
     Return a description of the pattern that valid strings are expected to     match.    
* [0.x.114]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.115]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.116]*
     Initial part of description    
* [0.x.117]*
   Always returns <tt>true</tt> when testing a string.  
* [0.x.118]*
     Constructor. (Allow for at least one non-virtual function in this     class, as otherwise sometimes no virtual table is emitted.)    
* [0.x.119]*
     Return <tt>true</tt> if the string matches its constraints, i.e.     always.    
* [0.x.120]*
     Return a description of the pattern that valid strings are expected to     match. Here, this is the string <tt>"[Anything]"</tt>.    
* [0.x.121]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.122]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.123]*
     Initial part of description    
* [0.x.124]*
   A pattern that can be used to indicate when a parameter is intended to be   the name of a file. By itself, this class does not check whether the   string that is given in a parameter file actually corresponds to an   existing file (it could, for example, be the name of a file to which you   want to write output). Functionally, the class is therefore equivalent to   the Anything class. However, it allows to specify the [1.x.2] of a   parameter. The flag given to the constructor also allows to specify   whether the file is supposed to be an input or output file.     The reason for the existence of this class is to support graphical user   interfaces for editing parameter files. These may open a file selection   dialog if the filename is supposed to represent an input file.  
* [0.x.125]*
     Files can be used for input or output. This can be specified in the     constructor by choosing the flag <tt>type</tt>.    
* [0.x.126]*
       Open for input.      
* [0.x.127]*
       Open for output.      
* [0.x.128]*
     Constructor.  The type of the file can be specified by choosing the     flag.    
* [0.x.129]*
     Return <tt>true</tt> if the string matches its constraints, i.e.     always.    
* [0.x.130]*
     Return a description of the pattern that valid strings are expected to     match. Here, this is the string <tt>"[Filename]"</tt>.    
* [0.x.131]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.132]*
     file type flag    
* [0.x.133]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.134]*
     Initial part of description    
* [0.x.135]*
   A pattern that can be used to indicate when a parameter is intended to be   the name of a directory. By itself, this class does not check whether the   string that is given in a parameter file actually corresponds to an   existing directory. Functionally, the class is therefore equivalent to   the Anything class. However, it allows to specify the [1.x.3] of a   parameter.     The reason for the existence of this class is to support graphical user   interfaces for editing parameter files. These may open a file selection   dialog to select or create a directory.  
* [0.x.136]*
     Constructor.    
* [0.x.137]*
     Return <tt>true</tt> if the string matches its constraints, i.e.     always.    
* [0.x.138]*
     Return a description of the pattern that valid strings are expected to     match. Here, this is the string <tt>"[Filename]"</tt>.    
* [0.x.139]*
     Return a copy of the present object, which is newly allocated on the     heap. Ownership of that object is transferred to the caller of this     function.    
* [0.x.140]*
     Create a new object if the start of description matches     description_init.  Ownership of that object is transferred to the     caller of this function.    
* [0.x.141]*
     Initial part of description    
* [0.x.142]*
   Namespace for a few classes and functions that act on values and patterns,   and allow to convert from non elementary types to strings and vice versa.     A typical usage of these tools is in the following example:    
* [1.x.4]
*      Convert<T> is used by the function  [2.x.31]  in this   namespace. Internally it uses the  [2.x.32]  class to decide how   many different separators are required to convert the given type to a   string.     For example, to write vectors of vectors, the default is to use "," for the   first (inner) separator, and ";" for the second (outer) separator, i.e.    
* [1.x.5]
*      Separators for  [2.x.33]  and  [2.x.34]  compatible types are   selected according to the   rank of the list and map objects, using the arrays    [2.x.35]  and    [2.x.36]      They are currently set to:    
* [1.x.6]
*      When one needs a mixture of  [2.x.37]  and  [2.x.38]  types, their   RankInfo is computed by taking the maximum of the vector_rank of the Key   and of the Value type, so that, for example, it is possible to have the   following  
* [1.x.7]
*      Some non elementary types are supported, like Point(), or    [2.x.39]  If you wish to support more types, you have to   specialize the Convert struct as well as the RankInfo struct.    
*  [2.x.40]   
* [0.x.143]*
     Converter class. This class is used to generate strings and Patterns     associated to the given type, and to convert from a string to the given     type and vice versa.         The second template parameter is used internally to allow for advanced     SFINAE (substitution failure is not an error) tricks used to specialise     this class for arbitrary STL containers and maps.    
* [0.x.144]*
       Return a  [2.x.41]  to a Pattern that can be used to interpret a       string as the type of the template argument, and the other way around.             While the current function (in the general Convert template) is       deleted, it is implemented and available in the specializations of the       Convert       class template for particular kinds of template arguments  [2.x.42]       
* [0.x.145]*
       Return a string containing a textual version of the variable s. Use the       pattern passed to perform the conversion, or create and use a default       one.             While the current function (in the general Convert template) is       deleted, it is implemented and available in the specializations of the       Convert       class template for particular kinds of template arguments  [2.x.43]       
* [0.x.146]*
       Convert a string to a value, using the given pattern. Use the pattern       passed to perform the conversion, or create and use a default one.             While the current function (in the general Convert template) is       deleted, it is implemented and available in the specializations of the       Convert       class template for particular kinds of template arguments  [2.x.44]       
* [0.x.147]*
     A utility function that simplifies the conversion to strings of     arbitrarily complex types.         This function calls the method  [2.x.45]  with the default     pattern. An example usage is the following:        
* [1.x.8]
*          See the documentation of the class  [2.x.46]  and of the     helper class  [2.x.47]  for details on the way separators     are selected when outputting STL container types.    
* [0.x.148]*
     A utility function that simplifies the conversion from strings to     arbitrary types.         This function calls the method  [2.x.48]  with the default     pattern. An example usage is the following:        
* [1.x.9]
*          See the documentation of the class  [2.x.49]  and of the     helper class  [2.x.50]  for details on the separators you     should use in your string patterns when converting from a string to a     container type.         Notice that the current content of variable  [2.x.51]  is ignored. Its type is     used to infer how to interpret the string. If the string is successfully     parsed, then  [2.x.52]  will be set to the parsed content of  [2.x.53]     
* [0.x.149]*
      [2.x.54]  Exceptions      [2.x.55]     
* [0.x.150]*
     Exception.    
* [0.x.151]*
       Store information about the rank types of the given class.             A class has Rank equal to the number of different separators       that are required to uniquely identify its element(s) in a string.             This class is used to detect whether the class T is compatible       with a  [2.x.56]  pattern or with a  [2.x.57]  pattern.             Objects like Point() or  [2.x.58]  are vector-likes, and       have vector_rank 1. Elementary types, like `int`, `unsigned int`,       `double`, etc. have vector_rank 0.  [2.x.59]   [2.x.60]  and in       general containers have rank equal to 1 + vector_rank of the contained       type. Similarly for map types.             A class with  [2.x.61]  = 0 is either elementary or a       map. A class with  [2.x.62]  = 0 is either a List compatible       class, or an elementary type.             Elementary types are not compatible with  [2.x.63]  but non       elementary types, like Point(), or  [2.x.64]  are compatible       with the List type. Adding more compatible types is a matter of adding       a specialization of this struct for the given type.      
* [0.x.152]*
       Convert a string to a value, using the given pattern, or a default one.      
* [0.x.153]