[0.x.0]     Workaround: The standard unfortunately has an unfortunate design     "flaw" in the  [2.x.0]  type trait     when it comes to STL containers and containing non-copyable objects     T. The type trait is true even though any attempted invocation leads     to a compilation error. Work around this issue by unpacking some     commonly used containers:    
* [0.x.1]*
  
*  [2.x.1]    that accesses the object.     This class offers ways so that every thread that accesses it has its own   copy of an object of type T. In essence, accessing this object can never   result in race conditions in multithreaded programs since no other thread   than the current one can ever access it.     [1.x.0]     Objects of this class can either be default constructed or by providing   an "exemplar", i.e. an object of type T so that every time we need to   create a T on a thread that doesn't already have such an object, it is   copied from the exemplar.     Upon destruction of objects of this class, all T objects that correspond   to threads that have accessed this object are destroyed. Note that this   may be before the time when a thread is terminated.     [1.x.1]     The T object stored by this object can be accessed using the get()   function. It provides a reference to a unique object when accessed from   different threads. Objects of type T are created lazily, i.e. they are   only created whenever a thread actually calls get().  
* [0.x.2]*
     Default constructor. Initialize each thread local object using its     default constructor.    
* [0.x.3]*
     Copy constructor.    
* [0.x.4]*
     Move constructor. The constructor moves all internal data structures     from the argument.    
* [0.x.5]*
     A kind of copy constructor. Initializes an internal exemplar by the     given object. The exemplar is in turn used to initialize each thread     local object instead of invoking the default constructor.    
* [0.x.6]*
     A kind of move constructor. Moves the given object into an internal     exemplar. The exemplar is in turn used to initialize each thread     local object instead of invoking the default constructor.    
* [0.x.7]*
     Copy assignment operator.    
* [0.x.8]*
     Move assignment operator.    
* [0.x.9]*
     Return a reference to the data stored by this object for the current     thread this function is called on.         Note that there is no member function get() that is const and returns a     const reference as one would expect. The reason is that if such a     member function were called on a thread for which no thread-local     object has been created yet, then one has to create such an object     first which would certainly be a non-constant operation. If you need to     call the get() function for a member variable of a class from a const     member function, then you need to declare the member variable      [2.x.2]  to allow such access.    
* [0.x.10]*
     Same as above, except that  [2.x.3]  is set to true if an element was     already present for the current thread; false otherwise.    
* [0.x.11]*
     Conversion operator that simply converts the thread-local object to the     data type that it stores. This function is equivalent to calling the     get() member function; it's purpose is to make the TLS object look more     like the object it is storing.    
* [0.x.12]*
     Copy the given argument into the storage space used to represent the     current thread. Calling this function as  [2.x.4]      is equivalent to calling  [2.x.5] . The     intent of this operator is to make the ThreadLocalStorage object look     more like the object it represents on the current thread.          [2.x.6]  t The object to be copied into the storage space used for the     current thread.          [2.x.7]  The current object, after the changes have been made    
* [0.x.13]*
     Move the given argument into the storage space used to represent the     current thread. Calling this function as <code>tls_data =     object</code> is equivalent to calling <code>tls_data.get() =     object</code>. The intent of this operator is to make the     ThreadLocalStorage object look more like the object it represents on     the current thread. Move assignment operator.          [2.x.8]  t The object to be copied into the storage space used for the     current thread.          [2.x.9]  The current object, after the changes have been made    
* [0.x.14]*
     Remove the thread-local objects stored for all threads that have     created one with this object (i.e., that have called get() at least     once on this thread. This includes the current thread. If you call     get() subsequently on this or any other thread, new objects will again     be created.         If deal.II has been configured to not use multithreading, then this     function does not do anything at all. Note that this of course has     different semantics as in the multithreading context the objects are     deleted and created again (possible by copying from a sample object, if     the appropriate constructor of this class was called), whereas in the     multithreaded context the object is simply not touched at all. At the     same time, the purpose of this function is to release memory other     threads may have allocated for their own thread local objects after     which every use of this object will require some kind of     initialization. This is necessary both in the multithreaded or non-     multithreaded case.    
* [0.x.15]*
     The data element we store.    
* [0.x.16]*
     A mutex to guard insertion into the data object.         We use a  [2.x.10]  (or  [2.x.11]  if available)     here to be able to use  [2.x.12]  and  [2.x.13]  for a     readers-writer lock     (https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock).    
* [0.x.17]*
     An exemplar for creating a new (thread specific) copy.    
* [0.x.18]*
  [2.x.14] 

* 
* [0.x.19]     We have to make sure not to call "data.emplace(id,exemplar)" if     the corresponding element is not copy constructible. We use some     SFINAE magic to work around the fact that C++14 does not have     "if constexpr".    
* [0.x.20]