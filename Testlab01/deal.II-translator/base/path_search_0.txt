[0.x.0]*
 Support for searching files in a list of paths and with a list of suffixes.
*  A list of search paths is maintained for each file class supported. A file class is defined by a unique string. The classes provided are  [2.x.0]  <dt> MESH  [2.x.1]  mesh input files in various formats (see GridIn) <dt> PARAMETER  [2.x.2]  Parameter files (<tt>.prm</tt>)  [2.x.3] 
*  Additional file classes can be added easily by using add_class().
*  Usage: First, you construct a PathSearch object for a certain file class, e.g. meshes. Then, you use the find() method to obtain a full path name and you can open the file.

* 
* [1.x.0]
* 
*  This piece of code will first traverse all paths in the list set up for file class <tt>MESH</tt>. If it manages to open a file, it returns the <tt>istream</tt> object. If not, it will try to append the first suffix of the suffix list and do the same. And so on. If no file is found in the end, an exception is thrown.
*  If you want to restrict your search to a certain mesh format, <tt>.inp</tt> for instance, then either use <tt>"grid.inp"</tt> in the code above or use the alternative find(const  [2.x.4]   [2.x.5]  char*) function

* 
* [1.x.1]
* 
*  Path lists are by default starting with the current directory (<tt>"./"</tt>), followed optionally by a standard directory of deal.II. Use show() to find out the path list for a given class. Paths and suffixes can be added using the functions add_path() and add_suffix(), respectively.
* 

* 
*  [2.x.6]  Directories in the path list should always end with a trailing <tt>"/"</tt>, while suffixes should always start with a dot. These characters are not added automatically (allowing you to do some real file name editing).
*   [2.x.7]  Add support for environment variables like in kpathsea.
* 

* 
*  [2.x.8] 

* 
* [0.x.1]*
   Position for adding a new item to a list.  
* [0.x.2]*
   Constructor. The first argument is a string identifying the class of   files to be searched for.     The debug argument determines the verbosity of this class.  
* [0.x.3]*
   Find a file in the class specified by the constructor and return its   complete path name (including a possible suffix).     File search works by actually trying to open the file. If  [2.x.9]  is   successful with the provided  [2.x.10]  then the file is found,   otherwise the search continues.      [2.x.11]  Be careful with  [2.x.12]  In particular, use <tt>"w"</tt>   with great care! If the file does not exist, it cannot be found. If it   does exist, the  [2.x.13]  function will truncate it to zero length.      [2.x.14]  filename The base name of the file to be found, without path   components and suffix.    [2.x.15]  open_mode The mode handed over to the  [2.x.16]  function.  
* [0.x.4]*
   Find a file in the class specified by the constructor and return its   complete path name. Do not use the standard suffix list, but only try to   apply the suffix given.     File search works by actually trying to open the file. If  [2.x.17]  is   successful with the provided  [2.x.18]  then the file is found,   otherwise the search continues.      [2.x.19]  Be careful with  [2.x.20]  In particular, use <tt>"w"</tt>   with great care! If the file does not exist, it cannot be found. If it   does exist, the  [2.x.21]  function will truncate it to zero length.      [2.x.22]  filename The base name of the file to be found, without path   components and suffix.    [2.x.23]  suffix The suffix to be used for opening.    [2.x.24]  open_mode The mode handed over to the  [2.x.25]  function.  
* [0.x.5]*
   Show the paths and suffixes used for this object.  
* [0.x.6]*
   Add a new class.  
* [0.x.7]*
   Add a path to the current class. See  [2.x.26]  for possible   position arguments.  
* [0.x.8]*
   Add a path to the current class. See  [2.x.27]  for possible   position arguments.  
* [0.x.9]*
   This class was not registered in the path search mechanism.  
*  [2.x.28]   
* [0.x.10]*
   The PathSearch class could not find a file with this name in its path   list.  
*  [2.x.29]   
* [0.x.11]*
   Type of values in the class maps.  
* [0.x.12]*
   Initialize the static list objects for further use.  
* [0.x.13]*
   Get path list for a certain class. Used to set up #my_path_list in   constructor.  
* [0.x.14]*
   Get suffix list for a certain class. Used to set up #my_suffix_list in   constructor.  
* [0.x.15]*
   The file class handled by this object.  
* [0.x.16]*
   All path lists for all classes, such that we can build them only once.  
* [0.x.17]*
   List of suffixes for each class.  
* [0.x.18]*
   Path list for the class this object belongs to.  
* [0.x.19]*
   Suffix list for the class this object belongs to.  
* [0.x.20]*
   Debug flag. No output if zero.  
* [0.x.21]*
   The empty string.  
* [0.x.22]