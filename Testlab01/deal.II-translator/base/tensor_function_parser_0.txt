[0.x.0]*
 This class implements a tensor function object that gets its value by parsing a string describing this function. It is a wrapper class for the muparser library (see http://muparser.beltoforion.de/). This class is essentially an extension of the FunctionParser class to read in a TensorFunction. The class reads in an expression of length dim<sup>rank</sup> (separated by a semicolon) where the components of the tensor function are filled according to the C++ convention (fastest index is the most right one).
* 

* 
*  [2.x.0]  In contrast to the FunctionParser class the TensorFunctionParser class does not support 	 automatic differentiation.
*  A minimal example for the usage of the class would be:

* 
* [1.x.0]
* 
*  See also the documentation of the FunctionParser class.
*  This class overloads the virtual method value() and value_list() of the TensorFunction base class with the byte compiled versions of the expressions given to the initialize() methods. Note that the class will not work unless you first call the initialize() method that accepts the text description of the function as an argument (among other things).
*  The syntax to describe a function follows usual programming practice, and is explained in detail at the homepage of the underlying muparser library at http://muparser.beltoforion.de/ .
* 

*  Vector-valued functions can either be declared using strings where the function components are separated by semicolons, or using a vector of strings each defining one vector component.
* 

* 

* 
*  [2.x.1] 

* 
* [0.x.1]*
   Standard constructor. Only set initial time. This object needs to be   initialized with the initialize() method before you can use it. If an   attempt to use this function is made before the initialize() method has   been called, then an exception is thrown.  
* [0.x.2]*
   Constructor for parsed functions. This object needs to be initialized   with the initialize() method before you can use it. If an attempt to   use this function is made before the initialize() method has been called,   then an exception is thrown.   Takes a semicolon separated list of expressions (one for each component   of the tensor function), an optional comma-separated list of constants.  
* [0.x.3]*
   Copy constructor. Objects of this type can not be copied, and   consequently this constructor is deleted.  
* [0.x.4]*
   Move constructor. Objects of this type can not be moved, and   consequently this constructor is deleted.  
* [0.x.5]*
   Destructor.  
* [0.x.6]*
   Copy operator. Objects of this type can not be copied, and   consequently this operator is deleted.  
* [0.x.7]*
   Move operator. Objects of this type can not be moved, and   consequently this operator is deleted.  
* [0.x.8]*
   Type for the constant map. Used by the initialize() method.  
* [0.x.9]*
   Initialize the tensor function.  This method accepts the following   parameters:      [2.x.2]  vars A string with the variables that will be used by the   expressions to be evaluated. Note that the variables can have any name   (of course different from the function names defined above!), but the   order IS important. The first variable will correspond to the first   component of the point in which the function is evaluated, the second   variable to the second component and so forth. If this function is also   time dependent, then it is necessary to specify it by setting the    [2.x.3]  parameter to true.  An exception is thrown if   the number of variables specified here is different from dim (if this   function is not time-dependent) or from dim+1 (if it is time-dependent).      [2.x.4]  expressions A vector of strings containing the expressions that   will be byte compiled by the internal parser (TensorFunctionParser). Note   that the size of this vector must match exactly the number of components of   the TensorFunctionParser, as declared in the constructor. If this is not   the case, an exception is thrown.      [2.x.5]  constants A map of constants used to pass any necessary constant   that we want to specify in our expressions (in the example above the   number pi). An expression is valid if and only if it contains only   defined variables and defined constants (other than the functions   specified above). If a constant is given whose name is not valid (eg:    [2.x.6] ) an exception is thrown.      [2.x.7]  time_dependent If this is a time dependent function, then the   last variable declared in [1.x.1] is assumed to be the time variable,   and this->get_time() is used to initialize it when evaluating the   function. Naturally the number of variables parsed by the initialize()   method in this case is dim+1. The value of this parameter defaults to   false, i.e. do not consider time.  
* [0.x.10]*
   Initialize the function. Same as above, but accepts a string rather than   a vector of strings. If this is a vector valued function, its components   are expected to be separated by a semicolon. An exception is thrown if   this method is called and the number of components successfully parsed   does not match the number of components of the base function.  
* [0.x.11]*
   A function that returns default names for variables, to be used in the   first argument of the initialize() functions: it returns "x" in 1d, "x,y"   in 2d, and "x,y,z" in 3d.  
* [0.x.12]*
   Return the value of the tensor function at the given point.  
* [0.x.13]*
   Return the value of the tensor function at the given point.  
* [0.x.14]*
   Return an array of function expressions (one per component), used to   initialize this function.  
* [0.x.15]*
    [2.x.8]  Exceptions    [2.x.9]   
* [0.x.16]*
   Place for the variables for each thread  
* [0.x.17]*
   The muParser objects for each thread (and one for each component). We are   storing a unique_ptr so that we don't need to include the definition of    [2.x.10]  in this header.  
* [0.x.18]*
   An array to keep track of all the constants, required to initialize tfp in   each thread.  
* [0.x.19]*
   An array for the variable names, required to initialize tfp in each   thread.  
* [0.x.20]*
   Initialize tfp and vars on the current thread. This function may only be   called once per thread. A thread can test whether the function has   already been called by testing whether 'tfp.get().size()==0' (not   initialized) or >0 (already initialized).  
* [0.x.21]*
   An array of function expressions (one per component), required to   initialize tfp in each thread.  
* [0.x.22]*
   State of usability. This variable is checked every time the function is   called for evaluation. It's set to true in the initialize() methods.  
* [0.x.23]*
   Number of variables. If this is also a function of time, then the number   of variables is dim+1, otherwise it is dim. In the case that this is a   time dependent function, the time is supposed to be the last variable. If   #n_vars is not identical to the number of the variables parsed by the   initialize() method, then an exception is thrown.  
* [0.x.24]*
   Number of components is equal dim<sup>rank</sup>.  
* [0.x.25]