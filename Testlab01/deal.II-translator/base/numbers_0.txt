[0.x.0]*
   A helper class specifying the maximal vector length of VectorizedArray   for a specified data type Number for the given processor architecture and   optimization level.     The value of the maximal vector length is used as default template   argument in VectorizedArray, such that VectorizedArray<Number> is   equivalent to VectorizedArray<Number,    [2.x.0]     
*  [2.x.1]  This class is the default implementation for data types for which   no vectorization is supported.      [2.x.2]  Number The underlying data type for which one wants to find out     the maximal length of hardware supported vectors.  
* [0.x.1]*
     Maximal vector length of VectorizedArray for an arbitrary type.    
* [0.x.2]*
   A helper class specifying the maximal vector length of VectorizedArray   for the data type `double` for the given processor architecture and   optimization level. For a detailed description of supported maximal vector   lengths, see the documentation of VectorizedArray.  
* [0.x.3]*
     Maximal vector length of VectorizedArray for double.    
* [0.x.4]*
   A helper class specifying the maximal vector length of VectorizedArray   for the data type `float` for the given processor architecture and   optimization level. For a detailed description of supported maximal vector   lengths, see the documentation of VectorizedArray.  
* [0.x.5]*
     Maximal vector length of VectorizedArray for float.    
* [0.x.6]*
 Namespace for the declaration of universal constants. Since the availability in <tt>math.h</tt> is not always guaranteed, we put them here. Since this file is included by <tt>base/config.h</tt>, they are available to the whole library.
*  The constants defined here are a subset of the <tt>M_XXX</tt> constants sometimes declared in the system include file <tt>math.h</tt>, but without the prefix <tt>M_</tt>.
*  In addition to that, we declare  <tt>invalid_unsigned_int</tt> to be the largest unsigned integer representable; this value is widely used in the library as a marker for an invalid index, an invalid size of an array, and similar purposes.

* 
* [0.x.7]*
   e  
* [0.x.8]*
   log_2 e  
* [0.x.9]*
   log_10 e  
* [0.x.10]*
   log_e 2  
* [0.x.11]*
   log_e 10  
* [0.x.12]*
   pi  
* [0.x.13]*
   pi/2  
* [0.x.14]*
   pi/4  
* [0.x.15]*
   sqrt(2)  
* [0.x.16]*
   1/sqrt(2)  
* [0.x.17]*
   Check whether the given type can be used in CUDA device code.   If not, DEAL_II_CUDA_HOST_DEV needs to be disabled for functions   that use this type.  
* [0.x.18]*
    [2.x.3]  cannot be used in CUDA device code.  
* [0.x.19]*
   Return  [2.x.4]  if the given value is a finite floating point number, i.e.   is neither plus or minus infinity nor NaN (not a number).     Note that the argument type of this function is  [2.x.5] . In   other words, if you give a very large number of type <code>long   double</code>, this function may return  [2.x.6]  even if the   number is finite with respect to type  [2.x.7] .  
* [0.x.20]*
   Return  [2.x.8]  if real and imaginary parts of the given complex number   are finite.  
* [0.x.21]*
   Return  [2.x.9]  if real and imaginary parts of the given complex number   are finite.  
* [0.x.22]*
   Return  [2.x.10]  if real and imaginary parts of the given complex number   are finite.     Again may not work correctly if real or imaginary parts are very large   numbers that are infinite in terms of  [2.x.11] , but finite   with respect to  [2.x.12] .  
* [0.x.23]*
   Return whether two numbers are equal to one another.     For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.13]  This function expects that  [2.x.14]  is castable to the type   of  [2.x.15]   
* [0.x.24]*
   Return whether two numbers are not equal to one another.     For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.16]  This function expects that  [2.x.17]  is castable to the type   of  [2.x.18]   
* [0.x.25]*
   Return whether or not a value is equal to zero.     For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.  
* [0.x.26]*
   Return whether  [2.x.19]  is less than that of  [2.x.20]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.21]  This function expects that  [2.x.22]  is castable to the type   of  [2.x.23]   
* [0.x.27]*
   Return whether  [2.x.24]  is less than or equal to that of  [2.x.25]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.26]  This function expects that  [2.x.27]  is castable to the type   of  [2.x.28]   
* [0.x.28]*
   Return whether  [2.x.29]  is greater than that of  [2.x.30]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.31]  This function expects that  [2.x.32]  is castable to the type   of  [2.x.33]   
* [0.x.29]*
   Return whether  [2.x.34]  is greater than or equal to that of  [2.x.35]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.36]  This function expects that  [2.x.37]  is castable to the type   of  [2.x.38]   
* [0.x.30]*
   A structure that, together with its partial specializations    [2.x.39]  >, provides traits and member functions   that make it possible to write templates that work on both real number   types and complex number types. This template is mostly used to implement   linear algebra classes such as vectors and matrices that work for both   real and complex numbers.  
* [0.x.31]*
     A flag that specifies whether the template type given to this class is     complex or real. Since the general template is selected for non-complex     types, the answer is  [2.x.40] .    
* [0.x.32]*
     For this data type, alias the corresponding real type. Since the     general template is selected for all data types that are not     specializations of  [2.x.41]  the underlying type must be real-     values, so the real_type is equal to the underlying type.    
* [0.x.33]*
     Return the complex-conjugate of the given number. Since the general     template is selected if number is not a complex data type, this     function simply returns the given number.        
*  [2.x.42]  This function can also be used in CUDA device code.    
* [0.x.34]*
     Return the square of the absolute value of the given number. Since the     general template is chosen for types not equal to  [2.x.43]  this     function simply returns the square of the given number.        
*  [2.x.44]  If the template type can be used in CUDA device code, the same holds true     for this function.    
* [0.x.35]*
     Return the absolute value of a number.    
* [0.x.36]*
   Specialization of the general NumberTraits class that provides the   relevant information if the underlying data type is  [2.x.45]   
* [0.x.37]*
     A flag that specifies whether the template type given to this class is     complex or real. Since this specialization of the general template is     selected for complex types, the answer is  [2.x.46] .    
* [0.x.38]*
     For this data type, alias the corresponding real type. Since this     specialization of the template is selected for number types      [2.x.47]  the real type is equal to the type used to store the     two components of the complex number.    
* [0.x.39]*
     Return the complex-conjugate of the given number.    
* [0.x.40]*
     Return the square of the absolute value of the given number. Since this     specialization of the general template is chosen for types equal to      [2.x.48]  this function returns the product of a number and its     complex conjugate.    
* [0.x.41]*
     Return the absolute value of a complex number.    
* [0.x.42]*
   A test to see if it is possible to convert one number   type to the other.  
* [0.x.43]   The structs below are needed to convert between some special number types.   Also see tensor.h for another specialization.  
* [0.x.44]*
   Return whether two numbers are equal to one another. For intricate data   types (e.g. some automatically differentiable numbers), this function   returns only whether the scalar values stored by the input values are   equal.    
*  [2.x.49]  When ADOL-C is compiled with the "advanced branching" feature, then   this specialization is only intended for use in assertions and   other code paths that do not affect the end result of a computation.  
* [0.x.45]*
   Return whether two numbers are equal to one another. For intricate data   types (e.g. some automatically differentiable numbers), this function   returns only whether the scalar values stored by the input values are   equal.    
*  [2.x.50]  When ADOL-C is compiled with the "advanced branching" feature, then   this specialization is only intended for use in assertions and   other code paths that do not affect the end result of a computation.  
* [0.x.46]*
   Return whether two numbers are equal to one another. For intricate data   types (e.g. some automatically differentiable numbers), this function   returns only whether the scalar values stored by the input values are   equal.    
*  [2.x.51]  When ADOL-C is compiled with the "advanced branching" feature, then   this specialization is only intended for use in assertions and   other code paths that do not affect the end result of a computation.  
* [0.x.47]*
   Return whether  [2.x.52]  is less than that of  [2.x.53]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.54]  When ADOL-C is compiled with the "advanced branching" feature, then   this specialization is only intended for use in assertions and   other code paths that do not affect the end result of a computation.  
* [0.x.48]*
   Return whether  [2.x.55]  is less than that of  [2.x.56]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.57]  When ADOL-C is compiled with the "advanced branching" feature, then   this specialization is only intended for use in assertions and   other code paths that do not affect the end result of a computation.  
* [0.x.49]*
   Return whether  [2.x.58]  is less than that of  [2.x.59]      For intricate data types (e.g. some automatically differentiable numbers),   this function returns the result of the comparison of scalar values stored   by the input arguments.    
*  [2.x.60]  When ADOL-C is compiled with the "advanced branching" feature, then   this specialization is only intended for use in assertions and   other code paths that do not affect the end result of a computation.  
* [0.x.50]