[0.x.0]*
 This is a replacement class for  [2.x.0]  to be used in combination with VectorizedArray and derived data types. It allocates memory aligned to addresses of a vectorized data type (in order to avoid segmentation faults when a variable of type VectorizedArray which the compiler assumes to be aligned to certain memory addresses does not actually follow these rules). This could also be achieved by proving  [2.x.1]  with a user-defined allocator. On the other hand, writing an own small vector class lets us implement parallel copy and move operations with TBB, insert deal.II-style assertions, and cut some unnecessary functionality. Note that this vector is a bit more memory-consuming than  [2.x.2]  because of alignment, so it is recommended to only use this vector on long vectors.

* 
* [0.x.1]*
   Declare standard types used in all containers. These types parallel those   in the <tt>C++</tt> standard libraries <tt>vector<...></tt> class.  
* [0.x.2]*
   Empty constructor. Sets the vector size to zero.  
* [0.x.3]*
   Set the vector size to the given size and initializes all elements with   T().      [2.x.3]   
* [0.x.4]*
   Destructor.  
* [0.x.5]*
   Copy constructor.      [2.x.4]   
* [0.x.6]*
   Move constructor. Create a new aligned vector by stealing the contents of    [2.x.5]   
* [0.x.7]*
   Assignment to the input vector  [2.x.6]       [2.x.7]   
* [0.x.8]*
   Move assignment operator.  
* [0.x.9]*
   Change the size of the vector. If the new size is larger than the   previous size, then new elements will be added to the end of the   vector; these elements will remain uninitialized (i.e., left in   an undefined state) if  [2.x.8]  is `true`, and   will be default initialized if  [2.x.9]  is `false`.   See [here](https://en.cppreference.com/w/cpp/types/is_trivial) for   a definition of what  [2.x.10]  does.     If the new size is less than the previous size, then the last few   elements will be destroyed if  [2.x.11]  will be `false`   or will simply be ignored in the future if    [2.x.12]  is `true`.     As a consequence of the outline above, the "_fast" suffix of this   function refers to the fact that for "trivial" classes `T`, this   function omits constructor/destructor calls and in particular the   initialization of new elements.    
*  [2.x.13]  This method can only be invoked for classes  [2.x.14]  that define a   default constructor,  [2.x.15]  Otherwise, compilation will fail.  
* [0.x.10]*
   Change the size of the vector. It keeps old elements previously   available, and initializes each newly added element to a   default-constructed object of type  [2.x.16]      If the new vector size is shorter than the old one, the memory is   not immediately released unless the new size is zero; however,   the size of the current object is of course set to the requested   value. The destructors of released elements are also called.      [2.x.17]   
* [0.x.11]*
   Change the size of the vector. It keeps old elements previously   available, and initializes each newly added element with the   provided initializer.     If the new vector size is shorter than the old one, the memory is   not immediately released unless the new size is zero; however,   the size of the current object is of course set to the requested   value.    
*  [2.x.18]  This method can only be invoked for classes that define the copy   assignment operator. Otherwise, compilation will fail.      [2.x.19]   
* [0.x.12]*
   Reserve memory space for  [2.x.20]  elements.     If the argument  [2.x.21]  is less than the current number of stored   elements (as indicated by calling size()), then this function does not   do anything at all. Except if the argument  [2.x.22]  is set   to zero, then all previously allocated memory is released (this operation   then being equivalent to directly calling the clear() function).     In order to avoid too frequent reallocation (which involves copy of the   data), this function doubles the amount of memory occupied when the given   size is larger than the previously allocated size.     Note that this function only changes the amount of elements the object  can* store, but not the number of elements itactually* stores. As   a consequence, no constructors or destructors of newly created objects   are run, though the existing elements may be moved to a new location (which   involves running the move constructor at the new location and the   destructor at the old location).  
* [0.x.13]*
   Releases all previously allocated memory and leaves the vector in a state   equivalent to the state after the default constructor has been called.  
* [0.x.14]*
   Inserts an element at the end of the vector, increasing the vector size   by one. Note that the allocated size will double whenever the previous   space is not enough to hold the new element.  
* [0.x.15]*
   Return the last element of the vector (read and write access).  
* [0.x.16]*
   Return the last element of the vector (read-only access).  
* [0.x.17]*
   Inserts several elements at the end of the vector given by a range of   elements.  
* [0.x.18]*
   Fills the vector with size() copies of a default constructed object.    
*  [2.x.23]  Unlike the other fill() function, this method can also be   invoked for classes that do not define a copy assignment   operator.      [2.x.24]   
* [0.x.19]*
   Fills the vector with size() copies of the given input.    
*  [2.x.25]  This method can only be invoked for classes that define the copy   assignment operator. Otherwise, compilation will fail.      [2.x.26]   
* [0.x.20]*
   This function replicates the state found on the process indicated by    [2.x.27]  across all processes of the MPI communicator. The current   state found on any of the processes other than  [2.x.28]  is lost   in this process. One can imagine this operation to act like a call to    [2.x.29]  from the root process to all other processes,   though in practice the function may try to move the data into shared   memory regions on each of the machines that host MPI processes and   let all MPI processes on this machine then access this shared memory   region instead of keeping their own copy.     The intent of this function is to quickly exchange large arrays from   one process to others, rather than having to compute or create it on   all processes. This is specifically the case for data loaded from   disk
* 
*  -  say, large data tables
* 
*  -  that are more easily dealt with by   reading once and then distributing across all processes in an MPI   universe, than letting each process read the data from disk itself.   Specifically, the use of shared memory regions allows for replicating   the data only once per multicore machine in the MPI universe, rather   than replicating data once for each MPI process. This results in   large memory savings if the data is large on today's machines that   can easily house several dozen MPI processes per shared memory   space. This use case is outlined in the TableBase class documentation   as the current function is called from    [2.x.30]  Indeed, the primary rationale   for this function is to enable sharing data tables based on TableBase   across MPI processes.     This function does not imply a model of keeping data on different processes   in sync, as  [2.x.31]  and other vector classes do where   there exists a notion of certain elements of the vector owned by each   process and possibly ghost elements that are mirrored from its owning   process to other processes. Rather, the elements of the current object are   simply copied to the other processes, and it is useful to think of this   operation as creating a set of `const` AlignedVector objects on all   processes that should not be changed any more after the replication   operation, as this is the only way to ensure that the vectors remain the   same on all processes. This is particularly true because of the use of   shared memory regions where any modification of a vector element on one MPI   process may also result in a modification of elements visible on other   processes, assuming they are located within one shared memory node.    
*  [2.x.32]  The use of shared memory between MPI processes requires     that the detected MPI installation supports the necessary operations.     This is the case for MPI 3.0 and higher.    
*  [2.x.33]  This function is not cheap. It needs to create sub-communicators     of the provided  [2.x.34]  object, which is generally an expensive     operation. Likewise, the generation of shared memory spaces is not     a cheap operation. As a consequence, this function primarily makes     sense when the goal is to share large read-only data tables among     processes; examples are data tables that are loaded at start-up     time and then used over the course of the run time of the program.     In such cases, the start-up cost of running this function can be     amortized over time, and the potential memory savings from not having to     store the table on each process may be substantial on machines with     large core counts on which many MPI processes run on the same machine.    
*  [2.x.35]  This function only makes sense if the data type `T` is     "self-contained", i.e., all if its information is stored in its     member variables, and if none of the member variables are pointers     to other parts of the memory. This is because if a type `T` does     have pointers to other parts of memory, then moving `T` into     a shared memory space does not result in the other processes having     access to data that the object points to with its member variable     pointers: These continue to live only on one process, and are     typically in memory areas not accessible to the other processes.     As a consequence, the usual use case for this function is to share     arrays of simple objects such as `double`s or `int`s.    
*  [2.x.36]  After calling this function, objects on different MPI processes     share a common state. That means that certain operations become     "collective", i.e., they must be called on all participating     processors at the same time. In particular, you can no longer call     resize(), reserve(), or clear() on one MPI process
* 
*  -  you have to do     so on all processes at the same time, because they have to communicate     for these operations. If you do not do so, you will likely get     a deadlock that may be difficult to debug. By extension, this rule of     only collectively resizing extends to this function itself: You can     not call it twice in a row because that implies that first all but the     `root_process` throw away their data, which is not a collective     operation. Generally, these restrictions on what can and can not be     done hint at the correctness of the comments above: You should treat     an AlignedVector on which the current function has been called as     `const`, on which no further operations can be performed until     the destructor is called.  
* [0.x.21]*
   Swaps the given vector with the calling vector.  
* [0.x.22]*
   Return whether the vector is empty, i.e., its size is zero.  
* [0.x.23]*
   Return the size of the vector.  
* [0.x.24]*
   Return the capacity of the vector, i.e., the size this vector can hold   without reallocation. Note that capacity() >= size().  
* [0.x.25]*
   Read-write access to entry  [2.x.37]  in the vector.  
* [0.x.26]*
   Read-only access to entry  [2.x.38]  in the vector.  
* [0.x.27]*
   Return a pointer to the underlying data buffer.  
* [0.x.28]*
   Return a const pointer to the underlying data buffer.  
* [0.x.29]*
   Return a read and write pointer to the beginning of the data array.  
* [0.x.30]*
   Return a read and write pointer to the end of the data array.  
* [0.x.31]*
   Return a read-only pointer to the beginning of the data array.  
* [0.x.32]*
   Return a read-only pointer to the end of the data array.  
* [0.x.33]*
   Return the memory consumption of the allocated memory in this class. If   the underlying type  [2.x.39]  allocates memory by itself, this memory is not   counted.  
* [0.x.34]*
   Write the data of this object to a stream for the purpose of   serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.35]*
   Read the data of this object from a stream for the purpose of   serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.36]*
   Write and read the data of this object from a stream for the purpose   of serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.37]*
   Pointer to actual data array.  
* [0.x.38]*
   Pointer to one past the last valid value.  
* [0.x.39]*
   Pointer to the end of the allocated memory.  
* [0.x.40]*
 This namespace defines the copy and set functions used in AlignedVector. These functions operate in parallel when there are enough elements in the vector.

* 
* [0.x.41]*
   A class that given a range of memory locations calls the placement-new   operator on these memory locations and copy-constructs objects of type   `T` there.     This class is based on the specialized for loop base class   ParallelForLoop in parallel.h whose purpose is the following: When   calling a parallel for loop on AlignedVector with apply_to_subranges, it   generates different code for every different argument we might choose (as   it is templated). This gives a lot of code (e.g. it triples the memory   required for compiling the file matrix_free.cc and the final object size   is several times larger) which is completely useless. Therefore, this   class channels all copy commands through one call to apply_to_subrange   for all possible types, which makes the copy operation much cleaner   (thanks to a virtual function, whose cost is negligible in this context).      [2.x.40]  AlignedVector  
* [0.x.42]*
     Constructor. Issues a parallel call if there are sufficiently many     elements, otherwise works in serial. Copies the data from the half-open     interval between  [2.x.41]  and  [2.x.42]  to array starting at      [2.x.43]  (by calling the copy constructor with placement new).         The elements from the source array are simply copied via the placement     new copy constructor.    
* [0.x.43]*
     This method moves elements from the source to the destination given in     the constructor on a subrange given by two integers.    
* [0.x.44]*
   Like AlignedVectorCopyConstruct, but use the move-constructor of `T`   to create new objects.      [2.x.44]  AlignedVector  
* [0.x.45]*
     Constructor. Issues a parallel call if there are sufficiently many     elements, otherwise works in serial. Moves the data from the half-open     interval between  [2.x.45]  and  [2.x.46]  to array starting at      [2.x.47]  (by calling the move constructor with placement new).         The data is moved between the two arrays by invoking the destructor on     the source range (preparing for a subsequent call to free).    
* [0.x.46]*
     This method moves elements from the source to the destination given in     the constructor on a subrange given by two integers.    
* [0.x.47]*
   A class that given a range of memory locations calls either calls   the placement-new operator on these memory locations (if   `initialize_memory==true`) or just copies the given initializer   into this memory location (if `initialize_memory==false`). The   latter is appropriate for classes that have only trivial constructors,   such as the built-in types `double`, `int`, etc., and structures   composed of such types.      [2.x.48]  initialize_memory Determines whether the set command should   initialize memory (with a call to the copy constructor) or rather use the   copy assignment operator. A template is necessary to select the   appropriate operation since some classes might define only one of those   two operations.      [2.x.49]  AlignedVector  
* [0.x.48]*
     Constructor. Issues a parallel call if there are sufficiently many     elements, otherwise work in serial.    
* [0.x.49]*
     This sets elements on a subrange given by two integers.    
* [0.x.50]*
   Like AlignedVectorInitialize, but use default-constructed objects   as initializers.      [2.x.50]  initialize_memory Sets whether the set command should   initialize memory (with a call to the copy constructor) or rather use the   copy assignment operator. A template is necessary to select the   appropriate operation since some classes might define only one of those   two operations.      [2.x.51]  AlignedVector  
* [0.x.51]*
     Constructor. Issues a parallel call if there are sufficiently many     elements, otherwise work in serial.    
* [0.x.52]*
     This initializes elements on a subrange given by two integers.    
* [0.x.53]*
 Relational operator == for AlignedVector
*   [2.x.52]  AlignedVector

* 
* [0.x.54]*
 Relational operator != for AlignedVector
*   [2.x.53]  AlignedVector

* 
* [0.x.55]