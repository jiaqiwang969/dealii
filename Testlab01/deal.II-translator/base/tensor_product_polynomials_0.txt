[0.x.0]*
  [2.x.0]  Polynomials  [2.x.1] 

* 
* [0.x.1]*
 Tensor product of given polynomials.
*  Given a vector of [1.x.0] one-dimensional polynomials [1.x.1] to [1.x.2], this class generates [1.x.3] polynomials of the form [1.x.4]. If the base polynomials are mutually orthogonal on the interval [-1,1] or [0,1], then the tensor product polynomials are orthogonal on [-1,1]<sup>dim</sup> or [0,1]<sup>dim</sup>, respectively.
*  Indexing is as follows: the order of dim-dimensional polynomials is x-coordinates running fastest, then y-coordinate, etc. The first few polynomials are thus [1.x.5] and likewise in 3d.
*  The output_indices() function prints the ordering of the dim-dimensional polynomials, i.e. for each polynomial in the polynomial space it gives the indices i,j,k of the one-dimensional polynomials in x,y and z direction. The ordering of the dim-dimensional polynomials can be changed by using the set_numbering() function.
*   [2.x.2]  PolynomialType A class that satisfies the required interface for computing   tensor products. Typical choices for this template argument are    [2.x.3]  and  [2.x.4] 

* 
* [0.x.2]*
   Access to the dimension of this object, for checking and automatic   setting of dimension in other classes.  
* [0.x.3]*
   Constructor. <tt>pols</tt> is a vector of objects that should be derived   or otherwise convertible to one-dimensional polynomial objects of type   `PolynomialType` (template argument of class). It will be copied element   by element into a protected member variable.  
* [0.x.4]*
   Print the list of the indices to <tt>out</tt>.  
* [0.x.5]*
   Set the ordering of the polynomials. Requires   <tt>renumber.size()==n()</tt>.  Stores a copy of <tt>renumber</tt>.  
* [0.x.6]*
   Give read access to the renumber vector.  
* [0.x.7]*
   Give read access to the inverse renumber vector.  
* [0.x.8]*
   Compute the value and the first and second derivatives of each tensor   product polynomial at <tt>unit_point</tt>.     The size of the vectors must either be equal 0 or equal n(). In the first   case, the function will not compute these values.     If you need values or derivatives of all tensor product polynomials then   use this function, rather than using any of the compute_value(),   compute_grad() or compute_grad_grad() functions, see below, in a loop   over all tensor product polynomials.  
* [0.x.9]*
   Compute the value of the <tt>i</tt>th tensor product polynomial at   <tt>unit_point</tt>. Here <tt>i</tt> is given in tensor product   numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each point value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function with   <tt>values.size()==</tt>n() to get the point values of all tensor   polynomials all at once and in a much more efficient way.  
* [0.x.10]*
   Compute the <tt>order</tt>th derivative of the <tt>i</tt>th tensor   product polynomial at <tt>unit_point</tt>. Here <tt>i</tt> is given in   tensor product numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with the   size of the appropriate parameter set to n() to get the point value of   all tensor polynomials all at once and in a much more efficient way.      [2.x.5]  order The derivative order.  
* [0.x.11]*
    [2.x.6]   [2.x.7]   
* [0.x.12]*
    [2.x.8]   [2.x.9]   
* [0.x.13]*
    [2.x.10]   [2.x.11]   
* [0.x.14]*
    [2.x.12]   [2.x.13]   
* [0.x.15]*
   Compute the grad of the <tt>i</tt>th tensor product polynomial at   <tt>unit_point</tt>. Here <tt>i</tt> is given in tensor product   numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with   <tt>grads.size()==</tt>n() to get the point value of all tensor   polynomials all at once and in a much more efficient way.  
* [0.x.16]*
   Compute the second derivative (grad_grad) of the <tt>i</tt>th tensor   product polynomial at <tt>unit_point</tt>. Here <tt>i</tt> is given in   tensor product numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with   <tt>grad_grads.size()==</tt>n() to get the point value of all tensor   polynomials all at once and in a much more efficient way.  
* [0.x.17]*
   Return the name of the space, which is <tt>TensorProductPolynomials</tt>.  
* [0.x.18]*
    [2.x.14]   [2.x.15]   
* [0.x.19]*
   Return an estimate (in bytes) for the memory consumption of this object.  
* [0.x.20]*
   Return a copy of the underlying one-dimensional polynomials given to the   constructor of this class.  
* [0.x.21]*
   Copy of the vector <tt>pols</tt> of polynomials given to the constructor.  
* [0.x.22]*
   Index map for reordering the polynomials.  
* [0.x.23]*
   Index map for reordering the polynomials.  
* [0.x.24]*
   Each tensor product polynomial [1.x.6] is a product of one-dimensional   polynomials in each space direction. Compute the indices of these one-   dimensional polynomials for each space direction, given the index   [1.x.7].  
* [0.x.25]*
   TensorProductPolynomialsBubbles has a TensorProductPolynomials class   so we declare it as a friend class.  
* [0.x.26]*
   TensorProductPolynomialsConst has a TensorProductPolynomials class   so we declare it as a friend class.  
* [0.x.27]*
 Anisotropic tensor product of given polynomials.
*  Given one-dimensional polynomials  [2.x.16]  in  [2.x.17] -direction,  [2.x.18]  in  [2.x.19] -direction, and so on, this class generates polynomials of the form  [2.x.20] . (With obvious generalization if  [2.x.21]  is in fact only 2. If  [2.x.22]  is in fact only 1, then the result is simply the same set of one-dimensional polynomials passed to the constructor.)
*  If the elements of each set of base polynomials are mutually orthogonal on the interval  [2.x.23]  or  [2.x.24] , then the tensor product polynomials are orthogonal on  [2.x.25]  or  [2.x.26] , respectively.
*  The resulting  [2.x.27]  tensor product polynomials are ordered as follows: We iterate over the  [2.x.28]  coordinates running fastest, then the  [2.x.29]  coordinate, etc. For example, for  [2.x.30]  the first few polynomials are thus  [2.x.31] ,  [2.x.32] ,  [2.x.33] , ...,  [2.x.34] ,  [2.x.35] ,  [2.x.36] , etc.

* 
* [0.x.28]*
   Constructor.  [2.x.37]  is a table of one-dimensional   polynomials. The number of rows in this table (the first index   when indexing into  [2.x.38]  needs to be equal to the   space dimension, with the elements of each row (i.e., the second   index) giving the polynomials that shall be used in this   particular coordinate direction.     Since we want to build [1.x.8] polynomials, the  [2.x.39]    sets of polynomials passed in as arguments may of course be   different, and may also vary in number.     The number of tensor product polynomials is <tt>Nx*Ny*Nz</tt>, or with   terms dropped if the number of space dimensions is less than 3.  
* [0.x.29]*
   Compute the value and the first and second derivatives of each tensor   product polynomial at <tt>unit_point</tt>.     The size of the vectors must either be equal <tt>0</tt> or equal   <tt>this->n()</tt>.  In the first case, the function will not compute   these values.     If you need values or derivatives of all tensor product polynomials then   use this function, rather than using any of the <tt>compute_value</tt>,   <tt>compute_grad</tt> or <tt>compute_grad_grad</tt> functions, see below,   in a loop over all tensor product polynomials.  
* [0.x.30]*
   Compute the value of the <tt>i</tt>th tensor product polynomial at   <tt>unit_point</tt>. Here <tt>i</tt> is given in tensor product   numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each point value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the <tt>compute</tt> function, see above,   with <tt>values.size()==this->n()</tt> to get the point values of all   tensor polynomials all at once and in a much more efficient way.  
* [0.x.31]*
   Compute the <tt>order</tt>th derivative of the <tt>i</tt>th tensor   product polynomial at <tt>unit_point</tt>. Here <tt>i</tt> is given in   tensor product numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the evaluate() function, see above, with the   size of the appropriate parameter set to n() to get the point value of   all tensor polynomials all at once and in a much more efficient way.      [2.x.40]  order The derivative order.  
* [0.x.32]*
    [2.x.41]   [2.x.42]   
* [0.x.33]*
    [2.x.43]   [2.x.44]   
* [0.x.34]*
    [2.x.45]   [2.x.46]   
* [0.x.35]*
    [2.x.47]   [2.x.48]   
* [0.x.36]*
   Compute the grad of the <tt>i</tt>th tensor product polynomial at   <tt>unit_point</tt>. Here <tt>i</tt> is given in tensor product   numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the <tt>compute</tt> function, see above,   with <tt>grads.size()==this->n()</tt> to get the point value of all   tensor polynomials all at once and in a much more efficient way.  
* [0.x.37]*
   Compute the second derivative (grad_grad) of the <tt>i</tt>th tensor   product polynomial at <tt>unit_point</tt>. Here <tt>i</tt> is given in   tensor product numbering.     Note, that using this function within a loop over all tensor product   polynomials is not efficient, because then each derivative value of the   underlying (one-dimensional) polynomials is (unnecessarily) computed   several times.  Instead use the <tt>compute</tt> function, see above,   with <tt>grad_grads.size()==this->n()</tt> to get the point value of   all tensor polynomials all at once and in a much more efficient way.  
* [0.x.38]*
   Return the name of the space, which is <tt>AnisotropicPolynomials</tt>.  
* [0.x.39]*
    [2.x.49]   [2.x.50]   
* [0.x.40]*
   Copy of the vector <tt>pols</tt> of polynomials given to the constructor.  
* [0.x.41]*
   Each tensor product polynomial  [2.x.51]  is a product of one-dimensional   polynomials in each space direction. Compute the indices of these one-   dimensional polynomials for each space direction, given the index   <tt>i</tt>.  
* [0.x.42]*
   Given the input to the constructor, compute <tt>n_pols</tt>.  
* [0.x.43]