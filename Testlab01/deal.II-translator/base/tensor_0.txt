[0.x.0]*
 This class is a specialized version of the <tt>Tensor<rank,dim,Number></tt> class. It handles tensors of rank zero, i.e. scalars. The second template argument  [2.x.0]  is ignored.
*  This class exists because in some cases we want to construct objects of type Tensor [2.x.1]  which should expand to scalars, vectors, matrices, etc, depending on the values of the template arguments  [2.x.2]  and  [2.x.3]  We therefore need a class that acts as a scalar (i.e.  [2.x.4]  for all purposes but is part of the Tensor template family.
*   [2.x.5]  dim An integer that denotes the dimension of the space in which this tensor operates. This of course equals the number of coordinates that identify a point and rank-1 tensor. Since the current object is a rank-0 tensor (a scalar), this template argument has no meaning for this class.
*   [2.x.6]  Number The data type in which the tensor elements are to be stored. This will, in almost all cases, simply be the default  [2.x.7]  but there are cases where one may want to store elements in a different (and always scalar) type. It can be used to base tensors on  [2.x.8]  or  [2.x.9]  numbers or any other data type that implements basic arithmetic operations. Another example would be a type that allows for Automatic Differentiation (see, for example, the Sacado type used in  [2.x.10] ) and thereby can generate analytic (spatial) derivatives of a function that takes a tensor as argument.
* 

* 
*  [2.x.11] 

* 
* [0.x.1]*
   Provide a way to get the dimension of an object without explicit   knowledge of it's data type. Implementation is this way instead of   providing a function <tt>dimension()</tt> because now it is possible to   get the dimension at compile time without the expansion and preevaluation   of an inlined function; the compiler may therefore produce more efficient   code and you may use this value to declare other data types.  
* [0.x.2]*
   Publish the rank of this tensor to the outside world.  
* [0.x.3]*
   Number of independent components of a tensor of rank 0.  
* [0.x.4]*
   Declare a type that has holds real-valued numbers with the same precision   as the template argument to this class. For  [2.x.12]  this   corresponds to type number, and it is equal to Number for all other   cases. See also the respective field in Vector<Number>.     This alias is used to represent the return type of norms.  
* [0.x.5]*
   Type of objects encapsulated by this container and returned by   operator[](). This is a scalar number type for a rank 0 tensor.  
* [0.x.6]*
   Declare an array type which can be used to initialize an object of this   type statically. In case of a tensor of rank 0 this is just the scalar   number type Number.  
* [0.x.7]*
   Constructor. Set to zero.    
*  [2.x.13]  This function can also be used in CUDA device code.  
* [0.x.8]*
   Constructor from tensors with different underlying scalar type. This   obviously requires that the  [2.x.14]  type is convertible to  [2.x.15]    Number.    
*  [2.x.16]  This function can also be used in CUDA device code.  
* [0.x.9]*
   Constructor, where the data is copied from a C-style array.    
*  [2.x.17]  This function can also be used in CUDA device code.  
* [0.x.10]*
   Copy constructor  
* [0.x.11]*
   Copy assignment operator  
* [0.x.12]*
   Move constructor  
* [0.x.13]*
   Move assignment operator  
* [0.x.14]*
   Return a pointer to the first element of the underlying storage.  
* [0.x.15]*
   Return a const pointer to the first element of the underlying storage.  
* [0.x.16]*
   Return a pointer to the element past the end of the underlying storage.  
* [0.x.17]*
   Return a const pointer to the element past the end of the underlying   storage.  
* [0.x.18]*
   Return a reference to the encapsulated Number object. Since rank-0   tensors are scalars, this is a natural operation.     This is the non-const conversion operator that returns a writable   reference.    
*  [2.x.18]  This function can also be used in CUDA device code.  
* [0.x.19]*
   Return a reference to the encapsulated Number object. Since rank-0   tensors are scalars, this is a natural operation.     This is the const conversion operator that returns a read-only reference.    
*  [2.x.19]  This function can also be used in CUDA device code.  
* [0.x.20]*
   Assignment from tensors with different underlying scalar type. This   obviously requires that the  [2.x.20]  type is convertible to  [2.x.21]    Number.    
*  [2.x.22]  This function can also be used in CUDA device code.  
* [0.x.21]*
   This operator assigns a scalar to a tensor. This obviously requires   that the  [2.x.23]  type is convertible to  [2.x.24]     
*  [2.x.25]  This function can also be used in CUDA device code.  
* [0.x.22]*
   Test for equality of two tensors.  
* [0.x.23]*
   Test for inequality of two tensors.  
* [0.x.24]*
   Add another scalar.    
*  [2.x.26]  This function can also be used in CUDA device code.  
* [0.x.25]*
   Subtract another scalar.    
*  [2.x.27]  This function can also be used in CUDA device code.  
* [0.x.26]*
   Multiply the scalar with a <tt>factor</tt>.    
*  [2.x.28]  This function can also be used in CUDA device code.  
* [0.x.27]*
   Divide the scalar by <tt>factor</tt>.    
*  [2.x.29]  This function can also be used in CUDA device code.  
* [0.x.28]*
   Tensor with inverted entries.    
*  [2.x.30]  This function can also be used in CUDA device code.  
* [0.x.29]*
   Reset all values to zero.     Note that this is partly inconsistent with the semantics of the  [2.x.31]    clear() member functions of the standard library containers and of   several other classes within deal.II, which not only reset the values of   stored elements to zero, but release all memory and return the object   into a virginial state. However, since the size of objects of the present   type is determined by its template parameters, resizing is not an option,   and indeed the state where all elements have a zero value is the state   right after construction of such an object.  
* [0.x.30]*
   Return the Frobenius-norm of a tensor, i.e. the square root of the sum of   the absolute squares of all entries. For the present case of rank-1   tensors, this equals the usual <tt>l<sub>2</sub></tt> norm of the vector.  
* [0.x.31]*
   Return the square of the Frobenius-norm of a tensor, i.e. the sum of the   absolute squares of all entries.    
*  [2.x.32]  This function can also be used in CUDA device code.  
* [0.x.32]*
   Read or write the data of this object to or from a stream for the purpose   of serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.33]*
   Internal type declaration that is used to specialize the return type of   operator[]() for Tensor<1,dim,Number>  
* [0.x.34]*
   The value of this scalar object.  
* [0.x.35]*
   Internal helper function for unroll.  
* [0.x.36]*
 A general tensor class with an arbitrary rank, i.e. with an arbitrary number of indices. The Tensor class provides an indexing operator and a bit of infrastructure, but most functionality is recursively handed down to tensors of rank 1 or put into external templated functions, e.g. the <tt>contract</tt> family.
*  The rank of a tensor specifies which types of physical quantities it can represent:  [2.x.33]     [2.x.34]  A rank-0 tensor is a scalar that can store quantities such as     temperature or pressure. These scalar quantities are shown in this     documentation as simple lower-case Latin letters e.g.  [2.x.35] .    [2.x.36]     [2.x.37]  A rank-1 tensor is a vector with  [2.x.38]  components and it can     represent vector quantities such as velocity, displacement, electric     field, etc. They can also describe the gradient of a scalar field.     The notation used for rank-1 tensors is bold-faced lower-case Latin     letters e.g.  [2.x.39] .     The components of a rank-1 tensor such as  [2.x.40]  are represented     as  [2.x.41]  where  [2.x.42]  is an index between 0 and <tt>dim-1</tt>.    [2.x.43]     [2.x.44]  A rank-2 tensor is a linear operator that can transform a vector     into another vector. These tensors are similar to matrices with      [2.x.45]  components. There is a related class     SymmetricTensor<2,dim> for tensors of rank 2 whose elements are     symmetric. Rank-2 tensors are usually denoted by bold-faced upper-case     Latin letters such as  [2.x.46]  or bold-faced Greek     letters for example  [2.x.47] .     The components of a rank 2 tensor such as  [2.x.48]  are shown with     two indices  [2.x.49]  as  [2.x.50] . These tensors usually describe the     gradients of vector fields (deformation gradient, velocity gradient,     etc.) or Hessians of scalar fields. Additionally, mechanical stress     tensors are rank-2 tensors that map the unit normal vectors of internal     surfaces into local traction (force per unit area) vectors.    [2.x.51]     [2.x.52]  Tensors with ranks higher than 2 are similarly defined in a     consistent manner. They have  [2.x.53]  components and     the number of indices required to identify a component equals     <tt>rank</tt>. For rank-4 tensors, a symmetric variant called     SymmetricTensor<4,dim> exists.    [2.x.54]   [2.x.55] 
*  Using this tensor class for objects of rank 2 has advantages over matrices in many cases since the dimension is known to the compiler as well as the location of the data. It is therefore possible to produce far more efficient code than for matrices with runtime-dependent dimension. It also makes the code easier to read because of the semantic difference between a tensor (an object that relates to a coordinate system and has transformation properties with regard to coordinate rotations and transforms) and matrices (which we consider as operators on arbitrary vector spaces related to linear algebra things).
*   [2.x.56]  rank_ An integer that denotes the rank of this tensor. A specialization of this class exists for rank-0 tensors.
*   [2.x.57]  dim An integer that denotes the dimension of the space in which this tensor operates. This of course equals the number of coordinates that identify a point and rank-1 tensor.
*   [2.x.58]  Number The data type in which the tensor elements are to be stored. This will, in almost all cases, simply be the default  [2.x.59]  but there are cases where one may want to store elements in a different (and always scalar) type. It can be used to base tensors on  [2.x.60]  or  [2.x.61]  numbers or any other data type that implements basic arithmetic operations. Another example would be a type that allows for Automatic Differentiation (see, for example, the Sacado type used in  [2.x.62] ) and thereby can generate analytic (spatial) derivatives of a function that takes a tensor as argument.
* 

* 
*  [2.x.63] 

* 
* [0.x.37]*
   Provide a way to get the dimension of an object without explicit   knowledge of it's data type. Implementation is this way instead of   providing a function <tt>dimension()</tt> because now it is possible to   get the dimension at compile time without the expansion and preevaluation   of an inlined function; the compiler may therefore produce more efficient   code and you may use this value to declare other data types.  
* [0.x.38]*
   Publish the rank of this tensor to the outside world.  
* [0.x.39]*
   Number of independent components of a tensor of current rank. This is dim   times the number of independent components of each sub-tensor.  
* [0.x.40]*
   Type of objects encapsulated by this container and returned by   operator[](). This is a tensor of lower rank for a general tensor, and a   scalar number type for Tensor<1,dim,Number>.  
* [0.x.41]*
   Declare an array type which can be used to initialize an object of this   type statically. For `dim == 0`, its size is 1. Otherwise, it is `dim`.  
* [0.x.42]*
   Constructor. Initialize all entries to zero.    
*  [2.x.64]  This function can also be used in CUDA device code.  
* [0.x.43]*
   A constructor where the data is copied from a C-style array.    
*  [2.x.65]  This function can also be used in CUDA device code.  
* [0.x.44]*
   A constructor where the data is copied from an ArrayView object.   Obviously, the ArrayView object must represent a stretch of   data of size `dim`<sup>`rank`</sup>. The sequentially ordered elements   of the argument `initializer` are interpreted as described by   unrolled_to_component_index().     This constructor obviously requires that the  [2.x.66]  type is   either equal to  [2.x.67]  or is convertible to  [2.x.68]    Number.    
*  [2.x.69]  This function can also be used in CUDA device code.  
* [0.x.45]*
   Constructor from tensors with different underlying scalar type. This   obviously requires that the  [2.x.70]  type is convertible to  [2.x.71]    Number.    
*  [2.x.72]  This function can also be used in CUDA device code.  
* [0.x.46]*
   Constructor that converts from a "tensor of tensors".  
* [0.x.47]*
   Conversion operator to tensor of tensors.  
* [0.x.48]*
   Copy constructor  
* [0.x.49]*
   Copy assignment operator  
* [0.x.50]*
   Move constructor  
* [0.x.51]*
   Move assignment operator  
* [0.x.52]*
   Read-Write access operator.    
*  [2.x.73]  This function can also be used in CUDA device code.  
* [0.x.53]*
   Read-only access operator.    
*  [2.x.74]  This function can also be used in CUDA device code.  
* [0.x.54]*
   Read access using TableIndices <tt>indices</tt>  
* [0.x.55]*
   Read and write access using TableIndices <tt>indices</tt>  
* [0.x.56]*
   Return a pointer to the first element of the underlying storage.  
* [0.x.57]*
   Return a const pointer to the first element of the underlying storage.  
* [0.x.58]*
   Return a pointer to the element past the end of the underlying storage.  
* [0.x.59]*
   Return a pointer to the element past the end of the underlying storage.  
* [0.x.60]*
   Assignment operator from tensors with different underlying scalar type.   This obviously requires that the  [2.x.75]  type is convertible to  [2.x.76]    Number.    
*  [2.x.77]  This function can also be used in CUDA device code.  
* [0.x.61]*
   This operator assigns a scalar to a tensor. To avoid confusion with what   exactly it means to assign a scalar value to a tensor, zero is the only   value allowed for <tt>d</tt>, allowing the intuitive notation   <tt>t=0</tt> to reset all elements of the tensor to zero.  
* [0.x.62]*
   Test for equality of two tensors.  
* [0.x.63]*
   Test for inequality of two tensors.  
* [0.x.64]*
   Add another tensor.    
*  [2.x.78]  This function can also be used in CUDA device code.  
* [0.x.65]*
   Subtract another tensor.    
*  [2.x.79]  This function can also be used in CUDA device code.  
* [0.x.66]*
   Scale the tensor by <tt>factor</tt>, i.e. multiply all components by   <tt>factor</tt>.    
*  [2.x.80]  This function can also be used in CUDA device code.  
* [0.x.67]*
   Scale the vector by <tt>1/factor</tt>.    
*  [2.x.81]  This function can also be used in CUDA device code.  
* [0.x.68]*
   Unary minus operator. Negate all entries of a tensor.    
*  [2.x.82]  This function can also be used in CUDA device code.  
* [0.x.69]*
   Reset all values to zero.     Note that this is partly inconsistent with the semantics of the  [2.x.83]    clear() member functions of the standard library containers and of   several other classes within deal.II, which not only reset the values of   stored elements to zero, but release all memory and return the object   into a virginial state. However, since the size of objects of the present   type is determined by its template parameters, resizing is not an option,   and indeed the state where all elements have a zero value is the state   right after construction of such an object.  
* [0.x.70]*
   Return the Frobenius-norm of a tensor, i.e. the square root of the sum of   the absolute squares of all entries. For the present case of rank-1   tensors, this equals the usual <tt>l<sub>2</sub></tt> norm of the vector.    
*  [2.x.84]  This function can also be used in CUDA device code.  
* [0.x.71]*
   Return the square of the Frobenius-norm of a tensor, i.e. the sum of the   absolute squares of all entries.    
*  [2.x.85]  This function can also be used in CUDA device code.  
* [0.x.72]*
   Fill a vector with all tensor elements.     This function unrolls all tensor entries into a single, linearly numbered   vector. As usual in C++, the rightmost index of the tensor marches   fastest.  
* [0.x.73]*
   Return an unrolled index in the range  [2.x.86]    for the element of the tensor indexed by the argument to the function.  
* [0.x.74]*
   Opposite of  component_to_unrolled_index: For an index in the range    [2.x.87] , return which set of indices it would   correspond to.  
* [0.x.75]*
   Determine an estimate for the memory consumption (in bytes) of this   object.  
* [0.x.76]*
   Read or write the data of this object to or from a stream for the purpose   of serialization using the [BOOST serialization   library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).  
* [0.x.77]*
   Internal type declaration that is used to specialize the return type of   operator[]() for Tensor<1,dim,Number>  
* [0.x.78]*
   Array of tensors holding the subelements.  
* [0.x.79]*
   Internal helper function for unroll.  
* [0.x.80]*
   This constructor is for internal use. It provides a way   to create constexpr constructors for Tensor<rank, dim, Number>    
*  [2.x.88]  This function can also be used in CUDA device code.  
* [0.x.81]*
   The structs below are needed to initialize nested Tensor objects.   Also see numbers.h for another specialization.  
* [0.x.82]*
  [2.x.89]  Output functions for Tensor objects

* 
* [0.x.83]*
 Output operator for tensors. Print the elements consecutively, with a space in between, two spaces between rank 1 subtensors, three between rank 2 and so on.
*   [2.x.90]  Tensor

* 
* [0.x.84]*
 Output operator for tensors of rank 0. Since such tensors are scalars, we simply print this one value.
*   [2.x.91]  Tensor

* 
* [0.x.85]*
  [2.x.92]  Vector space operations on Tensor objects:

* 
* [0.x.86]*
 Scalar multiplication of a tensor of rank 0 with an object from the left.
*  This function unwraps the underlying  [2.x.93]  stored in the Tensor and multiplies  [2.x.94]  with it.
* 

* 
*  [2.x.95]  This function can also be used in CUDA device code.
*   [2.x.96]  Tensor

* 
* [0.x.87]*
 Scalar multiplication of a tensor of rank 0 with an object from the right.
*  This function unwraps the underlying  [2.x.97]  stored in the Tensor and multiplies  [2.x.98]  with it.
* 

* 
*  [2.x.99]  This function can also be used in CUDA device code.
*   [2.x.100]  Tensor

* 
* [0.x.88]*
 Scalar multiplication of two tensors of rank 0.
*  This function unwraps the underlying objects of type  [2.x.101]  and  [2.x.102]  OtherNumber that are stored within the Tensor and multiplies them. It returns an unwrapped number of product type.
* 

* 
*  [2.x.103]  This function can also be used in CUDA device code.
*   [2.x.104]  Tensor

* 
* [0.x.89]*
 Division of a tensor of rank 0 by a scalar number.
* 

* 
*  [2.x.105]  This function can also be used in CUDA device code.
*   [2.x.106]  Tensor

* 
* [0.x.90]*
 Add two tensors of rank 0.
* 

* 
*  [2.x.107]  This function can also be used in CUDA device code.
*   [2.x.108]  Tensor

* 
* [0.x.91]*
 Subtract two tensors of rank 0.
* 

* 
*  [2.x.109]  This function can also be used in CUDA device code.
*   [2.x.110]  Tensor

* 
* [0.x.92]*
 Multiplication of a tensor of general rank with a scalar number from the right.
*  Only multiplication with a scalar number type (i.e., a floating point number, a complex floating point number, etc.) is allowed, see the documentation of EnableIfScalar for details.
* 

* 
*  [2.x.111]  This function can also be used in CUDA device code.
*   [2.x.112]  Tensor

* 
* [0.x.93]*
 Multiplication of a tensor of general rank with a scalar number from the left.
*  Only multiplication with a scalar number type (i.e., a floating point number, a complex floating point number, etc.) is allowed, see the documentation of EnableIfScalar for details.
* 

* 
*  [2.x.113]  This function can also be used in CUDA device code.
*   [2.x.114]  Tensor

* 
* [0.x.94]*
 Division of a tensor of general rank with a scalar number. See the discussion on operator*() above for more information about template arguments and the return type.
* 

* 
*  [2.x.115]  This function can also be used in CUDA device code.
*   [2.x.116]  Tensor

* 
* [0.x.95]*
 Addition of two tensors of general rank.
*   [2.x.117]  rank The rank of both tensors.
* 

* 
*  [2.x.118]  This function can also be used in CUDA device code.
*   [2.x.119]  Tensor

* 
* [0.x.96]*
 Subtraction of two tensors of general rank.
*   [2.x.120]  rank The rank of both tensors.
* 

* 
*  [2.x.121]  This function can also be used in CUDA device code.
*   [2.x.122]  Tensor

* 
* [0.x.97]*
 Entrywise multiplication of two tensor objects of rank 0 (i.e. the multiplication of two scalar values).
*   [2.x.123]  Tensor

* 
* [0.x.98]*
 Entrywise multiplication of two tensor objects of general rank.
*  This multiplication is also called "Hadamard-product" (c.f. https://en.wikipedia.org/wiki/Hadamard_product_(matrices)), and generates a new tensor of size <rank, dim>: [1.x.0]
*   [2.x.124]  rank The rank of both tensors.
*   [2.x.125]  Tensor

* 
* [0.x.99]*
  [2.x.126]  Contraction operations and the outer product for tensor objects

* 
* [0.x.100]*
 The dot product (single contraction) for tensors: Return a tensor of rank  [2.x.127]  that is the contraction of the last index of a tensor  [2.x.128]  of rank  [2.x.129]  with the first index of a tensor  [2.x.130]  of rank  [2.x.131]  [1.x.1]
* 

* 
*  [2.x.132]  For the Tensor class, the multiplication operator only performs a contraction over a single pair of indices. This is in contrast to the multiplication operator for SymmetricTensor, which does the double contraction.
* 

* 
*  [2.x.133]  In case the contraction yields a tensor of rank 0 the scalar number is returned as an unwrapped number type.
*   [2.x.134]  Tensor

* 
* [0.x.101]*
 Generic contraction of a pair of indices of two tensors of arbitrary rank: Return a tensor of rank  [2.x.135]  that is the contraction of index  [2.x.136]  of a tensor  [2.x.137]  of rank  [2.x.138]  with the index  [2.x.139]  of a tensor  [2.x.140]  of rank  [2.x.141]  [1.x.2]
*  If for example the first index ( [2.x.142] ) of a tensor  [2.x.143]  shall be contracted with the third index ( [2.x.144] , this function should be invoked as

* 
* [1.x.3]
* 
* 

* 
*  [2.x.145]  The position of the index is counted from 0, i.e.,  [2.x.146] .
* 

* 
*  [2.x.147]  In case the contraction yields a tensor of rank 0 the scalar number is returned as an unwrapped number type.
*   [2.x.148]  Tensor

* 
* [0.x.102]*
 Generic contraction of two pairs of indices of two tensors of arbitrary rank: Return a tensor of rank  [2.x.149]  that is the contraction of index  [2.x.150]  with index  [2.x.151]  and index  [2.x.152]  index_3 with index  [2.x.153]  of a tensor  [2.x.154]  of rank  [2.x.155]  and a tensor  [2.x.156]  of rank  [2.x.157]  [1.x.4]
*  If for example the first index ( [2.x.158] ) shall be contracted with the third index ( [2.x.159] ), and the second index ( [2.x.160] ) with the first index ( [2.x.161] , this function should be invoked as

* 
* [1.x.5]
* 
* 

* 
*  [2.x.162]  The position of the index is counted from 0, i.e.,  [2.x.163] .
* 

* 
*  [2.x.164]  In case the contraction yields a tensor of rank 0 the scalar number is returned as an unwrapped number type.
*   [2.x.165]  Tensor

* 
* [0.x.103]*
 The scalar product, or (generalized) Frobenius inner product of two tensors of equal rank: Return a scalar number that is the result of a full contraction of a tensor  [2.x.166]  and  [2.x.167]  [1.x.6]
*   [2.x.168]  Tensor

* 
* [0.x.104]*
 Full contraction of three tensors: Return a scalar number that is the result of a full contraction of a tensor  [2.x.169]  of rank  [2.x.170]  a tensor  [2.x.171]  of rank  [2.x.172]  and a tensor  [2.x.173]  right of rank  [2.x.174]  [1.x.7]
* 

* 
*  [2.x.175]  Each of the three input tensors can be either a Tensor or SymmetricTensor.
*   [2.x.176]  Tensor

* 
* [0.x.105]*
 The outer product of two tensors of  [2.x.177]  and  [2.x.178]  Returns a tensor of rank  [2.x.179] : [1.x.8]
*   [2.x.180]  Tensor

* 
* [0.x.106]*
  [2.x.181]  Special operations on tensors of rank 1

* 
* [0.x.107]*
 Return the cross product in 2d. This is just a rotation by 90 degrees clockwise to compute the outer normal from a tangential vector. This function is defined for all space dimensions to allow for dimension independent programming (e.g. within switches over the space dimension), but may only be called if the actual dimension of the arguments is two (e.g. from the <tt>dim==2</tt> case in the switch).
*   [2.x.182]  Tensor

* 
* [0.x.108]*
 Return the cross product of 2 vectors in 3d. This function is defined for all space dimensions to allow for dimension independent programming (e.g. within switches over the space dimension), but may only be called if the actual dimension of the arguments is three (e.g. from the <tt>dim==3</tt> case in the switch).
*   [2.x.183]  Tensor

* 
* [0.x.109]*
  [2.x.184]  Special operations on tensors of rank 2

* 
* [0.x.110]*
 Compute the determinant of a tensor or rank 2.
*   [2.x.185]  Tensor

* 
* [0.x.111]*
 Specialization for dim==1.
*   [2.x.186]  Tensor

* 
* [0.x.112]*
 Specialization for dim==2.
*   [2.x.187]  Tensor

* 
* [0.x.113]*
 Specialization for dim==3.
*   [2.x.188]  Tensor

* 
* [0.x.114]*
 Compute and return the trace of a tensor of rank 2, i.e. the sum of its diagonal entries.
*   [2.x.189]  Tensor

* 
* [0.x.115]*
 Compute and return the inverse of the given tensor. Since the compiler can perform the return value optimization, and since the size of the return object is known, it is acceptable to return the result by value, rather than by reference as a parameter.
*   [2.x.190]  Tensor

* 
* [0.x.116]*
 Return the transpose of the given tensor.
*   [2.x.191]  Tensor

* 
* [0.x.117]*
 Return the adjugate of the given tensor of rank 2. The adjugate of a tensor  [2.x.192]  is defined as [1.x.9]
* 

* 
*  [2.x.193]  This requires that the tensor is invertible.
*   [2.x.194]  Tensor

* 
* [0.x.118]*
 Return the cofactor of the given tensor of rank 2. The cofactor of a tensor  [2.x.195]  is defined as [1.x.10]
* 

* 
*  [2.x.196]  This requires that the tensor is invertible.
*   [2.x.197]  Tensor

* 
* [0.x.119]*
 Return the nearest orthogonal matrix  [2.x.198]  by combining the products of the singular value decomposition (SVD)  [2.x.199]  for a given input  [2.x.200] , effectively replacing  [2.x.201]  with the identity matrix.
*  This is a (nonlinear) [projection operation](https://en.wikipedia.org/wiki/Projection_(mathematics)) since when applied twice, we have  [2.x.202]  as is easy to see. (That is because the SVD of  [2.x.203]  is simply  [2.x.204] .) Furthermore,  [2.x.205]  is really an orthogonal matrix because orthogonal matrices have to satisfy  [2.x.206] , which here implies that

* 
* [1.x.11]
*  due to the fact that the  [2.x.207]  and  [2.x.208]  factors that come out of the SVD are themselves orthogonal matrices.
*   [2.x.209]  A The tensor for which to find the closest orthogonal tensor.  [2.x.210]  Number The type used to store the entries of the tensor.   Must be either `float` or `double`.  [2.x.211]  In order to use this function, this program must be linked with the   LAPACK library.  [2.x.212]   [2.x.213]  must not be singular. This is because, conceptually, the problem   to be solved here is trying to find a matrix  [2.x.214]  that   minimizes some kind of distance from  [2.x.215]  while satisfying the   quadratic constraint    [2.x.216] . This is not so   dissimilar to the kind of problem where one wants to find a vector    [2.x.217]  that minimizes the quadratic objective   function  [2.x.218]  for a given  [2.x.219]    subject to the constraint  [2.x.220] 
* 
*  -  in other   words, we are seeking the point  [2.x.221]  on the unit sphere   that is closest to  [2.x.222] . This problem has a solution for all    [2.x.223]  except if  [2.x.224] . The corresponding condition   for the problem we are considering here is that  [2.x.225]  must not   have a zero eigenvalue.
*   [2.x.226]  Tensor

* 
* [0.x.120]*
 Return the  [2.x.227]  norm of the given rank-2 tensor, where  [2.x.228]  (maximum of the sums over columns).
*   [2.x.229]  Tensor

* 
* [0.x.121]*
 Return the  [2.x.230]  norm of the given rank-2 tensor, where  [2.x.231]  (maximum of the sums over rows).
*   [2.x.232]  Tensor

* 
* [0.x.122]