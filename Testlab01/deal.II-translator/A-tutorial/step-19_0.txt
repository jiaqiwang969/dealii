[0.x.0]*
 [2.x.0] 
* This tutorial depends on  [2.x.1] .
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28][1.x.29][1.x.30][1.x.31][1.x.32]
* 
*  [2.x.2] 
* [1.x.33]
*  [2.x.3]  Support for particles exists in deal.II primarily due to the initial  efforts of Rene Gassmoeller. Please acknowledge this work by citing  the publication  [2.x.4]  if you use particle functionality in your  own work.
* [1.x.34][1.x.35][1.x.36]
* 

* The finite element method in general, and deal.II in particular, were inventedto solve partial differential equations
* 
*  -  in other words, to solve[continuum mechanics](https://en.wikipedia.org/wiki/Continuum_mechanics) problems.On the other hand, sometimes one wants to solve problems in which it is usefulto track individual objects ("particles") and how their positions evolve. Ifthis simply leads to a set of ordinary differential equations, for exampleif you want to track the positions of the planets in the solar system overtime, then deal.II is clearly not your right tool. On the other hand, ifthis evolution is due to the interaction with the solution of partial differentialequation, or if having a mesh to determine which particles interactwith others (such as in the[smoothed particle hydrodynamics (SPH)](https://en.wikipedia.org/wiki/Smoothed-particle_hydrodynamics)method), then deal.II has support for you.
* The case we will consider here is how electrically charged particles move throughan electric field. As motivation, we will consider[cathode rays](https://en.wikipedia.org/wiki/Cathode_ray): Electrons emitted by aheated piece of metal that is negatively charged (the "cathode"), and that arethen accelerated by an electric field towards the positively charged electrode(the "anode"). The anode is typically ring-shaped so that the majority ofelectrons can fly through the hole in the form of an electron beam. In the oldentimes, they might then have illuminated the screen of a TV built from a[cathode ray tube](https://en.wikipedia.org/wiki/Cathode-ray_tube).Today, instead, electron beams are useful in[X-ray machines](https://en.wikipedia.org/wiki/X-ray_tube),[electron beam lithography](https://en.wikipedia.org/wiki/Electron-beam_lithography),[electron beam welding](https://en.wikipedia.org/wiki/Electron-beam_welding), anda number of other areas.
* The equations we will then consider are as follows: First, we need to describethe electric field. This is most easily accomplished by noting that the electricpotential  [2.x.5]  satisfied the equation[1.x.37]where  [2.x.6]  is the dielectric constant of vacuum, and  [2.x.7]  is the chargedensity. This is augmented by boundary conditions that we will choose as follows:
* [1.x.38]
* In other words, we prescribe voltages  [2.x.8]  and  [2.x.9]  at the two electrodesand insulating (Neumann) boundary conditions elsewhere. Since the dynamics of theparticles are purely due to the electric field  [2.x.10] , we couldas well have prescribed  [2.x.11]  and  [2.x.12]  at the two electrodes
* 
*  -  all that mattersis the voltage difference at the two electrodes.
* Given this electric potential  [2.x.13]  and the electric field  [2.x.14] ,we can describe the trajectory of the  [2.x.15] th particle using the differentialequation[1.x.39]where  [2.x.16]  are the mass and electric charge of each particle. In practice, itis convenient to write this as a system of first-order differential equationsin the position  [2.x.17]  and velocity  [2.x.18] :
* [1.x.40]
* The deal.II class we will use to deal with particles,  [2.x.19] stores particles in a way so that the position  [2.x.20]  is part of the [2.x.21]  data structures. (It stores particles sortedby cell they are in, and consequently needs to know where each particle is.)The velocity  [2.x.22] , on the other hand, is of no concern to [2.x.23]  and consequently we will store it as a"property" of each particle that we will update in each time step. Propertiescan also be used to store any other quantity we might care about each particle:its charge, or if they were larger than just an electron, its color, mass,attitude in space, chemical composition, etc.
* There remain two things to discuss to complete the model:Where particles start and what the charge density  [2.x.24]  is.
* First, historically, cathode rays used very large electric fields to pullelectrons out of the metal. This produces only a relatively small current. Onecan do better by heating the cathode: a statistical fraction of electrons in thatcase have enough thermal energy to leave the metal; the electric field then justhas to be strong enough to pull them away from the attraction of their hostbody. We will model this in the following way: We will create a new particle if(i) the electric field points away from the electrode, i.e., if [2.x.25]  where  [2.x.26]  is the normal vector at aface pointing out of the domain (into the electrode), and (ii) the electricfield exceeds a threshold value  [2.x.27] . This issurely not a sufficiently accurate model for what really happens, but is goodenough for our current tutorial program.
* Second, in principle we would have to model the charge density via[1.x.41]
*  [2.x.28] The issue now is that in reality, a cathode ray tube in an old televisionyields a current of somewhere around a few milli-Amperes. In the much higherenergy beams of particle accelerators, the current may only be a fewnano-Ampere. But an Ampere is  [2.x.29]  electrons flowing persecond. Now, as you will see in the results section, we really only simulatea few microseconds ( [2.x.30]  seconds), but that still results in very verylarge numbers of electrons
* 
*  -  far more than we can hope to simulatewith a program as small as the current one. As a consequence, let uspresume that each particle represents  [2.x.31]  electrons. Then the particlemass and charge are also  [2.x.32]  and  [2.x.33]  and the equations we have tosolve are[1.x.42]which is of course exactly the same as above. On the other hand, the chargedensity for these "clumps" of electrons is given by[1.x.43]It is this form that we will implement in the program, where  [2.x.34]  is chosenrather large in the program to ensure that the particles actually affectthe electric field. (This may not be realistic in practice: In most cases,there are just not enough electrons to actually affect the overallelectric field. But realism is not our goal here.)
* 

* 
*  [2.x.35]  One may wonder why the equation for the electric field (or, rather,the electric potential) has no time derivative whereas the equations forthe electron positions do. In essence, this is a modeling assumption: Weassume that the particles move so slowly that at any given time theelectric field is in equilibrium. This is saying, in other words, thatthe velocity of the electrons is much less than the speed of light. Inyet other words, we can rephrase this in terms of the electrode voltage [2.x.36] : Since every volt of electric potential accelerates electrons byapproximately 600 km/s (neglecting relativistic effects), requiring [2.x.37]  is equivalent to saying that  [2.x.38] .Under this assumption (and the assumption that the total numberof electrons is small), one can also neglect the creation ofmagnetic fields by the moving charges, which would otherwise also affectthe movement of the electrons.
* 

* [1.x.44][1.x.45]
* 

* The equations outlined above form a set of coupled differential equations.Let us bring them all together in one place again to make that clear:
* [1.x.46]
* Because of the awkward dependence of the electric potential on theparticle locations, we don't want to solve this as a coupled systembut instead use a decoupled approach where we first solve for thepotential in each time step and then the particle locations. (Onecould also do it the other way around, of course.) This is verymuch in the same spirit as we do in  [2.x.39] ,  [2.x.40] , and  [2.x.41] ,to name just a few, and can all be understood in the context ofthe operator splitting methods discussed in  [2.x.42] .
* So, if we denote by an upper index  [2.x.43]  the time step, and if weuse a simple time discretization for the ODE, then this meansthat we have to solve the following set of equations in each timestep:
* [1.x.47]
* There are of course many better ways to do a time discretization (forexample the simple [leapfrog scheme](https://en.wikipedia.org/wiki/Leapfrog_integration))but this isn't the point of the tutorial program, and so we will be contentwith what we have here. (We will comment on a piece of this puzzle in the[1.x.48] section of this program,however.)
* There remains the question of how we should choose the time step size  [2.x.44] .The limitation here is that the  [2.x.45]  class needs tokeep track of which cell each particle is in. This is particularly an issue ifwe are running computations in parallel (say, in  [2.x.46] ) because in that caseevery process only stores those cells it owns plus one layer of "ghost cells".That's not relevant here, but in general we should make sure that over thecourse of each time step, a particle moves only from one cell to anyof its immediate neighbors (face, edge, or vertex neighbors). If we can ensurethat, then  [2.x.47]  is guaranteed to be able to figure outwhich cell a particle ends up in. To do this, a useful rule of thumbis that we should choose the time step so that for all particles the expecteddistance the particle moves by is less than one cell diameter:[1.x.49]or equivalently[1.x.50]Here,  [2.x.48]  is the length of the shortest edge of the cell on which particle [2.x.49]  is located
* 
*  -  in essence, a measure of the size of a cell.
* On the other hand, a particle might already be at the boundary of one celland the neighboring cell might be once further refined. So then the time tocross thatneighboring* cell would actually be half the amount above,suggesting[1.x.51]
* But even that is not good enough: The formula above updates the particlepositions in each time using the formula[1.x.52]that is, using thecurrent* velocity  [2.x.50] . But we don't havethe current velocity yet at the time when we need to choose  [2.x.51] 
* 
*  -  whichis after we have updated the potential  [2.x.52]  but before we update thevelocity from  [2.x.53]  to  [2.x.54] . All we have is [2.x.55] . So we need an additional safety factor for our finalchoice:[1.x.53]How large should  [2.x.56]  be? That depends on how much of underestimate [2.x.57]  might be compared to  [2.x.58] , and thatis actually quite easy to assess: A particle created in one time step withzero velocity will roughly pick up equal velocity increments in each successivetime step if the electric field it encounters along the way were roughlyconstant. So the maximal difference between  [2.x.59]  and [2.x.60]  would be a factor of two. As a consequence,we will choose  [2.x.61] .
* There is only one other case we ought to consider: What happens inthe very first time step? There, any particles to be moved along have justbeen created, but they have a zero velocity. So we don't know whatvelocity we should choose for them. Of course, in all other time stepsthere are also particles that have just been created, but in general,the particles with the highest velocity limit the time step size and so thenewly created particles with their zero velocity don't matter. But if weonly*
have such particles?
* In that case, we can use the following approximation: If a particlestarts at  [2.x.62] , then the update formula tells us that[1.x.54]and consequently[1.x.55]which we can write as[1.x.56]Not wanting to move a particle by more than  [2.x.63]  then implies that we shouldchoose the time step as[1.x.57]Using the same argument about neighboring cells possibly being smaller bya factor of two then leads to the final formula for time step zero:[1.x.58]
* Strictly speaking, we would have to evaluate the electric potential  [2.x.64]  atthe location of each particle, but a good enough approximation is to use themaximum of the values at the vertices of the respective cell. (Why the verticesand not the midpoint? Because the gradient of the solution of the Laplace equation,i.e., the electric field, is largest in corner singularities which are locatedat the vertices of cells.) This has the advantage that we can make good use of theFEValues functionality which can recycle pre-computed material as long as thequadrature points are the same from one cell to the next.
* We could always run this kind of scheme to estimate the difference between [2.x.65]  and  [2.x.66] , but it relies on evaluating theelectric field  [2.x.67]  on each cell, and that is expensive. As aconsequence, we will limit this approach to the very first time step.
* 

* [1.x.59][1.x.60]
* 

* Having discussed the time discretization, the discussion of the spatialdiscretization is going to be short: We use quadratic finite elements,i.e., the space  [2.x.68] , to approximate the electric potential  [2.x.69] . Themesh is adapted a couple of times during the initial time step. Allof this is entirely standard if you have read  [2.x.70] , and the implementationdoes not provide for any kind of surprise.
* 

* 
* [1.x.61][1.x.62]
* 

* Adding and moving particles is, in practice, not very difficult in deal.II.To add one, the `create_particles()` function of this program simplyuses a code snippet of the following form:
* [1.x.63]
* In other words, it is not all that different from inserting an objectinto a  [2.x.71]  or  [2.x.72]  Create the object, set its properties(here, the current location, its reference cell location, and its id)and call `insert_particle`. The only thing that may be surprising isthe reference location: In order to evaluate things such as [2.x.73] , it is necessary to evaluate finite elementfields at locations  [2.x.74] . But this requires evaluating thefinite element shape functions at points on the reference cell [2.x.75] . To make this efficient, every particle doesn'tjust store its location and the cell it is on, but also what locationthat point corresponds to in the cell's reference coordinate system.
* Updating a particle's position is then no more difficult: One just hasto call
* [1.x.64]
* We do this in the `move_particles()` function. The only differenceis that we then have to tell the  [2.x.76]  classto also find what cell that position corresponds to (and, when computingin parallel, which process owns this cell). For efficiency reason,this is most easily done after updating all particles' locations,and is achieved via the [2.x.77] function.
* There are, of course, times where a particle may leave the domain inquestion. In that case, [2.x.78] can not find a surrounding cell and simply deletes the particle. But, itis often useful to track the number of particles that have been lostthis way, and for this the  [2.x.79]  class offers a"signal" that one can attach to. We show how to do this in theconstructor of the main class to count how many particles were lostin each time step. Specifically, the way this works is thatthe  [2.x.80]  class has a "signal" to which onecan attach a function that will be executed whenever the signalis triggered. Here, this looks as follows:
* [1.x.65]
* That's a bit of a mouthful, but what's happening is this: We declarea lambda function that "captures" the `this` pointer (so that we can accessmember functions of the surrounding object inside the lambda function), andthat takes two arguments:
* 
*  - A reference to the particle that has been "lost".
* 
*  - A reference to the cell it was on last.The lambda function then simply calls the  [2.x.81] function with these arguments. When we attach this lambda function to thesignal, the  [2.x.82] function will trigger the signal for every particle for which it can'tfind a new home. This gives us the chance to record where the particleis, and to record statistics on it.
* 

* 
*  [2.x.83]  In this tutorial program, we insert particles by hand and at  locations we specifically choose based on conditions that include  the solution of the electrostatic problem. But there are other cases  where one primarily wants to use particles as passive objects, for  example to trace and visualize the flow field of a fluid flow  problem. In those cases, there are numerous functions in the   [2.x.84]  namespace that can generate particles  automatically. One of the functions of this namespace is also used  in the  [2.x.85]  tutorial program, for example.
* 

* [1.x.66][1.x.67]
* 

* The test case here is not meant to be a realistic depiction of a cathoderay tube, but it has the right general characteristics and the point is,in any case, only to demonstrate how one would implement deal.II codesthat use particles.
* The following picture shows the geometry that we're going to use:
*  [2.x.86] 
* In this picture, the parts of the boundary marked in red and blue are thecathode, held at an electric potential  [2.x.87] . The part of the cathode shownin red is the part that is heated, leading to electrons leaving the metaland then being accelerated by the electric field (a few electricfield lines are also shown). The green part of the boundary is the anode,held at  [2.x.88] . The rest of the boundary satisfies a Neumann boundarycondition.
* This setup mimics real devices. The re-entrant corner results in anelectric potential  [2.x.89]  whose derivative (the electric field  [2.x.90] )has a singularity
* 
*  -  in other words, it becomes very large in the vicinityof the corner, allowing it to rip electrons away from the metal. Theseelectrons are then accelerated towards the (green) anode which has ahole in the middle through which the electrons can escape the device andfly on to hit the screen, where they excite the "phosphor" to then emitthe light that we see from these old-style TV screens. The non-heatedpart of the cathode is not subjectto the emission of electrons
* 
*  -  in the code, we will mark this as the"focussing element" of the tube, because its negative electric voltagerepels the electrons and makes sure that they do not just flyaway from the heated part of the cathode perpendicular to the boundary,but in fact bend their paths towards the anode on the right.
* The electric field lines also shown in the picture illustratethat the electric field connects the negative and positiveelectrodes, respectively. The accelerating force the electronsexperience is along these field lines. Finally, the picture shows themesh used in the computation, illustrating that there aresingularities at the tip of the re-rentrant corner as wellas at all places where the boundary conditions change; thesesingularities are visible because the mesh is refined in theselocations.
* Of practical interest is to figure out which fraction of theelectrons emitted from the cathode actually make it through thehole in the anode
* 
*  -  electrons that just bounce into the anodeitself are not actually doing anything useful other than convertingelectricity into heat. As a consequence, in the `track_lost_particle()`function (which is called for each particle that leaves the domain,see above), we will estimate where it might have left the domainand report this in the output.
* 

* 
*  [2.x.91]  It is worth repeating that neither the geometry used here,nor in fact any other aspect of this program is intended to representanything even half-way realistic. Tutorial programs are our tools toteach how deal.II works, and we often use situations for which wehave some kind of intuition since this helps us interpret the outputof a program, but that's about the extent to which we intend theprogram to do anything of use besides being a teaching tool.
* 

*  [1.x.68] [1.x.69]
*   [1.x.70]  [1.x.71]
* 

* 
*  The majority of the include files used in this program are well known from  [2.x.92]  and similar programs:
* 

* 
*  

* 
* [1.x.72]
* 
*  The ones that are new are only the following three: The first declares the DiscreteTime class that helps us keep track of time in a time-dependent simulation. The latter two provide all of the particle functionality, namely a way to keep track of particles located on a mesh (the  [2.x.93]  class) and the ability to output these particles' locations and their properties for the purposes of visualization (the  [2.x.94]  class).
* 

* 
* [1.x.73]
* 
*   [1.x.74]  [1.x.75]
* 

* 
*  As is customary, we put everything that corresponds to the details of the program into a namespace of its own. At the top, we define a few constants for which we would rather use symbolic names than hard-coded numbers.
* 

* 
*  Specifically, we define numbers for  [2.x.95]  "boundary indicators" for the various parts of the geometry, as well as the physical properties of electrons and other specifics of the setup we use here.
* 

* 
*  For the boundary indicators, let us start enumerating at some random value 101. The principle here is to use numbers that areuncommon*. If there are pre-defined boundary indicators previously set by the `GridGenerator` functions, they will likely be small integers starting from zero, but not in this rather randomly chosen range. Using numbers such as those below avoids the possibility for conflicts, and also reduces the temptation to just spell these numbers out in the program (because you will probably never remember which is which, whereas you might have been tempted if they had started at 0).
* 

* 
* [1.x.76]
* 
*   [1.x.77]  [1.x.78]
* 

* 
*  The following is then the main class of this program. It has, fundamentally, the same structure as  [2.x.96]  and many other tutorial programs. This includes the majority of the member functions (with the purpose of the rest probably self-explanatory from their names) as well as only a small number of member variables beyond those of  [2.x.97] , all of which are related to dealing with particles.
* 

* 
* [1.x.79]
* 
*   [1.x.80]  [1.x.81]
* 

* 
*   [1.x.82]  [1.x.83]
* 

* 
*  So then let us get started on the implementation. What the constructor does is really only a straight-forward initialization of all of the member variables at the top. The only two worth mentioning are the `particle_handler`, which is handed a reference to the triangulation on which the particles will live (currently of course still empty, but the particle handler stores the reference and will use it once particles are added
* 
*  -  which happens after the triangulation is built). The other piece of information it gets is how many "properties" each particle needs to store. Here, all we need each particle to remember is its current velocity, i.e., a vector with `dim` components. There are, however, other intrinsic properties that each particle has and that the  [2.x.98]  class automatically and always makes sure are available; in particular, these are the current location of a particle, the cell it is on, it's reference location within that cell, and the particle's ID.   
*   The only other variable of interest is `time`, an object of type DiscreteTime. It keeps track of the current time we are in a time-dependent simulation, and is initialized with the start time (zero) and end time ( [2.x.99] ). We will later set the time step size in `update_timestep_size()`.   
*   The body of the constructor consists of a piece of code we have already discussed in the introduction. Namely, we make sure that the `track_lost_particle()` function is called by the `particle_handler` object every time a particle leaves the domain.
* 

* 
* [1.x.84]
* 
*   [1.x.85]  [1.x.86]
* 

* 
*  The next function is then responsible for generating the mesh on which we want to solve. Recall how the domain looks like:  [2.x.100]  We subdivide this geometry into a mesh of  [2.x.101]  cells that looks like this:  [2.x.102]  The way this is done is by first defining where the  [2.x.103]  vertices are located
* 
*  -  here, we say that they are on integer points with the middle one on the left side moved to the right by a value of `delta=0.5`.   
*   In the following, we then have to say which vertices together form the 8 cells. The following code is then entirely equivalent to what we also do in  [2.x.104] :
* 

* 
* [1.x.88]
* 
*  With these arrays out of the way, we can move to slightly higher higher-level data structures. We create a vector of CellData objects that store for each cell to be created the vertices in question as well as the  [2.x.105]  "material id" (which we will here simply set to zero since we don't use it in the program).     
*   This information is then handed to the  [2.x.106]  function, and the mesh is twice globally refined.
* 

* 
* [1.x.89]
* 
*  The remaining part of the function loops over all cells and their faces, and if a face is at the boundary determines which boundary indicator should be applied to it. The various conditions should make sense if you compare the code with the picture of the geometry above.     
*   Once done with this step, we refine the mesh once more globally.
* 

* 
* [1.x.90]
* 
*   [1.x.91]  [1.x.92]
* 

* 
*  The next function in this program deals with setting up the various objects related to solving the partial differential equations. It is in essence a copy of the corresponding function in  [2.x.107]  and requires no further discussion.
* 

* 
* [1.x.93]
* 
*   [1.x.94]  [1.x.95]
* 

* 
*  The function that computes the matrix entries is again in essence a copy of the corresponding function in  [2.x.108] :
* 

* 
* [1.x.96]
* 
*  The only interesting part of this function is how it forms the right hand side of the linear system. Recall that the right hand side of the PDE is [1.x.97] where we have used  [2.x.109]  to index the particles here to avoid confusion with the shape function  [2.x.110] ;  [2.x.111]  is the position of the  [2.x.112] th particle.         
*   When multiplied by a test function  [2.x.113]  and integrated over the domain results in a right hand side vector

* 
* [1.x.98]
*  Note that the final line no longer contains an integral, and consequently also no occurrence of  [2.x.114]  which would require the appearance of the `JxW` symbol in our code.         
*   For a given cell  [2.x.115] , this cell's contribution to the right hand side is then

* 
* [1.x.99]
*  i.e., we only have to worry about those particles that are actually located on the current cell  [2.x.116] .         
*   In practice, what we do here is the following: If there are any particles on the current cell, then we first obtain an iterator range pointing to the first particle of that cell as well as the particle past the last one on this cell (or the end iterator)
* 
*  -  i.e., a half-open range as is common for C++ functions. Knowing now the list of particles, we query their reference locations (with respect to the reference cell), evaluate the shape functions in these reference locations, and compute the force according to the formula above (without any  [2.x.117]          
*  

* 
*  [2.x.118]  It is worth pointing out that calling the  [2.x.119]  and  [2.x.120]  functions is not very efficient on problems with a large number of particles. But it illustrates the easiest way to write this algorithm, and so we are willing to incur this cost for the moment for expository purposes. We discuss the issue in more detail in the [1.x.100] below, and use a better approach in  [2.x.121] , for example.
* 

* 
* [1.x.101]
* 
*  Finally, we can copy the contributions of this cell into the global matrix and right hand side vector:
* 

* 
* [1.x.102]
* 
*   [1.x.103]  [1.x.104]
* 

* 
*  The function that solves the linear system is then again exactly as in  [2.x.122] :
* 

* 
* [1.x.105]
* 
*   [1.x.106]  [1.x.107]
* 

* 
*  The final field-related function is the one that refines the grid. We will call it a number of times in the first time step to obtain a mesh that is well-adapted to the structure of the solution and, in particular, resolves the various singularities in the solution that are due to re-entrant corners and places where the boundary condition type changes. You might want to refer to  [2.x.123]  again for more details:
* 

* 
* [1.x.108]
* 
*   [1.x.109]  [1.x.110]
* 

* 
*  Let us now turn to the functions that deal with particles. The first one is about the creation of particles. As mentioned in the introduction, we want to create a particle at points of the cathode if the the electric field  [2.x.124]  exceeds a certain threshold, i.e., if  [2.x.125] , and if furthermore the electric field points into the domain (i.e., if  [2.x.126] ). As is common in the finite element method, we evaluate fields (and their derivatives) at specific evaluation points; typically, these are "quadrature points", and so we create a "quadrature formula" that we will use to designate the points at which we want to evaluate the solution. Here, we will simply take QMidpoint implying that we will only check the threshold condition at the midpoints of faces. We then use this to initialize an object of type FEFaceValues to evaluate the solution at these points.   
*   All of this will then be used in a loop over all cells, their faces, and specifically those faces that are at the boundary and, moreover, the cathode part of the boundary.
* 

* 
* [1.x.111]
* 
*  So we have found a face on the cathode. Next, we let the FEFaceValues object compute the gradient of the solution at each "quadrature" point, and extract the electric field vector from the gradient in the form of a Tensor variable through the methods discussed in the  [2.x.127]  "vector-valued problems" documentation module.
* 

* 
* [1.x.112]
* 
*  Electrons can only escape the cathode if the electric field strength exceeds a threshold and, crucially, if the electric field pointsinto* the domain. Once we have that checked, we create a new  [2.x.128]  object at this location and insert it into the  [2.x.129]  object with a unique ID.                 
*   The only thing that may be not obvious here is that we also associate with this particle the location in the reference coordinates of the cell we are currently on. This is done because we will in downstream functions compute quantities such as the electric field at the location of the particle (e.g., to compute the forces that act on it when updating its position in each time step). Evaluating a finite element field at arbitrary coordinates is quite an expensive operation because shape functions are really only defined on the reference cell, and so when asking for the electric field at an arbitrary point requires us first to determine what the reference coordinates of that point are. To avoid having to do this over and over, we determine these coordinates once and for all and then store these reference coordinates directly with the particle.
* 

* 
* [1.x.113]
* 
*  At the end of all of these insertions, we let the `particle_handler` update some internal statistics about the particles it stores.
* 

* 
* [1.x.114]
* 
*   [1.x.115]  [1.x.116]
* 

* 
*  The second particle-related function is the one that moves the particles in each time step. To do this, we have to loop over all cells, the particles in each cell, and evaluate the electric field at each of the particles' positions.   
*   The approach used here is conceptually the same used in the `assemble_system()` function: We loop over all cells, find the particles located there (with the same caveat about the inefficiency of the algorithm used here to find these particles), and use FEPointEvaluation object to evaluate the gradient at these positions:
* 

* 
* [1.x.117]
* 
*  Then we can ask the FEPointEvaluation object for the gradients of the solution (i.e., the electric field  [2.x.130] ) at these locations and loop over the individual particles:
* 

* 
* [1.x.118]
* 
*  Having now obtained the electric field at the location of one of the particles, we use this to update first the velocity and then the position. To do so, let us first get the old velocity out of the properties stored with the particle, compute the acceleration, update the velocity, and store this new velocity again in the properties of the particle. Recall that this corresponds to the first of the following set of update equations discussed in the introduction:

* 
* [1.x.119]
* 
* 

* 
* [1.x.120]
* 
*  With the new velocity, we can then also update the location of the particle and tell the particle about it.
* 

* 
* [1.x.121]
* 
*  Having updated the locations and properties (i.e., velocities) of all particles, we need to make sure that the `particle_handler` again knows which cells they are in, and what their locations in the coordinate system of the reference cell are. The following function does that. (It also makes sure that, in parallel computations, particles are moved from one processor to another processor if a particle moves from the subdomain owned by the former to the subdomain owned by the latter.)
* 

* 
* [1.x.122]
* 
*   [1.x.123]  [1.x.124]
* 

* 
*  The final particle-related function is the one that is called whenever a particle is lost from the simulation. This typically happens if it leaves the domain. If that happens, this function is called both the cell (which we can ask for its new location) and the cell it was previously on. The function then keeps track of updating the number of particles lost in this time step, the total number of lost particles, and then estimates whether the particle left through the hole in the middle of the anode. We do so by first checking whether the cell it was in last had an  [2.x.131]  coordinate to the left of the right boundary (located at  [2.x.132] ) and the particle now has a position to the right of the right boundary. If that is so, we compute a direction vector of its motion that is normalized so that the  [2.x.133]  component of the direction vector is equal to  [2.x.134] . With this direction vector, we can compute where it would have intersected the line  [2.x.135] . If this intersect is between  [2.x.136]  and  [2.x.137] , then we claim that the particle left through the hole and increment a counter.
* 

* 
* [1.x.125]
* 
*   [1.x.126]  [1.x.127]
* 

* 
*  As discussed at length in the introduction, we need to respect a time step condition whereby particles can not move further than one cell in one time step. To ensure that this is the case, we again first compute the maximal speed of all particles on each cell, and divide the cell size by that speed. We then compute the next time step size as the minimum of this quantity over all cells, using the safety factor discussed in the introduction, and set this as the desired time step size using the  [2.x.138]  function.
* 

* 
* [1.x.128]
* 
*  As mentioned in the introduction, we have to treat the very first time step differently since there, particles are not available yet or do not yet have the information associated that we need for the computation of a reasonable step length. The formulas below follow the discussion in the introduction.
* 

* 
* [1.x.129]
* 
*   [1.x.130]  [1.x.131]
* 

* 
*  The final function implementing pieces of the overall algorithm is the one that generates graphical output. In the current context, we want to output both the electric potential field as well as the particle locations and velocities. But we also want to output the electric field, i.e., the gradient of the solution.   
*   deal.II has a general way how one can compute derived quantities from the solution and output those as well. Here, this is the electric field, but it could also be some other quantity
* 
*  -  say, the norm of the electric field, or in fact anything else one could want to compute from the solution  [2.x.139]  or its derivatives. This general solution uses the DataPostprocessor class and, in cases like the one here where we want to output a quantity that represents a vector field, the DataPostprocessorVector class.   
*   Rather than try and explain how this class works, let us simply refer to the documentation of the DataPostprocessorVector class that has essentially this case as a well-documented example.
* 

* 
* [1.x.132]
* 
*  With this, the `output_results()` function becomes relatively straightforward: We use the DataOut class as we have in almost every one of the previous tutorial programs to output the solution (the "electric potential") and we use the postprocessor defined above to also output its gradient (the "electric field"). This all is then written into a file in VTU format after also associating the current time and time step number with this file.
* 

* 
* [1.x.133]
* 
*  Output the particle positions and properties is not more complicated. The  [2.x.140]  class plays the role of the DataOut class for particles, and all we have to do is tell that class where to take particles from and how to interpret the `dim` components of the properties
* 
*  -  namely, as a single vector indicating the velocity, rather than as `dim` scalar properties. The rest is then the same as above:
* 

* 
* [1.x.134]
* 
*   [1.x.135]  [1.x.136]
* 

* 
*  The last member function of the principal class of this program is then the driver. At the top, it refines the mesh a number of times by solving the problem (with not particles yet created) on a sequence of finer and finer meshes.
* 

* 
* [1.x.137]
* 
*  do a few refinement cycles up front
* 

* 
* [1.x.138]
* 
*  Now do the loop over time. The sequence of steps follows closely the outline of the algorithm discussed in the introduction. As discussed in great detail in the documentation of the DiscreteTime class, while we move the field and particle information forward by one time step, the time stored in the `time` variable is not consistent with where (some of) these quantities are (in the diction of DiscreteTime, this is the "update stage"). The call to `time.advance_time()` makes everything consistent again by setting the `time` variable to the time at which the field and particles already are, and once we are in this "consistent stage", we can generate graphical output and write information about the current state of the simulation to screen.
* 

* 
* [1.x.139]
* 
*   [1.x.140]  [1.x.141]
* 

* 
*  The final function of the program is then again the `main()` function. It is unchanged in all tutorial programs since  [2.x.141]  and so there is nothing new to discuss:
* 

* 
* [1.x.142]
* [1.x.143][1.x.144]
* 

* When this program is run, it produces output that looks as follows:```Timestep 1  Field degrees of freedom:                                 4989  Total number of particles in simulation:  20  Number of particles lost this time step:  0
*   Now at t=2.12647e-07, dt=2.12647e-07.
* Timestep 2  Field degrees of freedom:                 4989  Total number of particles in simulation:  24  Number of particles lost this time step:  0
*   Now at t=4.14362e-07, dt=2.01715e-07.
* Timestep 3  Field degrees of freedom:                 4989  Total number of particles in simulation:  28  Number of particles lost this time step:  0
*   Now at t=5.96019e-07, dt=1.81657e-07.
* Timestep 4  Field degrees of freedom:                 4989  Total number of particles in simulation:  32  Number of particles lost this time step:  0
*   Now at t=7.42634e-07, dt=1.46614e-07.
* 

* ...
* 

*   Timestep 1000  Field degrees of freedom:                 4989  Total number of particles in simulation:  44  Number of particles lost this time step:  6  Fraction of particles lost through anode: 0.0601266
*   Now at t=4.93276e-05, dt=4.87463e-08.
* Timestep 1001  Field degrees of freedom:                 4989  Total number of particles in simulation:  44  Number of particles lost this time step:  0  Fraction of particles lost through anode: 0.0601266
*   Now at t=4.93759e-05, dt=4.82873e-08.
* 

* ...
* 

* Timestep 2091  Field degrees of freedom:                 4989  Total number of particles in simulation:  44  Number of particles lost this time step:  0  Fraction of particles lost through anode: 0.0503338
*   Now at t=9.99237e-05, dt=4.26254e-08.
* Timestep 2092  Field degrees of freedom:                 4989  Total number of particles in simulation:  44  Number of particles lost this time step:  0  Fraction of particles lost through anode: 0.0503338
*   Now at t=9.99661e-05, dt=4.24442e-08.
* Timestep 2093  Field degrees of freedom:                 4989  Total number of particles in simulation:  44  Number of particles lost this time step:  2  Fraction of particles lost through anode: 0.050308
*   Now at t=0.0001, dt=3.38577e-08.```
* Picking a random few time steps, we can visualize the solution in theform of streamlines for the electric field and dots for the electrons: [2.x.142] 
* That said, a more appropriate way to visualize the results of thisprogram are by creating a video that shows how these electrons move, and howthe electric field changes in response to their motion:
* [1.x.145]
* 
* What you can see here is how the "focus element" of the boundary with its negativevoltage repels the electrons and makes sure that they do not just fly awayperpendicular from the cathode (as they do in the initial part of theirtrajectories). It also shows how the electric field linesmove around over time, in response to the charges flying by
* 
*  -  in other words,the feedback the particles have on the electric field that itself drives themotion of the electrons.
* The movie suggests that electrons move in "bunches" or "bursts". One element ofthis appearance is an artifact of how the movie was created: Every frame of themovie corresponds to one time step, but the time step length varies. More specifically,the fastest particle moving through the smallest cell determines the length of thetime step (see the discussion in the introduction), and consequently time stepsare small whenever a (fast) particle moves through the small cells at the rightedge of the domain; time steps are longer again once the particle has leftthe domain. This slowing-accelerating effect can easily be visualized by plottingthe time step length shown in the screen output.
* The second part of this is real, however: The simulation creates a large groupof particles in the beginning, and fewer after about the 300th time step. Thisis probably because of the negative charge of the particles in the simulation:They reduce the magnitude of the electric field at the (also negatively chargedelectrode) and consequently reduce the number of points on the cathode at whichthe magnitude exceeds the threshold necessary to draw an electron out of theelectrode.
* 

* [1.x.146][1.x.147][1.x.148]
* 

* [1.x.149][1.x.150]
* 

* The `assemble_system()`, `move_particles()`, and `update_timestep_size()`functions all call  [2.x.143]  and [2.x.144]  that query informationabout the particles located on the current cell. While this is convenient,it's also inefficient. To understand why this is so, one needs to knowhow particles are stored in  [2.x.145]  namely, in adata structure in which particles are ordered in some kind of linearfashion sorted by the cell they are on. Consequently, in order to findthe particles associated with a given cell, these functions need tosearch for the first (and possibly last) particle on a given cell
* 
*  - an effort that costs  [2.x.146]  operations where  [2.x.147]  is thenumber of particles. But this is repeated on every cell; assuming thatfor large computations, the number of cells and particles are roughlyproportional, the accumulated cost of these function calls is then [2.x.148]  and consequently larger than the  [2.x.149] cost that we should shoot for with all parts of a program.
* We can make this cheaper, though. First, instead of calling [2.x.150]  we might first call [2.x.151]  and then compute thenumber of particles on a cell by just computing the distance of the lastto the first particle on the current cell:
* [1.x.151]
* The first of these calls is of course still  [2.x.152] ,but at least the second call only takes a compute time proportional tothe number of particles on the current cell and so, when accumulatedover all cells, has a cost of  [2.x.153] .
* But we can even get rid of the first of these calls with some proper algorithmdesign. That's because particles are ordered in the same way as cells, and sowe can just walk them as we move along on the cells. The following outlineof an algorithm does this:
* [1.x.152]
* 
* In this code, we touch every cell exactly once and we never have to searchthe big data structure for the first or last particle on each cell. As aconsequence, the algorithm costs a total of  [2.x.154]  for a completesweep of all particles and all cells.
* It would not be very difficult to implement this scheme for all three of thefunctions in this program that have this issue.
* 

* [1.x.153][1.x.154]
* 

* The program already computes the fraction of the electrons that leave thedomain through the hole in the anode. But there are other quantities one might beinterested in. For example, the average velocity of these particles. It wouldnot be very difficult to obtain each particle's velocity from its properties,in the same way as we do in the `move_particles()` function, and computestatistics from it.
* 

* [1.x.155][1.x.156]
* 

* As discussed above, there is a varying time difference between different framesof the video because we create output for every time step. A better way tocreate movies would be to generate a new output file in fixed time intervals,regardless of how many time steps lie between each such point.
* 

* [1.x.157][1.x.158]
* 

* The problem we are considering in this program is a coupled, multiphysicsproblem. But the way we solve it is by first computing the (electric) potentialfield and then update the particle locations. This is what is called an"operator-splitting method", a concept we will investigate in more detailin  [2.x.155] .
* While it is awkward to think of a way to solve this problem that does not involvesplitting the problem into a PDE piece and a particles piece, one
*can* (and probably should!) think of a better way to update the particlelocations. Specifically, the equations we use to update the particle locationare
* [1.x.159]
* This corresponds to a simple forward-Euler time discretization
* 
*  -  a method offirst order accuracy in the time step size  [2.x.156]  that we know we shouldavoid because we can do better. Rather, one might want to consider a scheme suchas the[leapfrog scheme](https://en.wikipedia.org/wiki/Leapfrog_integration)or more generally[symplectic integrators](https://en.wikipedia.org/wiki/Symplectic_integrator)such as the[Verlet scheme](https://en.wikipedia.org/wiki/Verlet_integration).
* 

* [1.x.160][1.x.161]
* 

* In release mode, the program runs in about 3.5 minutes on one of the author'slaptops at the time of writing this. That's acceptable. But what if we wantedto make the simulation three-dimensional? If we wanted to not use a maximumof around 100 particles at any given time (as happens with the parametersused here) but 100,000? If we needed a substantially finer mesh?
* In those cases, one would want to run the program not just on a single processor,but in fact on as many as one has available. This requires parallelizationboth the PDE solution as well as over particles. In practice, while thereare substantial challenges to making this efficient and scale well, thesechallenges are all addressed in deal.II itself. For example,  [2.x.157]  showshow to parallelize the finite element part, and  [2.x.158]  shows how one canthen also parallelize the particles part.
* 

* [1.x.162][1.x.163] [2.x.159] 
* [0.x.1]