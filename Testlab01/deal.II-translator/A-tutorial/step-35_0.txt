[0.x.0]*
 [2.x.0] 
* This tutorial depends on  [2.x.1] .
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19][1.x.20][1.x.21][1.x.22][1.x.23][1.x.24][1.x.25][1.x.26][1.x.27][1.x.28]
*  [2.x.2] 
* [1.x.29]
* [1.x.30][1.x.31][1.x.32]
* 

* [1.x.33][1.x.34][1.x.35]
* The purpose of this program is to show how to effectively solve the incompressible time-dependentNavier-Stokes equations. These equations describe the flow of a viscous incompressible fluid and read
* [1.x.36]
* where  [2.x.3]  represents the velocity of the flow and  [2.x.4]  the pressure. This system of equations is supplemented bythe initial condition[1.x.37]with  [2.x.5]  sufficiently smooth and solenoidal, and suitable boundary conditions. For instance, an admissible boundarycondition, is[1.x.38]It is possible to prescribe other boundary conditions as well. In the test case that we solve here the boundaryis partitioned into two disjoint subsets  [2.x.6]  and we have[1.x.39]and[1.x.40]where  [2.x.7]  is the outer unit normal. The boundary conditions on  [2.x.8]  are oftenused to model outflow conditions.
* In previous tutorial programs (see for instance  [2.x.9]  and [2.x.10] ) we have seenhow to solve the time-independent Stokes equations using a Schur complement approach. For thetime-dependent case, after time discretization, we would arrive at a system like
* [1.x.41]
* where  [2.x.11]  is the time-step. Although the structure of this system is similar to the Stokes system and thusit could be solved using a Schur complement approach, it turns out that the condition number of theSchur complement is proportional to  [2.x.12] . This makes the system verydifficult to solve, and means that for the Navier-Stokes equations, this isnot a useful avenue to the solution.
* [1.x.42][1.x.43][1.x.44]
* 

* Rather, we need to come up with a different approach to solve the time-dependent Navier-Stokesequations. The difficulty in their solution comes from the fact that the velocity and the pressure are coupledthrough the constraint[1.x.45]for which the pressure is the Lagrange multiplier.Projection methods aim at decoupling this constraint from the diffusion (Laplace) operator.
* Let us shortly describe how the projection methods look like in a semi-discrete setting. The objective is toobtain a sequence of velocities  [2.x.13]  and pressures  [2.x.14] . We willalso obtain a sequence  [2.x.15]  of auxiliary variables.Suppose that from the initial conditions, and an application of a first order method we have found [2.x.16]  and  [2.x.17] . Then the projection method consists of the following steps: [2.x.18]    [2.x.19]  [1.x.46]: Extrapolation. Define:  [1.x.47]   [2.x.20]  [1.x.48]: Diffusion step. We find  [2.x.21]  that solves the single  linear equation  [1.x.49]
*    [2.x.22]  [1.x.50]: Projection. Find  [2.x.23]  that solves  [1.x.51]   [2.x.24]  [1.x.52]: Pressure correction. Here we have two options:     [2.x.25]        [2.x.26]  [1.x.53]. The pressure is updated by:      [1.x.54]       [2.x.27]  [1.x.55]. In this case      [1.x.56]     [2.x.28]  [2.x.29] 
* Without going into details, let us remark a few things about the projection methods that we have just described: [2.x.30]    [2.x.31]  The advection term  [2.x.32]  is replaced by its [1.x.57]  [1.x.58]  This is consistent with the continuous equation (because  [2.x.33] ,  though this is not true pointwise for the discrete solution) and it is needed to  guarantee unconditional stability of the  time-stepping scheme. Moreover, to linearize the term we use the second order extrapolation  [2.x.34]  of   [2.x.35] .   [2.x.36]  The projection step is a realization of the Helmholtz decomposition  [1.x.59]  where  [1.x.60]  and  [1.x.61]  Indeed, if we use this decomposition on  [2.x.37]  we obtain  [1.x.62]  with  [2.x.38] . Taking the divergence of this equation we arrive at the projection equation.   [2.x.39]  The more accurate of the two variants outlined above is the rotational  one. However, the program below implements both variants. Moreover, in the author's experience,  the standard form is the one that should be used if, for instance, the viscosity  [2.x.40]  is variable. [2.x.41] 
* 

*  [2.x.42] The standard incremental scheme and the rotational incremental scheme were first considered by van Kan in [2.x.43]    [2.x.44]  J. van Kan, "A second-order accurate pressure-correction scheme for viscous incompressible flow",       SIAM Journal on Scientific and Statistical Computing, vol. 7, no. 3, pp. 870–891, 1986 [2.x.45] and is analyzed by Guermond in [2.x.46]    [2.x.47]  J.-L. Guermond, "Un résultat de convergence d’ordre deux en temps pour                        l’approximation des équations de Navier–Stokes par une technique de projection incrémentale",       ESAIM: Mathematical Modelling and Numerical Analysis, vol. 33, no. 1, pp. 169–189, 1999 [2.x.48] for the case  [2.x.49] .It turns out that this technique suffers from unphysical boundary conditions for the kinematic pressure thatlead to reduced rates of convergence. To prevent this, Timmermans et al. proposed in [2.x.50]    [2.x.51]  L. Timmermans, P. Minev, and F. Van De Vosse,       "An approximate projection scheme for incompressible flow using spectral elements",       International Journal for Numerical Methods in Fluids, vol. 22, no. 7, pp. 673–688, 1996 [2.x.52] the rotational pressure-correction projection method that uses a divergence correction for the kinematic pressure.A thorough analysis for scheme has first been performed in [2.x.53]    [2.x.54]  J.-L. Guermond and J. Shen, "On the error estimates for the rotational pressure-correction projection methods",       Mathematics of Computation, vol. 73, no. 248, pp. 1719–1737, 2004 [2.x.55] for the Stokes problem. [2.x.56] 
* [1.x.63][1.x.64][1.x.65]
* To obtain a fully discrete setting of the method we, as always, need a variational formulation. There is onesubtle issue here given the nature of the boundary conditions. When we multiply the equation by a suitable testfunction one of the term that arises is[1.x.66]If we, say, had Dirichlet boundary conditions on the whole boundary then after integration by parts we wouldobtain[1.x.67]One of the advantages of this formulation is that it fully decouples the components of the velocity. Moreover,they all share the same system matrix. This can be exploited in the program.
* However, given the nonstandard boundary conditions, to be able to take them into account we need to usethe following %identity[1.x.68]so that when we integrate by parts and take into account the boundary conditions we obtain[1.x.69]which is the form that we would have to use. Notice that this couples the components of the velocity.Moreover, to enforce the boundary condition on the pressure, we need to rewrite[1.x.70]where the boundary integral in  [2.x.57]  equals zero given the boundary conditions for the velocity,and the one in  [2.x.58]  given the boundary conditions for the pressure.
* In the simplified case where the boundary  [2.x.59]  is %parallel to a coordinate axis, which holds forthe testcase that we carry out below, it can actually be shown that[1.x.71]This issue is not very often addressed in the literature. For more information the reader can consult, forinstance, [2.x.60]    [2.x.61]  J.-L. GUERMOND, L. QUARTAPELLE, On the approximation of the unsteady Navier-Stokes equations by  finite element projection methods, Numer. Math., 80  (1998) 207-238   [2.x.62]  J.-L. GUERMOND, P. MINEV, J. SHEN, Error analysis of pressure-correction schemes for the  Navier-Stokes equations with open boundary conditions, SIAM J. Numer. Anal., 43  1 (2005) 239--258. [2.x.63] 
* 

* 
* [1.x.72][1.x.73][1.x.74]
* 

* Our implementation of the projection methods follows [1.x.75] the description given above. We must note,however, that as opposed to most other problems that have several solution components, we do not usevector-valued finite elements. Instead, we use separate finite elements the components of the velocityand the pressure, respectively, and use different  [2.x.64] 's for those as well. The mainreason for doing this is that, as we see from the description of the scheme, the  [2.x.65]  componentsof the velocity and the pressure are decoupled. As a consequence, the equations for all the velocity componentslook all the same, have the same system matrix, and can be solved in %parallel. Obviously, this approachhas also its disadvantages. For instance, we need to keep several  [2.x.66] s and iteratorssynchronized when assembling matrices and right hand sides; obtaining quantities that are inherent tovector-valued functions (e.g. divergences) becomes a little awkward, and others.
* [1.x.76][1.x.77][1.x.78]
* 

* The testcase that we use for this program consists of the flow around a square obstacle. The geometry isas follows:
*  [2.x.67] 
* with  [2.x.68] , making the geometry slightly non-symmetric.
* We impose no-slip boundary conditions on both the top and bottom walls and the obstacle. On the left side wehave the inflow boundary condition[1.x.79]with  [2.x.69] , i.e. the inflow boundary conditions correspond to Poiseuille flow for this configuration.Finally, on the right vertical wall we impose the condition that the vertical component of the velocityand the pressure should both be zero.The final time  [2.x.70] .
* 

*  [1.x.80] [1.x.81]
*   [1.x.82]  [1.x.83]
* 

* 
*  We start by including all the necessary deal.II header files and some C++ related ones. Each one of them has been discussed in previous tutorial programs, so we will not get into details here.
* 

* 
* [1.x.84]
* 
*  Finally this is as in all previous programs:
* 

* 
* [1.x.85]
* 
*   [1.x.86]  [1.x.87]   
*   Since our method has several parameters that can be fine-tuned we put them into an external file, so that they can be determined at run-time.   
*   This includes, in particular, the formulation of the equation for the auxiliary variable  [2.x.71] , for which we declare an  [2.x.72] . Next, we declare a class that is going to read and store all the parameters that our program needs to run.
* 

* 
* [1.x.88]
* 
*  In the constructor of this class we declare all the parameters. The details of how this works have been discussed elsewhere, for example in  [2.x.73] .
* 

* 
* [1.x.89]
* 
*   [1.x.90]  [1.x.91]
* 

* 
*  In the next namespace, we declare the initial and boundary conditions:
* 

* 
* [1.x.92]
* 
*  As we have chosen a completely decoupled formulation, we will not take advantage of deal.II's capabilities to handle vector valued problems. We do, however, want to use an interface for the equation data that is somehow dimension independent. To be able to do that, our functions should be able to know on which spatial component we are currently working, and we should be able to have a common interface to do that. The following class is an attempt in that direction.
* 

* 
* [1.x.93]
* 
*  With this class defined, we declare classes that describe the boundary conditions for velocity and pressure:
* 

* 
* [1.x.94]
* 
*   [1.x.95]  [1.x.96]
* 

* 
*  Now for the main class of the program. It implements the various versions of the projection method for Navier-Stokes equations. The names for all the methods and member variables should be self-explanatory, taking into account the implementation details given in the introduction.
* 

* 
* [1.x.97]
* 
*  The next few structures and functions are for doing various things in parallel. They follow the scheme laid out in  [2.x.74] , using the WorkStream class. As explained there, this requires us to declare two structures for each of the assemblers, a per-task data and a scratch data structure. These are then handed over to functions that assemble local contributions and that copy these local contributions to the global objects.     
*   One of the things that are specific to this program is that we don't just have a single DoFHandler object that represents both the velocities and the pressure, but we use individual DoFHandler objects for these two kinds of variables. We pay for this optimization when we want to assemble terms that involve both variables, such as the divergence of the velocity and the gradient of the pressure, times the respective test functions. When doing so, we can't just anymore use a single FEValues object, but rather we need two, and they need to be initialized with cell iterators that point to the same cell in the triangulation but different DoFHandlers.     
*   To do this in practice, we declare a "synchronous" iterator
* 
*  -  an object that internally consists of several (in our case two) iterators, and each time the synchronous iteration is moved forward one step, each of the iterators stored internally is moved forward one step as well, thereby always staying in sync. As it so happens, there is a deal.II class that facilitates this sort of thing. (What is important here is to know that two DoFHandler objects built on the same triangulation will walk over the cells of the triangulation in the same order.)
* 

* 
* [1.x.98]
* 
*  The same general layout also applies to the following classes and functions implementing the assembly of the advection term:
* 

* 
* [1.x.99]
* 
*  The final few functions implement the diffusion solve as well as postprocessing the output, including computing the curl of the velocity:
* 

* 
* [1.x.100]
* 
*   [1.x.101]  [1.x.102]
* 

* 
*  In the constructor, we just read all the data from the  [2.x.75]  object that is passed as an argument, verify that the data we read is reasonable and, finally, create the triangulation and load the initial data.
* 

* 
* [1.x.103]
* 
*   [1.x.104]  [1.x.105]
* 

* 
*  The method that creates the triangulation and refines it the needed number of times. After creating the triangulation, it creates the mesh dependent data, i.e. it distributes degrees of freedom and renumbers them, and initializes the matrices and vectors that we will use.
* 

* 
* [1.x.106]
* 
*   [1.x.107]  [1.x.108]
* 

* 
*  This method creates the constant matrices and loads the initial data
* 

* 
* [1.x.109]
* 
*   [1.x.110]  [1.x.111]
* 

* 
*  In this set of methods we initialize the sparsity patterns, the constraints (if any) and assemble the matrices that do not depend on the timestep  [2.x.76] . Note that for the Laplace and mass matrices, we can use functions in the library that do this. Because the expensive operations of this function
* 
*  -  creating the two matrices
* 
*  -  are entirely independent, we could in principle mark them as tasks that can be worked on in %parallel using the  [2.x.77]  functions. We won't do that here since these functions internally already are parallelized, and in particular because the current function is only called once per program run and so does not incur a cost in each time step. The necessary modifications would be quite straightforward, however.
* 

* 
* [1.x.112]
* 
*  The initialization of the matrices that act on the pressure space is similar to the ones that act on the velocity space.
* 

* 
* [1.x.113]
* 
*  For the gradient operator, we start by initializing the sparsity pattern and compressing it. It is important to notice here that the gradient operator acts from the pressure space into the velocity space, so we have to deal with two different finite element spaces. To keep the loops synchronized, we use the alias that we have defined before, namely  [2.x.78] .
* 

* 
* [1.x.114]
* 
*   [1.x.115]  [1.x.116]
* 

* 
*  This is the time marching function, which starting at  [2.x.79]  advances in time using the projection method with time step  [2.x.80]  until  [2.x.81] .   
*   Its second parameter,  [2.x.82]  indicates whether the function should output information what it is doing at any given moment: for example, it will say whether we are working on the diffusion, projection substep; updating preconditioners etc. Rather than implementing this output using code like  [2.x.83]  we use the ConditionalOStream class to do that for us. That class takes an output stream and a condition that indicates whether the things you pass to it should be passed through to the given output stream, or should just be ignored. This way, above code simply becomes  [2.x.84]  and does the right thing in either case.
* 

* 
* [1.x.119]
* 
*   [1.x.120]  [1.x.121]
* 

* 
*  The implementation of a diffusion step. Note that the expensive operation is the diffusion solve at the end of the function, which we have to do once for each velocity component. To accelerate things a bit, we allow to do this in %parallel, using the  [2.x.85]  function which makes sure that the  [2.x.86]  solves are all taken care of and are scheduled to available processors: if your machine has more than one processor core and no other parts of this program are using resources currently, then the diffusion solves will run in %parallel. On the other hand, if your system has only one processor core then running things in %parallel would be inefficient (since it leads, for example, to cache congestion) and things will be executed sequentially.
* 

* 
* [1.x.122]
* 
*   [1.x.123]  [1.x.124]
* 

* 
*  The following few functions deal with assembling the advection terms, which is the part of the system matrix for the diffusion step that changes at every time step. As mentioned above, we will run the assembly loop over all cells in %parallel, using the WorkStream class and other facilities as described in the documentation module on  [2.x.87] .
* 

* 
* [1.x.125]
* 
*   [1.x.126]  [1.x.127]
* 

* 
*  This implements the projection step:
* 

* 
* [1.x.128]
* 
*   [1.x.129]  [1.x.130]
* 

* 
*  This is the pressure update step of the projection method. It implements the standard formulation of the method, that is [1.x.131] or the rotational form, which is [1.x.132]
* 

* 
* [1.x.133]
* 
*   [1.x.134]  [1.x.135]
* 

* 
*  This method plots the current solution. The main difficulty is that we want to create a single output file that contains the data for all velocity components, the pressure, and also the vorticity of the flow. On the other hand, velocities and the pressure live on separate DoFHandler objects, and so can't be written to the same file using a single DataOut object. As a consequence, we have to work a bit harder to get the various pieces of data into a single DoFHandler object, and then use that to drive graphical output.   
*   We will not elaborate on this process here, but rather refer to  [2.x.88] , where a similar procedure is used (and is documented) to create a joint DoFHandler object for all variables.   
*   Let us also note that we here compute the vorticity as a scalar quantity in a separate function, using the  [2.x.89]  projection of the quantity  [2.x.90]  onto the finite element space used for the components of the velocity. In principle, however, we could also have computed as a pointwise quantity from the velocity, and do so through the DataPostprocessor mechanism discussed in  [2.x.91]  and  [2.x.92] .
* 

* 
* [1.x.136]
* 
*  Following is the helper function that computes the vorticity by projecting the term  [2.x.93]  onto the finite element space used for the components of the velocity. The function is only called whenever we generate graphical output, so not very often, and as a consequence we didn't bother parallelizing it using the WorkStream concept as we do for the other assembly functions. That should not be overly complicated, however, if needed. Moreover, the implementation that we have here only works for 2d, so we bail if that is not the case.
* 

* 
* [1.x.137]
* 
*   [1.x.138]  [1.x.139]
* 

* 
*  The main function looks very much like in all the other tutorial programs, so there is little to comment on here:
* 

* 
* [1.x.140]
* [1.x.141][1.x.142][1.x.143]
* 

* [1.x.144][1.x.145][1.x.146]
* 

* We run the code with the following  [2.x.94] , which can be found in thesame directory as the source:
* [1.x.147]
* 
* Since the  [2.x.95] ,we do not get any kind of output besides the number of the time stepthe program is currently working on.If we were to set it to  [2.x.96]  we would get information on what the program is doing andhow many steps each iterative process had to make to converge, etc.
* Let us plot the obtained results for  [2.x.97]  (i.e. time steps200, 1000, 2400, 4000, and 5000), where in the left column we show thevorticity and in the right the velocity field:
*  [2.x.98] 
* The images show nicely the development and extension of a vortex chainbehind the obstacles, with the sign of the vorticity indicatingwhether this is a left or right turning vortex.
* 

* [1.x.148][1.x.149][1.x.150]
* 

* We can change the Reynolds number,  [2.x.99] , in the parameter file to avalue of  [2.x.100] . Doing so, and reducing the time step somewhat as well,yields the following images at times  [2.x.101] :
*  [2.x.102] 
* For this larger Reynolds number, we observe unphysical oscillations, especiallyfor the vorticity. The discretization scheme has now difficulties in correctlyresolving the flow, which should still be laminar and well-organized.These phenomena are typical of discretization schemes that lack robustnessin under-resolved scenarios, where under-resolved means that the Reynoldsnumber computed with the mesh size instead of the physical dimensions ofthe geometry is large. We look at a zoom at the region behind the obstacle, andthe mesh size we have there:
* 

*  [2.x.103] 
* We can easily test our hypothesis by re-running the simulation with one moremesh refinement set in the parameter file:
*  [2.x.104] 
* Indeed, the vorticity field now looks much smoother. While we can expect thatfurther refining the mesh will suppress the remaining oscillations as well,one should take measures to obtain a robust scheme in the limit of coarseresolutions, as described below.
* 

* [1.x.151][1.x.152][1.x.153]
* 

* This program can be extended in the following directions: [2.x.105]    [2.x.106]  Adaptive mesh refinement: As we have seen, we computed everything on a single fixed mesh.  Using adaptive mesh refinement can lead to increased accuracy while not significantly increasing the  computational time.
*    [2.x.107]  Adaptive time-stepping: Although there apparently is currently no theory about  projection methods with variable time step,  practice shows that they perform very well.
*    [2.x.108]  High Reynolds %numbers: As we can see from the results, increasing the Reynolds number changes significantly  the behavior of the discretization scheme. Using well-known stabilization techniques we could be able to  compute the flow in this, or many other problems, when the Reynolds number is very large and where computational  costs demand spatial resolutions for which the flow is only marginally resolved, especially for 3D turbulent  flows.
*    [2.x.109]  Variable density incompressible flows: There are projection-like methods for the case of incompressible  flows with variable density. Such flows play a role if fluids of different  density mix, for example fresh water and salt water, or alcohol and water.
*    [2.x.110]  Compressible Navier-Stokes equations: These equations are relevant for  cases where  velocities are high enough so that the fluid becomes compressible, but not  fast enough that we get into a regime where viscosity becomes negligible  and the Navier-Stokes equations need to be replaced by the hyperbolic Euler  equations of gas dynamics. Compressibility starts to become a factor if the  velocity becomes greater than about one third of the speed of sound, so it  is not a factor for almost all terrestrial vehicles. On the other hand,  commercial jetliners fly at about 85 per cent of the speed of sound, and  flow over the wings becomes significantly supersonic, a regime in which the  compressible Navier-Stokes equations are not applicable any more  either. There are significant applications for the range in between,  however, such as for small aircraft or the fast trains in many European and  East Asian countries. [2.x.111] 
* 

* [1.x.154][1.x.155] [2.x.112] 
* [0.x.1]