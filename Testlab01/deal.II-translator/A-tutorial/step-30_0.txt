[0.x.0]*
 [2.x.0] 
* This tutorial depends on  [2.x.1] .
* [1.x.0][1.x.1][1.x.2][1.x.3][1.x.4][1.x.5][1.x.6][1.x.7][1.x.8][1.x.9][1.x.10][1.x.11][1.x.12][1.x.13][1.x.14][1.x.15][1.x.16][1.x.17][1.x.18][1.x.19]
* [1.x.20][1.x.21][1.x.22]
* 

* 
* [1.x.23][1.x.24]
* 

* This example is devoted to  [2.x.2] anisotropic refinement [2.x.3] , which extends topossibilities of local refinement. In most parts, this is a modification of the [2.x.4]  tutorial program, we use the same DG method for a linear transportequation. This program will cover the following topics: [2.x.5]    [2.x.6]   [2.x.7] Anisotropic refinement [2.x.8] : What is the meaning of anisotropic refinement?   [2.x.9]   [2.x.10] Implementation [2.x.11] : Necessary modifications of code to work with anisotropically refined meshes.   [2.x.12]   [2.x.13] Jump indicator [2.x.14] : A simple indicator for anisotropic refinement in  the context of DG methods. [2.x.15] The discretization itself will not be discussed, and neither willimplementation techniques not specific to anisotropic refinement usedhere. Please refer to  [2.x.16]  for this.
* Please note, at the moment of writing this tutorial program, anisotropicrefinement is only fully implemented for discontinuous Galerkin FiniteElements. This may later change (or may already have).
* 

* 
*  [2.x.17]  While this program is a modification of  [2.x.18] , it is an adaptation ofa version of  [2.x.19]  written early on in the history of deal.II when theMeshWorker framework wasn't available yet. Consequently, it bears littleresemblance to the  [2.x.20]  as it exists now, apart from the fact that itsolves the same equation with the same discretization.
* 

* 
* [1.x.25][1.x.26]
* 

* All the adaptive processes in the preceding tutorial programs were based on [2.x.21] isotropic [2.x.22]  refinement of cells, which cuts all edges in half and formsnew cells of these split edges (plus some additional edges, faces and vertices,of course). In deal.II,  [2.x.23] anisotropic refinement [2.x.24]  refers to the process ofsplitting only part of the edges while leaving the others unchanged. Consider asimple square cell, for example:
* [1.x.27]
* After the usual refinement it will consist of four children and look like this:
* [1.x.28]
* The new anisotropic refinement may take two forms: either we can split the edgeswhich are parallel to the horizontal x-axis, resulting in these two child cells:
* [1.x.29]
* or we can split the two edges which run along the y-axis, resulting again in twochildren, which look that way, however:
* [1.x.30]
* All refinement cases of cells are described by an enumeration [2.x.25]  and the above anisotropiccases are called  [2.x.26]  and  [2.x.27]  for obvious reasons. Theisotropic refinement case is called  [2.x.28]  in 2D and can berequested from the RefinementCase class via [2.x.29] 
* In 3D, there is a third axis which can be split, the z-axis, and thus wehave an additional refinement case  [2.x.30]  here. Isotropic refinement will nowrefine a cell along the x-, y- and z-axes and thus be referred to as  [2.x.31] cut_xyz. Additional cases  [2.x.32]   [2.x.33]  and  [2.x.34]  exist, which refinea cell along two of the axes, but not along the third one. Given a hex cell withx-axis running to the right, y-axis 'into the page' and z-axis to the top,
* [1.x.31]
* we have the isotropic refinement case,
* [1.x.32]
* three anisotropic cases which refine only one axis:
* [1.x.33]
* and three cases which refine two of the three axes:
* [1.x.34]
* For 1D problems, anisotropic refinement can make no difference, as there is onlyone coordinate direction for a cell, so it is not possible to split itin any other way than isotropically.
* [1.x.35][1.x.36]
* Adaptive local refinement is used to obtain fine meshes which are well adaptedto solving the problem at hand efficiently. In short, the size of cells whichproduce a large error is reduced to obtain a better approximation of thesolution to the problem at hand. However, a lot of problems contain anisotropicfeatures. Prominent examples are shocks or boundary layers in compressibleviscous flows. An efficient mesh approximates these features with cells of higher aspect ratiowhich are oriented according to the mentioned features. Using only isotropicrefinement, the aspect ratios of the original mesh cells are preserved, as theyare inherited by the children of a cell. Thus, starting from an isotropic mesh, aboundary layer will be refined in order to catch the rapid variation of the flowfield in the wall normal direction, thus leading to cells with very small edgelengths both in normal and tangential direction. Usually, much higher edgelengths in tangential direction and thus significantly less cells could be usedwithout a significant loss in approximation accuracy. An anisotropicrefinement process can modify the aspect ratio from mother to child cells by afactor of two for each refinement step. In the course of several refinements,the aspect ratio of the fine cells can be optimized, saving a considerablenumber of cells and correspondingly degrees of freedom and thus computationalresources, memory as well as CPU time.
* [1.x.37][1.x.38]
* 

* Most of the time, when we do finite element computations, we only consider onecell at a time, for example to calculate cell contributions to the globalmatrix, or to interpolate boundary values. However, sometimes we have to lookat how cells are related in our algorithms. Relationships between cells comein two forms: neighborship and mother-child relationship. For the case ofisotropic refinement, deal.II uses certain conventions (invariants) for cellrelationships that are always maintained. For example, a refined cell alwayshas exactly  [2.x.35]  children. And (except for the 1d case), two neighboringcells may differ by at most one refinement level: they are equally oftenrefined or one of them is exactly once more refined, leaving exactly onehanging node on the common face. Almost all of the time these invariants areonly of concern in the internal implementation of the library. However, thereare cases where knowledge of them is also relevant to an application program.
* In the current context, it is worth noting that the kind of mesh refinementaffects some of the most fundamental assumptions. Consequently, some of theusual code found in application programs will need modifications to exploitthe features of meshes which were created using anisotropicrefinement. For those interested in how deal.II evolved, it may be ofinterest that the loosening of such invariants required someincompatible changes. For example, the library used to have a member [2.x.36]  that specified how many childrena cell has once it is refined. For isotropic refinement, this numberis equal to  [2.x.37] , as mentioned above. However, for anisotropic refinement, this numberdoes not exist, as is can be either two or four in 2D and two, four or eight in3D, and the member  [2.x.38]  hasconsequently been removed. It has now been replaced by [2.x.39]  which specifies the[1.x.39] number of children a cell can have. How many children arefined cell has was previously available as static information, butnow it depends on the actual refinement state of a cell and can beretrieved using  [2.x.40] a call that works equally well for both isotropic and anisotropicrefinement. A very similar situation can be found forfaces and their subfaces: the pertinent information can be queried using [2.x.41]  or  [2.x.42] ,depending on the context.
* Another important aspect, and the most important one in this tutorial, isthe treatment of neighbor-relations when assembling jump terms on thefaces between cells. Looking at the documentation of theassemble_system functions in  [2.x.43]  we notice, that we need to decide if aneighboring cell is coarser, finer or on the same (refinement) level as ourcurrent cell. These decisions do not work in the same way for anisotropicrefinement as the information given by the  [2.x.44] level [2.x.45]  of a cell is notenough to completely characterize anisotropic cells; for example, arethe terminal children of a two-dimensionalcell that is first cut in  [2.x.46] -direction and whose children are thencut in  [2.x.47] -direction on level 2, or are they on level 1 as they wouldbe if the cell would have been refined once isotropically, resultingin the same set of finest cells?
* After anisotropic refinement, a coarser neighbor is not necessarilyexactly one level below ours, but can pretty much have any levelrelative to the current one; in fact, it can even be on a higherlevel even though it is coarser. Thus the decisionshave to be made on a different basis, whereas the intention of thedecisions stays the same.
* In the following, we will discuss the cases that can happen when wewant to compute contributions to the matrix (or right hand side) ofthe form[1.x.40]or similar; remember that we integrate terms like this using theFEFaceValues and FESubfaceValues classes. We will also show how towrite code that works for both isotropic and anisotropic refinement:
*  [2.x.48] 
*    [2.x.49]   [2.x.50] Finer neighbor [2.x.51] : If we are on an active cell and want  to integrate over a face  [2.x.52] , the first  possibility is that the neighbor behind this face is more refined,  i.e. has children occupying only part of the  common face. In this case, the face  under consideration has to be a refined one, which can determine by  asking  [2.x.53] . If this is true, we need to  loop over  all subfaces and get the neighbors' child behind this subface, so that we can  reinit an FEFaceValues object with the neighbor and an FESubfaceValues object  with our cell and the respective subface.
*   For isotropic refinement, this kind is reasonably simple because we  know that an invariant of the isotropically refined adaptive meshes  in deal.II is that neighbors can only differ by exactly one  refinement level. However, this isn't quite true any more for  anisotropically refined meshes, in particular in 3d; there,  the active cell we are interested on the other side of  [2.x.54]  might not  actually be a child of our  neighbor, but perhaps a grandchild or even a farther offspring. Fortunately,  this complexity is hidden in the internals of the library. All we need to do  is call the  [2.x.55]   function. Still, in 3D there are two cases which need special consideration:   [2.x.56]      [2.x.57]  If the neighbor is refined more than once anisotropically, it might be  that here are not two or four but actually three subfaces to  consider. Imagine  the following refinement process of the (two-dimensional) face of  the (three-dimensional) neighbor cell we are considering: first the  face is refined along x, later on only the left subface is refined along y.
* [1.x.41]
*      Here the number of subfaces is three. It is important to note the subtle  differences between, for a face,  [2.x.58]  and   [2.x.59]  The first function returns the number of  immediate children, which would be two for the above example, whereas the  second returns the number of active offspring (i.e., including children,  grandchildren, and further descendants), which is the correct three in  the example above. Using  [2.x.60]  works for  isotropic and anisotropic as well as 2D and 3D cases, so it should always be  used. It should be noted that if any of the cells behind the two  small subfaces on the left side of the rightmost image is further  refined, then the current cell (i.e. the side from which we are  viewing this common face) is going to be refined as well: this is so  because otherwise the invariant of having only one hanging node per  edge would be violated.
*      [2.x.61]  It might be, that the neighbor is coarser, but still has children which  are finer than our current cell. This situation can occur if two equally  coarse cells are refined, where one of the cells has two children at the face  under consideration and the other one four. The cells in the next graphic are  only separated from each other to show the individual refinement cases.
* [1.x.42]
* 
*   Here, the left two cells resulted from an anisotropic bisection of  the mother cell in  [2.x.62] -direction, whereas the right four cells  resulted from a simultaneous anisotropic refinement in both the  [2.x.63] -  and  [2.x.64] -directions.  The left cell marked with # has two finer neighbors marked with +, but the  actual neighbor of the left cell is the complete right mother cell, as the  two cells marked with + are finer and their direct mother is the one  large cell.   [2.x.65] 
*   However, fortunately,  [2.x.66]  takes care of  these situations by itself, if you loop over the correct number of subfaces,  in the above example this is two. The  [2.x.67]  function  takes care of this too, so that the resulting state is always correct. There  is one little caveat, however: For reiniting the neighbors FEFaceValues object  you need to know the index of the face that points toward the current  cell. Usually you assume that the neighbor you get directly is as coarse or as  fine as you, if it has children, thus this information can be obtained with   [2.x.68]  If the neighbor is coarser, however, you  would have to use the first value in  [2.x.69]   instead. In order to make this easy for you, there is   [2.x.70]  which does the correct thing for you and  returns the desired result.
*    [2.x.71]   [2.x.72] Neighbor is as fine as our cell [2.x.73] : After we ruled out all cases in  which there are finer children, we only need to decide, whether the neighbor  is coarser here. For this, there is the   [2.x.74]  function which returns a boolean. In  order to get the relevant case of a neighbor of the same coarseness we would  use  [2.x.75] . The code inside this  block can be left untouched. However, there is one thing to mention here: If  we want to use a rule, which cell should assemble certain terms on a given  face we might think of the rule presented in  [2.x.76] . We know that we have to  leave out the part about comparing our cell's level with that of the neighbor  and replace it with the test for a coarser neighbor presented above. However,  we also have to consider the possibility that neighboring cells of same  coarseness have the same index (on different levels). Thus we have to include  the case where the cells have the same index, and give an additional  condition, which of the cells should assemble the terms, e.g. we can choose  the cell with lower level. The details of this concept can be seen in the  implementation below.
*    [2.x.77]   [2.x.78] Coarser neighbor [2.x.79] : The remaining case is obvious: If there are no  refined neighbors and the neighbor is not as fine as the current cell, then it must  be coarser. Thus we can leave the old condition phrase, simply using   [2.x.80] . The  [2.x.81]   function takes care of all the complexity of anisotropic refinement combined  with possible non standard face orientation, flip and rotation on general 3D meshes.
*  [2.x.82] 
* [1.x.43][1.x.44]
* When a triangulation is refined, cells which were not flagged for refinement maybe refined nonetheless. This is due to additional smoothing algorithms which areeither necessary or requested explicitly. In particular, the restriction that therebe at most one hanging node on each edge frequently forces the refinement of additionalcells neighboring ones that are already finer and are flagged forfurther refinement.
* However, deal.II also implements a number of algorithms that make surethat resulting meshes are smoother than just the bare minimum, forexample ensuring that there are no isolated refined cells surroundedby non-refined ones, since the additional degrees of freedom on theseislands would almost all be constrained by hanging nodeconstraints. (See the documentation of the Triangulation class and its [2.x.83]  member for more information on meshsmoothing.)
* Most of the smoothing algorithms that were originally developed forthe isotropic case have been adapted to work in a very similarway for both anisotropic and isotropic refinement. There are twoalgorithms worth mentioning, however: [2.x.84]    [2.x.85]   [2.x.86] : In an isotropic environment,  this algorithm tries to ensure a good approximation quality by reducing the  difference in refinement level of cells meeting at a common vertex. However,  there is no clear corresponding concept for anisotropic refinement, thus this  algorithm may not be used in combination with anisotropic refinement. This  restriction is enforced by an assertion which throws an error as soon as the  algorithm is called on a triangulation which has been refined anisotropically.
*    [2.x.87]   [2.x.88] : If refinement is introduced to  limit the number of hanging nodes, the additional cells are often not needed  to improve the approximation quality. This is especially true for DG  methods. If you set the flag  [2.x.89]  the  smoothing algorithm tries to minimize the number of probably unneeded  additional cells by using anisotropic refinement for the smoothing. If you set  this smoothing flag you might get anisotropically refined cells, even if you  never set a single refinement flag to anisotropic refinement. Be aware that  you should only use this flag, if your code respects the possibility of  anisotropic meshes. Combined with a suitable anisotropic indicator this flag  can help save additional cells and thus effort. [2.x.90] 
* 

* [1.x.45][1.x.46]
* 

* Using the benefits of anisotropic refinement requires an indicator to catchanisotropic features of the solution and exploit them for the refinementprocess. Generally the anisotropic refinement process will consist of severalsteps: [2.x.91]    [2.x.92]  Calculate an error indicator.   [2.x.93]  Use the error indicator to flag cells for refinement, e.g. using a fixed  number or fraction of cells. Those cells will be flagged for isotropic  refinement automatically.   [2.x.94]  Evaluate a distinct anisotropic indicator only on the flagged cells.   [2.x.95]  Use the anisotropic indicator to set a new, anisotropic refinement flag  for cells where this is appropriate, leave the flags unchanged otherwise.   [2.x.96]  Call  [2.x.97]  to perform the  requested refinement, using the requested isotropic and anisotropic flags. [2.x.98] This approach is similar to the one we have used in  [2.x.99] for hp-refinement andhas the great advantage of flexibility: Any error indicator can beused in the anisotropic process, i.e. if you have quite involved a posteriorigoal-oriented error indicators available you can use them as easily as a simpleKelly error estimator. The anisotropic part of the refinement process is notinfluenced by this choice. Furthermore, simply leaving out the third and forthsteps leads to the same isotropic refinement you used to get before anyanisotropic changes in deal.II or your application program.As a last advantage, working onlyon cells flagged for refinement results in a faster evaluation of theanisotropic indicator, which can become noticeable on finer meshes with a lot ofcells if the indicator is quite involved.
* Here, we use a very simple approach which is only applicable to DGmethods. The general idea is quite simple: DG methods allow the discretesolution to jump over the faces of a cell, whereas it is smooth within eachcell. Of course, in the limit we expect that the jumps tend to zero aswe refine the mesh and approximate the true solution better and better.Thus, a large jumpacross a given face indicates that the cell should be refined (at least)orthogonally to that face, whereas a small jump does not lead to thisconclusion. It is possible, of course, that the exact solution is not smooth andthat it also features a jump. In that case, however, a large jump over one faceindicates, that this face is more or less parallel to the jump and in thevicinity of it, thus again we would expect a refinement orthogonal to the faceunder consideration to be effective.
* The proposed indicator calculates the average jump  [2.x.100] , i.e. the mean value ofthe absolute jump  [2.x.101]  of the discrete solution  [2.x.102]  over the two faces [2.x.103] ,  [2.x.104] ,  [2.x.105]  orthogonal to coordinate direction  [2.x.106]  on the unitcell.[1.x.47]If the average jump in one direction is larger than the average of thejumps in the other directions by acertain factor  [2.x.107] , i.e. if [2.x.108] , the cell is refined only along that particulardirection  [2.x.109] , otherwise the cell is refined isotropically.
* Such a criterion is easily generalized to systems of equations: theabsolute value of the jump would be replaced by an appropriate norm ofthe vector-valued jump.
* 

* 
* [1.x.48][1.x.49]
* 

* We solve the linear transport equation presented in  [2.x.110] . The domain isextended to cover  [2.x.111]  in 2D, where the flow field  [2.x.112]  describes acounterclockwise quarter circle around the origin in the right half of thedomain and is parallel to the x-axis in the left part of the domain. The inflowboundary is again located at  [2.x.113]  and along the positive part of the x-axis,and the boundary conditions are chosen as in  [2.x.114] .
* 

*  [1.x.50] [1.x.51]
*  The deal.II include files have already been covered in previous examples and will thus not be further commented on.
* 

* 
* [1.x.52]
* 
*  And this again is C++:
* 

* 
* [1.x.53]
* 
*  The last step is as in all previous programs:
* 

* 
* [1.x.54]
* 
*   [1.x.55]  [1.x.56]   
*   The classes describing equation data and the actual assembly of individual terms are almost entirely copied from  [2.x.115] . We will comment on differences.
* 

* 
* [1.x.57]
* 
*  The flow field is chosen to be a quarter circle with counterclockwise flow direction and with the origin as midpoint for the right half of the domain with positive  [2.x.116]  values, whereas the flow simply goes to the left in the left part of the domain at a velocity that matches the one coming in from the right. In the circular part the magnitude of the flow velocity is proportional to the distance from the origin. This is a difference to  [2.x.117] , where the magnitude was 1 everywhere. the new definition leads to a linear variation of  [2.x.118]  along each given face of a cell. On the other hand, the solution  [2.x.119]  is exactly the same as before.
* 

* 
* [1.x.58]
* 
*   [1.x.59]  [1.x.60]   
*   This declaration of this class is utterly unaffected by our current changes.
* 

* 
* [1.x.61]
* 
*  Likewise, the constructor of the class as well as the functions assembling the terms corresponding to cell interiors and boundary faces are unchanged from before. The function that assembles face terms between cells also did not change because all it does is operate on two objects of type FEFaceValuesBase (which is the base class of both FEFaceValues and FESubfaceValues). Where these objects come from, i.e. how they are initialized, is of no concern to this function: it simply assumes that the quadrature points on faces or subfaces represented by the two objects correspond to the same points in physical space.
* 

* 
* [1.x.62]
* 
*   [1.x.63]  [1.x.64]   
*   This declaration is much like that of  [2.x.120] . However, we introduce a new routine (set_anisotropic_flags) and modify another one (refine_grid).
* 

* 
* [1.x.65]
* 
*  Again we want to use DG elements of degree 1 (but this is only specified in the constructor). If you want to use a DG method of a different degree replace 1 in the constructor by the new degree.
* 

* 
* [1.x.66]
* 
*  This is new, the threshold value used in the evaluation of the anisotropic jump indicator explained in the introduction. Its value is set to 3.0 in the constructor, but it can easily be changed to a different value greater than 1.
* 

* 
* [1.x.67]
* 
*  This is a bool flag indicating whether anisotropic refinement shall be used or not. It is set by the constructor, which takes an argument of the same name.
* 

* 
* [1.x.68]
* 
*  Change here for DG methods of different degrees.
* 

* 
* [1.x.69]
* 
*  As beta is a linear function, we can choose the degree of the quadrature for which the resulting integration is correct. Thus, we choose to use  [2.x.121]  Gauss points, which enables us to integrate exactly polynomials of degree  [2.x.122] , enough for all the integrals we will perform in this program.
* 

* 
* [1.x.70]
* 
*   [1.x.71]  [1.x.72]   
*   We proceed with the  [2.x.123]  function that implements the DG discretization. This function does the same thing as the  [2.x.124]  function from  [2.x.125]  (but without MeshWorker).  The four cases considered for the neighbor-relations of a cell are the same as the isotropic case, namely a) cell is at the boundary, b) there are finer neighboring cells, c) the neighbor is neither coarser nor finer and d) the neighbor is coarser.  However, the way in which we decide upon which case we have are modified in the way described in the introduction.
* 

* 
* [1.x.73]
* 
*  Case (a): The face is at the boundary.
* 

* 
* [1.x.74]
* 
*  Case (b): This is an internal face and the neighbor is refined (which we can test by asking whether the face of the current cell has children). In this case, we will need to integrate over the "sub-faces", i.e., the children of the face of the current cell.                 
*   (There is a slightly confusing corner case: If we are in 1d
* 
*  -  where admittedly the current program and its demonstration of anisotropic refinement is not particularly relevant
* 
*  -  then the faces between cells are always the same: they are just vertices. In other words, in 1d, we do not want to treat faces between cells of different level differently. The condition `face->has_children()` we check here ensures this: in 1d, this function always returns `false`, and consequently in 1d we will not ever go into this `if` branch. But we will have to come back to this corner case below in case (c).)
* 

* 
* [1.x.75]
* 
*  We need to know, which of the neighbors faces points in the direction of our cell. Using the  [2.x.126]  neighbor_face_no function we get this information for both coarser and non-coarser neighbors.
* 

* 
* [1.x.76]
* 
*  Now we loop over all subfaces, i.e. the children and possibly grandchildren of the current face.
* 

* 
* [1.x.77]
* 
*  To get the cell behind the current subface we can use the  [2.x.127]  function. it takes care of all the complicated situations of anisotropic refinement and non-standard faces.
* 

* 
* [1.x.78]
* 
*  The remaining part of this case is unchanged.
* 

* 
* [1.x.79]
* 
*  Case (c). We get here if this is an internal face and if the neighbor is not further refined (or, as mentioned above, we are in 1d in which case we get here for every internal face). We then need to decide whether we want to integrate over the current face. If the neighbor is in fact coarser, then we ignore the face and instead handle it when we visit the neighboring cell and look at the current face (except in 1d, where as mentioned above this is not happening):
* 

* 
* [1.x.80]
* 
*  On the other hand, if the neighbor is more refined, then we have already handled the face in case (b) above (except in 1d). So for 2d and 3d, we just have to decide whether we want to handle a face between cells at the same level from the current side or from the neighboring side.  We do this by introducing a tie-breaker: We'll just take the cell with the smaller index (within the current refinement level). In 1d, we take either the coarser cell, or if they are on the same level, the one with the smaller index within that level. This leads to a complicated condition that, hopefully, makes sense given the description above:
* 

* 
* [1.x.81]
* 
*  Here we know, that the neighbor is not coarser so we can use the usual  [2.x.128]  function. However, we could also use the more general  [2.x.129]  function.
* 

* 
* [1.x.82]
* 
*  We do not need to consider a case (d), as those faces are treated 'from the other side within case (b).
* 

* 
* [1.x.83]
* 
*   [1.x.84]  [1.x.85]   
*   For this simple problem we use the simple Richardson iteration again. The solver is completely unaffected by our anisotropic changes.
* 

* 
* [1.x.86]
* 
*   [1.x.87]  [1.x.88]   
*   We refine the grid according to the same simple refinement criterion used in  [2.x.130] , namely an approximation to the gradient of the solution.
* 

* 
* [1.x.89]
* 
*  We approximate the gradient,
* 

* 
* [1.x.90]
* 
*  and scale it to obtain an error indicator.
* 

* 
* [1.x.91]
* 
*  Then we use this indicator to flag the 30 percent of the cells with highest error indicator to be refined.
* 

* 
* [1.x.92]
* 
*  Now the refinement flags are set for those cells with a large error indicator. If nothing is done to change this, those cells will be refined isotropically. If the  [2.x.131]  flag given to this function is set, we now call the set_anisotropic_flags() function, which uses the jump indicator to reset some of the refinement flags to anisotropic refinement.
* 

* 
* [1.x.93]
* 
*  Now execute the refinement considering anisotropic as well as isotropic refinement flags.
* 

* 
* [1.x.94]
* 
*  Once an error indicator has been evaluated and the cells with largest error are flagged for refinement we want to loop over the flagged cells again to decide whether they need isotropic refinement or whether anisotropic refinement is more appropriate. This is the anisotropic jump indicator explained in the introduction.
* 

* 
* [1.x.95]
* 
*  We want to evaluate the jump over faces of the flagged cells, so we need some objects to evaluate values of the solution on faces.
* 

* 
* [1.x.96]
* 
*  Now we need to loop over all active cells.
* 

* 
* [1.x.97]
* 
*  We only need to consider cells which are flagged for refinement.
* 

* 
* [1.x.98]
* 
*  The four cases of different neighbor relations seen in the assembly routines are repeated much in the same way here.
* 

* 
* [1.x.99]
* 
*  The neighbor is refined.  First we store the information, which of the neighbor's faces points in the direction of our current cell. This property is inherited to the children.
* 

* 
* [1.x.100]
* 
*  Now we loop over all subfaces,
* 

* 
* [1.x.101]
* 
*  get an iterator pointing to the cell behind the present subface...
* 

* 
* [1.x.102]
* 
*  ... and reinit the respective FEFaceValues and FESubFaceValues objects.
* 

* 
* [1.x.103]
* 
*  We obtain the function values
* 

* 
* [1.x.104]
* 
*  as well as the quadrature weights, multiplied by the Jacobian determinant.
* 

* 
* [1.x.105]
* 
*  Now we loop over all quadrature points
* 

* 
* [1.x.106]
* 
*  and integrate the absolute value of the jump of the solution, i.e. the absolute value of the difference between the function value seen from the current cell and the neighboring cell, respectively. We know, that the first two faces are orthogonal to the first coordinate direction on the unit cell, the second two faces are orthogonal to the second coordinate direction and so on, so we accumulate these values into vectors with  [2.x.132]  components.
* 

* 
* [1.x.107]
* 
*  We also sum up the scaled weights to obtain the measure of the face.
* 

* 
* [1.x.108]
* 
*  Our current cell and the neighbor have the same refinement along the face under consideration. Apart from that, we do much the same as with one of the subcells in the above case.
* 

* 
* [1.x.109]
* 
*  Now the neighbor is actually coarser. This case is new, in that it did not occur in the assembly routine. Here, we have to consider it, but this is not overly complicated. We simply use the  [2.x.133]  neighbor_of_coarser_neighbor function, which again takes care of anisotropic refinement and non-standard face orientation by itself.
* 

* 
* [1.x.110]
* 
*  Now we analyze the size of the mean jumps, which we get dividing the jumps by the measure of the respective faces.
* 

* 
* [1.x.111]
* 
*  Now we loop over the  [2.x.134]  coordinate directions of the unit cell and compare the average jump over the faces orthogonal to that direction with the average jumps over faces orthogonal to the remaining direction(s). If the first is larger than the latter by a given factor, we refine only along hat axis. Otherwise we leave the refinement flag unchanged, resulting in isotropic refinement.
* 

* 
* [1.x.112]
* 
*   [1.x.113]  [1.x.114]   
*   The remaining part of the program very much follows the scheme of previous tutorial programs. We output the mesh in VTU format (just as we did in  [2.x.135] , for example), and the visualization output in VTU format as we almost always do.
* 

* 
* [1.x.115]
* 
*  Create the rectangular domain.
* 

* 
* [1.x.116]
* 
*  Adjust the number of cells in different directions to obtain completely isotropic cells for the original mesh.
* 

* 
* [1.x.117]
* 
*  If you want to run the program in 3D, simply change the following line to  [2.x.136] .
* 

* 
* [1.x.118]
* 
*  First, we perform a run with isotropic refinement.
* 

* 
* [1.x.119]
* 
*  Now we do a second run, this time with anisotropic refinement.
* 

* 
* [1.x.120]
* [1.x.121][1.x.122]
* 

* 
* The output of this program consist of the console output, the SVGfiles containing the grids, and the solutions given in VTU format.
* [1.x.123]
* 
* This text output shows the reduction in the number of cells which results fromthe successive application of anisotropic refinement. After the last refinementstep the savings have accumulated so much that almost four times as many cellsand thus degrees of freedom are needed in the isotropic case. The time needed for assemblyscales with a similar factor.
* The first interesting part is of course to see how the meshes look like.On the left are the isotropically refined ones, on the right theanisotropic ones (colors indicate the refinement level of cells):
*  [2.x.137] 
* 

* The other interesting thing is, of course, to see the solution on thesetwo sequences of meshes. Here they are, on the refinement cycles 1 and 4,clearly showing that the solution is indeed composed of [1.x.124] piecewisepolynomials:
*  [2.x.138] 
* We see, that the solution on the anisotropically refined mesh is very similar tothe solution obtained on the isotropically refined mesh. Thus the anisotropicindicator seems to effectively select the appropriate cells for anisotropicrefinement.
* The pictures also explain why the mesh is refined as it is.In the whole left part of the domain refinement is only performed along the [2.x.139] -axis of cells. In the right part of the domain the refinement is dominated byisotropic refinement, as the anisotropic feature of the solution
* 
*  - the jump fromone to zero
* 
*  - is not well aligned with the mesh where the advection directiontakes a turn. However, at the bottom and closest (to the observer) parts of thequarter circle this jumps again becomes more and more alignedwith the mesh and the refinement algorithm reacts by creating anisotropic cellsof increasing aspect ratio.
* It might seem that the necessary alignment of anisotropic features and thecoarse mesh can decrease performance significantly for real worldproblems. That is not wrong in general: If one were, for example, to applyanisotropic refinement to problems in which shocks appear (e.g., theequations solved in  [2.x.140] ), then it many cases the shock is not alignedwith the mesh and anisotropic refinement will help little unless one alsointroduces techniques to move the mesh in alignment with the shocks.On the other hand, many steep features of solutions are due to boundary layers.In those cases, the mesh is already aligned with the anisotropic featuresbecause it is of course aligned with the boundary itself, and anisotropicrefinement will almost always increase the efficiency of computations onadapted grids for these cases.
* 

* [1.x.125][1.x.126] [2.x.141] 
* [0.x.1]