[0.x.0]*
     An enum to identify various types of cells and faces. The most general     type is what we typically compute in the FEValues context but for many     geometries we can save significant storage.        
*  [2.x.0]     
* [0.x.1]*
       The cell or face is Cartesian.      
* [0.x.2]*
       The cell or face can be described with an affine mapping.      
* [0.x.3]*
       The face is flat, i.e., the normal factor on a face is the same on       all quadrature points. This type is not assigned for cells.      
* [0.x.4]*
       There is no special information available for compressing the       representation of the object under consideration.      
* [0.x.5]*
     Definition of a structure that stores all cached data related to the     evaluated geometry from the mapping. In order to support hp-adaptivity     and compressed storage (in particular for Jacobians, JxW values, and     normals), storage length can be different for different rows. Thus, it     allows to jump at the data of individual rows similar to compressed row     storage in sparse matrices. We have two different start indices for     fields with different sizes. The first category of offsets are the     indices for Jacobians of the transformation from unit to real cell (we     store the inverse Jacobian), second derivatives, JxW values, and normal     vectors. We keep separate arrays for all these data structures because     a user code might access only some of them. In such a case, one array     will be gone through in a contiguous order with access to all entries,     which makes it easy for the processor to prefetch data. Having all data     in a single array would require some strides in the access pattern,     which is much more complicated for the processor to predict (and indeed     leads to prefetching of data that does not get used on Intel processors     such as BroadwellEP).         The second category of indices are the offsets for the quadrature     points. Quadrature points can be compressed less than the other fields     and thus need longer fields. Quadrature point indices are often used in     other contexts such as evaluation of right hand sides.         The third component is a descriptor of data from the unit cells, called     QuadratureDescriptor, which contains the quadrature weights and     permutations of how to go through quadrature points in case of face     data. The latter comes in a vector for the support of hp-adaptivity,     with several data fields for the individual quadrature formulas.        
*  [2.x.1]     
* [0.x.6]*
         Constructor. Does nothing.        
* [0.x.7]*
         Set up the lengths in the various members of this struct.        
* [0.x.8]*
         Set up the lengths in the various members of this struct.        
* [0.x.9]*
         Returns the memory consumption in bytes.        
* [0.x.10]*
         Number of quadrature points applied on the given cell or face.        
* [0.x.11]*
         Original one-dimensional quadrature formula applied on the given         cell or face.        
* [0.x.12]*
         Quadrature formula applied on the given cell or face.        
* [0.x.13]*
         Quadrature weights separated by dimension for use in specific         situations.        
* [0.x.14]*
         A cached vector of quadrature weights in the given number format         (non-vectorized, as it is cheap to broadcast the value to all lanes         when it is used in a vectorized context).        
* [0.x.15]*
         For quadrature on faces, the evaluation of basis functions is not         in the correct order if a face is not in the standard orientation         to a given element. This data structure is used to re-order the         data evaluated on quadrature points to represent the correct order.        
* [0.x.16]*
       A class describing the layout of the sections in the  [2.x.2]        field and also includes some data that depends on the number of       quadrature points in the hp-context such as the inner quadrature       formula and re-indexing for faces that are not in the standard       orientation.      
* [0.x.17]*
       Collection of quadrature formulae applied on the given face.            
*  [2.x.3]  Only filled for faces, since faces might be quadrilateral or         triangle shaped.      
* [0.x.18]*
       Stores the index offset into the arrays  [2.x.4]   [2.x.5]         [2.x.6]  and the second derivatives. Note that affine cells       have shorter fields of length 1, where the others have lengths equal       to the number of quadrature points of the given cell.      
* [0.x.19]*
       The storage of the Jacobian determinant (times the quadrature weight       in case the transformation is non-affine) on quadrature       points.             Indexed by  [2.x.7]       
* [0.x.20]*
       Stores the normal vectors.             Indexed by  [2.x.8]       
* [0.x.21]*
       The storage of covariant transformation on quadrature points, i.e.,       the inverse and transposed Jacobians of the transformation from the       unit to the real cell.             Indexed by  [2.x.9]              Contains two fields for access from both sides for interior faces,       but the default case (cell integrals or boundary integrals) only       fills the zeroth component and ignores the first one.      
* [0.x.22]*
       The storage of the gradients of the inverse Jacobian       transformation. Because of symmetry, only the upper diagonal and       diagonal part are needed. The first index runs through the       derivatives, starting with the diagonal and then continuing row-wise,       i.e.,  [2.x.10]  first, then        [2.x.11] , and so on. The second index       is the spatial coordinate.             Indexed by  [2.x.12]              Contains two fields for access from both sides for interior faces,       but the default case (cell integrals or boundary integrals) only       fills the zeroth component and ignores the first one.      
* [0.x.23]*
       Stores the Jacobian transformations times the normal vector (this       represents a shortcut that is accessed often and can thus get higher       performance).             Indexed by  [2.x.13]       
* [0.x.24]*
       Stores the index offset of a particular cell into the quadrature       points array in real coordinates. Note that Cartesian cells have       shorter fields (length is  [2.x.14]  than non-Cartesian cells       (length is  [2.x.15]  or faces.      
* [0.x.25]*
       Stores the quadrature points in real coordinates, including a       compression scheme for Cartesian cells where we do not need to store       the full data on all points.             Indexed by  [2.x.16]       
* [0.x.26]*
       Clears all data fields except the descriptor vector.      
* [0.x.27]*
       Returns the quadrature index for a given number of quadrature       points. If not in hp-mode or if the index is not found, this       function always returns index 0. Hence, this function does not       check whether the given degree is actually present.      
* [0.x.28]*
       Prints a detailed summary of memory consumption in the different       structures of this class to the given output stream.      
* [0.x.29]*
       Returns the memory consumption in bytes.      
* [0.x.30]*
     The class that stores all geometry-dependent data related with cell     interiors for use in the matrix-free class.        
*  [2.x.17]     
* [0.x.31]*
       Compute the information in the given cells and faces. The cells are       specified by the level and the index within the level (as given by        [2.x.18]  and  [2.x.19]  in order to allow       for different kinds of iterators, e.g. standard DoFHandler,       multigrid, etc.)  on a fixed Triangulation. In addition, a mapping       and several 1D quadrature formulas are given.      
* [0.x.32]*
       Update the information in the given cells and faces that is the       result of a change in the given `mapping` class, keeping the cells,       quadrature formulas and other unknowns unchanged. This call is only       valid if  [2.x.20]  has been called before.      
* [0.x.33]*
       Return the type of a given cell as detected during initialization.      
* [0.x.34]*
       Clear all data fields in this class.      
* [0.x.35]*
       Return the memory consumption of this class in bytes.      
* [0.x.36]*
       Prints a detailed summary of memory consumption in the different       structures of this class to the given output stream.      
* [0.x.37]*
       The given update flags for computing the geometry on the cells.      
* [0.x.38]*
       The given update flags for computing the geometry on the boundary       faces.      
* [0.x.39]*
       The given update flags for computing the geometry on the interior       faces.      
* [0.x.40]*
       The given update flags for computing the geometry on the faces for       cell-centric loops.      
* [0.x.41]*
       Stores whether a cell is Cartesian (cell type 0), has constant       transform data (Jacobians) (cell type 1), or is general (cell type       3). Type 2 is only used for faces and no cells are assigned this       value.      
* [0.x.42]*
       Stores whether a face (and both cells adjacent to the face) is       Cartesian (face type 0), whether it represents an affine situation       (face type 1), whether it is a flat face where the normal vector is       the same throughout the face (face type 2), or is general (face type       3).      
* [0.x.43]*
       The data cache for the cells.      
* [0.x.44]*
       The data cache for the faces.      
* [0.x.45]*
       The data cache for the face-associated-with-cell topology, following       the  [2.x.21]  variable for the cell types.      
* [0.x.46]*
       The pointer to the underlying  [2.x.22]  object.      
* [0.x.47]*
       The pointer to the first entry of mapping_collection.      
* [0.x.48]*
       Reference-cell type related to each quadrature and active quadrature       index.      
* [0.x.49]*
       Internal function to compute the geometry for the case the mapping is       a MappingQ and a single quadrature formula per slot (non-hp-case) is       used. This method computes all data from the underlying cell       quadrature points using the fast operator evaluation techniques from       the matrix-free framework itself, i.e., it uses a polynomial       description of the cell geometry (that is computed in a first step)       and then computes all Jacobians and normal vectors based on this       information. This optimized approach is much faster than going       through FEValues and FEFaceValues, especially when several different       quadrature formulas are involved, and consumes less memory.              [2.x.23]  tria The triangulation to be used for setup              [2.x.24]  cells The actual cells of the triangulation to be worked on,       given as a tuple of the level and index within the level as used in       the main initialization of the class              [2.x.25]  faces The description of the connectivity from faces to cells       as filled in the MatrixFree class      
* [0.x.50]*
       Computes the information in the given cells, called within       initialize.      
* [0.x.51]*
       Computes the information in the given faces, called within       initialize.      
* [0.x.52]*
       Computes the information in the given faces, called within       initialize.      
* [0.x.53]*
       Helper function to determine which update flags must be set in the       internal functions to initialize all data as requested by the user.      
* [0.x.54]*
     A helper class to extract either cell or face data from mapping info     for use in FEEvaluationBase.    
* [0.x.55]*
     A class that is used to compare floating point arrays (e.g.  [2.x.26]      Tensor<1,dim>, etc.). The idea of this class is to consider two arrays as     equal if they are the same within a given tolerance. We use this     comparator class within a  [2.x.27]  of the given arrays. Note that this     comparison operator does not satisfy all the mathematical properties one     usually wants to have (consider e.g. the numbers a=0, b=0.1, c=0.2 with     tolerance 0.15; the operator gives a<c, but neither a<b? nor b<c? is     satisfied). This is not a problem in the use cases for this class, but be     careful when using it in other contexts.    
* [0.x.56]*
       Compare two vectors of numbers (not necessarily of the same length)      
* [0.x.57]*
       Compare two vectorized arrays (stored as tensors to avoid alignment       issues).      
* [0.x.58]*
       Compare two rank-1 tensors of vectorized arrays (stored as tensors to       avoid alignment issues).      
* [0.x.59]*
       Compare two rank-2 tensors of vectorized arrays (stored as tensors to       avoid alignment issues).      
* [0.x.60]*
       Compare two arrays of tensors.      
* [0.x.61]