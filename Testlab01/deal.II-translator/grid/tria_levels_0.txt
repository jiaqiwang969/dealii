[0.x.0]*
     Store all information which belongs to one level of the multilevel     hierarchy.         In TriaLevel, all cell data is stored which is not dependent on the     dimension, e.g. a field to store the refinement flag for the cells     (what a cell actually is is declared elsewhere), etc. See also     TriaObjects for non level-oriented data.         There is another field, which may fit in here, namely the material data     (for cells) or the boundary indicators (for faces), but since we need     for a line or quad either boundary information or material data, we     store them with the lines and quads rather than with the common data.     Likewise, in 3d, we need boundary indicators for lines and quads (we     need to know how to refine a line if the two adjacent faces have     different boundary indicators), and material data for cells.    
* [0.x.1]*
       Constructor.              [2.x.0]  dim Dimension of the Triangulation.      
* [0.x.2]*
       Default constructor (needed by Boost).      
* [0.x.3]*
       Dimension of the Triangulation.      
* [0.x.4]*
        [2.x.1]  flags for the cells to be refined with       or not  [2.x.2]  The meaning what a cell       is, is dimension specific, therefore also the length of this vector       depends on the dimension: in one dimension, the length of this vector       equals the length of the  [2.x.3]  vector, in two dimensions that of       the  [2.x.4]  vector, etc.      
* [0.x.5]*
       Same meaning as the one above, but specifies whether a cell must be       coarsened.      
* [0.x.6]*
       An integer that, for every active cell, stores the how many-th active       cell this is. For non-active cells, this value is unused and set to       an invalid value.      
* [0.x.7]*
       Global cell index of each active cell.      
* [0.x.8]*
       Global cell index of each cell on the given level.      
* [0.x.9]*
       Levels and indices of the neighbors of the cells. Convention is, that       the neighbors of the cell with index  [2.x.5]  are stored in the fields       following  [2.x.6] , e.g. in one spatial       dimension, the neighbors of cell 0 are stored in       <tt>neighbors[0]</tt> and <tt>neighbors[1]</tt>, the neighbors of       cell 1 are stored in <tt>neighbors[2]</tt> and <tt>neighbors[3]</tt>,       and so on.             In neighbors, <tt>neighbors[i].first</tt> is the level, while       <tt>neighbors[i].second</tt> is the index of the neighbor.             If a neighbor does not exist (cell is at the boundary),       <tt>level=index=-1</tt> is set.              [2.x.7] Conventions: [2.x.8]  The  [2.x.9]  neighbor of a cell is the one which       shares the  [2.x.10]  face ( [2.x.11]  in 2D,  [2.x.12]  in 3D) of this cell.             The neighbor of a cell has at most the same level as this cell, i.e.       it may or may not be refined.             In one dimension, a neighbor may have any level less or equal the       level of this cell. If it has the same level, it may be refined an       arbitrary number of times, but the neighbor pointer still points to       the cell on the same level, while the neighbors of the children of       the neighbor may point to this cell or its children.             In two and more dimensions, the neighbor is either on the same level       and refined (in which case its children have neighbor pointers to       this cell or its direct children), unrefined on the same level or one       level down (in which case its neighbor pointer points to the mother       cell of this cell).      
* [0.x.10]*
       One integer per cell to store which subdomain it belongs to. This       field is most often used in parallel computations, where it denotes       which processor shall work on/owns the cells with a given subdomain       number.             This number is only used on active cells.      
* [0.x.11]*
       The subdomain id used on each level for parallel multigrid.             In contrast to the subdomain_id, this number is also used on inactive       cells once the mesh has been partitioned also on the lower levels of       the multigrid hierarchy.      
* [0.x.12]*
       One integer for every consecutive pair of cells to store which index       their parent has.             (We store this information once for each pair of cells since every       refinement, isotropic or anisotropic, and in any space dimension,       always creates children in multiples of two, so there is no need to       store the parent index for every cell.)      
* [0.x.13]*
       One bool per cell to indicate the direction of the normal true:  use       orientation from vertex false: revert the orientation. See        [2.x.13] .             This is only used for codim==1 meshes.      
* [0.x.14]*
       The object containing the data on lines and related functions      
* [0.x.15]*
       For edges, we enforce a standard convention that opposite       edges should be parallel. Now, that's enforceable in most       cases, and we have code that makes sure that if a mesh allows       this to happen, that we have this convention. We also know       that it is always possible to have opposite faces have       parallel normal vectors. (For both things, see the paper by       Agelek, Anderson, Bangerth, Barth in the ACM Transactions on       Mathematical Software mentioned in the documentation of the       GridReordering class.)             The problem is that we originally had another condition, namely that       faces 0, 2 and 4 have normals that point into the cell, while the       other faces have normals that point outward. It turns out that this       is not always possible. In effect, we have to store whether the       normal vector of each face of each cell follows this convention or       not. If this is so, then this variable stores a  [2.x.14]  value,       otherwise a  [2.x.15]  value.             In effect, this field has  [2.x.16]  elements, being the       number of cells times the six faces each has.            
*  [2.x.17]  Only needed for dim=3.      
* [0.x.16]*
       Reference cell type of each cell.            
*  [2.x.18]  Used only for dim=2 and dim=3.      
* [0.x.17]*
       A cache for the vertex indices of the cells (`structdim == dim`), in       order to more quickly retrieve these frequently accessed quantities.       For simplified addressing, the information is indexed by the maximum       number of vertices possible for a cell (quadrilateral/hexahedron).      
* [0.x.18]*
       Determine an estimate for the memory consumption (in bytes) of this       object.      
* [0.x.19]*
       Read or write the data of this object to or from a stream for the       purpose of serialization using the [BOOST serialization       library](https://www.boost.org/doc/libs/1_74_0/libs/serialization/doc/index.html).      
* [0.x.20]