[0.x.0]*
 Manifold description for a polar coordinate system.
*  You can use this Manifold object to describe any sphere, circle, hypersphere or hyperdisc in two or three dimensions, both as a co-dimension one manifold descriptor or as co-dimension zero manifold descriptor, provided that the north and south poles (in three dimensions) and the center (in both two and three dimensions) are excluded from the Manifold (as they are singular points of the polar change of coordinates).
*  The two template arguments match the meaning of the two template arguments in Triangulation<dim, spacedim>, however this Manifold can be used to describe both thin and thick objects, and the behavior is identical when dim <= spacedim, i.e., the functionality of PolarManifold<2,3> is identical to PolarManifold<3,3>.
*  This class works by transforming points to polar coordinates (in both two and three dimensions), taking the average in that coordinate system, and then transforming the point back to Cartesian coordinates. In order for this manifold to work correctly, it cannot be attached to cells containing the center of the coordinate system or the north and south poles in three dimensions. These points are singular points of the coordinate transformation, and taking averages around these points does not make any sense.
* 

* 
*  [2.x.0] 

* 
* [0.x.1]*
   The Constructor takes the center of the spherical coordinates system.   This class uses the pull_back and push_forward mechanism to transform   from Cartesian to spherical coordinate systems, taking into account the   periodicity of base Manifold in two dimensions, while in three dimensions   it takes the middle point, and project it along the radius using the   average radius of the surrounding points.  
* [0.x.2]*
   Make a clone of this Manifold object.  
* [0.x.3]*
   Pull back the given point from the Euclidean space. Will return the polar   coordinates associated with the point  [2.x.1]  Only used when   spacedim = 2.  
* [0.x.4]*
   Given a point in the spherical coordinate system, this method returns the   Euclidean coordinates associated to the polar coordinates  [2.x.2]    Only used when spacedim = 3.  
* [0.x.5]*
   Given a point in the spacedim dimensional Euclidean space, this   method returns the derivatives of the function  [2.x.3]  that maps from   the polar coordinate system to the Euclidean coordinate   system. In other words, it is a matrix of size    [2.x.4] .     This function is used in the computations required by the   get_tangent_vector() function.     Refer to the general documentation of this class for more information.  
* [0.x.6]*
    [2.x.5]   [2.x.6]   
* [0.x.7]*
   The center of the spherical coordinate system.  
* [0.x.8]*
   Helper function which returns the periodicity associated with this   coordinate system, according to dim, chartdim, and spacedim.  
* [0.x.9]*
 Manifold description for a spherical space coordinate system.
*  You can use this Manifold object to describe any sphere, circle, hypersphere or hyperdisc in two or three dimensions. This manifold can be used as a co-dimension one manifold descriptor of a spherical surface embedded in a higher dimensional space, or as a co-dimension zero manifold descriptor for a body with positive volume, provided that the center of the spherical space is excluded from the domain. An example for the use of this function would be in the description of a hyper-shell or hyper-ball geometry, for example after creating a coarse mesh using  [2.x.7]  (However, it is worth mentioning that generating a good mesh for a disk or ball is complicated and requires addition steps. See the "Possibilities for extensions" section of  [2.x.8]  for an extensive discussion of how one would construct such meshes and what one needs to do for it.)
*  The two template arguments match the meaning of the two template arguments in Triangulation<dim, spacedim>, however this Manifold can be used to describe both thin and thick objects, and the behavior is identical when dim <= spacedim, i.e., the functionality of SphericalManifold<2,3> is identical to SphericalManifold<3,3>.
*  While PolarManifold reflects the usual notion of polar coordinates, it may not be suitable for domains that contain either the north or south poles.  Consider for instance the pair of points  [2.x.9]  and  [2.x.10]  in polar coordinates (lying on the surface of a sphere with radius one, on a parallel at height  [2.x.11] ). In this case connecting the points with a straight line in polar coordinates would take the long road around the globe, without passing through the north pole.
*  These two points would be connected (using a PolarManifold) by the curve

* 
* [1.x.0]
*  This curve is not a geodesic on the sphere, and it is not how we would connect those two points. A better curve, would be the one passing through the North pole: [1.x.1] where  [2.x.12]  and  [2.x.13]  for  [2.x.14] . Indeed, this is a geodesic, and it is the natural choice when connecting points on the surface of the sphere. In the examples above, the PolarManifold class implements the first way of connecting two points on the surface of a sphere, while SphericalManifold implements the second way, i.e., this Manifold connects points using geodesics. If more than two points are involved through a  [2.x.15]  call, a so-called spherical average is used where the final point minimizes the weighted distance to all other points via geodesics.
*  In particular, this class implements a Manifold that joins any two points in space by first projecting them onto the surface of a sphere with unit radius, then connecting them with a geodesic, and finally rescaling the final radius so that the resulting one is the weighted average of the starting radii. This Manifold is identical to PolarManifold in dimension two, while for dimension three it returns points that are more uniformly distributed on the sphere, and it is invariant with respect to rotations of the coordinate system, therefore avoiding the problems that PolarManifold has at the poles. Notice, in particular, that computing tangent vectors at the poles with a PolarManifold is not well defined, while it is perfectly fine with this class.
*  For mathematical reasons, it is impossible to construct a unique map of a sphere using only geodesic curves, and therefore, using this class with MappingManifold is discouraged. If you use this Manifold to describe the geometry of a sphere, you should use MappingQ as the underlying mapping, and not MappingManifold.
*  This Manifold can be usedonly* on geometries where a ball with finite radius is removed from the center. Indeed, the center is a singular point for this manifold, and if you try to connect two points across the center, they would travel on spherical coordinates, avoiding the center.
*  The ideal geometry for this Manifold is an HyperShell. If you plan to use this Manifold on a HyperBall, you have to make sure you do not attach this Manifold to the cell containing the center. It is advisable to combine this class with TransfiniteInterpolationManifold to ensure a smooth transition from a curved shape to the straight coordinate system in the center of the ball. (See also the extensive discussion in  [2.x.16] .)
* 

* 
*  [2.x.17] 

* 
* [0.x.10]*
   The Constructor takes the center of the spherical coordinates.  
* [0.x.11]*
   Make a clone of this Manifold object.  
* [0.x.12]*
   Given any two points in space, first project them on the surface   of a sphere with unit radius, then connect them with a geodesic   and find the intermediate point, and finally rescale the final   radius so that the resulting one is the convex combination of the   starting radii.  
* [0.x.13]*
   Compute the derivative of the get_intermediate_point() function   with parameter w equal to zero.  
* [0.x.14]*
    [2.x.18]   [2.x.19]   
* [0.x.15]*
   Compute the normal vectors to the boundary at each vertex.  
* [0.x.16]*
   Compute a new set of points that interpolate between the given points  [2.x.20]    surrounding_points.  [2.x.21]  is a table with as many columns as  [2.x.22]    surrounding_points.size(). The number of rows in  [2.x.23]  must match   the length of  [2.x.24]      This function is optimized to perform on a collection   of new points, by collecting operations that are not dependent on the   weights outside of the loop over all new points.     The implementation does not allow for  [2.x.25]  and    [2.x.26]  to point to the same array, so make sure to pass different   objects into the function.  
* [0.x.17]*
   Return a point on the spherical manifold which is intermediate   with respect to the surrounding points.  
* [0.x.18]*
   The center of the spherical coordinate system.  
* [0.x.19]*
   Return a point on the spherical manifold which is intermediate   with respect to the surrounding points. This function uses a linear   average of the directions to find an estimated point. It returns a pair   of radius and direction from the center point to the candidate point.  
* [0.x.20]*
   Return a point on the spherical manifold which is intermediate   with respect to the surrounding points. This function uses a candidate   point as guess, and performs a Newton-style iteration to compute the   correct point.     The main part of the implementation uses the ideas in the publication     Buss, Samuel R., and Jay P. Fillmore.   "Spherical averages and applications to spherical splines and   interpolation." ACM Transactions on Graphics (TOG) 20.2 (2001): 95-126.     and in particular the implementation provided at   http://math.ucsd.edu/~sbuss/ResearchWeb/spheremean/  
* [0.x.21]*
   Compute a new set of points that interpolate between the given points  [2.x.27]    surrounding_points.  [2.x.28]  is an array view with as many entries as  [2.x.29]    surrounding_points.size() times  [2.x.30]      This function is optimized to perform on a collection   of new points, by collecting operations that are not dependent on the   weights outside of the loop over all new points.     The implementation does not allow for  [2.x.31]  and    [2.x.32]  to point to the same array, so make sure to pass different   objects into the function.  
* [0.x.22]*
   A manifold description to be used for get_new_point in 2D.  
* [0.x.23]*
 Cylindrical Manifold description.  In three dimensions, points are transformed using a cylindrical coordinate system along the <tt>x-</tt>, <tt>y-</tt> or <tt>z</tt>-axis (when using the first constructor of this class), or an arbitrarily oriented cylinder described by the direction of its axis and a point located on the axis.
*  This class was developed to be used in conjunction with the  [2.x.33]  or  [2.x.34]  functions of GridGenerator. This function will throw a run time exception whenever spacedim is not equal to three.
* 

* 
*  [2.x.35] 

* 
* [0.x.24]*
   Constructor. Using default values for the constructor arguments yields a   cylinder along the x-axis (<tt>axis=0</tt>). Choose <tt>axis=1</tt> or   <tt>axis=2</tt> for a tube along the y- or z-axis, respectively. The   tolerance value is used to determine if a point is on the axis.  
* [0.x.25]*
   Constructor. If constructed with this constructor, the manifold described   is a cylinder with an axis that points in direction #direction and goes   through the given #point_on_axis. The direction may be arbitrarily   scaled, and the given point may be any point on the axis. The tolerance   value is used to determine if a point is on the axis.  
* [0.x.26]*
   Make a clone of this Manifold object.  
* [0.x.27]*
   Compute the cylindrical coordinates  [2.x.36]  for the given   space point where  [2.x.37]  denotes the distance from the axis,    [2.x.38]  the angle between the given point and the computed normal   direction, and  [2.x.39]  the axial position.  
* [0.x.28]*
   Compute the Cartesian coordinates for a chart point given in cylindrical   coordinates  [2.x.40] , where  [2.x.41]  denotes the distance from the   axis,  [2.x.42]  the angle between the given point and the computed normal   direction, and  [2.x.43]  the axial position.  
* [0.x.29]*
   Compute the derivatives of the mapping from cylindrical coordinates    [2.x.44]  to cartesian coordinates where  [2.x.45]  denotes the   distance from the axis,  [2.x.46]  the angle between the given point and the   computed normal direction, and  [2.x.47]  the axial position.  
* [0.x.30]*
   Compute new points on the CylindricalManifold. See the documentation of   the base class for a detailed description of what this function does.  
* [0.x.31]*
   A vector orthogonal to the normal direction.  
* [0.x.32]*
   The direction vector of the axis.  
* [0.x.33]*
   An arbitrary point on the axis.  
* [0.x.34]*
   Relative tolerance to measure zero distances.  
* [0.x.35]*
 Elliptical manifold description derived from ChartManifold. More information on the elliptical coordinate system can be found at [1.x.2].
*  This is based on the definition of elliptic coordinates  [2.x.48]  [1.x.3] in which  [2.x.49]  are coordinates of the center of the cartesian system.
*  The current implementation uses coordinates  [2.x.50] , instead of  [2.x.51] , and fixes  [2.x.52]  according to a given eccentricity. Therefore, this choice of coordinates generates an elliptical manifold characterized by a constant eccentricity:  [2.x.53] , with  [2.x.54] .
*  The constructor of this class will throw an exception if both dim and spacedim are different from two.
*  This manifold can be used to produce hyper_shells with elliptical curvature. As an example, the test <B>elliptical_manifold_01</B> produces the following triangulation:  [2.x.55] 
* 

* 
*  [2.x.56] 

* 
* [0.x.36]*
   Constructor that takes the center of the manifold system, the direction of   the major axis, and the manifold eccentricity.   The default major axis is the <tt>x</tt>-axis. The manifold is rotated in   order to align the major axis to the direction specified in input.    [2.x.57]  center Center of the manifold.    [2.x.58]  major_axis_direction Direction of the major axis of the   manifold.    [2.x.59]  eccentricity Eccentricity of the   manifold  [2.x.60] .  
* [0.x.37]*
    [2.x.61]   [2.x.62]   
* [0.x.38]*
    [2.x.63]   [2.x.64]   
* [0.x.39]*
    [2.x.65]   [2.x.66]   
* [0.x.40]*
   The direction vector of the major axis.  
* [0.x.41]*
   The center of the manifold.  
* [0.x.42]*
   Parameters deriving from the eccentricity of the manifold.  
* [0.x.43]*
    [2.x.67]   [2.x.68]      For  [2.x.69]  and  [2.x.70] , the first coordinate is   non-periodic, while the second coordinate has a periodicity of  [2.x.71] .  
* [0.x.44]*
 Manifold description derived from ChartManifold, based on explicit Function<spacedim> and Function<chartdim> objects describing the push_forward() and pull_back() functions.
*  You can use this Manifold object to describe any arbitrary shape domain, as long as you can express it in terms of an invertible map, for which you provide both the forward expression, and the inverse expression.
*  In debug mode, a check is performed to verify that the transformations are actually one the inverse of the other.
* 

* 
*  [2.x.72] 

* 
* [0.x.45]*
   Explicit functions constructor. Takes a push_forward function of spacedim   components, and a pull_back function of  [2.x.73]  components. See the   documentation of the base class ChartManifold for the meaning of the   optional  [2.x.74]  argument.     The tolerance argument is used in debug mode to actually check that the   two functions are one the inverse of the other.     Note: the object constructed in this way stores pointers to the   push_forward and  pull_back functions. Therefore, one must guarantee that   the function objects are destroyed only after the constructed manifold.  
* [0.x.46]*
   Same as previous, except this constructor takes ownership of the Function   objects passed as first and second argument, and is ultimately in charge   of deleting the pointers when the FunctionManifold object is destroyed.     This constructor is useful because it allows creating function objects at   the place of calling the constructor without having to name and later   delete these objects. This allows the following idiom:   FunctionManifold<dim>  [2.x.75]                                    [2.x.76]   
* [0.x.47]*
   Expressions constructor. Takes the expressions of the push_forward   function of spacedim components, and of the pull_back function of  [2.x.77]    chartdim components. See the documentation of the base class   ChartManifold for the meaning of the optional  [2.x.78]  argument.     The strings should be the readable by the default constructor of the   FunctionParser classes. You can specify custom variable expressions with   the last two optional arguments. If you don't, the default names are   used, i.e., "x,y,z".     The tolerance argument is used in debug mode to actually check that the   two functions are one the inverse of the other.  
* [0.x.48]*
   If needed, we delete the pointers we own.  
* [0.x.49]*
   Make a clone of this Manifold object.  
* [0.x.50]*
   Given a point in the  [2.x.79]  coordinate system, uses the   push_forward_function to compute the push_forward of points in  [2.x.80]    chartdim space dimensions to  [2.x.81]  space dimensions.  
* [0.x.51]*
   Given a point in the chartdim dimensional Euclidean space, this   method returns the derivatives of the function  [2.x.82]  that maps from   the sub_manifold coordinate system to the Euclidean coordinate   system. In other words, it is a matrix of size    [2.x.83] .     This function is used in the computations required by the   get_tangent_vector() function. The default implementation calls   the get_gradient() method of the    [2.x.84]  member class. If you   construct this object using the constructor that takes two string   expression, then the default implementation of this method uses a   finite difference scheme to compute the gradients(see the   AutoDerivativeFunction() class for details), and you can specify   the size of the spatial step size at construction time with the    [2.x.85]  parameter.     Refer to the general documentation of this class for more information.  
* [0.x.52]*
   Given a point in the spacedim coordinate system, uses the   pull_back_function to compute the pull_back of points in  [2.x.86]    space dimensions to  [2.x.87]  space dimensions.  
* [0.x.53]*
   Constants for the FunctionParser classes.  
* [0.x.54]*
   Pointer to the push_forward function.  
* [0.x.55]*
   Pointer to the pull_back function.  
* [0.x.56]*
   Relative tolerance. In debug mode, we check that the two functions   provided at construction time are actually one the inverse of the other.   This value is used as relative tolerance in this check.  
* [0.x.57]*
   Check ownership of the smart pointers. Indicates whether this class is   the owner of the objects pointed to by the previous two member variables.   This value is set in the constructor of the class. If  [2.x.88]  then the   destructor will delete the function objects pointed to be the two   pointers.  
* [0.x.58]*
   The expression used to construct the push_forward function.  
* [0.x.59]*
   The expression used to construct the pull_back function.  
* [0.x.60]*
   Variable names in the chart domain.  
* [0.x.61]*
   Variable names in the space domain.  
* [0.x.62]*
   The finite difference step to use internally.  
* [0.x.63]*
 Manifold description for the surface of a Torus in three dimensions. The Torus is assumed to be in the x-z plane. The reference coordinate system is given by the angle  [2.x.89]  around the y axis, the angle  [2.x.90]  around the centerline of the torus, and the distance to the centerline  [2.x.91]  (between 0 and 1).
*  This class was developed to be used in conjunction with  [2.x.92] 
* 

* 
*  [2.x.93] 

* 
* [0.x.64]*
   Constructor. Specify the radius of the centerline  [2.x.94]  and the radius   of the torus itself ( [2.x.95]  The variables have the same meaning as   the parameters in  [2.x.96]   
* [0.x.65]*
   Make a clone of this Manifold object.  
* [0.x.66]*
   Pull back operation.  
* [0.x.67]*
   Push forward operation.  
* [0.x.68]*
   Gradient.  
* [0.x.69]*
 A mapping class that extends curved boundary descriptions into the interior of the computational domain. The outer curved boundary description is assumed to be given by another manifold (e.g. a polar manifold on a circle). The mechanism to extend the boundary information is a so-called transfinite interpolation. The use of this class is discussed extensively in  [2.x.97] .
*  The formula for extending such a description in 2D is, for example, described on [1.x.4].  Given a point  [2.x.98]  on the chart, the image of this point in real space is given by

* 
* [1.x.5]
*  where  [2.x.99]  denote the four bounding vertices bounding the image space and  [2.x.100]  are the four curves describing the lines of the cell. If a curved manifold is attached to any of these lines, the evaluation is done according to  [2.x.101]  with the two end points of the line and appropriate weight. In 3D, the generalization of this formula is implemented, creating a weighted sum of the vertices (positive contribution), the lines (negative), and the faces (positive contribution).
*  This manifold is usually attached to a coarse mesh and then places new points as a combination of the descriptions on the boundaries, weighted appropriately according to the position of the point in the original chart coordinates  [2.x.102] . This manifold should be preferred over setting only a curved manifold on the boundary of a mesh in most situations as it yields more uniform mesh distributions as the mesh is refined because it switches from a curved description to a straight description over all children of the initial coarse cell this manifold was attached to. This way, the curved nature of the manifold that is originally contained in one [1.x.6] mesh layer will be applied to more than one [1.x.7] mesh layer once the mesh gets refined. Note that the mechanisms of TransfiniteInterpolationManifold are also built into the MappingQGeneric class when only a surface of a cell is subject to a curved description, ensuring that even the default case without this manifold gets optimal convergence rates when applying curved boundary descriptions.
*  If no curved boundaries surround a coarse cell, this class reduces to a flat manifold description.
*  To give an example of using this class, the following code attaches a transfinite manifold to a circle:
* 

* 
* [1.x.8]
* 
*  In this code, we first set all manifold ids to the id of the transfinite interpolation, and then re-set the manifold ids on the boundary to identify the curved boundary described by the polar manifold. With this code, one gets a really nice mesh:
*   [2.x.103] 
*  which is obviously much nicer than the polar manifold applied to just the boundary:
*   [2.x.104] 
*  This manifold is used in a few GridGenerator functions, including  [2.x.105] 
*  [1.x.9]
*  In the implementation of this class, the manifolds surrounding a coarse cell are queried repeatedly to compute points on their interior. For optimal mesh quality, those manifolds should be compatible with a chart notion. For example, computing a point that is 0.25 along the line between two vertices using the weights 0.25 and 0.75 for the two vertices should give the same result as first computing the mid point at 0.5 and then again compute the midpoint between the first vertex and coarse mid point. This is the case for most of the manifold classes provided by deal.II, such as SphericalManifold or PolarManifold, but it might be violated by naive implementations. In case the quality of the manifold is not good enough, upon mesh refinement it may happen that the transformation to a chart inside the get_new_point() or get_new_points() methods produces points that are outside the unit cell. Then this class throws an exception of type  [2.x.106]  In that case, the mesh should be refined before attaching this class, as done in the following example:
* 

* 
* [1.x.10]
* 
* 

* 
*  [2.x.107]  For performance and accuracy reasons, it is recommended to apply the transfinite manifold to as coarse a mesh as possible. Regarding accuracy, the curved description can only be applied to new points created from a given neighborhood, and the grid quality is typically higher when extending the curved description over as large a domain as possible. Regarding performance, the identification of the correct coarse cell in the get_new_point() method needs to pass all coarse cells, so expect a linear complexity in the number of coarse cells for each single mapping operation, i.e., at least quadratic in the number of coarse mesh cells for any global operation on the whole mesh. Thus, the current implementation is only economical when there are not more than a few hundreds of coarse cells. To make performance better for larger numbers of cells, one could extend the current implementation by a pre-identification of relevant cells with axis-aligned bounding boxes.
* 

* 
*  [2.x.108] 

* 
* [0.x.70]*
   Constructor.  
* [0.x.71]*
   Destructor.  
* [0.x.72]*
   Make a clone of this Manifold object.  
* [0.x.73]*
   Initializes the manifold with a coarse mesh. The prerequisite for using   this class is that the input triangulation is uniformly refined and the   manifold is later attached to the same triangulation.     Whenever the assignment of manifold ids changes on the level of the   triangulation which this class was initialized with, initialize() must be   called again to update the manifold ids connected to the coarse cells.    
*  [2.x.109]  The triangulation used to construct the manifold must not be   destroyed during the usage of this object.  
* [0.x.74]*
   Return the point which shall become the new vertex surrounded by the   given points  [2.x.110]   [2.x.111]  contains appropriate   weights for the surrounding points according to which the manifold   determines the new point's position.     The implementation in this class overrides the method in the base class   and computes the new point by a transfinite interpolation. The first step   in the implementation is to identify the coarse cell on which the   surrounding points are located. Then, the coordinates are transformed to   the unit coordinates on the coarse cell by a Newton iteration, where the   new point is then computed according to the weights. Finally, it is   pushed forward to the real space according to the transfinite   interpolation.  
* [0.x.75]*
   Compute a new set of points that interpolate between the given points  [2.x.112]    surrounding_points.  [2.x.113]  is a table with as many columns as  [2.x.114]    surrounding_points.size(). The number of columns in  [2.x.115]  must match   the length of  [2.x.116]      The implementation in this class overrides the method in the base class   and computes the new point by a transfinite interpolation. The first step   in the implementation is to identify the coarse cell on which the   surrounding points are located. Then, the coordinates are transformed to   the unit coordinates on the coarse cell by a Newton iteration, where the   new points are then computed according to the weights. Finally, the is   pushed forward to the real space according to the transfinite   interpolation.     The implementation does not allow for  [2.x.117]  and    [2.x.118]  to point to the same vector, so make sure to pass different   objects into the function.  
* [0.x.76]*
   Internal function to identify the most suitable cells (=charts) where the   given surrounding points are located. We use a cheap algorithm to   identify the cells and rank the cells by probability before we actually   do the search inside the relevant cells. The cells are sorted by the   distance of a Q1 approximation of the inverse mapping to the unit cell of   the surrounding points. We expect at most 20 cells (it should be up to 8   candidates on a 3D structured mesh and a bit more on unstructured ones,   typically we only get two or three), so get an array with 20 entries of a   the indices <tt>cell->index()</tt>.  
* [0.x.77]*
   Finalizes the identification of the correct chart and populates  [2.x.119]    chart_points with the pullbacks of the surrounding points. This method   internally calls  [2.x.120]      Return an iterator to the cell on which the chart is defined.  
* [0.x.78]*
   Pull back operation into the unit coordinates on the given coarse cell.     This method is currently based on a Newton-like iteration to find the   point in the origin. One may speed up the iteration by providing a good   initial guess as the third argument. If no better point is known, use   cell->real_to_unit_cell_affine_approximation(p)    
*  [2.x.121]  This internal function is currently not compatible with the    [2.x.122]  function because the given class represents an   atlas of charts, not a single chart. Thus, the pull_back() operation is   only valid with the additional information of the chart, given by a cell   on the coarse grid. An alternative implementation could shift the index   depending on the coarse cell for a 1-to-1 relation between the chart space   and the image space.  
* [0.x.79]*
   Push forward operation.    
*  [2.x.123]  This internal function is currently not compatible with the    [2.x.124]  function because the given class represents   an atlas of charts, not a single chart. Thus, the push_forward()   operation is only valid with the additional information of the chart,   given by a cell on the coarse grid. An alternative implementation could   shift the index depending on the coarse cell for a 1-to-1 relation   between the chart space and the image space.  
* [0.x.80]*
   Gradient of the push_forward method.    
*  [2.x.125]  This internal function is not compatible with the    [2.x.126]  function because the given class   represents an atlas of charts, not a single chart. Furthermore, this   private function also requires the user to provide the result of the   push_forward() call on the chart point for the single use case of this   function, namely inside a Newton iteration where the gradient is computed   by finite differences.  
* [0.x.81]*
   The underlying triangulation.  
* [0.x.82]*
   The level of the mesh cells where the transfinite approximation is   applied, usually level 0.  
* [0.x.83]*
   In case there all surrounding manifolds are the transfinite manifold or   have default (invalid) manifold id, the manifold degenerates to a flat   manifold and we can choose cheaper algorithms for the push_forward method.  
* [0.x.84]*
   A flat manifold used to compute new points in the chart space where we   use a FlatManifold description.  
* [0.x.85]*
   A vector of quadratic approximations to the inverse map from real points   to chart points for each of the coarse mesh cells.  
* [0.x.86]*
   The connection to  [2.x.127]  that must be reset once   this class goes out of scope.  
* [0.x.87]