[0.x.0]*


* 
*  [2.x.0] 
*  Many explicit time integration schemes require solving a mass matrix at each time step. There are various ways around this requirement
* 
*  - for example,  [2.x.1]  replaces the mass matrix with a diagonal approximation, which makes the solution step trivial. In  [2.x.2] , and also commonly for tensor-product elements, this is done by computing the mass matrix with a lower-order quadrature point based on the nodes of the finite element (i.e., the nodal quadrature rule one obtains by using the shape functions as an interpolatory basis).
*  A major drawback of standard simplex-based finite elements is that they cannot be used with nodal quadrature since some of the quadrature weights end up being either zero or negative, resulting in either an unsolvable or unstable approximation to the mass matrix. For example: the shape functions of FE_P<2>(2) with support points at vertices have mean values of zero so that element cannot be used with mass lumping.
*  This element avoids this issue by replacing the shape functions of FE_P with an augmented space amendable to the construction of nodal quadrature rules. For example, on the triangle a single basis function is added corresponding to interpolation at the centroid (and all other basis functions are updated to preserve the partition of unity property). This results in shape functions with positive means (i.e., a valid nodal quadrature formula). Similarly, in 3D, the polynomial space of FE_P<3>(2) is enriched with five additional degrees of freedom (where four have support points at face centroids and one has a support point at the centroid) to enable construction of valid nodal quadrature rule.
*  Since this FE space includes bubbles (i.e., extra functions which are nonzero only on element interiors), the polynomial degrees of the component basis functions are higher than the actual approximation degree of the element. For example, with a constructor argument  [2.x.3]  in 3D, the polynomials are in fact cubic (degree 3) but the order of the approximation is the same as if we were using quadratic (degree 2) finite elements.
*  The 2D quadratic element was first described in  [2.x.4] . The 3D quadratic element implemented here was first described in  [2.x.5] . Higher degree elements amendable to lumping exist but are not yet implemented in this class.

* 
* [0.x.1]*
   Constructor, taking the approximation degree as an argument. The   polynomial space is typically one degree higher than the approximation   space for this element: see the general documentation of this class for   more information.    
*  [2.x.6]  For  [2.x.7]  this element is equivalent to FE_P(1).  
* [0.x.2]*
    [2.x.8]   [2.x.9]   
* [0.x.3]*
   Return a string that uniquely identifies a finite element. This class   returns <tt>FE_SimplexP_Bubbles<dim,spacedim>(degree)</tt>, with    [2.x.10]   [2.x.11]  and  [2.x.12]  replaced by appropriate values. As   usual,  [2.x.13]  is omitted in the codimension zero case.  
* [0.x.4]*
    [2.x.14]   [2.x.15]   
* [0.x.5]*
   Degree of the approximation (i.e., the constructor argument).  
* [0.x.6]