[0.x.0]*
 This class implements the functionality for polynomial mappings  [2.x.0]  of polynomial degree  [2.x.1]  that will be used on all cells of the mesh. The MappingQ1 and MappingQ classes specialize this behavior slightly.
*  The class is poorly named. It should really have been called MappingQ because it consistently uses  [2.x.2]  mappings on all cells of a triangulation. However, the name MappingQ was already taken when we rewrote the entire class hierarchy for mappings. One might argue that one should always use MappingQGeneric over the existing class MappingQ (which, unless explicitly specified during the construction of the object, only uses mappings of degree  [2.x.3]  [1.x.0]). On the other hand, there are good reasons to use MappingQ in many situations: in many situations, curved domains are only provided with information about how exactly edges at the boundary are shaped, but we do not know anything about internal edges. Thus, in the absence of other information, we can only assume that internal edges are straight lines, and in that case internal cells may as well be treated is bilinear quadrilaterals or trilinear hexahedra. (An example of how such meshes look is shown in  [2.x.4]  already, but it is also discussed in the "Results" section of  [2.x.5] .) Because bi-/trilinear mappings are significantly cheaper to compute than higher order mappings, it is advantageous in such situations to use the higher order mapping only on cells at the boundary of the domain
* 
*  -  i.e., the behavior of MappingQ. Of course, MappingQGeneric also uses bilinear mappings for interior cells as long as it has no knowledge about curvature of interior edges, but it implements this the expensive way: as a general  [2.x.6]  mapping where the mapping support points just [1.x.1] to be arranged along linear or bilinear edges or faces.
*  There are a number of special cases worth considering:
* 

* 
* 
*  - If you really want to use a higher order mapping for all cells, you can do this using the current class, but this only makes sense if you can actually provide information about how interior edges and faces of the mesh should be curved. This is typically done by associating a Manifold with interior cells and edges. A simple example of this is discussed in the "Results" section of  [2.x.7] ; a full discussion of manifolds is provided in  [2.x.8] .
* 

* 
* 
*  - If you are working on meshes that describe a (curved) manifold embedded in higher space dimensions, i.e., if dim!=spacedim, then every cell is at the boundary of the domain you will likely already have attached a manifold object to all cells that can then also be used by the mapping classes for higher order mappings.
*  [1.x.2]
*  As described above, one often only knows a manifold description of a surface but not the interior of the computational domain. In such a case, a FlatManifold object will be assigned to the interior entities that describes a usual planar coordinate system where the additional points for the higher order mapping are placed exactly according to a bi-/trilinear mapping. When combined with a non-flat manifold on the boundary, for example a circle bulging into the interior of a square cell, the two manifold descriptions are in general incompatible. For example, a FlatManifold defined solely through the cell's vertices would put an interior point located at some small distance epsilon away from the boundary along a straight line and thus in general outside the concave part of a circle. If the polynomial degree of MappingQ is sufficiently high, the transformation from the reference cell to such a cell would in general contain inverted regions close to the boundary.
*  In order to avoid this situation, this class applies an algorithm for making this transition smooth using a so-called transfinite interpolation that is essentially a linear blend between the descriptions along the surrounding entities. In the algorithm that computes additional points, the compute_mapping_support_points() method, all the entities of the cells are passed through hierarchically, starting from the lines to the quads and finally hexes. Points on objects higher up in the hierarchy are obtained from the manifold associated with that object, taking into account all the points previously computed by the manifolds associated with the lower-dimensional objects, not just the vertices. If only a line is assigned a curved boundary but the adjacent quad is on a flat manifold, the flat manifold on the quad will take the points on the deformed line into account when interpolating the position of the additional points inside the quad and thus always result in a well-defined transformation.
*  The interpolation scheme used in this class makes sure that curved descriptions can go over to flat descriptions within a single layer of elements, maintaining the overall optimal convergence rates of the finite element interpolation. However, one does often get better solution qualities if the transition between curved boundaries and flat interior domains is spread over a larger range as the mesh is refined. This is provided by the special manifold TransfiniteInterpolationManifold.

* 
* [0.x.1]*
   Constructor.   [2.x.9]  denotes the polynomial degree of the   polynomials that are used to map cells from the reference to the real   cell.  
* [0.x.2]*
   Copy constructor.  
* [0.x.3]*
   Return the degree of the mapping, i.e. the value which was passed to the   constructor.  
* [0.x.4]*
   Always returns  [2.x.10]  because the default implementation of functions in   this class preserves vertex locations.  
* [0.x.5]*
    [2.x.11]  Mapping points between reference and real cells    [2.x.12]   
* [0.x.6]*
    [2.x.13]   
* [0.x.7]*
    [2.x.14]  Functions to transform tensors from reference to real coordinates    [2.x.15]   
* [0.x.8]*
    [2.x.16]   
* [0.x.9]*
    [2.x.17]  Interface with FEValues and friends    [2.x.18]   
* [0.x.10]*
   Storage for internal data of polynomial mappings. See    [2.x.19]  for an extensive description.     For the current class, the InternalData class stores data that is   computed once when the object is created (in get_data()) as well as data   the class wants to store from between the call to fill_fe_values(),   fill_fe_face_values(), or fill_fe_subface_values() until possible later   calls from the finite element to functions such as transform(). The   latter class of member variables are marked as 'mutable'.  
* [0.x.11]*
     Constructor. The argument denotes the polynomial degree of the mapping     to which this object will correspond.    
* [0.x.12]*
     Initialize the object's member variables related to cell data based on     the given arguments.         The function also calls compute_shape_function_values() to actually set     the member variables related to the values and derivatives of the     mapping shape functions.    
* [0.x.13]*
     Initialize the object's member variables related to cell and face data     based on the given arguments. In order to initialize cell data, this     function calls initialize().    
* [0.x.14]*
     Compute the values and/or derivatives of the shape functions used for     the mapping.         Which values, derivatives, or higher order derivatives are computed is     determined by which of the member arrays have nonzero sizes. They are     typically set to their appropriate sizes by the initialize() and     initialize_face() functions, which indeed call this function     internally. However, it is possible (and at times useful) to do the     resizing by hand and then call this function directly. An example is in     a Newton iteration where we update the location of a quadrature point     (e.g., in  [2.x.20]  and need to re-     compute the mapping and its derivatives at this location, but have     already sized all internal arrays correctly.    
* [0.x.15]*
     Shape function at quadrature point. Shape functions are in tensor     product order, so vertices must be reordered to obtain transformation.    
* [0.x.16]*
     Shape function at quadrature point. See above.    
* [0.x.17]*
     Gradient of shape function in quadrature point. See above.    
* [0.x.18]*
     Gradient of shape function in quadrature point. See above.    
* [0.x.19]*
     Second derivative of shape function in quadrature point. See above.    
* [0.x.20]*
     Second derivative of shape function in quadrature point. See above.    
* [0.x.21]*
     third derivative of shape function in quadrature point. See above.    
* [0.x.22]*
     third derivative of shape function in quadrature point. See above.    
* [0.x.23]*
     fourth derivative of shape function in quadrature point. See above.    
* [0.x.24]*
     fourth derivative of shape function in quadrature point. See above.    
* [0.x.25]*
     Return an estimate (in bytes) for the memory consumption of this object.    
* [0.x.26]*
     Values of shape functions. Access by function  [2.x.21]          Computed once.    
* [0.x.27]*
     Values of shape function derivatives. Access by function  [2.x.22]          Computed once.    
* [0.x.28]*
     Values of shape function second derivatives. Access by function  [2.x.23]      second_derivative.         Computed once.    
* [0.x.29]*
     Values of shape function third derivatives. Access by function  [2.x.24]      second_derivative.         Computed once.    
* [0.x.30]*
     Values of shape function fourth derivatives. Access by function  [2.x.25]      second_derivative.         Computed once.    
* [0.x.31]*
     Unit tangential vectors. Used for the computation of boundary forms and     normal vectors.         This array has `(dim-1)  [2.x.26]  entries. The     first  [2.x.27]  contain the vectors in the first     tangential direction for each face; the second set of      [2.x.28]  entries contain the vectors in the second     tangential direction (only in 3d, since there we have 2 tangential     directions per face), etc.         Filled once.    
* [0.x.32]*
     The polynomial degree of the mapping. Since the objects here are also     used (with minor adjustments) by MappingQ, we need to store this.    
* [0.x.33]*
     Number of shape functions. If this is a Q1 mapping, then it is simply     the number of vertices per cell. However, since also derived classes     use this class (e.g. the Mapping_Q() class), the number of shape     functions may also be different.         In general, it is  [2.x.29] , where  [2.x.30]  is the polynomial     degree of the mapping.    
* [0.x.34]     The default line support points. Is used in when the shape function     values are computed.         The number of quadrature points depends on the degree of this     class, and it matches the number of degrees of freedom of an     FE_Q<1>(this->degree).    
* [0.x.35]*
     In case the quadrature rule given represents a tensor product     we need to store the evaluations of the 1d polynomials at     the 1d quadrature points. That is what this variable is for.    
* [0.x.36]*
     In case the quadrature rule given represents a tensor product     we need to store temporary data in this object.    
* [0.x.37]*
     In case the quadrature rule given represents a tensor product     the values at the mapped support points are stored in this object.    
* [0.x.38]*
     In case the quadrature rule given represents a tensor product     the values at the quadrature points are stored in this object.    
* [0.x.39]*
     In case the quadrature rule given represents a tensor product     the gradients at the quadrature points are stored in this object.    
* [0.x.40]*
     In case the quadrature rule given represents a tensor product     the hessians at the quadrature points are stored in this object.    
* [0.x.41]*
     Indicates whether the given Quadrature object is a tensor product.    
* [0.x.42]*
     Tensors of covariant transformation at each of the quadrature points.     The matrix stored is the Jacobian G^{-1}, where G = Jacobian^{t}     Jacobian, is the first fundamental form of the map; if dim=spacedim     then it reduces to the transpose of the inverse of the Jacobian matrix,     which itself is stored in the  [2.x.31]  field of this structure.         Computed on each cell.    
* [0.x.43]*
     Tensors of contravariant transformation at each of the quadrature     points. The contravariant matrix is the Jacobian of the transformation,     i.e.  [2.x.32] .         Computed on each cell.    
* [0.x.44]*
     Auxiliary vectors for internal use.    
* [0.x.45]*
     Stores the support points of the mapping shape functions on the  [2.x.33]      cell_of_current_support_points.    
* [0.x.46]*
     Stores the cell of which the  [2.x.34]  are stored.    
* [0.x.47]*
     The determinant of the Jacobian in each quadrature point. Filled if     #update_volume_elements.    
* [0.x.48]*
   As opposed to the other fill_fe_values() and fill_fe_face_values()   functions that rely on pre-computed information of InternalDataBase, this   function chooses the flexible evaluation path on the cell and points   passed in to the current function.      [2.x.35]  cell The cell where to evaluate the mapping      [2.x.36]  unit_points The points in reference coordinates where the   transformation (Jacobians, positions) should be computed.      [2.x.37]  update_flags The kind of information that should be computed.      [2.x.38]  output_data A struct containing the evaluated quantities such   as the Jacobian resulting from application of the mapping on the given   cell with its underlying manifolds.  
* [0.x.49]*
    [2.x.39]   
* [0.x.50]*
   The degree of the polynomials used as shape functions for the mapping of   cells.  
* [0.x.51]   The default line support points. These are used when computing the   location in real space of the support points on lines and quads, which   are needed by the Manifold<dim,spacedim> class.     The number of points depends on the degree of this class, and it matches   the number of degrees of freedom of an FE_Q<1>(this->degree).  
* [0.x.52]   The one-dimensional polynomials defined as Lagrange polynomials from the   line support points. These are used for point evaluations and match the   polynomial space of an FE_Q<1>(this->degree).  
* [0.x.53]   The numbering from the lexicographic to the hierarchical ordering used   when expanding the tensor product with the mapping support points (which   come in hierarchical numbers).  
* [0.x.54]   The support points in reference coordinates. These are used for   constructing approximations of the output of   compute_mapping_support_points() when evaluating the mapping on the fly,   rather than going through the FEValues interface provided by   InternalData.     The number of points depends on the degree of this class, and it matches   the number of degrees of freedom of an FE_Q<dim>(this->degree).  
* [0.x.55]*
   A vector of tables of weights by which we multiply the locations of the   support points on the perimeter of an object (line, quad, hex) to get the   location of interior support points.     Access into this table is by  [2.x.40]  i.e., use 0 to access the   support point weights on a line (i.e., the interior points of the   GaussLobatto quadrature), use 1 to access the support point weights from   to perimeter to the interior of a quad, and use 2 to access the support   point weights from the perimeter to the interior of a hex.     The table itself contains as many columns as there are surrounding points   to a particular object (2 for a line,  [2.x.41]  for   a quad,  [2.x.42]  for a   hex) and as many rows as there are strictly interior points.     For the definition of this table see equation (8) of the `mapping'   report.  
* [0.x.56]*
   A table of weights by which we multiply the locations of the vertex   points of the cell to get the location of all additional support points,   both on lines, quads, and hexes (as appropriate). This data structure is   used when we fill all support points at once, which is the case if the   same manifold is attached to all sub-entities of a cell. This way, we can   avoid some of the overhead in transforming data for mappings.     The table has as many rows as there are vertices to the cell (2 in 1D, 4   in 2D, 8 in 3D), and as many rows as there are additional support points   in the mapping, i.e., <code>(degree+1)^dim
* 
*  - 2^dim</code>.  
* [0.x.57]*
   Return the locations of support points for the mapping. For example, for    [2.x.43]  mappings these are the vertices, and for higher order polynomial   mappings they are the vertices plus interior points on edges, faces, and   the cell interior that are placed in consultation with the Manifold   description of the domain and its boundary. However, other classes may   override this function differently. In particular, the MappingQ1Eulerian   class does exactly this by not computing the support points from the   geometry of the current cell but instead evaluating an externally given   displacement field in addition to the geometry of the cell.     The default implementation of this function is appropriate for most   cases. It takes the locations of support points on the boundary of the   cell from the underlying manifold. Interior support points (ie. support   points in quads for 2d, in hexes for 3d) are then computed using an   interpolation from the lower-dimensional entities (lines, quads) in order   to make the transformation as smooth as possible without introducing   additional boundary layers within the cells due to the placement of   support points.     The function works its way from the vertices (which it takes from the   given cell) via the support points on the line (for which it calls the   add_line_support_points() function) and the support points on the quad   faces (in 3d, for which it calls the add_quad_support_points() function).   It then adds interior support points that are either computed by   interpolation from the surrounding points using weights for transfinite   interpolation, or if dim<spacedim, it asks the underlying manifold for   the locations of interior points.  
* [0.x.58]*
   Transform the point  [2.x.44]  on the real cell to the corresponding point on   the unit cell  [2.x.45]  by a Newton iteration.  
* [0.x.59]*
   Append the support points of all shape functions located on bounding   lines of the given cell to the vector  [2.x.46]  Points located on the   vertices of a line are not included.     This function uses the underlying manifold object of the line (or, if   none is set, of the cell) for the location of the requested points. This   function is usually called by compute_mapping_support_points() function.     This function is made virtual in order to allow derived classes to choose   shape function support points differently than the present class, which   chooses the points as interpolation points on the boundary.  
* [0.x.60]*
   Append the support points of all shape functions located on bounding   faces (quads in 3d) of the given cell to the vector  [2.x.47]  This function   is only defined for <tt>dim=3</tt>. Points located on the vertices or   lines of a quad are not included.     This function uses the underlying manifold object of the quad (or, if   none is set, of the cell) for the location of the requested points. This   function is usually called by compute_mapping_support_points().     This function is made virtual in order to allow derived classes to choose   shape function support points differently than the present class, which   chooses the points as interpolation points on the boundary.  
* [0.x.61]