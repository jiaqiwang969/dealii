[0.x.0]*
 Discontinuous finite elements evaluated at the mapped quadrature points.
*  Warning: this class does not work properly, yet. Don't use it!
*  This finite element implements complete polynomial spaces, that is,  [2.x.0] -dimensional polynomials of order  [2.x.1] .
*  The polynomials are not mapped. Therefore, they are constant, linear, quadratic, etc. on any grid cell.
*  Since the polynomials are evaluated at the quadrature points of the actual grid cell, no grid transfer and interpolation matrices are available.
*  The purpose of this class is experimental, therefore the implementation will remain incomplete.
*  Besides, this class is not implemented for the codimension one case (<tt>spacedim != dim</tt>).
* 

*  [1.x.0] In 2d, the shape functions of this element look as follows.
*  [1.x.1]
*   [2.x.2] 
*  [1.x.2]
*   [2.x.3] 
* 

*  [1.x.3]
*   [2.x.4] 
* 

*  [1.x.4]
*   [2.x.5] 
* 

*  [1.x.5]  [2.x.6] 
* 

*  [1.x.6]
*  This element does not have an InternalData class, unlike all other elements, because the InternalData classes are used to store things that can be computed once and reused multiple times (such as the values of shape functions at quadrature points on the reference cell). However, because the element is not mapped, this element has nothing that could be computed on the reference cell
* 
*  -  everything needs to be computed on the real cell
* 
*  -  and consequently there is nothing we'd like to store in such an object. We can thus simply use the members already provided by  [2.x.7]  without adding anything in a derived class in this class.

* 
* [0.x.1]*
   Constructor for tensor product polynomials of degree  [2.x.8]   
* [0.x.2]*
   Return a string that uniquely identifies a finite element. This class   returns <tt>FE_DGPNonparametric<dim>(degree)</tt>, with  [2.x.9]  and  [2.x.10]    degree replaced by appropriate values.  
* [0.x.3]*
   This function is intended to return the value of a shape function at a   point on the reference cell. However, since the current element does not   implement shape functions by mapping from a reference cell, no shape   functions exist on the reference cell.     Consequently, as discussed in the corresponding function in the base   class,  [2.x.11]  this function throws an exception of   type  [2.x.12]   
* [0.x.4]*
   This function is intended to return the value of a shape function at a   point on the reference cell. However, since the current element does not   implement shape functions by mapping from a reference cell, no shape   functions exist on the reference cell.     Consequently, as discussed in the corresponding function in the base   class,  [2.x.13]  this function throws an   exception of type  [2.x.14]   
* [0.x.5]*
   This function is intended to return the gradient of a shape function at a   point on the reference cell. However, since the current element does not   implement shape functions by mapping from a reference cell, no shape   functions exist on the reference cell.     Consequently, as discussed in the corresponding function in the base   class,  [2.x.15]  this function throws an exception of   type  [2.x.16]   
* [0.x.6]*
   This function is intended to return the gradient of a shape function at a   point on the reference cell. However, since the current element does not   implement shape functions by mapping from a reference cell, no shape   functions exist on the reference cell.     Consequently, as discussed in the corresponding function in the base   class,  [2.x.17]  this function throws an   exception of type  [2.x.18]   
* [0.x.7]*
   This function is intended to return the Hessian of a shape function at a   point on the reference cell. However, since the current element does not   implement shape functions by mapping from a reference cell, no shape   functions exist on the reference cell.     Consequently, as discussed in the corresponding function in the base   class,  [2.x.19]  this function throws an   exception of type  [2.x.20]   
* [0.x.8]*
   This function is intended to return the Hessian of a shape function at a   point on the reference cell. However, since the current element does not   implement shape functions by mapping from a reference cell, no shape   functions exist on the reference cell.     Consequently, as discussed in the corresponding function in the base   class,  [2.x.21]  this function throws   an exception of type  [2.x.22]   
* [0.x.9]*
   Return the polynomial degree of this finite element, i.e. the value   passed to the constructor.  
* [0.x.10]*
   Return the matrix interpolating from a face of one element to the face   of the neighboring element. The size of the matrix is then   <tt>source.dofs_per_face</tt> times <tt>this->dofs_per_face</tt>.     Derived elements will have to implement this function. They may only   provide interpolation matrices for certain source finite elements, for   example those from the same family. If they don't implement interpolation   from a given element, then they must throw an exception of type    [2.x.23]   
* [0.x.11]*
   Return the matrix interpolating from a face of one element to the face   of the neighboring element. The size of the matrix is then   <tt>source.dofs_per_face</tt> times <tt>this->dofs_per_face</tt>.     Derived elements will have to implement this function. They may only   provide interpolation matrices for certain source finite elements, for   example those from the same family. If they don't implement interpolation   from a given element, then they must throw an exception of type    [2.x.24]   
* [0.x.12]*
    [2.x.25]  Functions to support hp    [2.x.26]   
* [0.x.13]*
   If, on a vertex, several finite elements are active, the hp-code first   assigns the degrees of freedom of each of these FEs different global   indices. It then calls this function to find out which of them should get   identical values, and consequently can receive the same global DoF index.   This function therefore returns a list of identities between DoFs of the   present finite element object with the DoFs of  [2.x.27]  which is a   reference to a finite element object representing one of the other finite   elements active on this particular vertex. The function computes which of   the degrees of freedom of the two finite element objects are equivalent,   both numbered between zero and the corresponding value of   n_dofs_per_vertex() of the two finite elements. The first index of each   pair denotes one of the vertex dofs of the present element, whereas the   second is the corresponding index of the other finite element.     This being a discontinuous element, the set of such constraints is of   course empty.  
* [0.x.14]*
   Same as hp_vertex_dof_indices(), except that the function treats degrees   of freedom on lines.     This being a discontinuous element, the set of such constraints is of   course empty.  
* [0.x.15]*
   Same as hp_vertex_dof_indices(), except that the function treats degrees   of freedom on quads.     This being a discontinuous element, the set of such constraints is of   course empty.  
* [0.x.16]*
   Return whether this element implements its hanging node constraints in   the new way, which has to be used to make elements "hp-compatible".     For the FE_DGPNonparametric class the result is always true (independent   of the degree of the element), as it has no hanging nodes (being a   discontinuous element).  
* [0.x.17]*
    [2.x.28]   [2.x.29]   
* [0.x.18]*
    [2.x.30]   
* [0.x.19]*
   This function returns  [2.x.31]  if the shape function  [2.x.32]  has   non-zero function values somewhere on the face  [2.x.33]   
* [0.x.20]*
   Determine an estimate for the memory consumption (in bytes) of this   object.     This function is made virtual, since finite element objects are usually   accessed through pointers to their base class, rather than the class   itself.  
* [0.x.21]*
   Prepare internal data structures and fill in values independent of the   cell.  
* [0.x.22]*
   Only for internal use. Its full name is  [2.x.34]    function and it creates the  [2.x.35]  vector that is needed   within the constructor to be passed to the constructor of  [2.x.36]    FiniteElementData.  
* [0.x.23]*
   Pointer to an object representing the polynomial space used here.  
* [0.x.24]