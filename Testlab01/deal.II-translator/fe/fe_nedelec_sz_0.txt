[0.x.0]*
 This class represents an implementation of the H<sup>curl</sup>-conforming N&eacute;d&eacute;lec element described in the PhD thesis of S. Zaglmayr, [1.x.0], Johannes Kepler Universit&auml;t Linz, 2006. It its used in the same context as described at the top of the description for the FE_Nedelec class.
*  This element overcomes the sign conflict issues present in traditional N&eacute;d&eacute;lec elements that arise from the edge and face parameterizations used in the basis functions. Therefore, this element should provide consistent results for general quadrilateral and hexahedral elements for which the relative orientations of edges and faces as seen from all adjacent cells are often difficult to establish.
*  The way this element addresses the sign conflict problem is to assign local edges and faces a globally defined orientation. The local edge orientation is always chosen such that the first vertex defining the edge is the one that has the highest global vertex numbering, with the second edge vertex being that which has the lowest global vertex numbering.
*  Similarly, the face orientation is always chosen such that the first vertex is chosen to be that with the highest global vertex numbering of the four vertices making up the face. The third vertex is then chosen to be that which is geometrically opposite the first vertex, and the second and fourth vertices are decided such that the second has a higher global vertex numbering than the fourth.
*  Note that this element does not support non-conforming meshes at this time.
*  Further details on this element, including some benchmarking, can be in the paper R. Kynch, P. Ledger: [1.x.1], Computers & Structures 181, 41-54, 2017 (see https://doi.org/10.1016/j.compstruc.2016.05.021).

* 
* [0.x.1]*
   Constructor for the NedelecSZ element of given  [2.x.0]  The maximal   polynomial degree of the shape functions is `order+1` (in each variable;   the total polynomial degree may be higher). If `order = 0`, the element is   linear and has degrees of freedom only on the edges. If `order >= 1` the   element has degrees of freedom on the edges, faces and volume. For example   the 3D version of FE_NedelecSZ has 12 degrees of freedom for `order = 0`   and 54 for `degree = 1`. It is important to have enough quadrature points   in order to perform the quadrature with sufficient accuracy.   For example [QGauss<dim>(order + 2)]( [2.x.1] ) can be used for the   quadrature formula, where `order` is the order of FE_NedelecSZ.  
* [0.x.2]*
   This element is vector-valued so this function will   throw an exception.  
* [0.x.3]*
   Not implemented.  
* [0.x.4]*
   This element is vector-valued so this function will   throw an exception.  
* [0.x.5]*
   Not implemented.  
* [0.x.6]*
   This element is vector-valued so this function will   throw an exception.  
* [0.x.7]*
   Not implemented.  
* [0.x.8]*
   The mapping kind to be used to map shape functions from the reference   cell to the mesh cell.  
* [0.x.9]*
   Compute information about the shape functions on the cell denoted by the   first argument. Note that this function must recompute the cell-dependent   degrees of freedom, and so is not thread-safe at this time.  
* [0.x.10]*
   Compute information about the shape functions on the cell and face denoted   by the first two arguments. Note that this function must recompute the   cell-dependent degrees of freedom, and so is not thread-safe at this time.  
* [0.x.11]*
   Not implemented.  
* [0.x.12]*
   Derived Internal data which is used to store cell-independent data.   Note that due to the nature of this element, a number of useful   pre-computed quantities are stored for the computation of cell-dependent   shape functions.     The main quantities which are stored are associated with edge and face   parameterizations. These are:    [2.x.2]     [2.x.3]   [2.x.4] 
* 
*  - trilinear function, equal to one at the  [2.x.5] -th vertex   and zero at all other vertices. [2.x.6]     [2.x.7]   [2.x.8] 
* 
*  - linear functional associated with the  [2.x.9] -th vertex. [2.x.10]     [2.x.11]      The definitions of these functionals, as well as the edge and face   parameterizations and edge and face extension parameters, can be found on   page 82 of Zaglmayr's thesis. The details of the definition of the   globally-defined edge and face orientations can be found on page 67.  
* [0.x.13]*
     Storage for shape functions on the reference element. We only pre-compute     cell-based DoFs, as the edge- and face-based DoFs depend on the cell.         Due to the cell-dependent DoFs, this variable is declared mutable.    
* [0.x.14]*
     Storage for shape function gradients on the reference element. We only     pre-compute cell-based DoFs, as the edge- and face-based DoFs depend on     the cell.         Due to the cell-dependent DoFs, this variable is declared mutable.    
* [0.x.15]*
     Storage for all possible edge parameterization between vertices. These     are required in the computation of edge- and face-based DoFs, which are     cell-dependent.         The edge parameterization of an edge, E, starting at vertex i and ending     at vertex  [2.x.12]  is given by  [2.x.13] .         sigma_imj_values[q][i][j] stores the value of the edge parameterization     connected by vertices  [2.x.14]  and  [2.x.15]  at the q-th quadrature point.         Note that not all of the  [2.x.16]  and  [2.x.17]  combinations result in valid edges     on the hexahedral cell, but they are computed in this fashion for use     with non-standard edge and face orientations.    
* [0.x.16]*
     Storage for gradients of all possible edge parameterizations between     vertices. These are required in the computation of edge- and face-based     DoFs, which are cell-dependent. Note that the components of the gradient     are constant.         The edge parameterization of an edge,  [2.x.18] , starting at vertex  [2.x.19]  and     ending at vertex  [2.x.20]  is given by  [2.x.21] .         sigma_imj_grads[i][j][d] stores the gradient of the edge parameterization     connected by vertices  [2.x.22]  and  [2.x.23]  in component  [2.x.24] .         Note that the gradient of the edge parameterization is constant on an     edge, so we do not need to store it at every quadrature point.    
* [0.x.17]*
     Storage for values of edge parameterizations at quadrature points. These     are stored for the 12 edges such that the global vertex numbering would     follow the order defined by the "standard" deal.II cell.         edge_sigma_values[m][q] stores the edge parameterization value at the     q-th quadrature point on edge m.         These values change with the orientation of the edges of a physical cell     and so must take the "sign" into account when used for computation.    
* [0.x.18]*
     Storage for gradients of edge parameterization at quadrature points.     These are stored for the 12 edges such that the global vertex numbering     would follow the order defined by the "standard" deal.II cell.         edge_sigma_grads[m][d] stores the gradient of the edge parameterization     for component d on edge m.         These values change with the orientation of the edges of a physical cell     and so must take the "sign" into account when used for computation.    
* [0.x.19]*
     Storage for edge extension parameters at quadrature points. These are     stored for the 12 edges such that the global vertex numbering would     follow the order defined by the "standard" deal.II cell.         The edge extension parameter of an edge,  [2.x.25] , starting at vertex  [2.x.26]  and     ending at vertex  [2.x.27]  is given by  [2.x.28] .         Note that under this definition, the values of  [2.x.29]  do not     change with the orientation of the edge.         edge_lambda_values[m][q] stores the edge extension parameter value at     the  [2.x.30] -th quadrature point on edge  [2.x.31] .    
* [0.x.20]*
     Storage for gradients of edge extension parameters in 2D. In this case     they are constant. These are stored for the 12 edges such that the global     vertex numbering* would follow the order defined by the "standard"     deal.II cell.         edge_lambda_grads_2d[m][d] stores the gradient of the edge extension     parameter for component  [2.x.32]  on edge  [2.x.33] .    
* [0.x.21]*
     Storage for gradients of edge extension parameters in 3D. In this case     they are non-constant. These are stored for the 12 edges such that the     global vertex numbering* would follow the order defined by the     "standard" deal.II cell.         edge_lambda_grads_3d[m][q][d] stores the gradient of the edge extension     parameter for component  [2.x.34]  at the  [2.x.35] -th quadrature point on edge m.    
* [0.x.22]*
     Storage for 2nd derivatives of edge extension parameters in 3D, which are     constant across the cell. These are stored for the 12 edges such that the     global vertex numbering* would follow the order defined by the     "standard" deal.II cell.         edge_lambda_gradgrads_3d[m][d1][d2] stores the 2nd derivatives of the     edge extension parameters with respect to components d1 and d2 on edge      [2.x.36] .    
* [0.x.23]*
     Storage for the face extension parameters. These are stored for the 6     faces such that the global vertex numbering would follow the order     defined by the "standard" deal.II cell.         The face extension parameter of a face, F, defined by the vertices     v1, v2, v3, v4 is given by      [2.x.37] .         Note that under this definition, the values of  [2.x.38]  do not     change with the orientation of the face.         face_lambda_values[m][q] stores the face extension parameter value at     the  [2.x.39] -th quadrature point on face  [2.x.40] .    
* [0.x.24]*
     Storage for gradients of face extension parameters. These are stored for     the 6 faces such that the global vertex numbering would follow the order     defined by the "standard" deal.II cell.         face_lambda_grads[m][d] stores the gradient of the face extension     parameters for component  [2.x.41]  on face  [2.x.42] .    
* [0.x.25]*
   Internal function to return a vector of "dofs per object"   where the components of the returned vector refer to:   0 = vertex   1 = edge   2 = face (which is a cell in 2D)   3 = cell  
* [0.x.26]*
   Internal storage for all required integrated Legendre polynomials.  
* [0.x.27]*
   Internal function to populate the internal array of integrated Legendre   polynomials.  
* [0.x.28]*
   Returns the number of DoFs in the basis set.  
* [0.x.29]*
   Populates cell-dependent edge-based shape functions on the given   InternalData object.  
* [0.x.30]*
   Populates the cell-dependent face-based shape functions on the given   InternalData object.  
* [0.x.31]