[0.x.0]*
 Implementation of a scalar Bernstein finite element  [2.x.0]  we call FE_Bernstein in analogy with FE_Q that yields the finite element space of continuous, piecewise Bernstein polynomials of degree  [2.x.1]  in each coordinate direction. This class is realized using tensor product polynomials of Bernstein basis polynomials.
* 

*  The standard constructor of this class takes the degree  [2.x.2]  of this finite element.
*  For more information about the <tt>spacedim</tt> template parameter check the documentation of FiniteElement or the one of Triangulation.
*  [1.x.0]
*  The constructor creates a TensorProductPolynomials object that includes the tensor product of  [2.x.3]  polynomials of degree  [2.x.4]  This  [2.x.5]  TensorProductPolynomials object provides all values and derivatives of the shape functions.
*  [1.x.1]
*  The original ordering of the shape functions represented by the TensorProductPolynomials is a tensor product numbering. However, the shape functions on a cell are renumbered beginning with the shape functions whose support points are at the vertices, then on the line, on the quads, and finally (for 3d) on the hexes. See the documentation of FE_Q for more details.

* 
* [0.x.1]*
   Constructor for tensor product polynomials of degree  [2.x.6]   
* [0.x.2]*
   FE_Bernstein is not interpolatory in the element interior, which prevents   this element from defining an interpolation matrix. An exception will be   thrown.     This function overrides the implementation from FE_Q_Base.  
* [0.x.3]*
   FE_Bernstein is not interpolatory in the element interior, which prevents   this element from defining a restriction matrix. An exception will be   thrown.     This function overrides the implementation from FE_Q_Base.  
* [0.x.4]*
   FE_Bernstein is not interpolatory in the element interior, which prevents   this element from defining a prolongation matrix. An exception will be   thrown.     This function overrides the implementation from FE_Q_Base.  
* [0.x.5]*
   Return the matrix interpolating from a face of one element to the face of   the neighboring element.  The size of the matrix is then   <tt>source.dofs_per_face</tt> times <tt>this->dofs_per_face</tt>. The   FE_Bernstein element family only provides interpolation matrices for   elements of the same type, for elements that have support points, and   FE_Nothing. For all other elements, an exception of type    [2.x.7]  is thrown.  
* [0.x.6]*
   Return the matrix interpolating from a face of one element to the face of   the neighboring element.  The size of the matrix is then   <tt>source.dofs_per_face</tt> times <tt>this->dofs_per_face</tt>. The   FE_Bernstein element family only provides interpolation matrices for   elements of the same type, for elements that have support points, and   FE_Nothing. For all other elements, an exception of type    [2.x.8]  is thrown.  
* [0.x.7]*
   Return whether this element implements its hanging node constraints in   the new way, which has to be used to make elements "hp-compatible".  
* [0.x.8]*
   If, on a vertex, several finite elements are active, the hp-code first   assigns the degrees of freedom of each of these FEs different global   indices. It then calls this function to find out which of them should get   identical values, and consequently can receive the same global DoF index.   This function therefore returns a list of identities between DoFs of the   present finite element object with the DoFs of  [2.x.9]  which is a   reference to a finite element object representing one of the other finite   elements active on this particular vertex. The function computes which of   the degrees of freedom of the two finite element objects are equivalent,   both numbered between zero and the corresponding value of   n_dofs_per_vertex() of the two finite elements. The first index of each   pair denotes one of the vertex dofs of the present element, whereas the   second is the corresponding index of the other finite element.  
* [0.x.9]*
   Same as hp_vertex_dof_indices(), except that the function treats degrees   of freedom on lines.  
* [0.x.10]*
   Same as hp_vertex_dof_indices(), except that the function treats degrees   of freedom on quads.  
* [0.x.11]*
    [2.x.10]   [2.x.11]   
* [0.x.12]*
   Return a string that uniquely identifies a finite element. This class   returns <tt>FE_Bernstein<dim>(degree)</tt>, with  [2.x.12]  and  [2.x.13]    replaced by appropriate values.  
* [0.x.13]*
   Only for internal use. Its full name is  [2.x.14]    function and it creates the  [2.x.15]  vector that is needed   within the constructor to be passed to the constructor of  [2.x.16]    FiniteElementData.  
* [0.x.14]*
   This function renumbers Bernstein basis functions from hierarchic to   lexicographic numbering.  
* [0.x.15]