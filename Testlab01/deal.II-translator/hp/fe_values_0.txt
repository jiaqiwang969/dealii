[0.x.0]*
   Base class for the  [2.x.0]  classes, storing the data   that is common to them. The main task of this class is to provide a   table where for every combination of finite element, mapping, and   quadrature object from their corresponding collection objects there is   a matching ::FEValues, ::FEFaceValues, or ::FESubfaceValues object.     To make things more efficient, however, these FE*Values objects are only   created once requested (lazy allocation). Alternatively if desired, this   can be bypassed by computing all objects in advance with the corresponding   precalculate_fe_values() function.     The first template parameter denotes the space dimension we are in, the   second the dimensionality of the object that we integrate on, i.e. for   usual  [2.x.1]  it is equal to the first one, while for face   integration it is one less. The third template parameter indicates the   type of underlying non-hp-FE*Values base type, i.e. it could either be   ::FEValues, ::FEFaceValues, or ::FESubfaceValues.    
*  [2.x.2]   
* [0.x.1]*
     Constructor. Set the fields of this class to the values indicated by     the parameters to the constructor.    
* [0.x.2]*
     Like the above function but taking a vector of quadrature collections.     For  [2.x.3]  the ith entry of the quadrature collections are     interpreted as the face quadrature rules to be applied the ith face.    
* [0.x.3]*
     Constructor. This constructor is equivalent to the other one except     that it makes the object use a  [2.x.4]  mapping (i.e., an object of type     MappingQGeneric(1)) implicitly.    
* [0.x.4]*
     Like the above function but taking a vector quadrature collections.     For  [2.x.5]  the ith entry of the quadrature collections are     interpreted as the face quadrature rules to be applied the ith face.    
* [0.x.5]*
     Copy constructor.    
* [0.x.6]*
     Copy operator. While objects of this type can be copy-constructed,     they cannot be copied and consequently this operator is disabled.    
* [0.x.7]*
     For timing purposes it may be useful to create all required FE*Values     objects in advance, rather than computing them on request via lazy     allocation as usual in this class.         This function precalculates the FE*Values objects corresponding to the     provided parameters: The total of all vector entries corresponding to the     same index describes an FE*Values object similarly to select_fe_values().    
* [0.x.8]*
     Same as above, geared to the most common use of  [2.x.6]  objects in     which FE, quadrature and mapping indices are similar on each individual     cell.         FE*Values objects are created for every FE in the FECollection, with     quadrature and mapping corresponding to the same index from the     QuadratureCollection and MappingCollection, respectively.         If QuadratureCollection or MappingCollection contains only one object, it     is used for all FE*Values objects.    
* [0.x.9]*
     Get a reference to the collection of finite element objects used     here.    
* [0.x.10]*
     Get a reference to the collection of mapping objects used here.    
* [0.x.11]*
     Get a reference to the collection of quadrature objects used here.    
* [0.x.12]*
     Get the underlying update flags.    
* [0.x.13]*
     Return a reference to the  [2.x.7]  object selected by the last     call to select_fe_values(). select_fe_values() in turn is called when     you called the  [2.x.8]  function of the  [2.x.9]  class     the last time.    
* [0.x.14]*
     Select a FEValues object suitable for the given FE, quadrature, and     mapping indices. If such an object doesn't yet exist, create one.         The function returns a writable reference so that derived classes can     also reinit() the selected FEValues object.    
* [0.x.15]*
     A pointer to the collection of finite elements to be used.    
* [0.x.16]*
     A pointer to the collection of mappings to be used.    
* [0.x.17]*
     Copy of the quadrature collection object provided to the constructor.    
* [0.x.18]*
     Vector of quadrature collections. For  [2.x.10]  the ith entry of     the quadrature collections are interpreted as the face quadrature rules     to be applied the ith face.         The variable q_collection collects the first quadrature rule of each     quadrature collection of the vector.    
* [0.x.19]*
     A table in which we store pointers to fe_values objects for different     finite element, mapping, and quadrature objects from our collection.     The first index indicates the index of the finite element within the     fe_collection, the second the index of the mapping within the mapping     collection, and the last one the index of the quadrature formula     within the q_collection.         Initially, all entries have zero pointers, and we will allocate them     lazily as needed in select_fe_values() or precalculate_fe_values().    
* [0.x.20]*
     Set of indices pointing at the fe_values object selected last time     the select_fe_value() function was called.    
* [0.x.21]*
     Values of the update flags as given to the constructor.    
* [0.x.22]*
   An hp-equivalent of the ::FEValues class. See the  [2.x.11]  tutorial   program for examples of use.     The idea of this class is as follows: when one assembled matrices in the   hp-finite element method, there may be different finite elements on   different cells, and consequently one may also want to use different   quadrature formulas for different cells. On the other hand, the   ::FEValues efficiently handles pre-evaluating whatever information is   necessary for a single finite element and quadrature object. This class   brings these concepts together: it provides a "collection" of ::FEValues   objects.     Upon construction, one passes not one finite element and quadrature   object (and possible a mapping), but a whole collection of type    [2.x.12]  and  [2.x.13]  Later on, when one sits on a   concrete cell, one would call the reinit() function for this particular   cell, just as one does for a regular ::FEValues object. The difference is   that this time, the reinit() function looks up the active FE index of   that cell, if necessary creates a ::FEValues object that matches the   finite element and quadrature formulas with that particular index in   their collections, and then re-initializes it for the current cell. The   ::FEValues object that then fits the finite element and quadrature   formula for the current cell can then be accessed using the   get_present_fe_values() function, and one would work with it just like   with any ::FEValues object for non-hp-DoFHandler objects.     The reinit() functions have additional arguments with default values. If   not specified, the function takes the index into the  [2.x.14]     [2.x.15]  and  [2.x.16]  objects from the   active FE index of the cell, as explained above. However, one can also   select different indices for a current cell. For example, by specifying a   different index into the  [2.x.17]  class, one does not need to sort   the quadrature objects in the quadrature collection so that they match   one-to-one the order of finite element objects in the FE collection (even   though choosing such an order is certainly convenient).     Note that ::FEValues objects are created on the fly, i.e. only as they   are needed. This ensures that we do not create objects for every   combination of finite element, quadrature formula and mapping, but only   those that will actually be needed. Alternatively if desired, this   can be bypassed by computing all objects in advance with the corresponding    [2.x.18]  function.     This class has not yet been implemented for the use in the codimension   one case (<tt>spacedim != dim </tt>).    
*  [2.x.19]   
* [0.x.23]*
     Constructor. Initialize this object with the given parameters.    
* [0.x.24]*
     Constructor. This constructor is equivalent to the other one except     that it makes the object use a  [2.x.20]  mapping (i.e., an object of type     MappingQGeneric(1)) implicitly.    
* [0.x.25]*
     Reinitialize the object for the given cell.         After the call, you can get an FEValues object using the     get_present_fe_values() function that corresponds to the present cell.     For this FEValues object, we use the additional arguments described     below to determine which finite element, mapping, and quadrature     formula to use. They are order in such a way that the arguments one may     want to change most frequently come first. The rules for these     arguments are as follows:         If the  [2.x.21]  argument to this function is left at its default     value, then we use that finite element within the  [2.x.22]      passed to the constructor of this class with index given by      [2.x.23] . Consequently, the      [2.x.24]  argument given to this object should really be the     same as that used in the construction of the DoFHandler associated     with the present cell. On the other hand, if a value is given for this     argument, it overrides the choice of      [2.x.25] .         If the  [2.x.26]  argument is left at its default value, then we use     that quadrature formula within the  [2.x.27]  passed to the     constructor of this class with index given by      [2.x.28] , i.e. the same index as that of     the finite element. In this case, there should be a corresponding     quadrature formula for each finite element in the  [2.x.29]  As     a special case, if the quadrature collection contains only a single     element (a frequent case if one wants to use the same quadrature object     for all finite elements in an hp-discretization, even if that may not     be the most efficient), then this single quadrature is used unless a     different value for this argument is specified. On the other hand, if a     value is given for this argument, it overrides the choice of      [2.x.30]  or the choice for the single     quadrature.         If the  [2.x.31]  argument is left at its default value, then we     use that mapping object within the  [2.x.32]  passed to the     constructor of this class with index given by      [2.x.33] , i.e. the same index as that of     the finite element. As above, if the mapping collection contains only a     single element (a frequent case if one wants to use a  [2.x.34]  mapping for     all finite elements in an hp-discretization), then this single mapping     is used unless a different value for this argument is specified.    
* [0.x.26]*
     Like the previous function, but for non-DoFHandler iterators. The reason     this function exists is so that one can use  [2.x.35]  for     Triangulation objects too.         Since  [2.x.36]  doesn't make sense for     triangulation iterators, this function chooses the zero-th finite     element, mapping, and quadrature object from the relevant constructions     passed to the constructor of this object. The only exception is if you     specify a value different from the default value for any of these last     three arguments.    
* [0.x.27]*
   This is the equivalent of the  [2.x.37]  class but for face   integrations, i.e. it is to  [2.x.38]  what ::FEFaceValues is to   ::FEValues.     The same comments apply as in the documentation of the  [2.x.39]    class. However, it is important to note that it is here more common that   one would want to explicitly specify an index to a particular quadrature   formula in the reinit() functions. This is because the default index   corresponds to the finite element index on the current function. On the   other hand, integration on faces will typically have to happen with a   quadrature formula that is adjusted to the finite elements used on both   sides of a face. If one sorts the elements of the  [2.x.40]  with   ascending polynomial degree, and matches these finite elements with   corresponding quadrature formulas in the  [2.x.41]  passed to the   constructor, then the quadrature index passed to the reinit() function   should typically be something like  [2.x.42]    (cell- [2.x.43]  neighbor- [2.x.44]  to ensure   that a quadrature formula is chosen that is sufficiently accurate for    [2.x.45] both [2.x.46]  finite elements.    
*  [2.x.47]   
* [0.x.28]*
     Constructor. Initialize this object with the given parameters.    
* [0.x.29]*
     Like the function above, but taking a vector of collection of quadrature     rules. This allows to assign each face a different quadrature rule: the     ith entry of a collection is used as the face quadrature rule on the ith     face.         In the case that the collections only contains a single face quadrature,     this quadrature rule is use on all faces.    
* [0.x.30]*
     Constructor. This constructor is equivalent to the other one except     that it makes the object use a  [2.x.48]  mapping (i.e., an object of type     MappingQGeneric(1)) implicitly.    
* [0.x.31]*
     Like the function above, but taking a vector of collection of quadrature     rules. This allows to assign each face a different quadrature rule: the     ith entry of a collection is used as the face quadrature rule on the ith     face.         In the case that the collections only contains a single face quadrature,     this quadrature rule is use on all faces.    
* [0.x.32]*
     Reinitialize the object for the given cell and face.         After the call, you can get an FEFaceValues object using the     get_present_fe_values() function that corresponds to the present cell.     For this FEFaceValues object, we use the additional arguments described     below to determine which finite element, mapping, and quadrature     formula to use. They are order in such a way that the arguments one may     want to change most frequently come first. The rules for these     arguments are as follows:         If the  [2.x.49]  argument to this function is left at its default     value, then we use that finite element within the  [2.x.50]      passed to the constructor of this class with index given by      [2.x.51] . Consequently, the      [2.x.52]  argument given to this object should really be the     same as that used in the construction of the DoFHandler associated     with the present cell. On the other hand, if a value is given for this     argument, it overrides the choice of      [2.x.53] .         If the  [2.x.54]  argument is left at its default value, then we use     that quadrature formula within the  [2.x.55]  passed to the     constructor of this class with index given by      [2.x.56] , i.e. the same index as that of     the finite element. In this case, there should be a corresponding     quadrature formula for each finite element in the  [2.x.57]  As     a special case, if the quadrature collection contains only a single     element (a frequent case if one wants to use the same quadrature object     for all finite elements in an hp-discretization, even if that may not     be the most efficient), then this single quadrature is used unless a     different value for this argument is specified. On the other hand, if a     value is given for this argument, it overrides the choice of      [2.x.58]  or the choice for the single     quadrature.         If the  [2.x.59]  argument is left at its default value, then we     use that mapping object within the  [2.x.60]  passed to the     constructor of this class with index given by      [2.x.61] , i.e. the same index as that of     the finite element. As above, if the mapping collection contains only a     single element (a frequent case if one wants to use a  [2.x.62]  mapping for     all finite elements in an hp-discretization), then this single mapping     is used unless a different value for this argument is specified.    
* [0.x.33]*
     Reinitialize the object for the given cell and face.        
*  [2.x.63]   [2.x.64]  must be one of  [2.x.65]  face iterators.    
* [0.x.34]*
     Like the previous function, but for non-DoFHandler iterators. The reason     this function exists is so that one can use this class for     Triangulation objects too.         Since  [2.x.66]  doesn't make sense for     triangulation iterators, this function chooses the zero-th finite     element, mapping, and quadrature object from the relevant constructions     passed to the constructor of this object. The only exception is if you     specify a value different from the default value for any of these last     three arguments.    
* [0.x.35]*
     Reinitialize the object for the given cell and face.        
*  [2.x.67]   [2.x.68]  must be one of  [2.x.69]  face iterators.    
* [0.x.36]*
   This class implements for subfaces what  [2.x.70]  does for faces.   See there for further documentation.    
*  [2.x.71]   
* [0.x.37]*
     Constructor. Initialize this object with the given parameters.    
* [0.x.38]*
     Constructor. This constructor is equivalent to the other one except     that it makes the object use a  [2.x.72]  mapping (i.e., an object of type     MappingQGeneric(1)) implicitly.    
* [0.x.39]*
     Reinitialize the object for the given cell, face, and subface.         After the call, you can get an FESubfaceValues object using the     get_present_fe_values() function that corresponds to the present cell.     For this FESubfaceValues object, we use the additional arguments     described below to determine which finite element, mapping, and     quadrature formula to use. They are order in such a way that the     arguments one may want to change most frequently come first. The rules     for these arguments are as follows:         If the  [2.x.73]  argument is left at its default value, then we use     that quadrature formula within the  [2.x.74]  passed to the     constructor of this class with index given by      [2.x.75] , i.e. the same index as that of     the finite element. In this case, there should be a corresponding     quadrature formula for each finite element in the  [2.x.76]  As     a special case, if the quadrature collection contains only a single     element (a frequent case if one wants to use the same quadrature object     for all finite elements in an hp-discretization, even if that may not     be the most efficient), then this single quadrature is used unless a     different value for this argument is specified. On the other hand, if a     value is given for this argument, it overrides the choice of      [2.x.77]  or the choice for the single     quadrature.         If the  [2.x.78]  argument is left at its default value, then we     use that mapping object within the  [2.x.79]  passed to the     constructor of this class with index given by      [2.x.80] , i.e. the same index as that of     the finite element. As above, if the mapping collection contains only a     single element (a frequent case if one wants to use a  [2.x.81]  mapping for     all finite elements in an hp-discretization), then this single mapping     is used unless a different value for this argument is specified.    
* [0.x.40]*
     Like the previous function, but for non-DoFHandler iterators. The reason     this function exists is so that one can use this class for     Triangulation objects too.         Since  [2.x.82]  doesn't make sense for     Triangulation iterators, this function chooses the zero-th finite     element, mapping, and quadrature object from the relevant constructions     passed to the constructor of this object. The only exception is if you     specify a value different from the default value for any of these last     three arguments.    
* [0.x.41]